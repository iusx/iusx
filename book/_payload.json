[{"data":1,"prerenderedAt":2020},["Reactive",2],{"equalBook":3},[4,98,451,516,738,1859],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"plan":13,"body":14,"_type":93,"_id":94,"_source":95,"_file":96,"_extension":97},"/book/seven-languages-in-seven-weeks-bruce-a-tate","book",false,"","Seven Languages in Seven Weeks","Bruce A. Tate","2025.01.08","08/1.png","01",{"type":15,"children":16,"toc":90},"root",[17],{"type":18,"tag":19,"props":20,"children":25},"element","book-content",{":by":21,":img":22,":plan":23,":title":24},"director","img","plan","title",[26,31,38,44,49,54,59,64,69,85],{"type":18,"tag":27,"props":28,"children":30},"text-title",{":t":29},"回顾下自己的十年经历",[],{"type":18,"tag":32,"props":33,"children":35},"h1",{"id":34},"总结自己0",[36],{"type":37,"value":34},"text",{"type":18,"tag":39,"props":40,"children":41},"p",{},[42],{"type":37,"value":43},"如果从 2015 那个对计算机懵懂的我来说，到 2025 年已经过了十年。可以说对计算机方面拥有了十年的兴趣。假如从 2018 我第一个漏洞算起，至今已经过了七年。再从 2020 我打算学习设计开始，已经过了五年。",{"type":18,"tag":39,"props":45,"children":46},{},[47],{"type":37,"value":48},"我觉得自己有很大的缺陷，基础不是特别牢固。之前做全栈的时候就有朋友指出我的基础不是特别好，最常说的话就是：“基础不牢，地动山摇”。做出的项目只是看起来很不错，但如果深挖细节，性能的处理就有一小部分的问题。虽然我总以 \"安全爱好者\" 作为 title，但我貌似并没有发现过比较知名且威胁较大的漏洞。",{"type":18,"tag":39,"props":50,"children":51},{},[52],{"type":37,"value":53},"更不用说什么 EDUSRC、MSRC、TSRC 这些了，仅仅是公益 SRC 和 CNVD 以及 Hackerone 这些，我所发现到的或提交的更多是大佬吃剩的边角料，甚至是不屑一顾的。但我之前缺奉为瑰宝，以筑起我那脆弱且不堪一击的自信。",{"type":18,"tag":39,"props":55,"children":56},{},[57],{"type":37,"value":58},"我还是比较庆幸自己无论做什么起码都能有一点成就的。虽然这个成就不高，但足以出去找个班上不至于饿死。做设计会有很多朋友支援下我;做安全拿到了漏洞赏金（虽然不多）;做全栈起码能混到小公司 offer；做舆情分析的时候，能被专业的人发现，引导我继续做下去。所以我还是比较幸运的，起码有点东西，虽然不多。",{"type":18,"tag":39,"props":60,"children":61},{},[62],{"type":37,"value":63},"看完这本书后，我觉得是时候筹备下我的代表作了。因为之前很多人觉得我是臭做设计的，甚至还有人说我是个臭美工！完全无视掉了我全栈和安全架构方面的才华。所以在这之后，我会筹备一个全栈的代表作；另一个是安全架构的代表作。至于设计的代表作已经有了，再往后无非是作品了。我觉得代表作这个东西首先是能给人用的，其次才是给人看的；这样说服力大一点。",{"type":18,"tag":39,"props":65,"children":66},{},[67],{"type":37,"value":68},"之所以看这本书。我承认是被这本书的标题所吸引，作者懂不懂语言不重要，但他一定懂营销。我还不知道这本书有没有被 percipio 收入，反正我 ACM 会员资格是到期了。这里我想吐槽下 ACM 的续费规则，我有钱的时候是想提前续费的，但 ACM 只能是快过期的时候才能续费。等真快过期的时候，我反而没钱续费了。",{"type":18,"tag":39,"props":70,"children":71},{},[72,74,83],{"type":37,"value":73},"无奈只能找盗版 PDF 来看。这里强烈推荐 ",{"type":18,"tag":75,"props":76,"children":80},"a",{"href":77,"rel":78},"https://skim-app.sourceforge.io/",[79],"nofollow",[81],{"type":37,"value":82},"Skip",{"type":37,"value":84}," 我觉得作为一款 PDF 阅读器来说，做到了快、文字能复制、复制的文字和 PDF 内容是一样的这种难度比较高的水准。甚至还是开源的，简直真的是太伟大了。我用过比较多的 PDF 阅读器，比如 Adobe Acrobat、PDF Expert。甚至是 福昕 PDF ，WPS PDF，给我的感觉都是卡顿还有比较大的复制问题，就是复制的文字和 PDF 里面的文字不一样。",{"type":18,"tag":39,"props":86,"children":87},{},[88],{"type":37,"value":89},"和 Chrome 等浏览器自带的 PDF 阅读器比我认为无非是多了个签名和画线、笔记类的扩充。忘记了阅读的这第一要素，特别是像我这种 English 比较差需要 Copy 文字翻译的，比较不由好。所以对于 Skip 我是强烈推荐的。",{"title":8,"searchDepth":91,"depth":91,"links":92},2,[],"markdown","content:book:seven-languages-in-seven-weeks---bruce-a-tate.md","content","book/seven-languages-in-seven-weeks---bruce-a-tate.md","md",{"_path":99,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":100,"description":8,"director":101,"time":102,"img":103,"body":104,"_type":93,"_id":449,"_source":95,"_file":450,"_extension":97},"/book/journey-to-the-west","西游记","吴承恩","2025","07/1.png",{"type":15,"children":105,"toc":447},[106],{"type":18,"tag":19,"props":107,"children":109},{":by":21,":img":22,":plan":108,":title":24},"100",[110,116,120,125,131,135,149,158,163,168,170,319,324,329,334,347,352,357,362,370,375,379,385,389,394,402,407,412,417,425,437,442],{"type":18,"tag":32,"props":111,"children":113},{"id":112},"四大名著-1",[114],{"type":37,"value":115},"四大名著 1",{"type":18,"tag":27,"props":117,"children":119},{":t":118},"终于理解了为什么这几本书是四大名著",[],{"type":18,"tag":39,"props":121,"children":122},{},[123],{"type":37,"value":124},"在小时候。老师都说三国演义、水浒传、西游记、红楼梦是中国的四大名著。那时候还不解就四本书为什么含金量这么高。过了很多年初到社会再细品这四本书，发现这就是中国社会的缩影，其中不乏对人与人之间，国家运行时的一些隐晦表达，都在这四本书中一一体会。原来是我的打开方式不对，要读懂这几本书，要贴合现实发生的事情，来进行解读，就会发现目前现代社会和几百年前的社会并无不同，人与人和国家的运行时，都与当时大差不差。",{"type":18,"tag":32,"props":126,"children":128},{"id":127},"八十一难-论功行赏-1",[129],{"type":37,"value":130},"八十一难 论功行赏 1",{"type":18,"tag":27,"props":132,"children":134},{":t":133},"论功行赏，八戒垫底",[],{"type":18,"tag":39,"props":136,"children":137},{},[138,140,147],{"type":37,"value":139},"如果将西天取经，比作一个项目，一个工程的话。那么取经工程保护、记录、汇报的组织就是",{"type":18,"tag":75,"props":141,"children":144},{"href":142,"rel":143},"https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%B8%B8%E8%AE%B0%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8#%E5%85%B6%E4%BB%96_2",[79],[145],{"type":37,"value":146},"六丁六甲",{"type":37,"value":148},"，向观音菩萨交法旨，而观音菩萨向如来交旨。观音菩萨开始审阅六丁六甲在西天取经的记录，发现少了一难，只有八十难。",{"type":18,"tag":150,"props":151,"children":152},"text-tip",{},[153],{"type":18,"tag":39,"props":154,"children":155},{},[156],{"type":37,"value":157},"大鼋是一只在通天河上的巨鼋，唐僧师徒第一次遇见他时，他载唐僧等人渡河，并希望唐僧能替他问佛祖还需修行多久才能修成正果化身成人。回程的时候大鼋再度载唐僧师徒及经书过河，半途上问起这个承诺，然而早已遗忘此事的唐三藏无言以对，于是不高兴的大鼋身子一翻，把唐僧淹入水中。这个事件是唐僧取经所需历经的八十一难中的最后一难。",{"type":18,"tag":39,"props":159,"children":160},{},[161],{"type":37,"value":162},"大鼋对唐僧的要求可谓是人之常情，毕竟在通天河上班了很多年，帮助了唐僧；想问问佛祖还有多少年才能退休。但唐僧又没有帮大鼋办事，所以将唐僧摔下。",{"type":18,"tag":39,"props":164,"children":165},{},[166],{"type":37,"value":167},"到了长安后，取经工程以步入后章。虽然取经计划原定是三年，但经历了十多年后才取回，可谓是历经磨难。虽然时间超出了，但经是取回了。因此李世民撰文《圣教序》为取经工程定性。",{"type":37,"value":169},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":172,"children":173},"table",{},[174,203],{"type":18,"tag":175,"props":176,"children":177},"thead",{},[178],{"type":18,"tag":179,"props":180,"children":181},"tr",{},[182,188,193,198],{"type":18,"tag":183,"props":184,"children":185},"th",{},[186],{"type":37,"value":187},"名字",{"type":18,"tag":183,"props":189,"children":190},{},[191],{"type":37,"value":192},"受封",{"type":18,"tag":183,"props":194,"children":195},{},[196],{"type":37,"value":197},"等级",{"type":18,"tag":183,"props":199,"children":200},{},[201],{"type":37,"value":202},"作用",{"type":18,"tag":204,"props":205,"children":206},"tbody",{},[207,231,253,274,297],{"type":18,"tag":179,"props":208,"children":209},{},[210,216,221,226],{"type":18,"tag":211,"props":212,"children":213},"td",{},[214],{"type":37,"value":215},"唐僧",{"type":18,"tag":211,"props":217,"children":218},{},[219],{"type":37,"value":220},"旃檀功德佛",{"type":18,"tag":211,"props":222,"children":223},{},[224],{"type":37,"value":225},"修成正果",{"type":18,"tag":211,"props":227,"children":228},{},[229],{"type":37,"value":230},"一人之下万人之上",{"type":18,"tag":179,"props":232,"children":233},{},[234,239,244,249],{"type":18,"tag":211,"props":235,"children":236},{},[237],{"type":37,"value":238},"孙悟空",{"type":18,"tag":211,"props":240,"children":241},{},[242],{"type":37,"value":243},"斗战圣佛",{"type":18,"tag":211,"props":245,"children":246},{},[247],{"type":37,"value":248},"大职正果",{"type":18,"tag":211,"props":250,"children":251},{},[252],{"type":37,"value":230},{"type":18,"tag":179,"props":254,"children":255},{},[256,261,266,270],{"type":18,"tag":211,"props":257,"children":258},{},[259],{"type":37,"value":260},"沙僧",{"type":18,"tag":211,"props":262,"children":263},{},[264],{"type":37,"value":265},"金身罗汉",{"type":18,"tag":211,"props":267,"children":268},{},[269],{"type":37,"value":248},{"type":18,"tag":211,"props":271,"children":272},{},[273],{"type":37,"value":230},{"type":18,"tag":179,"props":275,"children":276},{},[277,282,287,292],{"type":18,"tag":211,"props":278,"children":279},{},[280],{"type":37,"value":281},"小白龙",{"type":18,"tag":211,"props":283,"children":284},{},[285],{"type":37,"value":286},"八部天龙广力菩萨",{"type":18,"tag":211,"props":288,"children":289},{},[290],{"type":37,"value":291},"汝职正果",{"type":18,"tag":211,"props":293,"children":294},{},[295],{"type":37,"value":296},"保护灵山，禁卫军首领",{"type":18,"tag":179,"props":298,"children":299},{},[300,305,310,314],{"type":18,"tag":211,"props":301,"children":302},{},[303],{"type":37,"value":304},"猪八戒",{"type":18,"tag":211,"props":306,"children":307},{},[308],{"type":37,"value":309},"净坛使者",{"type":18,"tag":211,"props":311,"children":312},{},[313],{"type":37,"value":291},{"type":18,"tag":211,"props":315,"children":316},{},[317],{"type":37,"value":318},"打扫贡品的",{"type":18,"tag":39,"props":320,"children":321},{},[322],{"type":37,"value":323},"回到灵山后。唐僧是如来的二弟子，但不尊重佛法，投胎至东土大唐。取经修成正果后受封——旃檀功德佛（修成正果）；孙悟空虽大闹天宫，被如来镇压五百年，但取经过程中降妖伏魔受封斗战圣佛（大职正果）；猪八戒是净坛使者（汝职正果）。",{"type":18,"tag":39,"props":325,"children":326},{},[327],{"type":37,"value":328},"猪八戒对受封不满，于是质问如来被如来狠狠 PUA。说猪八戒由于 “又有顽心，色情未泯”，为如来佛祖的部下，负责享用一切人世间作功德的供品。绝对是 PUA 猪八戒，成佛了想吃什么没有，非要当个打工人吃边角料。虽然净水楼台先得月，但如果成佛了，躺在床上还有人喂这不香吗？",{"type":18,"tag":39,"props":330,"children":331},{},[332],{"type":37,"value":333},"而到了沙僧，沙僧虽然在蟠桃会上摔杯为号，威胁到了玉帝被贬流沙河。受封金身罗汉（大职正果）；白龙马在取经路上驼经有功，受封八部天龙广力菩萨（汝职正果）",{"type":18,"tag":39,"props":335,"children":336},{},[337,339,345],{"type":37,"value":338},"这种论功行赏，看的是他们背后的势力。唐僧功劳最大，取经团队的主要负责人；孙悟空背后就是道教，佛教，玉帝。谁都搞不死孙悟空，那既然这样不如 ",{"type":18,"tag":340,"props":341,"children":342},"strong",{},[343],{"type":37,"value":344},"请客，斩首，收下当狗",{"type":37,"value":346}," 你会发现都是这么做的，只不过前期玉帝给的官小了，后面佛祖总结失败经验给了个官大的，成功收下当狗。",{"type":18,"tag":39,"props":348,"children":349},{},[350],{"type":37,"value":351},"虽然沙僧最后是个菩萨，但人家职级是和孙悟空一样的。而猪八戒虽然也是菩萨，但属于是菩萨里面打杂的；甚至猪八戒不如白龙马等极高，人家起码还能训练下禁卫军，而猪八戒只能吃人家剩下的贡品。沙僧的背后代表的是玉帝；白龙马背后就是龙王家族（婆罗门），四海龙王基本上走到哪都能看到龙王什么海龙王，河龙王，井里面也有龙王，有水的地方都有龙王。",{"type":18,"tag":39,"props":353,"children":354},{},[355],{"type":37,"value":356},"虽然龙在西游记里面级别比较低，玉帝办一下什么宴会都要有个龙肝凤胆(玉帝最喜欢吃龙王了)，动不动斩个龙王，甚至梦里都要斩个龙王玩玩消遣下工作的劳累。所以小白龙吃唐三藏坐骑给观音菩萨点化完全是偶遇，龙王策划的一个剧本，把小白龙这个富哥塞进去。如果取经成功了就能大大提升龙王家族的影响力，俺们龙王也是能给灵山当禁卫军的了，也算是给赵家人当上狗了。",{"type":18,"tag":39,"props":358,"children":359},{},[360],{"type":37,"value":361},"为什么小白龙一条龙要幻化成马呢，我比较认同一个观点。作为一个婆罗门一个富哥，尽量低调点，毕竟言多必失。变成马又不用降妖除魔，还不用说话，主打一个陪伴，不容易被人关注，不容易给人开黑料。这要给人曝光出来了，其他家族就来气了，凭什么他能混个编制成为禁卫军首领啊? 所以说龙王家族是真的厉害，基本上整部西游记形形色色的龙王出境率还算是比较高的。连我龙王家的祖传如意金箍棒都给孙悟空了，起码是重仓押注取经团队，不成功便成仁。",{"type":18,"tag":150,"props":363,"children":364},{},[365],{"type":18,"tag":39,"props":366,"children":367},{},[368],{"type":37,"value":369},"道德天尊又称太上老君，小说中居于离恨天兜率宫（实际上兜率为印度词汇，道教中太上老君居于太清圣境）。孙悟空因大闹天宫，被太上老君的金刚镯打到，因此被捕，后被放于太上老君的八卦炉内焚化，不料非但没有被焚化，反而练就一双 “火眼金睛”，有看穿看透人事物的功力，在取经路途中，凡有妖怪化装成凡人或神仙，都逃不过他的火眼金睛而被拆穿。后来没被焚化的孙悟空出了八卦炉，愤而踢翻，造成八卦炉爆炸，火球与炭灰降于凡间西疆，而成为火焰山。替太上老君看管八卦炉的两名童子下凡作乱，分别自称金角大王和银角大王。太上老君的坐骑是一头青牛精，下凡作乱时自称独角兕大王。",{"type":18,"tag":39,"props":371,"children":372},{},[373],{"type":37,"value":374},"最后的结果也很不错，龙王家族最后变成有钱有势的韩国财阀一样的家族势力。再也不是那个有钱任人宰割的群体了。而猪八戒出身就是道教，道教扛把子就是太上老君，太上老君这个人也可以细细品，基本上西游记上很多妖怪，比如什么独角兕大王、金角大王、银角大王都是太上老君的坐骑什么的。",{"type":18,"tag":376,"props":377,"children":378},"hr",{},[],{"type":18,"tag":32,"props":380,"children":382},{"id":381},"四十九回-观音地盘-2",[383],{"type":37,"value":384},"四十九回 观音地盘 2",{"type":18,"tag":27,"props":386,"children":388},{":t":387},"观音的回旋镖",[],{"type":18,"tag":39,"props":390,"children":391},{},[392],{"type":37,"value":393},"灵感大王要胁住在河岸的村民每年必须供奉一对童男童女，以保风调雨顺、否则降灾。孙悟空和猪八戒伪装成童男童女并偷袭他，灵感大王不敌孙悟空而躲了起来，孙悟空便找上观音菩萨协助。最后由观音用鱼篮收回妖怪后带回了池塘。",{"type":18,"tag":150,"props":395,"children":396},{},[397],{"type":18,"tag":39,"props":398,"children":399},{},[400],{"type":37,"value":401},"灵感大王为住在通天河里的妖怪，真实身份为普陀山莲花池的金鱼，因为听了观音说法而有了力量便下凡作恶。能够在一晚之内，将宽度 800 里、长度连孙悟空都看不见尽头的通天河冻成冰河。",{"type":18,"tag":39,"props":403,"children":404},{},[405],{"type":37,"value":406},"在四十九回时，孙悟空和灵感大王的掰扯。孙悟空可能发现了灵感大王的背后是观音菩萨，于是去找观音收服鲤鱼精。在这个故事中，你会发现。观音来了后将通天河的小鱼小虾都灭口了，就留了个鲤鱼精。",{"type":18,"tag":39,"props":408,"children":409},{},[410],{"type":37,"value":411},"这原本是观音的地盘，被孙悟空抓住了把柄。于是在八十一难的时候，陈家庄唐僧在此处讲经可以视作为观音将这个地盘让给了取经三人。孙悟空与观音菩萨交易成功。孙悟空之后也没有在玉帝、佛祖跟前给观音菩萨上眼药。",{"type":18,"tag":39,"props":413,"children":414},{},[415],{"type":37,"value":416},"在现实社会中，这个步骤就很像是观音菩萨贪污了一块地，改造成了个山水庄园。孙悟空误打误撞发现了这块贪污巨款，之后去给观音菩萨上眼药。之后在八十一难中，其实八十难就行了，但因为观音菩萨需要告诉孙悟空，这块地方我不要了，送给你，让你们去看看这块地怎么样，将秘密守护住堵住孙悟空的嘴；让其在论功行赏的时候不要泄露出去。",{"type":18,"tag":150,"props":418,"children":419},{},[420],{"type":18,"tag":39,"props":421,"children":422},{},[423],{"type":37,"value":424},"紧箍咒是《西游记》中的一个咒语，又名定心真言，由如来发明，经观音菩萨传授给唐僧，用于对其弟子孙悟空的管教。",{"type":18,"tag":39,"props":426,"children":427},{},[428,430,435],{"type":37,"value":429},"孙悟空其实是比较讨厌观音菩萨的，因为紧箍咒就是观音菩萨给他下的套。想拿捏孙悟空，所以在取经工程前期，孙悟空一直被唐僧拿捏。这件事情告诉我们，不幸树敌的时候，可以 ",{"type":18,"tag":340,"props":431,"children":432},{},[433],{"type":37,"value":434},"捧高",{"type":37,"value":436}," 下对方，就比如观音在通天河陈家庄那样，给孙悟空，唐僧他们整个供奉，来暗示孙悟空你都成佛了，再计较这些岂不是不符你身份？就当我观音是个小人忘记这些恶心事吧。",{"type":18,"tag":39,"props":438,"children":439},{},[440],{"type":37,"value":441},"这样孙悟空在论功行赏的时候，就不会打破和谐的气氛，让观音不被反腐。如果没有八十一难，那么孙悟空是会将观音说出去的，因为孙悟空背景很深，背后是道教、佛教、天庭。",{"type":18,"tag":39,"props":443,"children":444},{},[445],{"type":37,"value":446},"连在灵山唐僧师徒到灵山宝阁取经时，阿难、伽叶作为如来的底子要收取人事。孙悟空都要把索要人事之事捅到如来佛祖那里，佛祖并不觉有何不妥就可以看出，孙悟空是真的敢举报观音贪污的。",{"title":8,"searchDepth":91,"depth":91,"links":448},[],"content:book:journey-to-the-west.md","book/journey-to-the-west.md",{"_path":452,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":453,"description":8,"director":454,"time":455,"img":456,"plan":13,"body":457,"_type":93,"_id":514,"_source":95,"_file":515,"_extension":97},"/book/criminal_minds","Criminal Minds","R/N","2024.10.11","06/1.png",{"type":15,"children":458,"toc":512},[459],{"type":18,"tag":19,"props":460,"children":461},{":by":21,":img":22,":plan":23,":title":24},[462,466,472,477,485,490,507],{"type":18,"tag":27,"props":463,"children":465},{":t":464},"第一季",[],{"type":18,"tag":32,"props":467,"children":469},{"id":468},"行为分析小组-0",[470],{"type":37,"value":471},"行为分析小组 0",{"type":18,"tag":39,"props":473,"children":474},{},[475],{"type":37,"value":476},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":18,"tag":150,"props":478,"children":479},{},[480],{"type":18,"tag":39,"props":481,"children":482},{},[483],{"type":37,"value":484},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":18,"tag":39,"props":486,"children":487},{},[488],{"type":37,"value":489},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":18,"tag":150,"props":491,"children":492},{},[493],{"type":18,"tag":39,"props":494,"children":495},{},[496,498,505],{"type":37,"value":497},"比如 ",{"type":18,"tag":75,"props":499,"children":502},{"href":500,"rel":501},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[79],[503],{"type":37,"value":504},"洪博培",{"type":37,"value":506}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":18,"tag":39,"props":508,"children":509},{},[510],{"type":37,"value":511},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"title":8,"searchDepth":91,"depth":91,"links":513},[],"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":517,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":518,"description":8,"director":454,"time":519,"img":520,"plan":521,"body":522,"_type":93,"_id":736,"_source":95,"_file":737,"_extension":97},"/book/24-hour","24 hour","2024.7.22","05/1.png","30",{"type":15,"children":523,"toc":734},[524],{"type":18,"tag":19,"props":525,"children":526},{":by":21,":img":22,":plan":23,":title":24},[527,531,537,542,547,552,557,562,567,572,577,582,587,591,597,647,649,729],{"type":18,"tag":27,"props":528,"children":530},{":t":529},"1~3 季",[],{"type":18,"tag":32,"props":532,"children":534},{"id":533},"_13-季不要内耗-1",[535],{"type":37,"value":536},"1~3 季：不要内耗 1",{"type":18,"tag":39,"props":538,"children":539},{},[540],{"type":37,"value":541},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":18,"tag":39,"props":543,"children":544},{},[545],{"type":37,"value":546},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":18,"tag":39,"props":548,"children":549},{},[550],{"type":37,"value":551},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":18,"tag":39,"props":553,"children":554},{},[555],{"type":37,"value":556},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":18,"tag":39,"props":558,"children":559},{},[560],{"type":37,"value":561},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":18,"tag":39,"props":563,"children":564},{},[565],{"type":37,"value":566},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":18,"tag":39,"props":568,"children":569},{},[570],{"type":37,"value":571},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":18,"tag":39,"props":573,"children":574},{},[575],{"type":37,"value":576},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":18,"tag":39,"props":578,"children":579},{},[580],{"type":37,"value":581},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":18,"tag":39,"props":583,"children":584},{},[585],{"type":37,"value":586},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":18,"tag":27,"props":588,"children":590},{":t":589},"Subchannel chip",[],{"type":18,"tag":32,"props":592,"children":594},{"id":593},"子通道芯片-subchannel-chip-2",[595],{"type":37,"value":596},"子通道芯片: Subchannel chip 2",{"type":18,"tag":39,"props":598,"children":599},{},[600,602,609,611,618,620,627,629,636,638,645],{"type":37,"value":601},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":18,"tag":75,"props":603,"children":606},{"href":604,"rel":605},"https://24.fandom.com/wiki/Subchannel_chip",[79],[607],{"type":37,"value":608},"24 Wiki",{"type":37,"value":610}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":18,"tag":75,"props":612,"children":615},{"href":613,"rel":614},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[79],[616],{"type":37,"value":617},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":37,"value":619},"、",{"type":18,"tag":75,"props":621,"children":624},{"href":622,"rel":623},"https://en.wikipedia.org/wiki/Ultra-wideband#",[79],[625],{"type":37,"value":626},"超宽频(UWB, Ultra-wideband)",{"type":37,"value":628},"，",{"type":18,"tag":75,"props":630,"children":633},{"href":631,"rel":632},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[79],[634],{"type":37,"value":635},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":37,"value":637}," 所常用的 ",{"type":18,"tag":75,"props":639,"children":642},{"href":640,"rel":641},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[79],[643],{"type":37,"value":644},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":37,"value":646}," 协议。",{"type":37,"value":648},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":650,"children":651},{},[652,673],{"type":18,"tag":175,"props":653,"children":654},{},[655],{"type":18,"tag":179,"props":656,"children":657},{},[658,663,668],{"type":18,"tag":183,"props":659,"children":660},{},[661],{"type":37,"value":662},"名称",{"type":18,"tag":183,"props":664,"children":665},{},[666],{"type":37,"value":667},"描述",{"type":18,"tag":183,"props":669,"children":670},{},[671],{"type":37,"value":672},"领域",{"type":18,"tag":204,"props":674,"children":675},{},[676,694,711],{"type":18,"tag":179,"props":677,"children":678},{},[679,684,689],{"type":18,"tag":211,"props":680,"children":681},{},[682],{"type":37,"value":683},"FHSS",{"type":18,"tag":211,"props":685,"children":686},{},[687],{"type":37,"value":688},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":18,"tag":211,"props":690,"children":691},{},[692],{"type":37,"value":693},"无线电",{"type":18,"tag":179,"props":695,"children":696},{},[697,702,707],{"type":18,"tag":211,"props":698,"children":699},{},[700],{"type":37,"value":701},"UWB",{"type":18,"tag":211,"props":703,"children":704},{},[705],{"type":37,"value":706},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":18,"tag":211,"props":708,"children":709},{},[710],{"type":37,"value":693},{"type":18,"tag":179,"props":712,"children":713},{},[714,719,724],{"type":18,"tag":211,"props":715,"children":716},{},[717],{"type":37,"value":718},"NB-IoT",{"type":18,"tag":211,"props":720,"children":721},{},[722],{"type":37,"value":723},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":18,"tag":211,"props":725,"children":726},{},[727],{"type":37,"value":728},"无线电与物联网",{"type":18,"tag":39,"props":730,"children":731},{},[732],{"type":37,"value":733},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":91,"depth":91,"links":735},[],"content:book:24-hour.md","book/24-hour.md",{"_path":739,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":740,"description":8,"director":741,"time":742,"img":743,"plan":744,"body":745,"_type":93,"_id":1857,"_source":95,"_file":1858,"_extension":97},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","1",{"type":15,"children":746,"toc":1855},[747],{"type":18,"tag":19,"props":748,"children":749},{":by":21,":img":22,":plan":23,":title":24},[750,754,760,781,783,858,872,880,894,907,910,915,920,923,927,933,938,943,948,950,1049,1054,1066,1067,1133,1138,1146,1151,1154,1158,1164,1169,1171,1232,1237,1252,1257,1262,1267,1269,1414,1422,1427,1435,1440,1444,1467,1491,1496,1500,1501,1581,1599,1604,1607,1612,1618,1622,1627,1631,1636,1638,1769,1782,1790,1798,1803,1811,1815,1820,1832,1844],{"type":18,"tag":27,"props":751,"children":753},{":t":752},"Google Project Zero",[],{"type":18,"tag":32,"props":755,"children":757},{"id":756},"作者-1",[758],{"type":37,"value":759},"作者 1",{"type":18,"tag":39,"props":761,"children":762},{},[763,765,771,773,779],{"type":37,"value":764},"本书的作者是 ",{"type":18,"tag":75,"props":766,"children":769},{"href":767,"rel":768},"https://github.com/tyranid",[79],[770],{"type":37,"value":741},{"type":37,"value":772},"，也是著名的 ",{"type":18,"tag":75,"props":774,"children":777},{"href":775,"rel":776},"https://googleprojectzero.blogspot.com/",[79],[778],{"type":37,"value":752},{"type":37,"value":780}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":37,"value":782},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":784,"children":785},{},[786,801],{"type":18,"tag":175,"props":787,"children":788},{},[789],{"type":18,"tag":179,"props":790,"children":791},{},[792,797],{"type":18,"tag":183,"props":793,"children":794},{},[795],{"type":37,"value":796},"会议",{"type":18,"tag":183,"props":798,"children":799},{},[800],{"type":37,"value":667},{"type":18,"tag":204,"props":802,"children":803},{},[804,822,840],{"type":18,"tag":179,"props":805,"children":806},{},[807,817],{"type":18,"tag":211,"props":808,"children":809},{},[810],{"type":18,"tag":75,"props":811,"children":814},{"href":812,"rel":813},"https://www.blackhat.com/",[79],[815],{"type":37,"value":816},"BlackHat",{"type":18,"tag":211,"props":818,"children":819},{},[820],{"type":37,"value":821},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":18,"tag":179,"props":823,"children":824},{},[825,835],{"type":18,"tag":211,"props":826,"children":827},{},[828],{"type":18,"tag":75,"props":829,"children":832},{"href":830,"rel":831},"https://www.secwest.net/",[79],[833],{"type":37,"value":834},"CanSecWest",{"type":18,"tag":211,"props":836,"children":837},{},[838],{"type":37,"value":839},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":18,"tag":179,"props":841,"children":842},{},[843,853],{"type":18,"tag":211,"props":844,"children":845},{},[846],{"type":18,"tag":75,"props":847,"children":850},{"href":848,"rel":849},"https://events.ccc.de/",[79],[851],{"type":37,"value":852},"Chaos Computer Conference",{"type":18,"tag":211,"props":854,"children":855},{},[856],{"type":37,"value":857},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":18,"tag":39,"props":859,"children":860},{},[861,863,870],{"type":37,"value":862},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":18,"tag":75,"props":864,"children":867},{"href":865,"rel":866},"https://en.wikipedia.org/wiki/Line_management",[79],[868],{"type":37,"value":869},"Leader(line manager)",{"type":37,"value":871}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":18,"tag":150,"props":873,"children":874},{},[875],{"type":18,"tag":39,"props":876,"children":877},{},[878],{"type":37,"value":879},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":18,"tag":39,"props":881,"children":882},{},[883,885,892],{"type":37,"value":884},"在规划职业路径阶段认识了 ",{"type":18,"tag":75,"props":886,"children":889},{"href":887,"rel":888},"https://www.linkedin.com/in/mike-jordon-72193719/",[79],[890],{"type":37,"value":891},"Mike Jordon",{"type":37,"value":893}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":18,"tag":150,"props":895,"children":896},{},[897,902],{"type":18,"tag":39,"props":898,"children":899},{},[900],{"type":37,"value":901},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":18,"tag":39,"props":903,"children":904},{},[905],{"type":37,"value":906},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":18,"tag":376,"props":908,"children":909},{},[],{"type":18,"tag":39,"props":911,"children":912},{},[913],{"type":37,"value":914},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":18,"tag":39,"props":916,"children":917},{},[918],{"type":37,"value":919},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":18,"tag":376,"props":921,"children":922},{},[],{"type":18,"tag":27,"props":924,"children":926},{":t":925},"协议是一切的基础",[],{"type":18,"tag":32,"props":928,"children":930},{"id":929},"基础-2",[931],{"type":37,"value":932},"基础 2",{"type":18,"tag":39,"props":934,"children":935},{},[936],{"type":37,"value":937},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":18,"tag":39,"props":939,"children":940},{},[941],{"type":37,"value":942},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":18,"tag":39,"props":944,"children":945},{},[946],{"type":37,"value":947},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":37,"value":949},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":951,"children":952},{},[953,968],{"type":18,"tag":175,"props":954,"children":955},{},[956],{"type":18,"tag":179,"props":957,"children":958},{},[959,964],{"type":18,"tag":183,"props":960,"children":961},{},[962],{"type":37,"value":963},"功能",{"type":18,"tag":183,"props":965,"children":966},{},[967],{"type":37,"value":667},{"type":18,"tag":204,"props":969,"children":970},{},[971,984,997,1010,1023,1036],{"type":18,"tag":179,"props":972,"children":973},{},[974,979],{"type":18,"tag":211,"props":975,"children":976},{},[977],{"type":37,"value":978},"维护会话状态",{"type":18,"tag":211,"props":980,"children":981},{},[982],{"type":37,"value":983},"创建新的连接或终止连接",{"type":18,"tag":179,"props":985,"children":986},{},[987,992],{"type":18,"tag":211,"props":988,"children":989},{},[990],{"type":37,"value":991},"通过寻址识别节点",{"type":18,"tag":211,"props":993,"children":994},{},[995],{"type":37,"value":996},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":18,"tag":179,"props":998,"children":999},{},[1000,1005],{"type":18,"tag":211,"props":1001,"children":1002},{},[1003],{"type":37,"value":1004},"控制流量",{"type":18,"tag":211,"props":1006,"children":1007},{},[1008],{"type":37,"value":1009},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":18,"tag":179,"props":1011,"children":1012},{},[1013,1018],{"type":18,"tag":211,"props":1014,"children":1015},{},[1016],{"type":37,"value":1017},"保证传输数据的顺序",{"type":18,"tag":211,"props":1019,"children":1020},{},[1021],{"type":37,"value":1022},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":18,"tag":179,"props":1024,"children":1025},{},[1026,1031],{"type":18,"tag":211,"props":1027,"children":1028},{},[1029],{"type":37,"value":1030},"检测和纠正错误",{"type":18,"tag":211,"props":1032,"children":1033},{},[1034],{"type":37,"value":1035},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":18,"tag":179,"props":1037,"children":1038},{},[1039,1044],{"type":18,"tag":211,"props":1040,"children":1041},{},[1042],{"type":37,"value":1043},"格式化和编码数据",{"type":18,"tag":211,"props":1045,"children":1046},{},[1047],{"type":37,"value":1048},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":18,"tag":39,"props":1050,"children":1051},{},[1052],{"type":37,"value":1053},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":18,"tag":1055,"props":1056,"children":1060},"pre",{"code":1057,"language":37,"meta":8,"className":1058},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[1059],"language-text",[1061],{"type":18,"tag":1062,"props":1063,"children":1064},"code",{"__ignoreMap":8},[1065],{"type":37,"value":1057},{"type":37,"value":782},{"type":18,"tag":171,"props":1068,"children":1069},{},[1070,1085],{"type":18,"tag":175,"props":1071,"children":1072},{},[1073],{"type":18,"tag":179,"props":1074,"children":1075},{},[1076,1081],{"type":18,"tag":183,"props":1077,"children":1078},{},[1079],{"type":37,"value":1080},"协议模型",{"type":18,"tag":183,"props":1082,"children":1083},{},[1084],{"type":37,"value":667},{"type":18,"tag":204,"props":1086,"children":1087},{},[1088,1101,1114],{"type":18,"tag":179,"props":1089,"children":1090},{},[1091,1096],{"type":18,"tag":211,"props":1092,"children":1093},{},[1094],{"type":37,"value":1095},"内容层 (文件请求)",{"type":18,"tag":211,"props":1097,"children":1098},{},[1099],{"type":37,"value":1100},"我想要一个 image.png 图片",{"type":18,"tag":179,"props":1102,"children":1103},{},[1104,1109],{"type":18,"tag":211,"props":1105,"children":1106},{},[1107],{"type":37,"value":1108},"编码层 (HTTP)",{"type":18,"tag":211,"props":1110,"children":1111},{},[1112],{"type":37,"value":1113},"GET /image.png HTTP/1.1",{"type":18,"tag":179,"props":1115,"children":1116},{},[1117,1122],{"type":18,"tag":211,"props":1118,"children":1119},{},[1120],{"type":37,"value":1121},"传输层 (TCP/IP)",{"type":18,"tag":211,"props":1123,"children":1124},{},[1125,1127,1131],{"type":37,"value":1126},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":18,"tag":1128,"props":1129,"children":1130},"br",{},[],{"type":37,"value":1132}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":18,"tag":39,"props":1134,"children":1135},{},[1136],{"type":37,"value":1137},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":18,"tag":150,"props":1139,"children":1140},{},[1141],{"type":18,"tag":39,"props":1142,"children":1143},{},[1144],{"type":37,"value":1145},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":18,"tag":39,"props":1147,"children":1148},{},[1149],{"type":37,"value":1150},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":18,"tag":376,"props":1152,"children":1153},{},[],{"type":18,"tag":27,"props":1155,"children":1157},{":t":1156},"流量捕获",[],{"type":18,"tag":32,"props":1159,"children":1161},{"id":1160},"捕获-2",[1162],{"type":37,"value":1163},"捕获 2",{"type":18,"tag":39,"props":1165,"children":1166},{},[1167],{"type":37,"value":1168},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":37,"value":1170},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":1172,"children":1173},{},[1174,1193],{"type":18,"tag":175,"props":1175,"children":1176},{},[1177],{"type":18,"tag":179,"props":1178,"children":1179},{},[1180,1184,1188],{"type":18,"tag":183,"props":1181,"children":1182},{},[1183],{"type":37,"value":662},{"type":18,"tag":183,"props":1185,"children":1186},{},[1187],{"type":37,"value":667},{"type":18,"tag":183,"props":1189,"children":1190},{},[1191],{"type":37,"value":1192},"特点",{"type":18,"tag":204,"props":1194,"children":1195},{},[1196,1214],{"type":18,"tag":179,"props":1197,"children":1198},{},[1199,1204,1209],{"type":18,"tag":211,"props":1200,"children":1201},{},[1202],{"type":37,"value":1203},"被动捕获",{"type":18,"tag":211,"props":1205,"children":1206},{},[1207],{"type":37,"value":1208},"在线路上传输时提取数据，如 Wireshark",{"type":18,"tag":211,"props":1210,"children":1211},{},[1212],{"type":37,"value":1213},"不直接与流量交互",{"type":18,"tag":179,"props":1215,"children":1216},{},[1217,1222,1227],{"type":18,"tag":211,"props":1218,"children":1219},{},[1220],{"type":37,"value":1221},"主动捕获",{"type":18,"tag":211,"props":1223,"children":1224},{},[1225],{"type":37,"value":1226},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":18,"tag":211,"props":1228,"children":1229},{},[1230],{"type":37,"value":1231},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":18,"tag":39,"props":1233,"children":1234},{},[1235],{"type":37,"value":1236},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":18,"tag":1238,"props":1239,"children":1240},"ol",{},[1241,1247],{"type":18,"tag":1242,"props":1243,"children":1244},"li",{},[1245],{"type":37,"value":1246},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":18,"tag":1242,"props":1248,"children":1249},{},[1250],{"type":37,"value":1251},"只查看正在测试的应用程序的流量",{"type":18,"tag":39,"props":1253,"children":1254},{},[1255],{"type":37,"value":1256},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":18,"tag":27,"props":1258,"children":1261},{":t":1259,":type":1260},"系统调用跟踪","2",[],{"type":18,"tag":39,"props":1263,"children":1264},{},[1265],{"type":37,"value":1266},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":37,"value":1268},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":1270,"children":1271},{},[1272,1291],{"type":18,"tag":175,"props":1273,"children":1274},{},[1275],{"type":18,"tag":179,"props":1276,"children":1277},{},[1278,1283,1287],{"type":18,"tag":183,"props":1279,"children":1280},{},[1281],{"type":37,"value":1282},"模式",{"type":18,"tag":183,"props":1284,"children":1285},{},[1286],{"type":37,"value":667},{"type":18,"tag":183,"props":1288,"children":1289},{},[1290],{"type":37,"value":1192},{"type":18,"tag":204,"props":1292,"children":1293},{},[1294,1312,1326,1340,1354,1372,1386,1400],{"type":18,"tag":179,"props":1295,"children":1296},{},[1297,1302,1307],{"type":18,"tag":211,"props":1298,"children":1299},{},[1300],{"type":37,"value":1301},"用户模式",{"type":18,"tag":211,"props":1303,"children":1304},{},[1305],{"type":37,"value":1306},"操作系统普通应用程序和用户空间进程运行的模式",{"type":18,"tag":211,"props":1308,"children":1309},{},[1310],{"type":37,"value":1311},"权限限制",{"type":18,"tag":179,"props":1313,"children":1314},{},[1315,1318,1321],{"type":18,"tag":211,"props":1316,"children":1317},{},[],{"type":18,"tag":211,"props":1319,"children":1320},{},[],{"type":18,"tag":211,"props":1322,"children":1323},{},[1324],{"type":37,"value":1325},"隔离",{"type":18,"tag":179,"props":1327,"children":1328},{},[1329,1332,1335],{"type":18,"tag":211,"props":1330,"children":1331},{},[],{"type":18,"tag":211,"props":1333,"children":1334},{},[],{"type":18,"tag":211,"props":1336,"children":1337},{},[1338],{"type":37,"value":1339},"限制对系统资源的直接访问",{"type":18,"tag":179,"props":1341,"children":1342},{},[1343,1346,1349],{"type":18,"tag":211,"props":1344,"children":1345},{},[],{"type":18,"tag":211,"props":1347,"children":1348},{},[],{"type":18,"tag":211,"props":1350,"children":1351},{},[1352],{"type":37,"value":1353},"日常应用程序的运行",{"type":18,"tag":179,"props":1355,"children":1356},{},[1357,1362,1367],{"type":18,"tag":211,"props":1358,"children":1359},{},[1360],{"type":37,"value":1361},"内核模式",{"type":18,"tag":211,"props":1363,"children":1364},{},[1365],{"type":37,"value":1366},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":18,"tag":211,"props":1368,"children":1369},{},[1370],{"type":37,"value":1371},"完全权限",{"type":18,"tag":179,"props":1373,"children":1374},{},[1375,1378,1381],{"type":18,"tag":211,"props":1376,"children":1377},{},[],{"type":18,"tag":211,"props":1379,"children":1380},{},[],{"type":18,"tag":211,"props":1382,"children":1383},{},[1384],{"type":37,"value":1385},"关键操作",{"type":18,"tag":179,"props":1387,"children":1388},{},[1389,1392,1395],{"type":18,"tag":211,"props":1390,"children":1391},{},[],{"type":18,"tag":211,"props":1393,"children":1394},{},[],{"type":18,"tag":211,"props":1396,"children":1397},{},[1398],{"type":37,"value":1399},"直接访问和控制系统资源",{"type":18,"tag":179,"props":1401,"children":1402},{},[1403,1406,1409],{"type":18,"tag":211,"props":1404,"children":1405},{},[],{"type":18,"tag":211,"props":1407,"children":1408},{},[],{"type":18,"tag":211,"props":1410,"children":1411},{},[1412],{"type":37,"value":1413},"系统级调用",{"type":18,"tag":150,"props":1415,"children":1416},{},[1417],{"type":18,"tag":39,"props":1418,"children":1419},{},[1420],{"type":37,"value":1421},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":18,"tag":39,"props":1423,"children":1424},{},[1425],{"type":37,"value":1426},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":18,"tag":1055,"props":1428,"children":1430},{"code":1429},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[1431],{"type":18,"tag":1062,"props":1432,"children":1433},{"__ignoreMap":8},[1434],{"type":37,"value":1429},{"type":18,"tag":39,"props":1436,"children":1437},{},[1438],{"type":37,"value":1439},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":18,"tag":27,"props":1441,"children":1443},{":t":1442,":type":1260},"网络编程的基础",[],{"type":18,"tag":39,"props":1445,"children":1446},{},[1447,1449,1456,1458,1465],{"type":37,"value":1448},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":18,"tag":75,"props":1450,"children":1453},{"href":1451,"rel":1452},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[79],[1454],{"type":37,"value":1455},"Berkeley Software Distribution（BSD）",{"type":37,"value":1457}," 完成的。因此在网络通信领域中，就离不开 ",{"type":18,"tag":75,"props":1459,"children":1462},{"href":1460,"rel":1461},"https://en.wikipedia.org/wiki/Berkeley_sockets",[79],[1463],{"type":37,"value":1464},"Berkeley Sockets",{"type":37,"value":1466},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":18,"tag":150,"props":1468,"children":1469},{},[1470],{"type":18,"tag":39,"props":1471,"children":1472},{},[1473,1475,1481,1483,1489],{"type":37,"value":1474},"如果你是类 Unix 系统，可以在终端输入 ",{"type":18,"tag":1062,"props":1476,"children":1478},{"className":1477},[],[1479],{"type":37,"value":1480},"man 2 syscall_name",{"type":37,"value":1482}," 在终端中查看手册，比如 ",{"type":18,"tag":1062,"props":1484,"children":1486},{"className":1485},[],[1487],{"type":37,"value":1488},"man 2 open",{"type":37,"value":1490}," 就可以查看系统调用第二章有关 open 的内容。",{"type":18,"tag":39,"props":1492,"children":1493},{},[1494],{"type":37,"value":1495},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":18,"tag":27,"props":1497,"children":1499},{":t":1498,":type":1260},"不同平台之间的捕获",[],{"type":37,"value":648},{"type":18,"tag":171,"props":1502,"children":1503},{},[1504,1524],{"type":18,"tag":175,"props":1505,"children":1506},{},[1507],{"type":18,"tag":179,"props":1508,"children":1509},{},[1510,1515,1520],{"type":18,"tag":183,"props":1511,"children":1512},{},[1513],{"type":37,"value":1514},"平台",{"type":18,"tag":183,"props":1516,"children":1517},{},[1518],{"type":37,"value":1519},"应用",{"type":18,"tag":183,"props":1521,"children":1522},{},[1523],{"type":37,"value":667},{"type":18,"tag":204,"props":1525,"children":1526},{},[1527,1545,1563],{"type":18,"tag":179,"props":1528,"children":1529},{},[1530,1535,1540],{"type":18,"tag":211,"props":1531,"children":1532},{},[1533],{"type":37,"value":1534},"Linux",{"type":18,"tag":211,"props":1536,"children":1537},{},[1538],{"type":37,"value":1539},"Strace",{"type":18,"tag":211,"props":1541,"children":1542},{},[1543],{"type":37,"value":1544},"跟踪系统调用和信号",{"type":18,"tag":179,"props":1546,"children":1547},{},[1548,1553,1558],{"type":18,"tag":211,"props":1549,"children":1550},{},[1551],{"type":37,"value":1552},"macOS",{"type":18,"tag":211,"props":1554,"children":1555},{},[1556],{"type":37,"value":1557},"DTrace",{"type":18,"tag":211,"props":1559,"children":1560},{},[1561],{"type":37,"value":1562},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":18,"tag":179,"props":1564,"children":1565},{},[1566,1571,1576],{"type":18,"tag":211,"props":1567,"children":1568},{},[1569],{"type":37,"value":1570},"Windows",{"type":18,"tag":211,"props":1572,"children":1573},{},[1574],{"type":37,"value":1575},"Process Monitor",{"type":18,"tag":211,"props":1577,"children":1578},{},[1579],{"type":37,"value":1580},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":18,"tag":150,"props":1582,"children":1583},{},[1584,1589,1594],{"type":18,"tag":39,"props":1585,"children":1586},{},[1587],{"type":37,"value":1588},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":18,"tag":39,"props":1590,"children":1591},{},[1592],{"type":37,"value":1593},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":18,"tag":39,"props":1595,"children":1596},{},[1597],{"type":37,"value":1598},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":18,"tag":39,"props":1600,"children":1601},{},[1602],{"type":37,"value":1603},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":18,"tag":27,"props":1605,"children":1606},{":t":1221,":type":1260},[],{"type":18,"tag":39,"props":1608,"children":1609},{},[1610],{"type":37,"value":1611},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":18,"tag":32,"props":1613,"children":1615},{"id":1614},"太阳底下没有新鲜事-3",[1616],{"type":37,"value":1617},"太阳底下没有新鲜事 3",{"type":18,"tag":27,"props":1619,"children":1621},{":t":1620},"太阳底下没有新鲜事",[],{"type":18,"tag":39,"props":1623,"children":1624},{},[1625],{"type":37,"value":1626},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":18,"tag":27,"props":1628,"children":1630},{":t":1629,":type":1260},"一些进制的基础",[],{"type":18,"tag":39,"props":1632,"children":1633},{},[1634],{"type":37,"value":1635},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":37,"value":1637},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":171,"props":1639,"children":1640},{},[1641,1660],{"type":18,"tag":175,"props":1642,"children":1643},{},[1644],{"type":18,"tag":179,"props":1645,"children":1646},{},[1647,1652,1656],{"type":18,"tag":183,"props":1648,"children":1649},{},[1650],{"type":37,"value":1651},"类型",{"type":18,"tag":183,"props":1653,"children":1654},{},[1655],{"type":37,"value":667},{"type":18,"tag":183,"props":1657,"children":1658},{},[1659],{"type":37,"value":1192},{"type":18,"tag":204,"props":1661,"children":1662},{},[1663,1681,1695,1709,1723,1741,1755],{"type":18,"tag":179,"props":1664,"children":1665},{},[1666,1671,1676],{"type":18,"tag":211,"props":1667,"children":1668},{},[1669],{"type":37,"value":1670},"二进制协议",{"type":18,"tag":211,"props":1672,"children":1673},{},[1674],{"type":37,"value":1675},"以二进制格式传输数据",{"type":18,"tag":211,"props":1677,"children":1678},{},[1679],{"type":37,"value":1680},"高效性",{"type":18,"tag":179,"props":1682,"children":1683},{},[1684,1687,1690],{"type":18,"tag":211,"props":1685,"children":1686},{},[],{"type":18,"tag":211,"props":1688,"children":1689},{},[],{"type":18,"tag":211,"props":1691,"children":1692},{},[1693],{"type":37,"value":1694},"紧凑性",{"type":18,"tag":179,"props":1696,"children":1697},{},[1698,1701,1704],{"type":18,"tag":211,"props":1699,"children":1700},{},[],{"type":18,"tag":211,"props":1702,"children":1703},{},[],{"type":18,"tag":211,"props":1705,"children":1706},{},[1707],{"type":37,"value":1708},"复杂性",{"type":18,"tag":179,"props":1710,"children":1711},{},[1712,1715,1718],{"type":18,"tag":211,"props":1713,"children":1714},{},[],{"type":18,"tag":211,"props":1716,"children":1717},{},[],{"type":18,"tag":211,"props":1719,"children":1720},{},[1721],{"type":37,"value":1722},"依赖性",{"type":18,"tag":179,"props":1724,"children":1725},{},[1726,1731,1736],{"type":18,"tag":211,"props":1727,"children":1728},{},[1729],{"type":37,"value":1730},"文本协议",{"type":18,"tag":211,"props":1732,"children":1733},{},[1734],{"type":37,"value":1735},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":18,"tag":211,"props":1737,"children":1738},{},[1739],{"type":37,"value":1740},"可读性",{"type":18,"tag":179,"props":1742,"children":1743},{},[1744,1747,1750],{"type":18,"tag":211,"props":1745,"children":1746},{},[],{"type":18,"tag":211,"props":1748,"children":1749},{},[],{"type":18,"tag":211,"props":1751,"children":1752},{},[1753],{"type":37,"value":1754},"效率低",{"type":18,"tag":179,"props":1756,"children":1757},{},[1758,1761,1764],{"type":18,"tag":211,"props":1759,"children":1760},{},[],{"type":18,"tag":211,"props":1762,"children":1763},{},[],{"type":18,"tag":211,"props":1765,"children":1766},{},[1767],{"type":37,"value":1768},"灵活性（容错性和可扩展性）",{"type":18,"tag":39,"props":1770,"children":1771},{},[1772,1774,1780],{"type":37,"value":1773},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":18,"tag":1062,"props":1775,"children":1777},{"className":1776},[],[1778],{"type":37,"value":1779},"octet",{"type":37,"value":1781}," 来确保每个单位确实是 8 位。",{"type":18,"tag":150,"props":1783,"children":1784},{},[1785],{"type":18,"tag":39,"props":1786,"children":1787},{},[1788],{"type":37,"value":1789},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":18,"tag":1055,"props":1791,"children":1793},{"code":1792},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[1794],{"type":18,"tag":1062,"props":1795,"children":1796},{"__ignoreMap":8},[1797],{"type":37,"value":1792},{"type":18,"tag":39,"props":1799,"children":1800},{},[1801],{"type":37,"value":1802},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":18,"tag":150,"props":1804,"children":1805},{},[1806],{"type":18,"tag":39,"props":1807,"children":1808},{},[1809],{"type":37,"value":1810},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":18,"tag":27,"props":1812,"children":1814},{":t":1813,":type":1260},"数值数据",[],{"type":18,"tag":39,"props":1816,"children":1817},{},[1818],{"type":37,"value":1819},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":18,"tag":39,"props":1821,"children":1822},{},[1823,1825,1830],{"type":37,"value":1824},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":18,"tag":340,"props":1826,"children":1827},{},[1828],{"type":37,"value":1829},"协议结构",{"type":37,"value":1831}," 与逆向。",{"type":18,"tag":39,"props":1833,"children":1834},{},[1835,1837,1842],{"type":37,"value":1836},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":18,"tag":340,"props":1838,"children":1839},{},[1840],{"type":37,"value":1841},"握手过程",{"type":37,"value":1843}," 来识别出加密套件。",{"type":18,"tag":39,"props":1845,"children":1846},{},[1847,1849],{"type":37,"value":1848},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":18,"tag":1850,"props":1851,"children":1852},"the",{"ida":8,"pro":8,"book":8},[1853],{"type":37,"value":1854}," 找到我想要的。",{"title":8,"searchDepth":91,"depth":91,"links":1856},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":1860,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1861,"description":8,"director":1862,"time":742,"img":1863,"body":1864,"_type":93,"_id":2018,"_source":95,"_file":2019,"_extension":97},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":15,"children":1865,"toc":2016},[1866],{"type":18,"tag":19,"props":1867,"children":1868},{":by":21,":img":22,":plan":108,":title":24},[1869,1875,1879,1884,1889,1894,1899,1922,1936,1944,1949,1955,1993,1996,2002,2006,2011],{"type":18,"tag":32,"props":1870,"children":1872},{"id":1871},"理念-1",[1873],{"type":37,"value":1874},"理念 1",{"type":18,"tag":27,"props":1876,"children":1878},{":t":1877},"为什么看这本回忆录？",[],{"type":18,"tag":39,"props":1880,"children":1881},{},[1882],{"type":37,"value":1883},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":18,"tag":39,"props":1885,"children":1886},{},[1887],{"type":37,"value":1888},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":18,"tag":39,"props":1890,"children":1891},{},[1892],{"type":37,"value":1893},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":18,"tag":39,"props":1895,"children":1896},{},[1897],{"type":37,"value":1898},"以打开网站的第一版为例；",{"type":18,"tag":1238,"props":1900,"children":1901},{},[1902,1907,1912,1917],{"type":18,"tag":1242,"props":1903,"children":1904},{},[1905],{"type":37,"value":1906},"有的政府官网，显示的是当权者的讲话和文件；",{"type":18,"tag":1242,"props":1908,"children":1909},{},[1910],{"type":37,"value":1911},"有的政府官网，是一些便民的工具；",{"type":18,"tag":1242,"props":1913,"children":1914},{},[1915],{"type":37,"value":1916},"有的政府官网，是国家的景色，旅游信息；",{"type":18,"tag":1242,"props":1918,"children":1919},{},[1920],{"type":37,"value":1921},"有的政府官网，是一些数据，一些便民信息；",{"type":18,"tag":39,"props":1923,"children":1924},{},[1925,1927,1934],{"type":37,"value":1926},"打开 ",{"type":18,"tag":75,"props":1928,"children":1931},{"href":1929,"rel":1930},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[79],[1932],{"type":37,"value":1933},"https://www.president.go.kr/",{"type":37,"value":1935}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":18,"tag":150,"props":1937,"children":1938},{},[1939],{"type":18,"tag":39,"props":1940,"children":1941},{},[1942],{"type":37,"value":1943},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":18,"tag":39,"props":1945,"children":1946},{},[1947],{"type":37,"value":1948},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":18,"tag":1950,"props":1951,"children":1954},"img-tip",{"text":1952,"url":1953},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":18,"tag":150,"props":1956,"children":1957},{},[1958,1963,1968,1973,1978,1983,1988],{"type":18,"tag":39,"props":1959,"children":1960},{},[1961],{"type":37,"value":1962},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":18,"tag":39,"props":1964,"children":1965},{},[1966],{"type":37,"value":1967},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":18,"tag":39,"props":1969,"children":1970},{},[1971],{"type":37,"value":1972},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":18,"tag":39,"props":1974,"children":1975},{},[1976],{"type":37,"value":1977},"希望公民，与此同时和我一起走出这段历史。",{"type":18,"tag":39,"props":1979,"children":1980},{},[1981],{"type":37,"value":1982},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":18,"tag":39,"props":1984,"children":1985},{},[1986],{"type":37,"value":1987},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":18,"tag":39,"props":1989,"children":1990},{},[1991],{"type":37,"value":1992},"——文在寅",{"type":18,"tag":376,"props":1994,"children":1995},{},[],{"type":18,"tag":32,"props":1997,"children":1999},{"id":1998},"检察官-2",[2000],{"type":37,"value":2001},"检察官 2",{"type":18,"tag":27,"props":2003,"children":2005},{":t":2004},"青瓦台魔咒",[],{"type":18,"tag":39,"props":2007,"children":2008},{},[2009],{"type":37,"value":2010},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":18,"tag":39,"props":2012,"children":2013},{},[2014],{"type":37,"value":2015},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":91,"depth":91,"links":2017},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1736353681636]