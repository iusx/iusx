[{"data":1,"prerenderedAt":6838},["Reactive",2],{"equalBook":3},[4,4246,4945,5350,5569,6678],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"plan":13,"body":14,"_type":4241,"_id":4242,"_source":4243,"_file":4244,"_extension":4245},"/book/seven-languages-in-seven-weeks-bruce-a-tate","book",false,"","Seven Languages in Seven Weeks","Bruce A. Tate","2025.01.08","08/1.png","35,323",{"type":15,"children":16,"toc":4214},"root",[17,4208],{"type":18,"tag":19,"props":20,"children":25},"element","book-content",{":by":21,":img":22,":plan":23,":title":24},"director","img","plan","title",[26,31,39,45,50,55,60,65,70,86,91,95,99,105,110,115,120,125,131,136,145,150,155,160,165,173,178,181,185,192,197,205,276,281,291,304,318,321,327,332,337,371,376,381,389,394,402,407,409,515,518,524,528,542,550,573,626,631,634,640,644,649,657,693,696,702,706,729,743,751,771,779,797,810,818,836,841,849,877,912,915,921,925,966,974,979,987,992,1000,1062,1065,1071,1077,1081,1086,1091,1096,1204,1209,1214,1256,1261,1290,1295,1324,1329,1334,1339,1344,1373,1378,1390,1395,1437,1440,1446,1450,1455,1460,1465,1539,1542,1548,1552,1557,1563,1567,1570,1583,1588,1593,1595,1712,1728,1733,1736,1742,1746,1751,1774,1779,1781,1891,1907,1910,1916,1920,1943,1966,2013,2015,2172,2177,2186,2191,2199,2204,2227,2232,2260,2265,2268,2274,2278,2284,2289,2291,2351,2356,2361,2372,2377,2390,2395,2408,2413,2421,2424,2428,2432,2440,2445,2453,2457,2465,2470,2478,2483,2507,2512,2528,2531,2539,2558,2577,2581,2586,2594,2602,2616,2628,2655,2663,2671,2699,2711,2719,2724,2732,2737,2742,2750,2758,2763,2768,2781,2786,2793,2798,2803,2811,2815,2820,2825,2833,2841,2854,2859,2862,2868,2872,2877,2885,2888,2896,2901,2903,2976,2981,2994,2999,3007,3012,3015,3021,3025,3030,3038,3043,3048,3053,3061,3066,3074,3079,3087,3090,3096,3100,3112,3125,3130,3139,3144,3151,3155,3160,3161,3278,3283,3284,3396,3403,3407,3412,3607,3612,3617,3623,3626,3631,3642,3647,3653,3657,3662,3680,3685,3693,3702,3723,3727,3733,3747,3761,3764,3770,3774,3779,3793,3798,3806,3820,3823,3829,3833,3838,3846,3851,3854,3860,3864,3869,3877,3883,3885,4030,4177,4185,4190,4203],{"type":18,"tag":27,"props":28,"children":30},"text-title",{":t":29},"回顾下自己的十年经历",[],{"type":18,"tag":32,"props":33,"children":35},"h1",{"id":34},"总结自己-0",[36],{"type":37,"value":38},"text","总结自己 0",{"type":18,"tag":40,"props":41,"children":42},"p",{},[43],{"type":37,"value":44},"如果从 2015 那个对计算机懵懂的我来说，到 2025 年已经过了十年。可以说对计算机方面拥有了十年的兴趣。假如从 2018 我第一个漏洞算起，至今已经过了七年。再从 2020 我打算学习设计开始，已经过了五年。",{"type":18,"tag":40,"props":46,"children":47},{},[48],{"type":37,"value":49},"我觉得自己有很大的缺陷，基础不是特别牢固。之前做全栈的时候就有朋友指出我的基础不是特别好，最常说的话就是：“基础不牢，地动山摇”。做出的项目只是看起来很不错，但如果深挖细节，性能的处理就有一小部分的问题。虽然我总以 \"安全爱好者\" 作为 title，但我貌似并没有发现过比较知名且威胁较大的漏洞。",{"type":18,"tag":40,"props":51,"children":52},{},[53],{"type":37,"value":54},"更不用说什么 EDUSRC、MSRC、TSRC 这些了，仅仅是公益 SRC 和 CNVD 以及 Hackerone 这些，我所发现到的或提交的更多是大佬吃剩的边角料，甚至是不屑一顾的。但我之前缺奉为瑰宝，以筑起我那脆弱且不堪一击的自信。",{"type":18,"tag":40,"props":56,"children":57},{},[58],{"type":37,"value":59},"我还是比较庆幸自己无论做什么起码都能有一点成就的。虽然这个成就不高，但足以出去找个班上不至于饿死。做设计会有很多朋友支援下我;做安全拿到了漏洞赏金（虽然不多）;做全栈起码能混到小公司 offer；做舆情分析的时候，能被专业的人发现，引导我继续做下去。所以我还是比较幸运的，起码有点东西，虽然不多。",{"type":18,"tag":40,"props":61,"children":62},{},[63],{"type":37,"value":64},"看完这本书后，我觉得是时候筹备下我的代表作了。因为之前很多人觉得我是臭做设计的，甚至还有人说我是个臭美工！完全无视掉了我全栈和安全架构方面的才华。所以在这之后，我会筹备一个全栈的代表作；另一个是安全架构的代表作。至于设计的代表作已经有了，再往后无非是作品。我觉得代表作这个东西首先是能给人用的，其次才是给人看的；这样说服力大一点。",{"type":18,"tag":40,"props":66,"children":67},{},[68],{"type":37,"value":69},"之所以看这本书。首先是我觉得自己 Code 方面还是比较有问题，写 Code 总是很磨叽，和那种一写 code 就是写一天的有很大的差距。其次是我承认是被这本书的标题所吸引，作者懂不懂语言不重要，但他一定懂营销。我还不知道这本书有没有被 Percipio 收入，反正我 ACM 会员资格是到期了。这里我想吐槽下 ACM 的续费规则，我有钱的时候是想提前续费的，但 ACM 只能是快过期的时候才能续费。等真快过期的时候，我反而没钱续费了。",{"type":18,"tag":40,"props":71,"children":72},{},[73,75,84],{"type":37,"value":74},"无奈只能找盗版 PDF 来看。这里强烈推荐 ",{"type":18,"tag":76,"props":77,"children":81},"a",{"href":78,"rel":79},"https://skim-app.sourceforge.io/",[80],"nofollow",[82],{"type":37,"value":83},"Skip",{"type":37,"value":85}," 我觉得作为一款 PDF 阅读器来说，做到了快、文字能复制、复制的文字和 PDF 内容是一样的这种难度比较高的水准。甚至还是开源的，简直真的是太伟大了。我用过比较多的 PDF 阅读器，比如 Adobe Acrobat、PDF Expert。甚至是 福昕 PDF ，WPS PDF，给我的感觉都是卡顿还有比较大的复制问题，就是复制的文字和 PDF 里面的文字不一样。",{"type":18,"tag":40,"props":87,"children":88},{},[89],{"type":37,"value":90},"和 Chrome 等浏览器自带的 PDF 阅读器比我认为无非是多了个签名和画线、笔记类的扩充。忘记了阅读的这第一要素，特别是像我这种 English 比较差需要 Copy 文字翻译的，比较不由好。所以对于 Skip 我是强烈推荐的。",{"type":18,"tag":92,"props":93,"children":94},"hr",{},[],{"type":18,"tag":27,"props":96,"children":98},{":t":97},"作者致谢",[],{"type":18,"tag":32,"props":100,"children":102},{"id":101},"致谢-2",[103],{"type":37,"value":104},"致谢 2",{"type":18,"tag":40,"props":106,"children":107},{},[108],{"type":37,"value":109},"又到了一个非常具有代表性的篇幅，也就是：“What Readers Are Saying About Seven Languages in Seven Weeks” 你会看到国内那种类似 xxx 专家，xxx 公司 xxx 总监 xxx 团队 xxx 实验室对某本书的友情肯定和推荐。你别说你还真别说，如果这本书讲的是思维逻辑和拆解，那确实是很不错的。但如果是技术性的，那可能从 2010 年发售至今 2025 年历经十多年的发展，技术也可能会淘汰，语法可能会变，但逻辑和思维，依然是那套惯式。",{"type":18,"tag":40,"props":111,"children":112},{},[113],{"type":37,"value":114},"在这本书的前言中，作者透露出在 2009~2010 的时间段经历了很多人生的体验。例如他那 40 多岁的弟弟经历了心脏搭桥手术；三月底，他的妹妹确诊的乳腺癌；同月，他的母亲确诊晚期癌症。短短几天就去世了。",{"type":18,"tag":40,"props":116,"children":117},{},[118],{"type":37,"value":119},"在这期间内，作者虽然伤心欲绝。但他回想起母亲的点点滴滴，与母亲的每次相处，特别是在作者离家前上了母亲的几节美术课，虽然作者的画很糟糕。但母亲总能将破碎不堪的画幅玩就回来成为一件精美的艺术作品。这需要天赋和经验才能将一副处在崩溃边缘的画作挽救回来。",{"type":18,"tag":40,"props":121,"children":122},{},[123],{"type":37,"value":124},"不知你是否接触过绘画、美术。在我初中最后一年时，我因成绩垫底转到了美术班，我比较遗憾没有接触到绘画的全过程。",{"type":18,"tag":126,"props":127,"children":130},"img-tip",{"text":128,"url":129},"绘画这门艺术，你需要经历过前期的 \u003Cb>构图、草稿、描边、上色、光影\u003C/b> 如果你是素描类的作品，还需要经历前期的封边到最后将美纹纸胶带撕下的过程。","08/1.jpg",[],{"type":18,"tag":40,"props":132,"children":133},{},[134],{"type":37,"value":135},"在作画前期，你需要构思好要画什么，然后通过一些技巧完成构图。比如透视、人体结构等。然后就是用铅笔打草稿，打草稿的过程要求一笔带过，如果不能一笔，那就需要勤加练习。所以在美术课中你会看到一开始要求画线，无论板绘还是素描都是这样。",{"type":18,"tag":137,"props":138,"children":139},"text-tip",{},[140],{"type":18,"tag":40,"props":141,"children":142},{},[143],{"type":37,"value":144},"美术一般讲究人较多，水彩纸要用 Arches、素描纸要用 Canson、铅笔要用 Marie's，高级点的铅笔还有 Derwent。水彩颜料要用 Winsor & Newton、白夜，一张不起眼的纸每张也许都是几块钱的。",{"type":18,"tag":40,"props":146,"children":147},{},[148],{"type":37,"value":149},"学会画线后，就需要学会光影。光的照射范围和影子，在素描中，只有黑色和白色，因此需要用到擦纸笔甚至可塑橡皮来实现。当然有些功力比较深的喜欢用手进行擦来延续黑色。",{"type":18,"tag":40,"props":151,"children":152},{},[153],{"type":37,"value":154},"如果你是走那种水彩、或者板绘，数字传媒的。可能会经历构图、草稿、描边的这个过程。然后就是上色、光影的应用。所以这个阶段，就和开发很类似。前期实现一个功能，然后用一个简陋的 GUi 进行交互。后期再将 GUi 进行美化和布局的排列。那么恭喜你，你已经成为了一个优秀的 Web 开发工程师，俗称前端。",{"type":18,"tag":40,"props":156,"children":157},{},[158],{"type":37,"value":159},"但对于后端，更多的是 code 和 code 之间功能的划分，每个 code 负责不同的功能，最后连点成线，打通 API 和 GUI 之间的联系。组成一个能跑的 base 或 GUI 程序，或者输出一个接口作为 API。那么恭喜你，你成为了软件开发工程师或后端工程师。",{"type":18,"tag":40,"props":161,"children":162},{},[163],{"type":37,"value":164},"一个简简单单的前言，就透露出作者对于软件设计和软件工程的功底。即使过了十多年，这套逻辑和拆解也亦然可以套在现代软件工程中，如果读者理解过 MVC 架构，那简直就是异曲同工。",{"type":18,"tag":137,"props":166,"children":167},{},[168],{"type":18,"tag":40,"props":169,"children":170},{},[171],{"type":37,"value":172},"When I told my mother that I would dedicate this book to her, she\nsaid that she would like that, but she had nothing to do with com-\nputers. That is true enough. The very thought of Windows would leave\nher helpless. But Mom, you have had everything to do with me. Your\nwell-timed words of encouragement inspired me, your love of creativity\nshaped me, and your enthusiasm and love of life guide me even now.\nAs I think about these experiences, I can’t help but feel a little better\nand a little stronger because I, too, am a canvas shaped by the master.\nThis book is dedicated with love to Lynda Lyle Tate, 1936–2010.",{"type":18,"tag":40,"props":174,"children":175},{},[176],{"type":37,"value":177},"所以在前沿的结尾，作者说母亲对作者的影响很大。这无关他的目前连 Windows 都不会用，而是传授给了儿子拆解的艺术。看一个产品如果从成品看肯定是高攀不起的，但如果一步一步的拆解，一个一个的功能实现，就会发现也不是那么的特别高攀不起。",{"type":18,"tag":92,"props":179,"children":180},{},[],{"type":18,"tag":27,"props":182,"children":184},{":t":183},"作者的致谢",[],{"type":18,"tag":186,"props":187,"children":189},"h2",{"id":188},"ruby简洁灵活面向对象-1",[190],{"type":37,"value":191},"Ruby:简洁，灵活，面向对象 1",{"type":18,"tag":40,"props":193,"children":194},{},[195],{"type":37,"value":196},"在致谢阶段，作者展示出了这本书的含金量，甚至比开篇那几位挂名推荐的还重量级。首先映入眼帘的是 Ruby community：",{"type":18,"tag":137,"props":198,"children":199},{},[200],{"type":18,"tag":40,"props":201,"children":202},{},[203],{"type":37,"value":204},"*相信能在 Wikipedia 中留名的实力。",{"type":18,"tag":206,"props":207,"children":208},"ol",{},[209,222,243,264],{"type":18,"tag":210,"props":211,"children":212},"li",{},[213,220],{"type":18,"tag":76,"props":214,"children":217},{"href":215,"rel":216},"https://ja.wikipedia.org/wiki/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D",[80],[218],{"type":37,"value":219},"松本行弘(Matz)",{"type":37,"value":221}," 他最著名的是 Ruby 编程语言及其原始参考实现 Matz 的 Ruby 解释器的首席设计师；",{"type":18,"tag":210,"props":223,"children":224},{},[225,232,234,241],{"type":18,"tag":76,"props":226,"children":229},{"href":227,"rel":228},"https://github.com/headius",[80],[230],{"type":37,"value":231},"Charles Nutter",{"type":37,"value":233},": ",{"type":18,"tag":76,"props":235,"children":238},{"href":236,"rel":237},"https://en.wikipedia.org/wiki/JRuby",[80],[239],{"type":37,"value":240},"Jruby",{"type":37,"value":242}," 的作者之一，能在 Java 和 Ruby 代码之间进行完全双向访问（类似于 Python 语言的 Jython ）。",{"type":18,"tag":210,"props":244,"children":245},{},[246,253,255,262],{"type":18,"tag":76,"props":247,"children":250},{"href":248,"rel":249},"https://github.com/evanphx",[80],[251],{"type":37,"value":252},"Evan Phoenix",{"type":37,"value":254}," : ",{"type":18,"tag":76,"props":256,"children":259},{"href":257,"rel":258},"https://en.wikipedia.org/wiki/Rubinius",[80],[260],{"type":37,"value":261},"Rubinius",{"type":37,"value":263}," 的作者；旨在 “为运行 Ruby 代码提供丰富、高性能的环境”",{"type":18,"tag":210,"props":265,"children":266},{},[267,274],{"type":18,"tag":76,"props":268,"children":271},{"href":269,"rel":270},"https://en.wikipedia.org/wiki/Tim_Bray",[80],[272],{"type":37,"value":273},"Tim Bray",{"type":37,"value":275},": 原始 XML 规范的共同作者之一;",{"type":18,"tag":40,"props":277,"children":278},{},[279],{"type":37,"value":280},"Ruby 以完全面向对象、可读性和简洁性、灵活性而知名。例如灵活的语法与动态特性：",{"type":18,"tag":282,"props":283,"children":285},"pre",{"code":284},"class Greeter\n  def initialize(name)\n    @name = name.capitalize\n  end\nend\n\n# 动态添加方法\nGreeter.define_method(:greet) do\n  \"Hello, #{@name}!\"\nend\n\ng = Greeter.new(\"ruby\")\nputs g.greet\n# 输出：Hello, Ruby!\n",[286],{"type":18,"tag":287,"props":288,"children":289},"code",{"__ignoreMap":8},[290],{"type":37,"value":284},{"type":18,"tag":40,"props":292,"children":293},{},[294,296,302],{"type":37,"value":295},"但看输出 ",{"type":18,"tag":287,"props":297,"children":299},{"className":298},[],[300],{"type":37,"value":301},"Hello, Ruby!",{"type":37,"value":303}," 的这个过程就感觉元编程也是 ruby 的特点之一。",{"type":18,"tag":40,"props":305,"children":306},{},[307,309,316],{"type":37,"value":308},"我之前浏览过 ",{"type":18,"tag":76,"props":310,"children":313},{"href":311,"rel":312},"https://ruby-china.org/",[80],[314],{"type":37,"value":315},"Ruby China",{"type":37,"value":317},"，那时候我有一个对 Ruby 的问题。但 Ruby China community 有一个会员限制。注册完需要三个月后才能发帖或发消息，结果就是一天后我的问题被我自己解决了，之后我就再也没有浏览过这个社区。",{"type":18,"tag":92,"props":319,"children":320},{},[],{"type":18,"tag":186,"props":322,"children":324},{"id":323},"io更好的理解-1",[325],{"type":37,"value":326},"Io:更好的理解 1",{"type":18,"tag":27,"props":328,"children":331},{":t":329,"type":330},"IO：更好的理解语言","2",[],{"type":18,"tag":40,"props":333,"children":334},{},[335],{"type":37,"value":336},"接下来的就是 Io community, 并不是信息学奥林匹克竞赛 (英语：Olympiad in Informatics，简称：OI) 的那个 IO。而是 Io Programming Language：",{"type":18,"tag":206,"props":338,"children":339},{},[340,359],{"type":18,"tag":210,"props":341,"children":342},{},[343,350,351,357],{"type":18,"tag":76,"props":344,"children":347},{"href":345,"rel":346},"https://github.com/jeremytregunna",[80],[348],{"type":37,"value":349},"Jeremy Tregunna",{"type":37,"value":233},{"type":18,"tag":76,"props":352,"children":354},{"href":345,"rel":353},[80],[355],{"type":37,"value":356},"ioLang",{"type":37,"value":358}," 的作者之一;Io 的目标是探索概念统一和动态语言，因此权衡往往倾向于简单性和灵活性而不是性能。",{"type":18,"tag":210,"props":360,"children":361},{},[362,369],{"type":18,"tag":76,"props":363,"children":366},{"href":364,"rel":365},"https://github.com/stevedekorte",[80],[367],{"type":37,"value":368},"Steve Dekorte",{"type":37,"value":370},": Iolang 的作者之一；Iolang 于 2002 年创建，当时他试图用他的语言 Cel 来帮助朋友 Dru Nelson。他发现自己确实不太了解语言的工作原理，并开始编写一种小型语言来更好地理解问题。(ps: 我什么时候才能拥有这样的好朋友)",{"type":18,"tag":40,"props":372,"children":373},{},[374],{"type":37,"value":375},"光从描述，我已经对 Iolang 开始有兴趣了，特别句尾处的: \"You captured the imagination of the beta readers and cre-\nated the favorite language of many of them.(你激发并测试了读者的想象力，同时创造了许多人最喜欢的语言。)\"",{"type":18,"tag":40,"props":377,"children":378},{},[379],{"type":37,"value":380},"Iolang 作为动态语言，在类型阶段就比较宽松，比较灵活，例如:",{"type":18,"tag":282,"props":382,"children":384},{"code":383},"x = 42        # 整数\nx = \"Hello\"   # 重新赋值为字符串\n",[385],{"type":18,"tag":287,"props":386,"children":387},{"__ignoreMap":8},[388],{"type":37,"value":383},{"type":18,"tag":40,"props":390,"children":391},{},[392],{"type":37,"value":393},"而静态语言呢，类似 Typescript 这种类型比较强硬的：",{"type":18,"tag":282,"props":395,"children":397},{"code":396},"let x: number = 42;\nx = \"Hello\"; // 编译错误：类型不匹配\n",[398],{"type":18,"tag":287,"props":399,"children":400},{"__ignoreMap":8},[401],{"type":37,"value":396},{"type":18,"tag":40,"props":403,"children":404},{},[405],{"type":37,"value":406},"当然他们各具特点，灵活性、性能各有千秋，适应的项目需求也不同，有的适合大型的，多人合作开发，有的适合写个脚本或前期功能论证阶段的原型设计。动态语言的刻板印象就是 易上手、Code 简洁、类型宽松、快速开发、运行时发现等作为优点。我们列举几个常见的静态和动态语言：",{"type":37,"value":408},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":411,"children":412},"table",{},[413,432],{"type":18,"tag":414,"props":415,"children":416},"thead",{},[417],{"type":18,"tag":418,"props":419,"children":420},"tr",{},[421,427],{"type":18,"tag":422,"props":423,"children":424},"th",{},[425],{"type":37,"value":426},"动态语言",{"type":18,"tag":422,"props":428,"children":429},{},[430],{"type":37,"value":431},"静态语言",{"type":18,"tag":433,"props":434,"children":435},"tbody",{},[436,450,463,476,489,502],{"type":18,"tag":418,"props":437,"children":438},{},[439,445],{"type":18,"tag":440,"props":441,"children":442},"td",{},[443],{"type":37,"value":444},"Python",{"type":18,"tag":440,"props":446,"children":447},{},[448],{"type":37,"value":449},"C/C++",{"type":18,"tag":418,"props":451,"children":452},{},[453,458],{"type":18,"tag":440,"props":454,"children":455},{},[456],{"type":37,"value":457},"Ruby",{"type":18,"tag":440,"props":459,"children":460},{},[461],{"type":37,"value":462},"Java",{"type":18,"tag":418,"props":464,"children":465},{},[466,471],{"type":18,"tag":440,"props":467,"children":468},{},[469],{"type":37,"value":470},"JavaScript",{"type":18,"tag":440,"props":472,"children":473},{},[474],{"type":37,"value":475},"Go",{"type":18,"tag":418,"props":477,"children":478},{},[479,484],{"type":18,"tag":440,"props":480,"children":481},{},[482],{"type":37,"value":483},"PHP",{"type":18,"tag":440,"props":485,"children":486},{},[487],{"type":37,"value":488},"TypeScript",{"type":18,"tag":418,"props":490,"children":491},{},[492,497],{"type":18,"tag":440,"props":493,"children":494},{},[495],{"type":37,"value":496},"Lua",{"type":18,"tag":440,"props":498,"children":499},{},[500],{"type":37,"value":501},"Rust",{"type":18,"tag":418,"props":503,"children":504},{},[505,510],{"type":18,"tag":440,"props":506,"children":507},{},[508],{"type":37,"value":509},"Io",{"type":18,"tag":440,"props":511,"children":512},{},[513],{"type":37,"value":514},"Swift",{"type":18,"tag":92,"props":516,"children":517},{},[],{"type":18,"tag":186,"props":519,"children":521},{"id":520},"prolog逻辑编程-1",[522],{"type":37,"value":523},"Prolog:逻辑编程 1",{"type":18,"tag":27,"props":525,"children":527},{":t":526,"type":330},"Prolog:逻辑编程",[],{"type":18,"tag":40,"props":529,"children":530},{},[531,533,540],{"type":37,"value":532},"再然后就是 ",{"type":18,"tag":76,"props":534,"children":537},{"href":535,"rel":536},"https://en.wikipedia.org/wiki/Prolog",[80],[538],{"type":37,"value":539},"Prolog community(Programming in Logic community)",{"type":37,"value":541},"，这是一种逻辑编程语言。这种类型的我还没有接触过，他更像是数学中的逻辑推理。他的基础是一阶逻辑(First-order logic) 其核心的写法和经常接触到的语言有很大的不同。他的语法例如：",{"type":18,"tag":282,"props":543,"children":545},{"code":544},"grandparent(X, Z) :- parent(X, Y), parent(Y, Z).\n父母关系：如果 X 是 Y 的父母，且 Y 是 Z 的父母，则 X 是 Z 的祖父母。\n",[546],{"type":18,"tag":287,"props":547,"children":548},{"__ignoreMap":8},[549],{"type":37,"value":544},{"type":18,"tag":40,"props":551,"children":552},{},[553,555,562,564,571],{"type":37,"value":554},"在一些大学中，会将 Prolog 放到",{"type":18,"tag":76,"props":556,"children":559},{"href":557,"rel":558},"https://en.wikipedia.org/wiki/Logic_programming",[80],[560],{"type":37,"value":561},"逻辑编程课",{"type":37,"value":563}," 中。如果很不幸你没有上过（ps: 我也没上过）那可以蹭一下 The University of Texas at Dallas(德克萨斯大学达拉斯分校) 的课件 ",{"type":18,"tag":76,"props":565,"children":568},{"href":566,"rel":567},"https://personal.utdallas.edu/~hamlen/cs6371sp14/lecture21.pdf",[80],[569],{"type":37,"value":570},"Logic Programming:CS 6371: Advanced Programming Languages",{"type":37,"value":572},"；如果要介绍 Prolong 那就需要介绍一阶逻辑和逻辑连接词、谓词逻辑、量词等。所以我会将这部分的介绍放到 Prolog 那一章节中，这里我们就介绍作者致谢的大佬。",{"type":18,"tag":206,"props":574,"children":575},{},[576,597],{"type":18,"tag":210,"props":577,"children":578},{},[579,586,588,595],{"type":18,"tag":76,"props":580,"children":583},{"href":581,"rel":582},"https://aws.amazon.com/cn/developer/community/heroes/brian-tarbox/",[80],[584],{"type":37,"value":585},"Brian Tarbox",{"type":37,"value":587},": 通过 Prolong 进行建模，用于模拟和分析海豚在实验中的思维模式，非常有趣。可以前往他的个人 ",{"type":18,"tag":76,"props":589,"children":592},{"href":590,"rel":591},"https://briantarbox.com/",[80],[593],{"type":37,"value":594},"blog",{"type":37,"value":596}," 了解更多",{"type":18,"tag":210,"props":598,"children":599},{},[600,607,608,615,617,624],{"type":18,"tag":76,"props":601,"children":604},{"href":602,"rel":603},"https://en.wikipedia.org/wiki/Joe_Armstrong_(programmer)",[80],[605],{"type":37,"value":606},"Joe Armstrong",{"type":37,"value":233},{"type":18,"tag":76,"props":609,"children":612},{"href":610,"rel":611},"https://en.wikipedia.org/wiki/Erlang_(programming_language)",[80],[613],{"type":37,"value":614},"Erlang",{"type":37,"value":616}," 设计者之一。这是一种并发、分布式、容错的编程语言，",{"type":18,"tag":76,"props":618,"children":621},{"href":619,"rel":620},"https://en.wikipedia.org/wiki/Elixir_(programming_language)",[80],[622],{"type":37,"value":623},"Elixir",{"type":37,"value":625}," 就是构建在 Erlang 之上。",{"type":18,"tag":40,"props":627,"children":628},{},[629],{"type":37,"value":630},"作为以分布式、多线程而闻名的语言。“Let it crash（让它崩溃）” 是 Erlang 语言的一种设计哲学。当一个进程发生错误或异常时，不必尝试捕获和处理错误，而是让该进程崩溃，然后通过其他机制（如重启或恢复）来恢复系统的正常运行。",{"type":18,"tag":92,"props":632,"children":633},{},[],{"type":18,"tag":186,"props":635,"children":637},{"id":636},"scala解决对java批评-1",[638],{"type":37,"value":639},"Scala:解决对Java批评 1",{"type":18,"tag":27,"props":641,"children":643},{":t":642,"type":330},"Scala：为了解决对 Java 的批评",[],{"type":18,"tag":40,"props":645,"children":646},{},[647],{"type":37,"value":648},"接下来轮到了 Scala community 登场。该语言旨在解决 对 Java 的批评，一句话就以证明其含金量。他是一种 强大的静态类型高级通用编程语言，支持面向对象编程和函数式编程。",{"type":18,"tag":282,"props":650,"children":652},{"code":651},"import java.time.LocalDate as Date\nimport Payment.*\n\nval name = \"Bib Fortuna\"\nval digits = 1983_0525_0000_0000L\nval expires = Date.of(1983, 5, 25)\n\nenum Payment:\n  case Card(name: String, digits: Long, expires: Date)\n  case PayPal(email: String)\n\ndef process(kind: Payment) = kind match\n  case Card(name, digits, expires) =>\n    s\"Processing credit card $name, $digits, $expires\"\n  case PayPal(email) =>\n    s\"Processing PayPal account $email\"\n\nprocess(Card(name, digits, expires))\n",[653],{"type":18,"tag":287,"props":654,"children":655},{"__ignoreMap":8},[656],{"type":37,"value":651},{"type":18,"tag":206,"props":658,"children":659},{},[660,681],{"type":18,"tag":210,"props":661,"children":662},{},[663,670,672,679],{"type":18,"tag":76,"props":664,"children":667},{"href":665,"rel":666},"https://dev.java/author/VenkatSubramaniam/",[80],[668],{"type":37,"value":669},"Venkat Subramaniam ",{"type":37,"value":671},": ACM 高级会员，",{"type":18,"tag":76,"props":673,"children":676},{"href":674,"rel":675},"https://pragprog.com/titles/vsscala2/pragmatic-scala/",[80],[677],{"type":37,"value":678},"Programming Scala",{"type":37,"value":680}," 一书作者。",{"type":18,"tag":210,"props":682,"children":683},{},[684,691],{"type":18,"tag":76,"props":685,"children":688},{"href":686,"rel":687},"https://en.wikipedia.org/wiki/Martin_Odersky",[80],[689],{"type":37,"value":690},"Martin Odersky",{"type":37,"value":692},": 他设计了 Scala。",{"type":18,"tag":92,"props":694,"children":695},{},[],{"type":18,"tag":186,"props":697,"children":699},{"id":698},"clojure不变数据结构-1",[700],{"type":37,"value":701},"Clojure:不变数据结构 1",{"type":18,"tag":27,"props":703,"children":705},{":t":704,"type":330},"Clojure: 不可变数据结构",[],{"type":18,"tag":40,"props":707,"children":708},{},[709,711,718,720,727],{"type":37,"value":710},"还有 ",{"type":18,"tag":76,"props":712,"children":715},{"href":713,"rel":714},"https://en.wikipedia.org/wiki/Clojure",[80],[716],{"type":37,"value":717},"Clojure community",{"type":37,"value":719},"。Clojure 是 ",{"type":18,"tag":76,"props":721,"children":724},{"href":722,"rel":723},"https://en.wikipedia.org/wiki/Lisp_(programming_language)",[80],[725],{"type":37,"value":726},"lisp",{"type":37,"value":728}," 家族的一部分，或者说他是 Lisp 的现代化变体。他继承了 lisp 的特性。同时在并在并发和不变数据结构上做出了优化（Lisp 是可变的）",{"type":18,"tag":40,"props":730,"children":731},{},[732,734,741],{"type":37,"value":733},"Lisp 发明和推广的 ",{"type":18,"tag":76,"props":735,"children":738},{"href":736,"rel":737},"https://en.wikipedia.org/wiki/S-expression",[80],[739],{"type":37,"value":740},"S 表达式(S-expression)",{"type":37,"value":742}," 还是很有特点的，例如一个计算式子：",{"type":18,"tag":282,"props":744,"children":746},{"code":745},"(* (+ 1 2) (+ 3 4))\n\n  + 1 2：表示加法操作，等于 3。\n  + 3 4：表示加法操作，等于 7。\n  *：表示乘法操作，将 3 和 7 相乘，结果是 21。\n  \n  如果是 Python 式子就是：\n\nresult = (1 + 2) * (3 + 4)\nprint(result)\n",[747],{"type":18,"tag":287,"props":748,"children":749},{"__ignoreMap":8},[750],{"type":37,"value":745},{"type":18,"tag":40,"props":752,"children":753},{},[754,756,763,765],{"type":37,"value":755},"到这里可能 Python 的式子比 S-expression 更接近传统的数学表达式。如果看到这那就可能认为 Lisp 还是不行，不如去学 Python。但 Lisp 还有一个特点是 ",{"type":18,"tag":76,"props":757,"children":760},{"href":758,"rel":759},"https://en.wikipedia.org/wiki/Metaprogramming#:~:text=Metaprogramming%20is%20a%20computer%20programming,even%20modify%20itself%2C%20while%20running.",[80],[761],{"type":37,"value":762},"元编程（Metaprogramming）能力",{"type":37,"value":764}," 指编写可以操作、生成、或修改程序代码的程序的能力。也就是 ",{"type":18,"tag":766,"props":767,"children":768},"strong",{},[769],{"type":37,"value":770},"——把代码当作数据来处理，从而实现动态的行为和更高的灵活性。",{"type":18,"tag":282,"props":772,"children":774},{"code":773},";; 定义一个宏，用来生成“加法函数”\n(defmacro make-adder (n)\n  `(lambda (x) (+ x ,n)))\n\n;; 使用宏生成一个加法函数\n(defparameter add-five (make-adder 5))\n\n;; 测试生成的函数\n(format t \"Result: ~A~%\" (funcall add-five 10))  ; 输出 \"Result: 15\"\n",[775],{"type":18,"tag":287,"props":776,"children":777},{"__ignoreMap":8},[778],{"type":37,"value":773},{"type":18,"tag":206,"props":780,"children":781},{},[782,787,792],{"type":18,"tag":210,"props":783,"children":784},{},[785],{"type":37,"value":786},"make-adder 是一个宏，它接收参数 n，并返回一个 新的函数代码：(lambda (x) (+ x ,n))。注意，这里返回的是代码，而不是一个值。",{"type":18,"tag":210,"props":788,"children":789},{},[790],{"type":37,"value":791},"宏的作用是在 编译时生成或修改代码，而不是像 Python 闭包那样只是生成行为。",{"type":18,"tag":210,"props":793,"children":794},{},[795],{"type":37,"value":796},"宏展开时，(make-adder 5) 会变成 (lambda (x) (+ x 5))，并且这个生成的函数将在运行时执行。",{"type":18,"tag":40,"props":798,"children":799},{},[800,802,808],{"type":37,"value":801},"在上面这个例子中，",{"type":18,"tag":287,"props":803,"children":805},{"className":804},[],[806],{"type":37,"value":807},"宏的定义实际上是操作代码的模板，生成新的 Code。",{"type":37,"value":809}," 如果是 Python，那么可以通过函数来生成一个加法函数：",{"type":18,"tag":282,"props":811,"children":813},{"code":812},"def make_adder(n):\n    return lambda x: x + n\n\n# 使用函数生成一个加法函数\nadd_five = make_adder(5)\n\n# 测试生成的函数\nprint(f\"Result: {add_five(10)}\")  # 输出 \"Result: 15\"\n",[814],{"type":18,"tag":287,"props":815,"children":816},{"__ignoreMap":8},[817],{"type":37,"value":812},{"type":18,"tag":206,"props":819,"children":820},{},[821,826,831],{"type":18,"tag":210,"props":822,"children":823},{},[824],{"type":37,"value":825},"make_adder 函数返回了一个新的函数（lambda x: x + n）。",{"type":18,"tag":210,"props":827,"children":828},{},[829],{"type":37,"value":830},"n 被捕获在闭包中，生成了一个 “动态的行为”：返回的函数始终会把输入值 x 加上 n。",{"type":18,"tag":210,"props":832,"children":833},{},[834],{"type":37,"value":835},"这只是动态生成了一个函数，而 没有生成或修改代码。我们只是定义了一个行为，而不是在代码层面进行操作。",{"type":18,"tag":40,"props":837,"children":838},{},[839],{"type":37,"value":840},"Lisp、Clojure、Scheme 等语言通过其 S-expression 和宏系统提供强大的元编程能力。特点是代码即数据（homoiconicity），天然支持元编程；而 Python 通过反射和动态代码生成支持元编程，他的运行时动态性强，支持动态类型，如果要展示不可变结构，那下面的例子就很贴合：",{"type":18,"tag":282,"props":842,"children":844},{"code":843},"(defn transform [person]\n   (update (assoc person :hair-color :gray) :age inc))\n\n(transform {:name \"Socrates\", :age 39})\n;; => {:name \"Socrates\", :age 40, :hair-color :gray}\n",[845],{"type":18,"tag":287,"props":846,"children":847},{"__ignoreMap":8},[848],{"type":37,"value":843},{"type":18,"tag":40,"props":850,"children":851},{},[852,854,860,862,868,870,875],{"type":37,"value":853},"最后输出的还是 40，因为在这个过程中 ",{"type":18,"tag":287,"props":855,"children":857},{"className":856},[],[858],{"type":37,"value":859},"age",{"type":37,"value":861}," 通过 ",{"type":18,"tag":287,"props":863,"children":865},{"className":864},[],[866],{"type":37,"value":867},"inc",{"type":37,"value":869}," 函数进行了递增操作，所以是 40 而不是 39。这展示了 Clojure 的不可变结构的特性。所以，我们花了几个部分了解 Lisp 和 Clojure，不仅是处于了解，而是对 ",{"type":18,"tag":766,"props":871,"children":872},{},[873],{"type":37,"value":874},"一个具有悠久历史和独特的、完全括号的前缀表示法的编程语言家族。",{"type":37,"value":876}," 的敬意。",{"type":18,"tag":206,"props":878,"children":879},{},[880,900],{"type":18,"tag":210,"props":881,"children":882},{},[883,890,892,899],{"type":18,"tag":76,"props":884,"children":887},{"href":885,"rel":886},"https://github.com/stuarthalloway",[80],[888],{"type":37,"value":889},"Stuart Halloway",{"type":37,"value":891},": Clojure 协作者; ",{"type":18,"tag":76,"props":893,"children":896},{"href":894,"rel":895},"https://pragprog.com/titles/shcloj3/programming-clojure-third-edition/",[80],[897],{"type":37,"value":898},"Programming Clojure",{"type":37,"value":680},{"type":18,"tag":210,"props":901,"children":902},{},[903,910],{"type":18,"tag":76,"props":904,"children":907},{"href":905,"rel":906},"https://en.wikipedia.org/wiki/Rich_Hickey",[80],[908],{"type":37,"value":909},"Rich Hickey ",{"type":37,"value":911},": Clojure 创建者。",{"type":18,"tag":92,"props":913,"children":914},{},[],{"type":18,"tag":186,"props":916,"children":918},{"id":917},"haskell纯函数语言-1",[919],{"type":37,"value":920},"Haskell:纯函数语言 1",{"type":18,"tag":27,"props":922,"children":924},{":t":923,"type":330},"Haskell: 纯函数语言",[],{"type":18,"tag":40,"props":926,"children":927},{},[928,930,937,939,946,948,955,957,964],{"type":37,"value":929},"还还还有 ",{"type":18,"tag":76,"props":931,"children":934},{"href":932,"rel":933},"https://en.wikipedia.org/wiki/Haskell",[80],[935],{"type":37,"value":936},"Haskell community",{"type":37,"value":938},"，Haskell 专为教学、研究和工业应用而设计。以逻辑学家",{"type":18,"tag":76,"props":940,"children":943},{"href":941,"rel":942},"https://en.wikipedia.org/wiki/Haskell_Curry",[80],[944],{"type":37,"value":945},"哈斯克尔・柯里 (Haskell Curry) ",{"type":37,"value":947}," 的名字命名，他的 ",{"type":18,"tag":76,"props":949,"children":952},{"href":950,"rel":951},"https://en.wikipedia.org/wiki/Lambda_calculus",[80],[953],{"type":37,"value":954},"Lambda 演算（Lambda Calculus）",{"type":37,"value":956}," 是函数式编程的基础，以及他对 ",{"type":18,"tag":76,"props":958,"children":961},{"href":959,"rel":960},"https://en.wikipedia.org/wiki/Currying",[80],[962],{"type":37,"value":963},"Currying",{"type":37,"value":965}," 的贡献。",{"type":18,"tag":282,"props":967,"children":969},{"code":968},"•   在 Haskell 诞生之前，函数式编程语言如 Lisp、ML 等已经存在，但它们没有完全基于纯函数式的理念。\n•   Haskell 作为一门“纯函数式编程语言”，其命名体现了其与数学逻辑和 Lambda 演算的深厚联系。\n",[970],{"type":18,"tag":287,"props":971,"children":972},{"__ignoreMap":8},[973],{"type":37,"value":968},{"type":18,"tag":40,"props":975,"children":976},{},[977],{"type":37,"value":978},"所以，作为一个纯函数式的编程语言，它的式子是这样的：",{"type":18,"tag":282,"props":980,"children":982},{"code":981},"-- 纯函数：输入相同，输出总是相同\nadd :: Int -> Int -> Int\nadd x y = x + y\n\n-- 调用\nmain = print (add 3 5)  -- 输出 8\n",[983],{"type":18,"tag":287,"props":984,"children":985},{"__ignoreMap":8},[986],{"type":37,"value":981},{"type":18,"tag":40,"props":988,"children":989},{},[990],{"type":37,"value":991},"那么不是纯函数的是这样的：",{"type":18,"tag":282,"props":993,"children":995},{"code":994},"counter = 0\n\ndef increment():\n    global counter\n    counter += 1\n    return counter\n",[996],{"type":18,"tag":287,"props":997,"children":998},{"__ignoreMap":8},[999],{"type":37,"value":994},{"type":18,"tag":206,"props":1001,"children":1002},{},[1003,1024],{"type":18,"tag":210,"props":1004,"children":1005},{},[1006,1013,1015,1022],{"type":18,"tag":76,"props":1007,"children":1010},{"href":1008,"rel":1009},"https://en.wikipedia.org/wiki/Philip_Wadler",[80],[1011],{"type":37,"value":1012},"Phillip Wadler",{"type":37,"value":1014},": 创造的 ",{"type":18,"tag":76,"props":1016,"children":1019},{"href":1017,"rel":1018},"https://en.wikipedia.org/wiki/Orwell_(programming_language)",[80],[1020],{"type":37,"value":1021},"Orwell",{"type":37,"value":1023}," 被认为是 Haskell 的先驱; Haskell 设计者之一。推动了函数式编程从理论研究到实际应用的转变。",{"type":18,"tag":210,"props":1025,"children":1026},{},[1027,1034,1035,1042,1044,1051,1053,1060],{"type":18,"tag":76,"props":1028,"children":1031},{"href":1029,"rel":1030},"https://en.wikipedia.org/wiki/Simon_Peyton_Jones",[80],[1032],{"type":37,"value":1033},"Simon Peyton Jones",{"type":37,"value":233},{"type":18,"tag":76,"props":1036,"children":1039},{"href":1037,"rel":1038},"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler",[80],[1040],{"type":37,"value":1041},"GHC(The Glasgow Haskell Compiler, Haskell 编译器) ",{"type":37,"value":1043}," 开发者之一，他推动了 ",{"type":18,"tag":76,"props":1045,"children":1048},{"href":1046,"rel":1047},"https://en.wikipedia.org/wiki/Type_inference",[80],[1049],{"type":37,"value":1050},"类型推导",{"type":37,"value":1052}," 和 ",{"type":18,"tag":76,"props":1054,"children":1057},{"href":1055,"rel":1056},"https://en.wikipedia.org/wiki/Type_safety",[80],[1058],{"type":37,"value":1059},"类型安全",{"type":37,"value":1061}," 的概念",{"type":18,"tag":92,"props":1063,"children":1064},{},[],{"type":18,"tag":32,"props":1066,"children":1068},{"id":1067},"前言-3",[1069],{"type":37,"value":1070},"前言 3",{"type":18,"tag":186,"props":1072,"children":1074},{"id":1073},"学习的快乐-1",[1075],{"type":37,"value":1076},"学习的快乐 1",{"type":18,"tag":27,"props":1078,"children":1080},{":t":1079},"前言",[],{"type":18,"tag":40,"props":1082,"children":1083},{},[1084],{"type":37,"value":1085},"在本书的开篇，作者引用了 'How Proust Can Make You a Better Programmer' 直译为 《普鲁斯特如何让你成为更好的程序员》作者是 Erlang 的创建者 Joe Armstrong。这里有个小彩蛋，Marcel Proust 就是 'A la\nrecherche du temps perdu.' 的作者。也就是说出色的 Coder 需要具备耐心、有创造力、抽象思维、细节。这么表达还是比较抽象。",{"type":18,"tag":40,"props":1087,"children":1088},{},[1089],{"type":37,"value":1090},"对于耐心、思考我们可以以一个 Bug 举例，假如你碰到了一个 Bug，少则几分钟多则几小时甚至几天。在这么个阶段中，不断的经历失败还没有放弃，还是非常难能可贵的。但如果你具备抽象思维的能力，那么可以换一个视角思考。",{"type":18,"tag":40,"props":1092,"children":1093},{},[1094],{"type":37,"value":1095},"“既然我这样实现会碰到这样的问题，那么我换一种实现思路，是不是就能避免这样的问题，有概率陷入一个更简单或比这个问题更复杂的问题呢？”",{"type":18,"tag":137,"props":1097,"children":1098},{},[1099,1104,1113,1118,1126,1131,1139,1144,1152,1157,1165,1170,1178,1183,1191,1196],{"type":18,"tag":40,"props":1100,"children":1101},{},[1102],{"type":37,"value":1103},"“The Gmail editor cannot get typographic quotes right.”",{"type":18,"tag":1105,"props":1106,"children":1107},"ul",{},[1108],{"type":18,"tag":210,"props":1109,"children":1110},{},[1111],{"type":37,"value":1112},"“Gmail 编辑器无法正确排版引号，例如：‘单引号’、“双引号””",{"type":18,"tag":40,"props":1114,"children":1115},{},[1116],{"type":37,"value":1117},"“Disgraceful,” said Margery, “the sign of an illiterate programmer and a\ndecadent culture.”",{"type":18,"tag":1105,"props":1119,"children":1120},{},[1121],{"type":18,"tag":210,"props":1122,"children":1123},{},[1124],{"type":37,"value":1125},"“可耻，”Margery 说，“这是文盲程序员和颓废文化的标志。”",{"type":18,"tag":40,"props":1127,"children":1128},{},[1129],{"type":37,"value":1130},"“What should we do about it?”",{"type":18,"tag":1105,"props":1132,"children":1133},{},[1134],{"type":18,"tag":210,"props":1135,"children":1136},{},[1137],{"type":37,"value":1138},"“我们应该怎么做？”",{"type":18,"tag":40,"props":1140,"children":1141},{},[1142],{"type":37,"value":1143},"“We must insist that the next programmer we hire has read all of ‘A la\nrecherche du temps perdu.”’",{"type":18,"tag":1105,"props":1145,"children":1146},{},[1147],{"type":18,"tag":210,"props":1148,"children":1149},{},[1150],{"type":37,"value":1151},"我们必须坚持要求我们雇用的下一个程序员阅读《追忆似水年华》的全部内容。",{"type":18,"tag":40,"props":1153,"children":1154},{},[1155],{"type":37,"value":1156},"“All seven volumes?”",{"type":18,"tag":1105,"props":1158,"children":1159},{},[1160],{"type":18,"tag":210,"props":1161,"children":1162},{},[1163],{"type":37,"value":1164},"“全部七卷？”",{"type":18,"tag":40,"props":1166,"children":1167},{},[1168],{"type":37,"value":1169},"“All seven volumes.”",{"type":18,"tag":1105,"props":1171,"children":1172},{},[1173],{"type":18,"tag":210,"props":1174,"children":1175},{},[1176],{"type":37,"value":1177},"“全部七卷。”",{"type":18,"tag":40,"props":1179,"children":1180},{},[1181],{"type":37,"value":1182},"“Will it make them better at punctuation and make them get their quotes\nright?”",{"type":18,"tag":1105,"props":1184,"children":1185},{},[1186],{"type":18,"tag":210,"props":1187,"children":1188},{},[1189],{"type":37,"value":1190},"“这会让他们更好地使用标点符号并正确引用吗？”",{"type":18,"tag":40,"props":1192,"children":1193},{},[1194],{"type":37,"value":1195},"“Not necessarily, but it will make them a better programmer. It’s a Zen\nthing....”",{"type":18,"tag":1105,"props":1197,"children":1198},{},[1199],{"type":18,"tag":210,"props":1200,"children":1201},{},[1202],{"type":37,"value":1203},"“不一定，但它会让他们成为更好的程序员。这是禅宗的事情......”",{"type":18,"tag":40,"props":1205,"children":1206},{},[1207],{"type":37,"value":1208},"这里的举例：”Gmail 编辑器无法正确排版引号，例如：‘单引号’、“双引号”“ 我觉得很大一部分原因是因为当时为了避免构造注入语句，然后又不想重构源数据所以就不渲染引号来得快些所导致的。即使现在是 2025 年，有些网站依然不允许除了 Gmail、Outlook、Yahoo、ProtonMail、Zoho 的邮箱注册账号。",{"type":18,"tag":40,"props":1210,"children":1211},{},[1212],{"type":37,"value":1213},"这种做法通常是为了减少后端 API 针对一些特殊字符的处理和过滤。有些甚至是为了解决下 OWASP TOP TEN 的注入问题，因此这么做最保险的做法就是不允许传入特殊字符，比如 ‘“/.!@#*()!$) 这种。",{"type":18,"tag":137,"props":1215,"children":1216},{},[1217,1222,1230,1235,1243,1248],{"type":18,"tag":40,"props":1218,"children":1219},{},[1220],{"type":37,"value":1221},"Learning to program is like learning to swim. No amount of theory is\na substitute for diving into the pool and flailing around in the water\ngasping for air.",{"type":18,"tag":1105,"props":1223,"children":1224},{},[1225],{"type":18,"tag":210,"props":1226,"children":1227},{},[1228],{"type":37,"value":1229},"学习编程就像学习游泳。再多的理论也无法代替跳入游泳池并在水中挣扎呼吸的感觉。",{"type":18,"tag":40,"props":1231,"children":1232},{},[1233],{"type":37,"value":1234},"The first time you sink under the water, you panic, but\nwhen you bob to the surface and gulp in some air, you feel elated.",{"type":18,"tag":1105,"props":1236,"children":1237},{},[1238],{"type":18,"tag":210,"props":1239,"children":1240},{},[1241],{"type":37,"value":1242},"第一次尝试跳入水中时，你会感到恐慌，但当你浮出水面并大口呼吸时，你会感到兴奋。",{"type":18,"tag":40,"props":1244,"children":1245},{},[1246],{"type":37,"value":1247},"You\nthink to yourself, “I can swim.” At least that’s how I felt when I learned\nto swim.",{"type":18,"tag":1105,"props":1249,"children":1250},{},[1251],{"type":18,"tag":210,"props":1252,"children":1253},{},[1254],{"type":37,"value":1255},"你会想，“我会游泳。” 至少这是我学游泳时的感觉。",{"type":18,"tag":40,"props":1257,"children":1258},{},[1259],{"type":37,"value":1260},"很多人第一次接触计算机时。其恐惧在于会不会将系统、硬件破坏掉，前期是系统环境，后期是服务器、数据库等。但经历过无数次重装系统和格式化之后，就会发现也没什么难的。于是就有了尝试的勇气，不断经历恐惧、失败，这正是 Code 所带来的体验。",{"type":18,"tag":137,"props":1262,"children":1263},{},[1264,1269,1277,1282],{"type":18,"tag":40,"props":1265,"children":1266},{},[1267],{"type":37,"value":1268},"It’s the same with programming. The first steps are the most difficult,",{"type":18,"tag":1105,"props":1270,"children":1271},{},[1272],{"type":18,"tag":210,"props":1273,"children":1274},{},[1275],{"type":37,"value":1276},"编程也一样。万事开头难，",{"type":18,"tag":40,"props":1278,"children":1279},{},[1280],{"type":37,"value":1281},"and you need a good teacher to encourage you to jump into the water.",{"type":18,"tag":1105,"props":1283,"children":1284},{},[1285],{"type":18,"tag":210,"props":1286,"children":1287},{},[1288],{"type":37,"value":1289},"你需要一个好老师来鼓励你跳入水中。",{"type":18,"tag":40,"props":1291,"children":1292},{},[1293],{"type":37,"value":1294},"Code 就像搭积木一样，如果你学习过后端相关的技术栈，例如 MVC。在未深入学习的时候，整个 Code 都显得很乱，所有功能都包含在一个文件中。动不动就是及千行几百行，但通过 MVC 这样的设计模式，一个功能就是一个文件的划分，就能很好的梳理整个项目的逻辑。Code 功能简洁明了，方便后续的维护与扩充。",{"type":18,"tag":137,"props":1296,"children":1297},{},[1298,1303,1311,1316],{"type":18,"tag":40,"props":1299,"children":1300},{},[1301],{"type":37,"value":1302},"Let’s assume that you’ve actually managed the difficult task of down-\nloading and installing the interpreter or compiler for the language you\nare interested in.",{"type":18,"tag":1105,"props":1304,"children":1305},{},[1306],{"type":18,"tag":210,"props":1307,"children":1308},{},[1309],{"type":37,"value":1310},"假设你已经完成了下载并安装你感兴趣的语言的解释器或编译器这一艰巨的任务。",{"type":18,"tag":40,"props":1312,"children":1313},{},[1314],{"type":37,"value":1315},"What should you do next? What will be your first\nprogram?",{"type":18,"tag":1105,"props":1317,"children":1318},{},[1319],{"type":18,"tag":210,"props":1320,"children":1321},{},[1322],{"type":37,"value":1323},"你下一步该做什么？你的第一个程序是什么？",{"type":18,"tag":40,"props":1325,"children":1326},{},[1327],{"type":37,"value":1328},"看到这里的时候我大概已经知道作者整本书的意图了。即 ”自信“，我个人认为自信是比较难能可贵的。特别是互联网黑社会遍地走的今天，如何树立起自信是很难的。如果你创建了一个开源项目，那衡量你的就是 Star、Fork 甚至是有多少人在用。",{"type":18,"tag":40,"props":1330,"children":1331},{},[1332],{"type":37,"value":1333},"如果出了点问题，有些人还会直接开喷。当然，这也是体验的一部分，毕竟挨骂的机会并不是谁都有的，免费打工的机会也不是什么人都行的，所以这也是一个很好的人生经历。因此如果您跨过此关，那么还会经历推广的阶段，因为 Code 厉害的大佬不一定圈子就多，所以即使 Code 再厉害，可能还没有那些比他 Code 不那么厉害的人 Star 多。",{"type":18,"tag":40,"props":1335,"children":1336},{},[1337],{"type":37,"value":1338},"如果您恰好在 CHINA，那您在未来肯定会接触到一句话：”技术哪有推广重要“。也就是：”橘生淮南则为橘，生于淮北则为枳“",{"type":18,"tag":40,"props":1340,"children":1341},{},[1342],{"type":37,"value":1343},"因此就跨入到比拼圈子和推广的阶段了，如果您是一个不善言辞、朝九晚五、循规蹈矩。没什么圈子的人，朋友就几个，那大概也就是 100+ Star。如果您混迹开源设计，各个群都是 200+，那么您大概是 1000+ Star。如果我是一个带货主播，那我会为你推荐 《被讨厌的勇气》，恰好我不是。",{"type":18,"tag":137,"props":1345,"children":1346},{},[1347,1352,1360,1365],{"type":18,"tag":40,"props":1348,"children":1349},{},[1350],{"type":37,"value":1351},"The first step in acquiring any new skill is not being able to do your own\nthing but being able to reproduce what other people have done before\nyou.",{"type":18,"tag":1105,"props":1353,"children":1354},{},[1355],{"type":18,"tag":210,"props":1356,"children":1357},{},[1358],{"type":37,"value":1359},"获得任何新技能的第一步不是能够做自己的事情，而是能够复制别人在你之前做过的事情。",{"type":18,"tag":40,"props":1361,"children":1362},{},[1363],{"type":37,"value":1364},"This is the quickest way to mastering a skill.",{"type":18,"tag":1105,"props":1366,"children":1367},{},[1368],{"type":18,"tag":210,"props":1369,"children":1370},{},[1371],{"type":37,"value":1372},"这是掌握技能最快的方法。",{"type":18,"tag":40,"props":1374,"children":1375},{},[1376],{"type":37,"value":1377},"在引库调参和生成大模型的时代，独立思考以及实现某个比较基础的功能逻辑是比较难的。大多数人都会依赖于无数个包或库来实现需要的功能，甚至不需要了解这个功能怎么实现的就可以实现其想要的。这就是我对这句话的理解，但是在一些地方还有少数人认为，Copy 开源项目改一改加一个支付页面就是自己的，才是作者的意思。",{"type":18,"tag":40,"props":1379,"children":1380},{},[1381,1383,1388],{"type":37,"value":1382},"作者在前言给出了一个很有含金量的逻辑。",{"type":18,"tag":766,"props":1384,"children":1385},{},[1386],{"type":37,"value":1387},"学习一个语言，不需要了解其基础的原理实现，先理解其语法规则。知道怎么表达即可。",{"type":37,"value":1389}," 我具有一些开发经验的读者肯定会感同身受，因为一个框架、一个语言，这一个版本是这样的写法，但过几个月、半年、一年。就会是另一个写法了，因此需要不断学习，不断花时间去适应和理解。",{"type":18,"tag":40,"props":1391,"children":1392},{},[1393],{"type":37,"value":1394},"所以一些 Coder 倡导终身学习，学 Code 可以有效的避免老年痴呆。",{"type":18,"tag":137,"props":1396,"children":1397},{},[1398,1403,1411,1416,1424,1429],{"type":18,"tag":40,"props":1399,"children":1400},{},[1401],{"type":37,"value":1402},"Each language has its own set of idioms, its strengths, and its weak-\nnesses. By learning several different programming languages, you will\nbe able to see which language is best suited to the kinds of problems\nthat interest you most.",{"type":18,"tag":1105,"props":1404,"children":1405},{},[1406],{"type":18,"tag":210,"props":1407,"children":1408},{},[1409],{"type":37,"value":1410},"每种语言都有自己的一套习语、优点和缺点。通过学习几种不同的编程语言，您将能够了解哪种语言最适合您最感兴趣的问题。",{"type":18,"tag":40,"props":1412,"children":1413},{},[1414],{"type":37,"value":1415},"Ultimately, programming is\nabout understanding, and understanding is about ideas.",{"type":18,"tag":1105,"props":1417,"children":1418},{},[1419],{"type":18,"tag":210,"props":1420,"children":1421},{},[1422],{"type":37,"value":1423},"归根结底，编程就是理解，而理解就是想法。",{"type":18,"tag":40,"props":1425,"children":1426},{},[1427],{"type":37,"value":1428},"So, exposure\nto new ideas is essential to a deeper understanding of what program-\nming is all about.",{"type":18,"tag":1105,"props":1430,"children":1431},{},[1432],{"type":18,"tag":210,"props":1433,"children":1434},{},[1435],{"type":37,"value":1436},"因此，接触新想法对于更深入地了解编程的意义至关重要。",{"type":18,"tag":92,"props":1438,"children":1439},{},[],{"type":18,"tag":186,"props":1441,"children":1443},{"id":1442},"我那一事无成且一直在学习的一生-2",[1444],{"type":37,"value":1445},"我那一事无成且一直在学习的一生 2",{"type":18,"tag":27,"props":1447,"children":1449},{":t":1448},"我那一事无成且一直在学习的一生",[],{"type":18,"tag":40,"props":1451,"children":1452},{},[1453],{"type":37,"value":1454},"让我意外的是，这本书的前言竟然不是作者自己写的。而是 Erlang 的创建者 Joe Armstrong。我认为结尾处是比较具有讽刺意味的，如果一直学习，那么就会感觉自己超级菜，从而缺少了勇气去创建、编写一个项目，甚至是与人分享的喜悦。但在 2022 年，这个现象可以解决了，因为 ChatGPT 出来了。",{"type":18,"tag":40,"props":1456,"children":1457},{},[1458],{"type":37,"value":1459},"如果你将自己的项目分享到某个群组，那个群组的人可能觉得你打广告，或者说炫耀？于是 Code 警察开始出动，不断的给你批斗拉踩甚至是网暴。如果你的抗压能力不是很强，或许就开始退群退网、Github 设置为隐私三件套走起。",{"type":18,"tag":40,"props":1461,"children":1462},{},[1463],{"type":37,"value":1464},"但你如果与 ChatGPT 分享一个项目、一个思路。TA 会先肯定你，然后提出可以优化的建议。虽然整个流程看起来很正常，属于非常理智的。但如果是几十人、几百人的群组，理智往往是那么的珍贵和稀缺，大改只有立场先行和整活、玩梗的存在。",{"type":18,"tag":137,"props":1466,"children":1467},{},[1468,1473,1481,1486,1494,1499,1507,1512,1520,1524],{"type":18,"tag":40,"props":1469,"children":1470},{},[1471],{"type":37,"value":1472},"A Zen master might tell you that to be better at mathematics you’d\nbetter study Latin. Thus it is with programming. To better understand\nthe essence of OO programming, you should study logic or functional\nprogramming (FP). To be better at FP, you should study Assembler.",{"type":18,"tag":1105,"props":1474,"children":1475},{},[1476],{"type":18,"tag":210,"props":1477,"children":1478},{},[1479],{"type":37,"value":1480},"禅师可能会告诉你，要想学好数学，最好学习拉丁语。编程也是如此。为了更好地理解面向对象编程的本质，你应该学习逻辑或函数式编程 (FP)。为了更好地掌握 FP，你应该学习汇编语言。",{"type":18,"tag":40,"props":1482,"children":1483},{},[1484],{"type":37,"value":1485},"Books on comparative programming languages were popular when I\ngrew up as a programmer, but most of these were academic tomes that\ngave little practical guidance to how to actually go about using a lan-\nguage. This reflected the technology of the age. You could read about\nthe ideas in a language, but actually trying it out was virtually impos-\nsible.",{"type":18,"tag":1105,"props":1487,"children":1488},{},[1489],{"type":18,"tag":210,"props":1490,"children":1491},{},[1492],{"type":37,"value":1493},"在我作为程序员成长的过程中，比较编程语言的书籍很受欢迎，但其中大多数都是学术性的大部头，几乎没有提供关于如何实际使用语言的实用指导。这反映了那个时代的技术。你可以阅读语言中的想法，但实际上尝试它几乎是不可能的。",{"type":18,"tag":40,"props":1495,"children":1496},{},[1497],{"type":37,"value":1498},"Today, not only can we read about the ideas, but we can try them in\npractice. This makes the difference between standing on the poolside\nwondering whether it would be nice to swim and diving in and enjoying\nthe water.",{"type":18,"tag":1105,"props":1500,"children":1501},{},[1502],{"type":18,"tag":210,"props":1503,"children":1504},{},[1505],{"type":37,"value":1506},"今天，我们不仅可以阅读这些想法，还可以在实践中尝试它们。这使得站在泳池边想知道游泳是否好玩和跳进水里享受水的差别。",{"type":18,"tag":40,"props":1508,"children":1509},{},[1510],{"type":37,"value":1511},"I warmly recommend this book and hope that you enjoy reading it as\nmuch as I have.",{"type":18,"tag":1105,"props":1513,"children":1514},{},[1515],{"type":18,"tag":210,"props":1516,"children":1517},{},[1518],{"type":37,"value":1519},"我热烈推荐这本书，希望你和我一样喜欢阅读它。",{"type":18,"tag":1521,"props":1522,"children":1523},"br",{},[],{"type":18,"tag":40,"props":1525,"children":1526},{},[1527,1529,1532,1534,1537],{"type":37,"value":1528},"Joe Armstrong, creator of Erlang",{"type":18,"tag":1521,"props":1530,"children":1531},{},[],{"type":37,"value":1533}," 2 March 2010 ",{"type":18,"tag":1521,"props":1535,"children":1536},{},[],{"type":37,"value":1538},"Stockholm",{"type":18,"tag":92,"props":1540,"children":1541},{},[],{"type":18,"tag":32,"props":1543,"children":1545},{"id":1544},"介绍-2",[1546],{"type":37,"value":1547},"介绍 2",{"type":18,"tag":27,"props":1549,"children":1551},{":t":1550},"章节介绍",[],{"type":18,"tag":40,"props":1553,"children":1554},{},[1555],{"type":37,"value":1556},"学习第一种语言，可能是为了生活。但如果学习第二个语言，那大概是想扩充下自己或者为了职业道路更加宽阔。人类对于求知的需求是刻在其基因的，编程语言亦是如此。这本书所想传达的，并不是让你照着敲击 Code，而是思考其逻辑思维。",{"type":18,"tag":186,"props":1558,"children":1560},{"id":1559},"语言的核心概念-1",[1561],{"type":37,"value":1562},"语言的核心概念 1",{"type":18,"tag":27,"props":1564,"children":1566},{":t":1565,":type":330},"1.1 语言的核心概念",[],{"type":18,"tag":1521,"props":1568,"children":1569},{},[],{"type":18,"tag":137,"props":1571,"children":1572},{},[1573,1578],{"type":18,"tag":40,"props":1574,"children":1575},{},[1576],{"type":37,"value":1577},"大部分时间里，当我学习一门新的编程语言或框架时，我会寻找一个快速的交互式教程。",{"type":18,"tag":40,"props":1579,"children":1580},{},[1581],{"type":37,"value":1582},"但我的基本目标是快速地了解语言的语法糖和核心概念。",{"type":18,"tag":40,"props":1584,"children":1585},{},[1586],{"type":37,"value":1587},"这样的经历我深有体会，但问题在于，学完了语言本体还是基础。有时还需要看各个库、包、插件、框架的文档。将这些散落在各地的积木拼装起来，抽象思维就显得非常重要，因为有时学了个语言本体还只是基础，框架再来上一个语法糖，又需要重新学习、反复学习。",{"type":18,"tag":40,"props":1589,"children":1590},{},[1591],{"type":37,"value":1592},"作者在前期问了五个问题，也就是说读完了这本书，这七个问题都会迎刃而解。同时，这七个问题设计了语言的基础，即：",{"type":37,"value":1594},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":1596,"children":1597},{},[1598,1619],{"type":18,"tag":414,"props":1599,"children":1600},{},[1601],{"type":18,"tag":418,"props":1602,"children":1603},{},[1604,1609,1614],{"type":18,"tag":422,"props":1605,"children":1606},{},[1607],{"type":37,"value":1608},"问题",{"type":18,"tag":422,"props":1610,"children":1611},{},[1612],{"type":37,"value":1613},"类型",{"type":18,"tag":422,"props":1615,"children":1616},{},[1617],{"type":37,"value":1618},"解释",{"type":18,"tag":433,"props":1620,"children":1621},{},[1622,1640,1658,1676,1694],{"type":18,"tag":418,"props":1623,"children":1624},{},[1625,1630,1635],{"type":18,"tag":440,"props":1626,"children":1627},{},[1628],{"type":37,"value":1629},"类型模型是什么？",{"type":18,"tag":440,"props":1631,"children":1632},{},[1633],{"type":37,"value":1634},"类型系统",{"type":18,"tag":440,"props":1636,"children":1637},{},[1638],{"type":37,"value":1639},"是强类型（如 Java）还是弱类型（如 C）？是静态类型（如 Java）还是动态类型（如 Ruby）？",{"type":18,"tag":418,"props":1641,"children":1642},{},[1643,1648,1653],{"type":18,"tag":440,"props":1644,"children":1645},{},[1646],{"type":37,"value":1647},"编程模型是什么？",{"type":18,"tag":440,"props":1649,"children":1650},{},[1651],{"type":37,"value":1652},"编程范式",{"type":18,"tag":440,"props":1654,"children":1655},{},[1656],{"type":37,"value":1657},"支持哪些编程模型（面向对象、函数式等）？",{"type":18,"tag":418,"props":1659,"children":1660},{},[1661,1666,1671],{"type":18,"tag":440,"props":1662,"children":1663},{},[1664],{"type":37,"value":1665},"如何与语言交互？",{"type":18,"tag":440,"props":1667,"children":1668},{},[1669],{"type":37,"value":1670},"交互方式",{"type":18,"tag":440,"props":1672,"children":1673},{},[1674],{"type":37,"value":1675},"语言是编译型还是解释型？如何运行和调试？",{"type":18,"tag":418,"props":1677,"children":1678},{},[1679,1684,1689],{"type":18,"tag":440,"props":1680,"children":1681},{},[1682],{"type":37,"value":1683},"决策结构和核心数据结构是什么？",{"type":18,"tag":440,"props":1685,"children":1686},{},[1687],{"type":37,"value":1688},"语言的控制结构与核心数据结构",{"type":18,"tag":440,"props":1690,"children":1691},{},[1692],{"type":37,"value":1693},"条件语句、集合操作的独特性。",{"type":18,"tag":418,"props":1695,"children":1696},{},[1697,1702,1707],{"type":18,"tag":440,"props":1698,"children":1699},{},[1700],{"type":37,"value":1701},"语言有哪些独特的核心特性？",{"type":18,"tag":440,"props":1703,"children":1704},{},[1705],{"type":37,"value":1706},"语言的独特特性",{"type":18,"tag":440,"props":1708,"children":1709},{},[1710],{"type":37,"value":1711},"并发支持、宏系统、虚拟机等",{"type":18,"tag":137,"props":1713,"children":1714},{},[1715,1720],{"type":18,"tag":40,"props":1716,"children":1717},{},[1718],{"type":37,"value":1719},"When you’re through, you will not be an expert in any of these lan-\nguages, but you will know what each uniquely has to offer.",{"type":18,"tag":1105,"props":1721,"children":1722},{},[1723],{"type":18,"tag":210,"props":1724,"children":1725},{},[1726],{"type":37,"value":1727},"阅读本书后，你或许无法成为这些语言的专家，但你将了解每种语言独有的优势。",{"type":18,"tag":40,"props":1729,"children":1730},{},[1731],{"type":37,"value":1732},"在实际项目开发中，多语言配合是常见的。他们的关联桥梁就是数据的 CURD，各个语言实现的功能获取到的数据存入数据库。之后前端展示和交互逻辑的设计，后端将数据映射为 API 递交给前端或 View 来构成一个网页应用或客户端应用。",{"type":18,"tag":92,"props":1734,"children":1735},{},[],{"type":18,"tag":186,"props":1737,"children":1739},{"id":1738},"为什么选择这些语言-1",[1740],{"type":37,"value":1741},"为什么选择这些语言 1",{"type":18,"tag":27,"props":1743,"children":1745},{":t":1744,":type":330},"1.2 为什么选这几个语言？",[],{"type":18,"tag":40,"props":1747,"children":1748},{},[1749],{"type":37,"value":1750},"书中选择的七种编程语言（Ruby、Io、Prolog、Scala、Erlang、Clojure、Haskell）以及每种语言的选择理由和独特价值。作者表示，这些语言未必是最流行或最实用的，但它们在类型系统、编程范式、并发性、元编程等方面具有独特的学习价值：",{"type":18,"tag":206,"props":1752,"children":1753},{},[1754,1759,1764,1769],{"type":18,"tag":210,"props":1755,"children":1756},{},[1757],{"type":37,"value":1758},"类型系统：涵盖了强类型、动态类型和静态类型的多样组合。",{"type":18,"tag":210,"props":1760,"children":1761},{},[1762],{"type":37,"value":1763},"编程范式：包括面向对象、函数式、逻辑编程、原型编程等多种范式。",{"type":18,"tag":210,"props":1765,"children":1766},{},[1767],{"type":37,"value":1768},"语言特色：如 Ruby 的元编程、Io 的简洁语法与消息分发、Prolog 的逻辑推理能力等。",{"type":18,"tag":210,"props":1770,"children":1771},{},[1772],{"type":37,"value":1773},"多样性：通过对比不同语言的特性，帮助读者理解各种编程思维方式的优劣。",{"type":18,"tag":40,"props":1775,"children":1776},{},[1777],{"type":37,"value":1778},"以下是最终入选的语言及其选择理由：",{"type":37,"value":1780},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":1782,"children":1783},{},[1784,1800],{"type":18,"tag":414,"props":1785,"children":1786},{},[1787],{"type":18,"tag":418,"props":1788,"children":1789},{},[1790,1795],{"type":18,"tag":422,"props":1791,"children":1792},{},[1793],{"type":37,"value":1794},"Lang",{"type":18,"tag":422,"props":1796,"children":1797},{},[1798],{"type":37,"value":1799},"理由",{"type":18,"tag":433,"props":1801,"children":1802},{},[1803,1815,1827,1840,1853,1865,1878],{"type":18,"tag":418,"props":1804,"children":1805},{},[1806,1810],{"type":18,"tag":440,"props":1807,"children":1808},{},[1809],{"type":37,"value":457},{"type":18,"tag":440,"props":1811,"children":1812},{},[1813],{"type":37,"value":1814},"面向对象语言，以易用性和可读性闻名。本书特别探讨了 Ruby 的元编程能力，展示其语法扩展的潜力。",{"type":18,"tag":418,"props":1816,"children":1817},{},[1818,1822],{"type":18,"tag":440,"props":1819,"children":1820},{},[1821],{"type":37,"value":509},{"type":18,"tag":440,"props":1823,"children":1824},{},[1825],{"type":37,"value":1826},"简洁的语法和消息分发机制是亮点。它是一种原型语言，强调并发模型，与 Lisp 有相似之处。",{"type":18,"tag":418,"props":1828,"children":1829},{},[1830,1835],{"type":18,"tag":440,"props":1831,"children":1832},{},[1833],{"type":37,"value":1834},"Prolog",{"type":18,"tag":440,"props":1836,"children":1837},{},[1838],{"type":37,"value":1839},"强大的逻辑推理能力，特别适合解决问题（如数独）。对 Erlang 影响深远，适合逻辑驱动的场景。",{"type":18,"tag":418,"props":1841,"children":1842},{},[1843,1848],{"type":18,"tag":440,"props":1844,"children":1845},{},[1846],{"type":37,"value":1847},"Scala",{"type":18,"tag":440,"props":1849,"children":1850},{},[1851],{"type":37,"value":1852},"结合了函数式编程和 OOP，运行于 JVM。被认为是连接过程式编程和 OOP 的桥梁，对 Java 开发者非常友好。",{"type":18,"tag":418,"props":1854,"children":1855},{},[1856,1860],{"type":18,"tag":440,"props":1857,"children":1858},{},[1859],{"type":37,"value":614},{"type":18,"tag":440,"props":1861,"children":1862},{},[1863],{"type":37,"value":1864},"专注于并发、分布式和容错性，是开发高可靠性系统的首选语言，像 CouchDB 就使用了 Erlang。",{"type":18,"tag":418,"props":1866,"children":1867},{},[1868,1873],{"type":18,"tag":440,"props":1869,"children":1870},{},[1871],{"type":37,"value":1872},"Clojure",{"type":18,"tag":440,"props":1874,"children":1875},{},[1876],{"type":37,"value":1877},"Lisp 方言，运行于 JVM，强调并发管理和灵活性。减少了传统 Lisp 的括号使用，并拥有丰富的 Java 生态支持。",{"type":18,"tag":418,"props":1879,"children":1880},{},[1881,1886],{"type":18,"tag":440,"props":1882,"children":1883},{},[1884],{"type":37,"value":1885},"Haskell",{"type":18,"tag":440,"props":1887,"children":1888},{},[1889],{"type":37,"value":1890},"唯一的纯函数式语言，以强类型和不可变状态为特点，提供了一种更高效、更安全的编程方式。",{"type":18,"tag":137,"props":1892,"children":1893},{},[1894,1899],{"type":18,"tag":40,"props":1895,"children":1896},{},[1897],{"type":37,"value":1898},"Those languages that I picked are not necessarily the best, but each\none is unique, with something important to teach you.",{"type":18,"tag":1105,"props":1900,"children":1901},{},[1902],{"type":18,"tag":210,"props":1903,"children":1904},{},[1905],{"type":37,"value":1906},"我挑选的这些语言未必是最好的，但它们每一种都独特且有重要的东西值得学习。",{"type":18,"tag":92,"props":1908,"children":1909},{},[],{"type":18,"tag":186,"props":1911,"children":1913},{"id":1912},"出版社的背景-1",[1914],{"type":37,"value":1915},"出版社的背景 1",{"type":18,"tag":27,"props":1917,"children":1919},{":t":1918,":type":330},"2 谁该看这本书？",[],{"type":18,"tag":40,"props":1921,"children":1922},{},[1923,1925,1932,1934,1941],{"type":37,"value":1924},"作者介绍了这家出版社，也就是 ",{"type":18,"tag":76,"props":1926,"children":1929},{"href":1927,"rel":1928},"https://pragprog.com/",[80],[1930],{"type":37,"value":1931},"Pragmatic Bookshelf",{"type":37,"value":1933}," 这家出版社几乎技术性的书籍占比很多。毕竟名字直译过来就是:\"实用书架\"  这家出版社的创始人 David Thomas 曾经还写过一本书叫 ",{"type":18,"tag":76,"props":1935,"children":1938},{"href":1936,"rel":1937},"https://en.wikipedia.org/wiki/The_Pragmatic_Programmer",[80],[1939],{"type":37,"value":1940},"\"The Pragmatic Programmer\"",{"type":37,"value":1942}," 直译过来就是：“务实的程序员”。并定义了务实的程序员具有以下品质：",{"type":18,"tag":206,"props":1944,"children":1945},{},[1946,1951,1956,1961],{"type":18,"tag":210,"props":1947,"children":1948},{},[1949],{"type":37,"value":1950},"早期采用者",{"type":18,"tag":210,"props":1952,"children":1953},{},[1954],{"type":37,"value":1955},"快速适应",{"type":18,"tag":210,"props":1957,"children":1958},{},[1959],{"type":37,"value":1960},"好奇心和批判性思维",{"type":18,"tag":210,"props":1962,"children":1963},{},[1964],{"type":37,"value":1965},"现实主义以及万事通。",{"type":18,"tag":40,"props":1967,"children":1968},{},[1969,1971,1978,1980,1987,1988,1995,1996,2003,2004,2011],{"type":37,"value":1970},"这本书还提到了 ",{"type":18,"tag":76,"props":1972,"children":1975},{"href":1973,"rel":1974},"https://en.wikipedia.org/wiki/Broken_windows_theory",[80],[1976],{"type":37,"value":1977},"破窗理论（Broken Windows Theory）",{"type":37,"value":1979},"、",{"type":18,"tag":76,"props":1981,"children":1984},{"href":1982,"rel":1983},"https://en.wikipedia.org/wiki/Stone_Soup",[80],[1985],{"type":37,"value":1986},"石头汤（Stone Soup）",{"type":37,"value":1979},{"type":18,"tag":76,"props":1989,"children":1992},{"href":1990,"rel":1991},"https://en.wikipedia.org/wiki/Boiling_frog",[80],[1993],{"type":37,"value":1994},"煮青蛙（Boiling Frog）",{"type":37,"value":1979},{"type":18,"tag":76,"props":1997,"children":2000},{"href":1998,"rel":1999},"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",[80],[2001],{"type":37,"value":2002},"不要重复自己（DRY：Don’t Repeat Yourself）",{"type":37,"value":1979},{"type":18,"tag":76,"props":2005,"children":2008},{"href":2006,"rel":2007},"https://en.wikipedia.org/wiki/Rubber_duck_debugging",[80],[2009],{"type":37,"value":2010},"橡皮鸭调试法（Rubber Duck Debugging）",{"type":37,"value":2012}," 这些故事在开发中的类比。",{"type":37,"value":2014},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":2016,"children":2017},{},[2018,2034],{"type":18,"tag":414,"props":2019,"children":2020},{},[2021],{"type":18,"tag":418,"props":2022,"children":2023},{},[2024,2029],{"type":18,"tag":422,"props":2025,"children":2026},{},[2027],{"type":37,"value":2028},"故事",{"type":18,"tag":422,"props":2030,"children":2031},{},[2032],{"type":37,"value":2033},"介绍",{"type":18,"tag":433,"props":2035,"children":2036},{},[2037,2055,2071,2089,2100,2113,2124,2137,2148,2161],{"type":18,"tag":418,"props":2038,"children":2039},{},[2040,2045],{"type":18,"tag":440,"props":2041,"children":2042},{},[2043],{"type":37,"value":2044},"破窗理论",{"type":18,"tag":440,"props":2046,"children":2047},{},[2048,2050,2053],{"type":37,"value":2049},"如果一个建筑有一扇窗被打破，而没有及时修复，那么很快其他的窗户也可能被破坏。",{"type":18,"tag":1521,"props":2051,"children":2052},{},[],{"type":37,"value":2054},"这个现象说明一个破损的小问题可能会导致更大的问题。",{"type":18,"tag":418,"props":2056,"children":2057},{},[2058,2061],{"type":18,"tag":440,"props":2059,"children":2060},{},[],{"type":18,"tag":440,"props":2062,"children":2063},{},[2064,2066,2069],{"type":37,"value":2065},"忽视代码中的小问题（如糟糕的命名、不规范的格式）可能会导致代码质量持续恶化，最终变得难以维护。",{"type":18,"tag":1521,"props":2067,"children":2068},{},[],{"type":37,"value":2070},"保持代码整洁可以防止项目走向失控。",{"type":18,"tag":418,"props":2072,"children":2073},{},[2074,2079],{"type":18,"tag":440,"props":2075,"children":2076},{},[2077],{"type":37,"value":2078},"石头汤",{"type":18,"tag":440,"props":2080,"children":2081},{},[2082,2084,2087],{"type":37,"value":2083},"几个旅人告诉村民他们可以用一块石头煮汤，但需要一些配料。",{"type":18,"tag":1521,"props":2085,"children":2086},{},[],{"type":37,"value":2088},"村民们好奇地贡献了蔬菜、肉类等材料，最终煮出了一锅美味的汤。",{"type":18,"tag":418,"props":2090,"children":2091},{},[2092,2095],{"type":18,"tag":440,"props":2093,"children":2094},{},[],{"type":18,"tag":440,"props":2096,"children":2097},{},[2098],{"type":37,"value":2099},"通过激发团队成员的贡献精神，即使从零开始也可以集体创造出伟大的成果。",{"type":18,"tag":418,"props":2101,"children":2102},{},[2103,2108],{"type":18,"tag":440,"props":2104,"children":2105},{},[2106],{"type":37,"value":2107},"煮青蛙",{"type":18,"tag":440,"props":2109,"children":2110},{},[2111],{"type":37,"value":2112},"如果把青蛙直接放入沸水中，它会立刻跳出；但如果放在温水中慢慢加热，它可能会因为没有注意到渐变的危险而被煮死。",{"type":18,"tag":418,"props":2114,"children":2115},{},[2116,2119],{"type":18,"tag":440,"props":2117,"children":2118},{},[],{"type":18,"tag":440,"props":2120,"children":2121},{},[2122],{"type":37,"value":2123},"开发团队可能会对项目中的缓慢恶化（如技术债累积或功能蔓延）视而不见，直到问题变得不可逆转。",{"type":18,"tag":418,"props":2125,"children":2126},{},[2127,2132],{"type":18,"tag":440,"props":2128,"children":2129},{},[2130],{"type":37,"value":2131},"不要重复自己",{"type":18,"tag":440,"props":2133,"children":2134},{},[2135],{"type":37,"value":2136},"一个知识或功能点在代码中应该只有一个唯一的表示。",{"type":18,"tag":418,"props":2138,"children":2139},{},[2140,2143],{"type":18,"tag":440,"props":2141,"children":2142},{},[],{"type":18,"tag":440,"props":2144,"children":2145},{},[2146],{"type":37,"value":2147},"减少冗余代码，提高维护性和可读性。",{"type":18,"tag":418,"props":2149,"children":2150},{},[2151,2156],{"type":18,"tag":440,"props":2152,"children":2153},{},[2154],{"type":37,"value":2155},"橡皮鸭调试法",{"type":18,"tag":440,"props":2157,"children":2158},{},[2159],{"type":37,"value":2160},"通过向一只橡皮鸭解释代码来发现问题。在讲解过程中，可能会自己发现逻辑上的错误。",{"type":18,"tag":418,"props":2162,"children":2163},{},[2164,2167],{"type":18,"tag":440,"props":2165,"children":2166},{},[],{"type":18,"tag":440,"props":2168,"children":2169},{},[2170],{"type":37,"value":2171},"通过向别人解释问题（甚至是向一只鸭子），你能够重新审视自己的思路，找到盲点。",{"type":18,"tag":40,"props":2173,"children":2174},{},[2175],{"type":37,"value":2176},"作者还阐述了一个非常直观的观点：",{"type":18,"tag":137,"props":2178,"children":2180},{"type":2179},"big",[2181],{"type":18,"tag":40,"props":2182,"children":2183},{},[2184],{"type":37,"value":2185},"编程范式每隔十年左右就会发生变化。",{"type":18,"tag":40,"props":2187,"children":2188},{},[2189],{"type":37,"value":2190},"作者从 Ruby 入手实验 Web 开发，在完成一些成功的项目后，将职业方向转向 Ruby 开发，并未后悔。\t•\t这一切源于基本的实验，逐步发展为更深入的探索。",{"type":18,"tag":1105,"props":2192,"children":2193},{},[2194],{"type":18,"tag":210,"props":2195,"children":2196},{},[2197],{"type":37,"value":2198},"范式转变的历史教训：",{"type":18,"tag":40,"props":2200,"children":2201},{},[2202],{"type":37,"value":2203},"很多人可能不记得编程范式上一次转变的时代。从结构化编程向面向对象编程的转变经历了几次波折。",{"type":18,"tag":1105,"props":2205,"children":2206},{},[2207,2212,2217,2222],{"type":18,"tag":210,"props":2208,"children":2209},{},[2210],{"type":37,"value":2211},"旧的范式（结构化编程）无法应对现代 Web 应用的复杂性。",{"type":18,"tag":210,"props":2213,"children":2214},{},[2215],{"type":37,"value":2216},"Java 的成功推动了 OOP 的流行，使其成为主流。",{"type":18,"tag":210,"props":2218,"children":2219},{},[2220],{"type":37,"value":2221},"然而，许多开发者不得不重新学习新工具和设计方法。",{"type":18,"tag":210,"props":2223,"children":2224},{},[2225],{"type":37,"value":2226},"当前趋势：",{"type":18,"tag":40,"props":2228,"children":2229},{},[2230],{"type":37,"value":2231},"我们可能正在经历另一场转变，这次由新型计算机设计驱动。本书的七种语言中，有五种提供了强大的并发模型（Ruby 和 Prolog 除外）。",{"type":18,"tag":206,"props":2233,"children":2234},{},[2235,2240,2245,2250,2255],{"type":18,"tag":210,"props":2236,"children":2237},{},[2238],{"type":37,"value":2239},"Io 的未来值实现",{"type":18,"tag":210,"props":2241,"children":2242},{},[2243],{"type":37,"value":2244},"Scala 的 actor 模型",{"type":18,"tag":210,"props":2246,"children":2247},{},[2248],{"type":37,"value":2249},"Erlang 的“崩溃即修复”哲学",{"type":18,"tag":210,"props":2251,"children":2252},{},[2253],{"type":37,"value":2254},"Haskell 对可变状态的彻底摒弃",{"type":18,"tag":210,"props":2256,"children":2257},{},[2258],{"type":37,"value":2259},"Clojure 用版本化解决复杂并发问题",{"type":18,"tag":40,"props":2261,"children":2262},{},[2263],{"type":37,"value":2264},"Erlang 的例子：Erlang 在云数据库（如 CouchDB）背后发挥了重要作用，其语言基础源于 Prolog。",{"type":18,"tag":92,"props":2266,"children":2267},{},[],{"type":18,"tag":32,"props":2269,"children":2271},{"id":2270},"基础-2",[2272],{"type":37,"value":2273},"基础 2",{"type":18,"tag":27,"props":2275,"children":2277},{":t":2276,":type":330},"面向对象",[],{"type":18,"tag":186,"props":2279,"children":2281},{"id":2280},"面向对象-1",[2282],{"type":37,"value":2283},"面向对象 1",{"type":18,"tag":40,"props":2285,"children":2286},{},[2287],{"type":37,"value":2288},"Ruby 是一种解释型、面向对象、动态类型的语言，属于所谓的脚本语言家族。因此我们需要了解，解释型、动态类型、面向对象到底是什么个概念，以及他们的具象化实现：",{"type":37,"value":2290},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":2292,"children":2293},{},[2294,2310],{"type":18,"tag":414,"props":2295,"children":2296},{},[2297],{"type":18,"tag":418,"props":2298,"children":2299},{},[2300,2305],{"type":18,"tag":422,"props":2301,"children":2302},{},[2303],{"type":37,"value":2304},"特点",{"type":18,"tag":422,"props":2306,"children":2307},{},[2308],{"type":37,"value":2309},"概念",{"type":18,"tag":433,"props":2311,"children":2312},{},[2313,2326,2339],{"type":18,"tag":418,"props":2314,"children":2315},{},[2316,2321],{"type":18,"tag":440,"props":2317,"children":2318},{},[2319],{"type":37,"value":2320},"解释型",{"type":18,"tag":440,"props":2322,"children":2323},{},[2324],{"type":37,"value":2325},"代码由解释器直接执行，而不是通过编译器先转换为机器码。",{"type":18,"tag":418,"props":2327,"children":2328},{},[2329,2334],{"type":18,"tag":440,"props":2330,"children":2331},{},[2332],{"type":37,"value":2333},"动态类型",{"type":18,"tag":440,"props":2335,"children":2336},{},[2337],{"type":37,"value":2338},"数据类型在运行时绑定，而不是在编译时。这种策略通常在灵活性与执行安全性之间权衡。",{"type":18,"tag":418,"props":2340,"children":2341},{},[2342,2346],{"type":18,"tag":440,"props":2343,"children":2344},{},[2345],{"type":37,"value":2276},{"type":18,"tag":440,"props":2347,"children":2348},{},[2349],{"type":37,"value":2350},"支持封装（将数据和行为打包在一起）、继承（通过类组织对象类型）、多态（对象可以以多种形式出现）。",{"type":18,"tag":40,"props":2352,"children":2353},{},[2354],{"type":37,"value":2355},"解释型和动态类型我们在致谢阶段就已经有了了解，那么面向对象几乎是一个家喻户晓的特性。要理解其对象，我们需要想象一个场景：",{"type":18,"tag":40,"props":2357,"children":2358},{},[2359],{"type":37,"value":2360},"你在开发一个“动物园管理系统”。这个系统需要记录动物的信息，比如名字(name)、种类(species)，以及它们会发出的声音。用面向对象的方法来设计系统。",{"type":18,"tag":282,"props":2362,"children":2367},{"code":2363,"language":2364,"meta":8,"className":2365},"# 定义一个类\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n\n    def speak(self):\n        print(f\"{self.name} makes a sound.\")\n\n# 创建对象\ndog = Animal(\"Buddy\", \"Dog\")  # 狗狗对象\ncat = Animal(\"Whiskers\", \"Cat\")  # 猫咪对象\n\ndog.speak()  # 输出: Buddy makes a sound.\ncat.speak()  # 输出: Whiskers makes a sound.\n","python",[2366],"language-python",[2368],{"type":18,"tag":287,"props":2369,"children":2370},{"__ignoreMap":8},[2371],{"type":37,"value":2363},{"type":18,"tag":40,"props":2373,"children":2374},{},[2375],{"type":37,"value":2376},"类（Class）",{"type":18,"tag":1105,"props":2378,"children":2379},{},[2380,2385],{"type":18,"tag":210,"props":2381,"children":2382},{},[2383],{"type":37,"value":2384},"类就像一张蓝图，定义了某一类东西的共同特性和行为。",{"type":18,"tag":210,"props":2386,"children":2387},{},[2388],{"type":37,"value":2389},"动物的蓝图：每只动物都有名字（name）和种类（species），而且都会发出声音。",{"type":18,"tag":40,"props":2391,"children":2392},{},[2393],{"type":37,"value":2394},"对象（Object）",{"type":18,"tag":1105,"props":2396,"children":2397},{},[2398,2403],{"type":18,"tag":210,"props":2399,"children":2400},{},[2401],{"type":37,"value":2402},"对象是具体的东西，是从类里“制造”出来的实例。",{"type":18,"tag":210,"props":2404,"children":2405},{},[2406],{"type":37,"value":2407},"动物类中的“狗狗”对象，名字是“Buddy”，种类是“狗”。",{"type":18,"tag":40,"props":2409,"children":2410},{},[2411],{"type":37,"value":2412},"如果没有面向对象，可复用性几乎为 0：",{"type":18,"tag":282,"props":2414,"children":2416},{"code":2415},"# 没有类，每只动物都要单独定义\ndog_name = \"Buddy\"\ndog_species = \"Dog\"\n\ncat_name = \"Whiskers\"\ncat_species = \"Cat\"\n\ndef dog_speak():\n    print(f\"{dog_name} makes a sound.\")\n\ndef cat_speak():\n    print(f\"{cat_name} makes a sound.\")\n\ndog_speak()\ncat_speak()\n",[2417],{"type":18,"tag":287,"props":2418,"children":2419},{"__ignoreMap":8},[2420],{"type":37,"value":2415},{"type":18,"tag":92,"props":2422,"children":2423},{},[],{"type":18,"tag":27,"props":2425,"children":2427},{":t":2426},"面向对象的四大特性",[],{"type":18,"tag":27,"props":2429,"children":2431},{":t":2430,":type":330},"封装",[],{"type":18,"tag":1105,"props":2433,"children":2434},{},[2435],{"type":18,"tag":210,"props":2436,"children":2437},{},[2438],{"type":37,"value":2439},"保护数据，隐藏细节",{"type":18,"tag":40,"props":2441,"children":2442},{},[2443],{"type":37,"value":2444},"想象你在操作一辆车,你不需要知道引擎如何运作，只需要按下启动按钮。程序中，类可以“隐藏”它内部的细节，外部只需要调用公开的方法。",{"type":18,"tag":282,"props":2446,"children":2448},{"code":2447},"class Car:\n    def __init__(self, brand):\n        self.__engine_on = False  # 私有变量，外部无法直接访问\n        self.brand = brand\n\n    def start_engine(self):  # 提供方法启动引擎\n        self.__engine_on = True\n        print(f\"{self.brand} engine started.\")\n\ncar = Car(\"Toyota\")\ncar.start_engine()  # 输出: Toyota engine started.\n",[2449],{"type":18,"tag":287,"props":2450,"children":2451},{"__ignoreMap":8},[2452],{"type":37,"value":2447},{"type":18,"tag":27,"props":2454,"children":2456},{":t":2455,":type":330},"继承",[],{"type":18,"tag":1105,"props":2458,"children":2459},{},[2460],{"type":18,"tag":210,"props":2461,"children":2462},{},[2463],{"type":37,"value":2464},"复用代码",{"type":18,"tag":40,"props":2466,"children":2467},{},[2468],{"type":37,"value":2469},"假如动物园里有很多动物，很多行为是相似的，比如“发出声音”。我们可以用“动物”作为父类，然后让“狗”和“猫”继承它，省去重复代码。",{"type":18,"tag":282,"props":2471,"children":2473},{"code":2472},"# 定义一个类\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n\nclass Dog(Animal):  # Dog 继承自 Animal\n    def speak(self):  # 重写 speak 方法\n        print(f\"{self.name} barks!\")\n\nclass Cat(Animal):  # Cat 继承自 Animal\n    def speak(self):\n        print(f\"{self.name} meows!\")\n\ndog = Dog(\"Buddy\", \"Dog\")\ncat = Cat(\"Whiskers\", \"Cat\")\n\ndog.speak()  # 输出: Buddy barks!\ncat.speak()  # 输出: Whiskers meows!\n",[2474],{"type":18,"tag":287,"props":2475,"children":2476},{"__ignoreMap":8},[2477],{"type":37,"value":2472},{"type":18,"tag":40,"props":2479,"children":2480},{},[2481],{"type":37,"value":2482},"Dog 和 Cat 类继承了 Animal 类：",{"type":18,"tag":1105,"props":2484,"children":2485},{},[2486],{"type":18,"tag":210,"props":2487,"children":2488},{},[2489,2491,2497,2499,2505],{"type":37,"value":2490},"Dog 和 Cat 类没有重新定义 ",{"type":18,"tag":287,"props":2492,"children":2494},{"className":2493},[],[2495],{"type":37,"value":2496},"__init__",{"type":37,"value":2498}," 方法，但它们可以直接用 Animal 类的",{"type":18,"tag":287,"props":2500,"children":2502},{"className":2501},[],[2503],{"type":37,"value":2504}," __init__",{"type":37,"value":2506}," 方法来初始化名字和种类。",{"type":18,"tag":40,"props":2508,"children":2509},{},[2510],{"type":37,"value":2511},"子类扩展父类",{"type":18,"tag":1105,"props":2513,"children":2514},{},[2515],{"type":18,"tag":210,"props":2516,"children":2517},{},[2518,2520,2526],{"type":37,"value":2519},"Dog 和 Cat 类在继承了 Animal 的基础上，增加了自己的特性（如 ",{"type":18,"tag":287,"props":2521,"children":2523},{"className":2522},[],[2524],{"type":37,"value":2525},"speak()",{"type":37,"value":2527}," 方法）。",{"type":18,"tag":1521,"props":2529,"children":2530},{},[],{"type":18,"tag":282,"props":2532,"children":2534},{"code":2533},"dog = Dog(\"Buddy\", \"Dog\")\n",[2535],{"type":18,"tag":287,"props":2536,"children":2537},{"__ignoreMap":8},[2538],{"type":37,"value":2533},{"type":18,"tag":40,"props":2540,"children":2541},{},[2542,2544,2549,2551,2556],{"type":37,"value":2543},"创建 dog 对象时，Dog 类没有自己的 ",{"type":18,"tag":287,"props":2545,"children":2547},{"className":2546},[],[2548],{"type":37,"value":2496},{"type":37,"value":2550}," 方法，所以调用了 Animal 类的 ",{"type":18,"tag":287,"props":2552,"children":2554},{"className":2553},[],[2555],{"type":37,"value":2496},{"type":37,"value":2557}," 方法。",{"type":18,"tag":40,"props":2559,"children":2560},{},[2561,2567,2569,2575],{"type":18,"tag":287,"props":2562,"children":2564},{"className":2563},[],[2565],{"type":37,"value":2566},"self.name",{"type":37,"value":2568}," 被赋值为 \"Buddy\"，",{"type":18,"tag":287,"props":2570,"children":2572},{"className":2571},[],[2573],{"type":37,"value":2574},"self.species",{"type":37,"value":2576}," 被赋值为 \"Dog\"。",{"type":18,"tag":27,"props":2578,"children":2580},{":t":2579,":type":330},"多态",[],{"type":18,"tag":40,"props":2582,"children":2583},{},[2584],{"type":37,"value":2585},"多态（Polymorphism）是面向对象编程中的一个重要概念，指的是同一个接口（方法），在不同对象上表现出不同的行为。",{"type":18,"tag":282,"props":2587,"children":2589},{"code":2588},"# 定义一个类\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n\nclass Dog(Animal):  # Dog 继承自 Animal\n    def speak(self):  # 重写 speak 方法\n        print(f\"{self.name} barks!\")\n\nclass Cat(Animal):  # Cat 继承自 Animal\n    def speak(self):\n        print(f\"{self.name} meows!\")\n\nanimals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\")]\n\nfor animal in animals:\n    animal.speak()  # Buddy barks! 和 Whiskers meows!\n",[2590],{"type":18,"tag":287,"props":2591,"children":2592},{"__ignoreMap":8},[2593],{"type":37,"value":2588},{"type":18,"tag":40,"props":2595,"children":2596},{},[2597],{"type":18,"tag":766,"props":2598,"children":2599},{},[2600],{"type":37,"value":2601},"“一个接口，不同表现”",{"type":18,"tag":1105,"props":2603,"children":2604},{},[2605],{"type":18,"tag":210,"props":2606,"children":2607},{},[2608,2610,2615],{"type":37,"value":2609},"这里的接口就是 ",{"type":18,"tag":287,"props":2611,"children":2613},{"className":2612},[],[2614],{"type":37,"value":2525},{"type":37,"value":2557},{"type":18,"tag":40,"props":2617,"children":2618},{},[2619,2621,2626],{"type":37,"value":2620},"Dog 和 Cat 类都实现了",{"type":18,"tag":287,"props":2622,"children":2624},{"className":2623},[],[2625],{"type":37,"value":2525},{"type":37,"value":2627}," 方法，但它们的表现不同",{"type":18,"tag":1105,"props":2629,"children":2630},{},[2631,2643],{"type":18,"tag":210,"props":2632,"children":2633},{},[2634,2636,2641],{"type":37,"value":2635},"Dog 的 ",{"type":18,"tag":287,"props":2637,"children":2639},{"className":2638},[],[2640],{"type":37,"value":2525},{"type":37,"value":2642}," 输出的是 \"Buddy barks!\"",{"type":18,"tag":210,"props":2644,"children":2645},{},[2646,2648,2653],{"type":37,"value":2647},"Cat 的 ",{"type":18,"tag":287,"props":2649,"children":2651},{"className":2650},[],[2652],{"type":37,"value":2525},{"type":37,"value":2654}," 输出的是 \"Whiskers meows!\"",{"type":18,"tag":40,"props":2656,"children":2657},{},[2658],{"type":18,"tag":766,"props":2659,"children":2660},{},[2661],{"type":37,"value":2662},"为什么这是多态？",{"type":18,"tag":282,"props":2664,"children":2666},{"code":2665},"animals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\")]\n\nfor animal in animals:\n    animal.speak()\n",[2667],{"type":18,"tag":287,"props":2668,"children":2669},{"__ignoreMap":8},[2670],{"type":37,"value":2665},{"type":18,"tag":40,"props":2672,"children":2673},{},[2674,2676,2682,2684,2690,2692,2698],{"type":37,"value":2675},"调用 ",{"type":18,"tag":287,"props":2677,"children":2679},{"className":2678},[],[2680],{"type":37,"value":2681},"animal.speak()",{"type":37,"value":2683}," 时，不关心 animal 是 Dog 还是 Cat，程序会自动根据 ",{"type":18,"tag":287,"props":2685,"children":2687},{"className":2686},[],[2688],{"type":37,"value":2689},"animal",{"type":37,"value":2691}," 的实际类型调用相应的 ",{"type":18,"tag":287,"props":2693,"children":2695},{"className":2694},[],[2696],{"type":37,"value":2697},"speak() ",{"type":37,"value":2557},{"type":18,"tag":40,"props":2700,"children":2701},{},[2702,2704,2709],{"type":37,"value":2703},"一个通用的方法（",{"type":18,"tag":287,"props":2705,"children":2707},{"className":2706},[],[2708],{"type":37,"value":2525},{"type":37,"value":2710},"），在不同对象上实现了不同的行为（狗叫或猫叫）。",{"type":18,"tag":40,"props":2712,"children":2713},{},[2714],{"type":18,"tag":766,"props":2715,"children":2716},{},[2717],{"type":37,"value":2718},"多态的特征",{"type":18,"tag":40,"props":2720,"children":2721},{},[2722],{"type":37,"value":2723},"父类引用可以指向子类对象",{"type":18,"tag":282,"props":2725,"children":2727},{"code":2726},"animals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\")]\n",[2728],{"type":18,"tag":287,"props":2729,"children":2730},{"__ignoreMap":8},[2731],{"type":37,"value":2726},{"type":18,"tag":40,"props":2733,"children":2734},{},[2735],{"type":37,"value":2736},"列表中的元素类型是 Animal（父类）的引用，但它们实际是 Dog 和 Cat 的对象（子类）。",{"type":18,"tag":40,"props":2738,"children":2739},{},[2740],{"type":37,"value":2741},"动态绑定（动态多态）",{"type":18,"tag":1105,"props":2743,"children":2744},{},[2745],{"type":18,"tag":210,"props":2746,"children":2747},{},[2748],{"type":37,"value":2749},"在运行时，根据对象的实际类型调用相应的方法，而不是编译时决定。例如：",{"type":18,"tag":282,"props":2751,"children":2753},{"code":2752},"for animal in animals:\n    animal.speak()\n",[2754],{"type":18,"tag":287,"props":2755,"children":2756},{"__ignoreMap":8},[2757],{"type":37,"value":2752},{"type":18,"tag":40,"props":2759,"children":2760},{},[2761],{"type":37,"value":2762},"每次调用 speak()，Python 会根据 animal 的实际类型（Dog 或 Cat），执行不同的 speak() 方法。",{"type":18,"tag":40,"props":2764,"children":2765},{},[2766],{"type":37,"value":2767},"意义在于增强了代码的灵活性和可扩展性。以下是两大好处：",{"type":18,"tag":1105,"props":2769,"children":2770},{},[2771,2776],{"type":18,"tag":210,"props":2772,"children":2773},{},[2774],{"type":37,"value":2775},"统一接口，简化代码",{"type":18,"tag":210,"props":2777,"children":2778},{},[2779],{"type":37,"value":2780},"方便扩展",{"type":18,"tag":40,"props":2782,"children":2783},{},[2784],{"type":37,"value":2785},"不需要为每种动物分别写逻辑，只需调用 speak() 方法即可：",{"type":18,"tag":282,"props":2787,"children":2788},{"code":2752},[2789],{"type":18,"tag":287,"props":2790,"children":2791},{"__ignoreMap":8},[2792],{"type":37,"value":2752},{"type":18,"tag":40,"props":2794,"children":2795},{},[2796],{"type":37,"value":2797},"无论是 Dog 还是 Cat，只要它们有 speak() 方法，就可以统一处理。",{"type":18,"tag":40,"props":2799,"children":2800},{},[2801],{"type":37,"value":2802},"如果以后新增一种动物，比如 Bird，只需定义它的类并实现 speak() 方法，无需修改已有代码：",{"type":18,"tag":282,"props":2804,"children":2806},{"code":2805},"class Bird(Animal):\n    def speak(self):\n        print(f\"{self.name} chirps!\")\n\nanimals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\"), Bird(\"Tweety\", \"Bird\")]\n\nfor animal in animals:\n    animal.speak()\n",[2807],{"type":18,"tag":287,"props":2808,"children":2809},{"__ignoreMap":8},[2810],{"type":37,"value":2805},{"type":18,"tag":27,"props":2812,"children":2814},{":t":2813,"type":330},"抽象",[],{"type":18,"tag":40,"props":2816,"children":2817},{},[2818],{"type":37,"value":2819},"理解“抽象”是理解面向对象的一个关键点，我们从现实中的例子来解释为什么“抽象只关注核心功能”。",{"type":18,"tag":40,"props":2821,"children":2822},{},[2823],{"type":37,"value":2824},"在一个动物园管理系统中，管理员需要统计各种动物的叫声，但管理员不关心具体是哪种动物，只需要知道它们会“说话”即可。因此，我们用抽象类 Animal 定义了所有动物的共同特性，并让具体的动物（如狗和猫）实现各自的叫声。",{"type":18,"tag":282,"props":2826,"children":2828},{"code":2827},"from abc import ABC, abstractmethod\n\nclass Animal(ABC):  # 抽象类：定义动物的核心功能\n    @abstractmethod\n    def speak(self):\n        pass  # 动物都会叫，但具体怎么叫由子类决定\n\nclass Dog(Animal):  # 子类：具体实现\n    def speak(self):\n        return \"Bark!\"\n\nclass Cat(Animal):  # 子类：具体实现\n    def speak(self):\n        return \"Meow!\"\n\n# 使用抽象类\nanimals = [Dog(), Cat()]  # 动物园里有狗和猫\nfor animal in animals:  # 遍历动物，不关心具体是哪种\n    print(f\"The animal says: {animal.speak()}\")  # 统一调用接口获取叫声\n",[2829],{"type":18,"tag":287,"props":2830,"children":2831},{"__ignoreMap":8},[2832],{"type":37,"value":2827},{"type":18,"tag":40,"props":2834,"children":2835},{},[2836],{"type":18,"tag":766,"props":2837,"children":2838},{},[2839],{"type":37,"value":2840},"为什么抽象只关注核心功能？",{"type":18,"tag":206,"props":2842,"children":2843},{},[2844,2849],{"type":18,"tag":210,"props":2845,"children":2846},{},[2847],{"type":37,"value":2848},"Animal 只定义了 speak() 方法，说明每个动物都能“发声”，这是核心功能。",{"type":18,"tag":210,"props":2850,"children":2851},{},[2852],{"type":37,"value":2853},"子类（Dog 和 Cat）实现各自的细节，用户只需调用 speak()，不必关心内部逻辑。",{"type":18,"tag":40,"props":2855,"children":2856},{},[2857],{"type":37,"value":2858},"抽象简化了程序的逻辑，只暴露必要的功能，隐藏了实现的复杂性。",{"type":18,"tag":92,"props":2860,"children":2861},{},[],{"type":18,"tag":32,"props":2863,"children":2865},{"id":2864},"ruby-1",[2866],{"type":37,"value":2867},"Ruby 1",{"type":18,"tag":27,"props":2869,"children":2871},{":t":2870},"01 Ruby",[],{"type":18,"tag":40,"props":2873,"children":2874},{},[2875],{"type":37,"value":2876},"作者将 Ruby 列入本书的理由是：",{"type":18,"tag":137,"props":2878,"children":2879},{},[2880],{"type":18,"tag":40,"props":2881,"children":2882},{},[2883],{"type":37,"value":2884},"这是一种面向对象的语言，以易用性和可读性著称。我曾短暂考虑不包括任何面向对象语言，但后来发现将不同编程范式与 OOP（面向对象编程）比较是很有价值的，所以至少包括一种 OOP 语言很重要。\n在这本书中，我深入探讨了 Ruby 的元编程，展示了如何扩展其语法，我对最终的结果非常满意。",{"type":18,"tag":1521,"props":2886,"children":2887},{},[],{"type":18,"tag":137,"props":2889,"children":2890},{"type":2179},[2891],{"type":18,"tag":40,"props":2892,"children":2893},{},[2894],{"type":37,"value":2895},"每种语言都有他的特性和独特的点",{"type":18,"tag":40,"props":2897,"children":2898},{},[2899],{"type":37,"value":2900},"作者以 Java 和 Visual Basic 、Ruby 描述成一个性格：",{"type":37,"value":2902},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":2904,"children":2905},{},[2906,2922],{"type":18,"tag":414,"props":2907,"children":2908},{},[2909],{"type":18,"tag":418,"props":2910,"children":2911},{},[2912,2917],{"type":18,"tag":422,"props":2913,"children":2914},{},[2915],{"type":37,"value":2916},"语言",{"type":18,"tag":422,"props":2918,"children":2919},{},[2920],{"type":37,"value":2921},"性格",{"type":18,"tag":433,"props":2923,"children":2924},{},[2925,2938,2951,2963],{"type":18,"tag":418,"props":2926,"children":2927},{},[2928,2933],{"type":18,"tag":440,"props":2929,"children":2930},{},[2931],{"type":37,"value":2932},"java",{"type":18,"tag":440,"props":2934,"children":2935},{},[2936],{"type":37,"value":2937},"像一个富有的律师哥哥。年轻时很有趣，但现在成了一个 “黑洞”，吸走周围一切乐趣。",{"type":18,"tag":418,"props":2939,"children":2940},{},[2941,2946],{"type":18,"tag":440,"props":2942,"children":2943},{},[2944],{"type":37,"value":2945},"Visual Basic",{"type":18,"tag":440,"props":2947,"children":2948},{},[2949],{"type":37,"value":2950},"像一个染着漂白金发的美容师。她可能解决不了全球变暖，但总能给你理个好发型，而且与她聊天总是特别愉快。",{"type":18,"tag":418,"props":2952,"children":2953},{},[2954,2958],{"type":18,"tag":440,"props":2955,"children":2956},{},[2957],{"type":37,"value":457},{"type":18,"tag":440,"props":2959,"children":2960},{},[2961],{"type":37,"value":2962},"她有点古怪，总是优雅美丽，略显神秘，还充满魔力。",{"type":18,"tag":418,"props":2964,"children":2965},{},[2966,2971],{"type":18,"tag":440,"props":2967,"children":2968},{},[2969],{"type":37,"value":2970},"C 语言家族",{"type":18,"tag":440,"props":2972,"children":2973},{},[2974],{"type":37,"value":2975},"严苛高效但毫无乐趣，就像每天晚上要喝一口鱼肝油的日子。",{"type":18,"tag":40,"props":2977,"children":2978},{},[2979],{"type":37,"value":2980},"Ruby 虽然这个保姆也是要督促你喝鱼肝油，但她会加一颗糖奖励你。通过增添趣味和激励热情，让家庭更高效。 引出了 Ruby 的哲学：",{"type":18,"tag":1105,"props":2982,"children":2983},{},[2984,2989],{"type":18,"tag":210,"props":2985,"children":2986},{},[2987],{"type":37,"value":2988},"C 家族的目标是让机器运行得更高效，因此对底层细节的掌控更严格，但对程序员的友好度较低。",{"type":18,"tag":210,"props":2990,"children":2991},{},[2992],{"type":37,"value":2993},"Ruby 的目标是让开发者工作得更高效，它更注重开发体验和代码的可读性，使编程变得更愉快、更直观。",{"type":18,"tag":40,"props":2995,"children":2996},{},[2997],{"type":37,"value":2998},"当我们了解完面向对象的时候，反过头来再看 Ruby 的 Code",{"type":18,"tag":282,"props":3000,"children":3002},{"code":3001},"properties = ['object oriented', 'duck typed', 'productive', 'fun']\nproperties.each { |property| puts \"Ruby is #{property}.\" }\n\n---\n\nRuby is object oriented.\nRuby is duck typed.\nRuby is productive.\nRuby is fun.\n",[3003],{"type":18,"tag":287,"props":3004,"children":3005},{"__ignoreMap":8},[3006],{"type":37,"value":3001},{"type":18,"tag":40,"props":3008,"children":3009},{},[3010],{"type":37,"value":3011},"莫名的有些简洁，凸显了语法糖的魅力，确实让 Ruby 的语法糖让代码书写更加简洁优雅，减少冗余，提升可读性。例如代码块的使用使集合操作变得直观高效。",{"type":18,"tag":92,"props":3013,"children":3014},{},[],{"type":18,"tag":186,"props":3016,"children":3018},{"id":3017},"与-matz-的访谈-1",[3019],{"type":37,"value":3020},"与 Matz 的访谈 1",{"type":18,"tag":27,"props":3022,"children":3024},{":t":3023,"type":330},"采访 Yukihiro (Matz) Matsumoto",[],{"type":18,"tag":40,"props":3026,"children":3027},{},[3028],{"type":37,"value":3029},"作者来到了 Matz 的家乡采访到了 Matz（真的能在家乡碰到 Matz 吗？)",{"type":18,"tag":40,"props":3031,"children":3032},{},[3033],{"type":18,"tag":766,"props":3034,"children":3035},{},[3036],{"type":37,"value":3037},"为什么开发 Ruby？",{"type":18,"tag":40,"props":3039,"children":3040},{},[3041],{"type":37,"value":3042},"我从接触计算机开始就对编程语言产生了兴趣。它们不仅是编程的工具，还能拓展我们的思维方式。很长一段时间，我把研究编程语言当作一种爱好。我实现过几个玩具语言，但都不是真正的语言。",{"type":18,"tag":40,"props":3044,"children":3045},{},[3046],{"type":37,"value":3047},"到了 1993 年，我接触到 Perl，受到了启发。我觉得如果能将 Lisp、Smalltalk 和 Perl 的特点结合到一个面向对象的语言中，这会是一种极大提高生产力的工具。因此，我开始开发这种语言，并将其命名为 Ruby。",{"type":18,"tag":40,"props":3049,"children":3050},{},[3051],{"type":37,"value":3052},"最初这只是一个爱好，为了让自己开心。没想到其他程序员竟然也喜欢上这门语言以及背后的设计理念，结果它比我预期的受欢迎得多。",{"type":18,"tag":40,"props":3054,"children":3055},{},[3056],{"type":18,"tag":766,"props":3057,"children":3058},{},[3059],{"type":37,"value":3060},"最喜欢 Ruby 的哪一点？",{"type":18,"tag":40,"props":3062,"children":3063},{},[3064],{"type":37,"value":3065},"我喜欢它让编程变得愉快。就技术而言，我最喜欢的是 代码块（blocks）。它们是被驯化的高阶函数，打开了构建 DSL（领域特定语言）以及其他功能的可能性。",{"type":18,"tag":40,"props":3067,"children":3068},{},[3069],{"type":18,"tag":766,"props":3070,"children":3071},{},[3072],{"type":37,"value":3073},"如果能回到过去，有什么想改的？",{"type":18,"tag":40,"props":3075,"children":3076},{},[3077],{"type":37,"value":3078},"我会移除线程，加入更高级的并发模型，比如 actors（角色）或其他机制。",{"type":18,"tag":1105,"props":3080,"children":3081},{},[3082],{"type":18,"tag":210,"props":3083,"children":3084},{},[3085],{"type":37,"value":3086},"Ruby 的线程模型一直被批评为不够现代化。Matz 自己也提到，如果重新设计 Ruby，他会选择更先进的并发模型（如 Actor 模式），来应对并发编程的复杂性。",{"type":18,"tag":92,"props":3088,"children":3089},{},[],{"type":18,"tag":186,"props":3091,"children":3093},{"id":3092},"语言的基础概括-1",[3094],{"type":37,"value":3095},"语言的基础概括 1",{"type":18,"tag":27,"props":3097,"children":3099},{":t":3098},"语言的基础概括",[],{"type":18,"tag":40,"props":3101,"children":3102},{},[3103,3105,3110],{"type":37,"value":3104},"接触一个语言时，要了解该语言的 ",{"type":18,"tag":766,"props":3106,"children":3107},{},[3108],{"type":37,"value":3109},"核心编程模型、它如何处理数据类型？",{"type":37,"value":3111},"。也就将一个语言概括了两个问题，即：",{"type":18,"tag":206,"props":3113,"children":3114},{},[3115,3120],{"type":18,"tag":210,"props":3116,"children":3117},{},[3118],{"type":37,"value":3119},"这门语言的设计理念是什么？是面向对象、函数式还是其他编程范式？",{"type":18,"tag":210,"props":3121,"children":3122},{},[3123],{"type":37,"value":3124},"Ruby 是动态类型语言，它如何简化类型的使用？它怎么就高效了？",{"type":18,"tag":40,"props":3126,"children":3127},{},[3128],{"type":37,"value":3129},"但是 2025 年这个较为浮躁的环境，我可能还会加一个：",{"type":18,"tag":206,"props":3131,"children":3133},{"start":3132},3,[3134],{"type":18,"tag":210,"props":3135,"children":3136},{},[3137],{"type":37,"value":3138},"这个语言的生态系统怎么样？能否轻松的实现我想要的功能？有没有比较活跃的库、插件维护社区？",{"type":18,"tag":40,"props":3140,"children":3141},{},[3142],{"type":37,"value":3143},"但是对于一些第三点不足的来说，可能是一个机会，但还是要看运气。万一人家自己都放弃不维护了，那作为生态开发者，又该如何应对？有时候这种事情是相互成就的。使用该语言的人数越多，那么生态就越完善，生态维护者也能享受到一定的开源声誉。",{"type":18,"tag":3145,"props":3146,"children":3148},"h3",{"id":3147},"解释型与编译型-1",[3149],{"type":37,"value":3150},"解释型与编译型 1",{"type":18,"tag":27,"props":3152,"children":3154},{":t":3153,"type":330},"解释型与编译型语言的区别",[],{"type":18,"tag":40,"props":3156,"children":3157},{},[3158],{"type":37,"value":3159},"这里引出了两个概念，解释型语言和编译型语言的区别：",{"type":37,"value":1594},{"type":18,"tag":410,"props":3162,"children":3163},{},[3164,3185],{"type":18,"tag":414,"props":3165,"children":3166},{},[3167],{"type":18,"tag":418,"props":3168,"children":3169},{},[3170,3175,3180],{"type":18,"tag":422,"props":3171,"children":3172},{},[3173],{"type":37,"value":3174},"特性",{"type":18,"tag":422,"props":3176,"children":3177},{},[3178],{"type":37,"value":3179},"解释执行（Interpreted）",{"type":18,"tag":422,"props":3181,"children":3182},{},[3183],{"type":37,"value":3184},"编译执行（Compiled）",{"type":18,"tag":433,"props":3186,"children":3187},{},[3188,3206,3224,3242,3260],{"type":18,"tag":418,"props":3189,"children":3190},{},[3191,3196,3201],{"type":18,"tag":440,"props":3192,"children":3193},{},[3194],{"type":37,"value":3195},"源代码处理方式",{"type":18,"tag":440,"props":3197,"children":3198},{},[3199],{"type":37,"value":3200},"逐行解释，实时执行",{"type":18,"tag":440,"props":3202,"children":3203},{},[3204],{"type":37,"value":3205},"编译一次生成机器代码，后续执行直接运行",{"type":18,"tag":418,"props":3207,"children":3208},{},[3209,3214,3219],{"type":18,"tag":440,"props":3210,"children":3211},{},[3212],{"type":37,"value":3213},"执行速度",{"type":18,"tag":440,"props":3215,"children":3216},{},[3217],{"type":37,"value":3218},"较慢",{"type":18,"tag":440,"props":3220,"children":3221},{},[3222],{"type":37,"value":3223},"较快",{"type":18,"tag":418,"props":3225,"children":3226},{},[3227,3232,3237],{"type":18,"tag":440,"props":3228,"children":3229},{},[3230],{"type":37,"value":3231},"调试与修改",{"type":18,"tag":440,"props":3233,"children":3234},{},[3235],{"type":37,"value":3236},"简单，修改后可立即看到效果",{"type":18,"tag":440,"props":3238,"children":3239},{},[3240],{"type":37,"value":3241},"需要重新编译，调试较为复杂",{"type":18,"tag":418,"props":3243,"children":3244},{},[3245,3250,3255],{"type":18,"tag":440,"props":3246,"children":3247},{},[3248],{"type":37,"value":3249},"生成的文件",{"type":18,"tag":440,"props":3251,"children":3252},{},[3253],{"type":37,"value":3254},"无需生成可执行文件，直接运行源代码",{"type":18,"tag":440,"props":3256,"children":3257},{},[3258],{"type":37,"value":3259},"生成独立的可执行文件",{"type":18,"tag":418,"props":3261,"children":3262},{},[3263,3268,3273],{"type":18,"tag":440,"props":3264,"children":3265},{},[3266],{"type":37,"value":3267},"适用场景",{"type":18,"tag":440,"props":3269,"children":3270},{},[3271],{"type":37,"value":3272},"快速开发、脚本语言、教学和原型开发",{"type":18,"tag":440,"props":3274,"children":3275},{},[3276],{"type":37,"value":3277},"需要高性能的系统开发和大型应用开发",{"type":18,"tag":40,"props":3279,"children":3280},{},[3281],{"type":37,"value":3282},"看到这你可能就会问了，有没有一种语言支持解释型和编译型同时存在的？以下是比较有代表性的，同时支持解释执行和编译执行的语言：",{"type":37,"value":1594},{"type":18,"tag":410,"props":3285,"children":3286},{},[3287,3307],{"type":18,"tag":414,"props":3288,"children":3289},{},[3290],{"type":18,"tag":418,"props":3291,"children":3292},{},[3293,3297,3302],{"type":18,"tag":422,"props":3294,"children":3295},{},[3296],{"type":37,"value":2916},{"type":18,"tag":422,"props":3298,"children":3299},{},[3300],{"type":37,"value":3301},"编译执行",{"type":18,"tag":422,"props":3303,"children":3304},{},[3305],{"type":37,"value":3306},"解释执行",{"type":18,"tag":433,"props":3308,"children":3309},{},[3310,3327,3344,3361,3379],{"type":18,"tag":418,"props":3311,"children":3312},{},[3313,3317,3322],{"type":18,"tag":440,"props":3314,"children":3315},{},[3316],{"type":37,"value":462},{"type":18,"tag":440,"props":3318,"children":3319},{},[3320],{"type":37,"value":3321},"编译成字节码 (.class)，由 JVM 执行",{"type":18,"tag":440,"props":3323,"children":3324},{},[3325],{"type":37,"value":3326},"通过 JVM 解释字节码或 JIT 编译成机器码",{"type":18,"tag":418,"props":3328,"children":3329},{},[3330,3334,3339],{"type":18,"tag":440,"props":3331,"children":3332},{},[3333],{"type":37,"value":444},{"type":18,"tag":440,"props":3335,"children":3336},{},[3337],{"type":37,"value":3338},"编译成字节码 (.pyc)，通过 JIT 优化",{"type":18,"tag":440,"props":3340,"children":3341},{},[3342],{"type":37,"value":3343},"解释执行字节码，或通过 JIT 转换为机器码",{"type":18,"tag":418,"props":3345,"children":3346},{},[3347,3351,3356],{"type":18,"tag":440,"props":3348,"children":3349},{},[3350],{"type":37,"value":470},{"type":18,"tag":440,"props":3352,"children":3353},{},[3354],{"type":37,"value":3355},"编译成字节码，V8 引擎执行",{"type":18,"tag":440,"props":3357,"children":3358},{},[3359],{"type":37,"value":3360},"解释执行字节码，或 JIT 优化热代码",{"type":18,"tag":418,"props":3362,"children":3363},{},[3364,3369,3374],{"type":18,"tag":440,"props":3365,"children":3366},{},[3367],{"type":37,"value":3368},"C#",{"type":18,"tag":440,"props":3370,"children":3371},{},[3372],{"type":37,"value":3373},"编译成中间语言 (IL)，由 CLR 执行",{"type":18,"tag":440,"props":3375,"children":3376},{},[3377],{"type":37,"value":3378},"CLR 将 IL 转换为机器码并执行（JIT）",{"type":18,"tag":418,"props":3380,"children":3381},{},[3382,3386,3391],{"type":18,"tag":440,"props":3383,"children":3384},{},[3385],{"type":37,"value":457},{"type":18,"tag":440,"props":3387,"children":3388},{},[3389],{"type":37,"value":3390},"编译成字节码",{"type":18,"tag":440,"props":3392,"children":3393},{},[3394],{"type":37,"value":3395},"由解释器执行字节码，或通过 JIT 优化",{"type":18,"tag":3397,"props":3398,"children":3400},"h4",{"id":3399},"混合模式常见漏洞-2",[3401],{"type":37,"value":3402},"混合模式常见漏洞 2",{"type":18,"tag":27,"props":3404,"children":3406},{":t":3405,"type":330},"混合模式常见漏洞",[],{"type":18,"tag":40,"props":3408,"children":3409},{},[3410],{"type":37,"value":3411},"这种混合模式下也会存在一些缺点，比如性能、 安全性的问题。比如针对即时编译(JIT,Just-in-time compilation) 存在的几个具有代表性的 CVE 编号：",{"type":18,"tag":206,"props":3413,"children":3414},{},[3415,3456,3494,3532,3569],{"type":18,"tag":210,"props":3416,"children":3417},{},[3418,3423],{"type":18,"tag":766,"props":3419,"children":3420},{},[3421],{"type":37,"value":3422},"CVE-2019-5786 - V8 JIT 编译器漏洞",{"type":18,"tag":1105,"props":3424,"children":3425},{},[3426,3436,3446],{"type":18,"tag":210,"props":3427,"children":3428},{},[3429,3434],{"type":18,"tag":766,"props":3430,"children":3431},{},[3432],{"type":37,"value":3433},"影响",{"type":37,"value":3435},"：Google Chrome",{"type":18,"tag":210,"props":3437,"children":3438},{},[3439,3444],{"type":18,"tag":766,"props":3440,"children":3441},{},[3442],{"type":37,"value":3443},"描述",{"type":37,"value":3445},"：V8 引擎的 JIT 编译器漏洞，攻击者通过恶意 JavaScript 代码可能导致内存损坏，执行任意代码。",{"type":18,"tag":210,"props":3447,"children":3448},{},[3449,3454],{"type":18,"tag":766,"props":3450,"children":3451},{},[3452],{"type":37,"value":3453},"修复",{"type":37,"value":3455},"：Google 发布补丁更新 V8 引擎。",{"type":18,"tag":210,"props":3457,"children":3458},{},[3459,3464],{"type":18,"tag":766,"props":3460,"children":3461},{},[3462],{"type":37,"value":3463},"CVE-2020-11008 - JScript 和 VBScript 引擎漏洞",{"type":18,"tag":1105,"props":3465,"children":3466},{},[3467,3476,3485],{"type":18,"tag":210,"props":3468,"children":3469},{},[3470,3474],{"type":18,"tag":766,"props":3471,"children":3472},{},[3473],{"type":37,"value":3433},{"type":37,"value":3475},"：Microsoft Edge, Internet Explorer",{"type":18,"tag":210,"props":3477,"children":3478},{},[3479,3483],{"type":18,"tag":766,"props":3480,"children":3481},{},[3482],{"type":37,"value":3443},{"type":37,"value":3484},"：通过构造恶意网页，攻击者可触发 JIT 编译器内存损坏，执行任意代码。",{"type":18,"tag":210,"props":3486,"children":3487},{},[3488,3492],{"type":18,"tag":766,"props":3489,"children":3490},{},[3491],{"type":37,"value":3453},{"type":37,"value":3493},"：Microsoft 发布安全更新。",{"type":18,"tag":210,"props":3495,"children":3496},{},[3497,3502],{"type":18,"tag":766,"props":3498,"children":3499},{},[3500],{"type":37,"value":3501},"CVE-2018-5292 - Firefox JIT 编译器漏洞",{"type":18,"tag":1105,"props":3503,"children":3504},{},[3505,3514,3523],{"type":18,"tag":210,"props":3506,"children":3507},{},[3508,3512],{"type":18,"tag":766,"props":3509,"children":3510},{},[3511],{"type":37,"value":3433},{"type":37,"value":3513},"：Mozilla Firefox",{"type":18,"tag":210,"props":3515,"children":3516},{},[3517,3521],{"type":18,"tag":766,"props":3518,"children":3519},{},[3520],{"type":37,"value":3443},{"type":37,"value":3522},"：Firefox 的 JIT 编译器漏洞，允许攻击者通过恶意网页导致内存访问错误，执行恶意代码。",{"type":18,"tag":210,"props":3524,"children":3525},{},[3526,3530],{"type":18,"tag":766,"props":3527,"children":3528},{},[3529],{"type":37,"value":3453},{"type":37,"value":3531},"：Mozilla 发布修复补丁。",{"type":18,"tag":210,"props":3533,"children":3534},{},[3535,3540],{"type":18,"tag":766,"props":3536,"children":3537},{},[3538],{"type":37,"value":3539},"CVE-2017-0199 - Microsoft Office JIT 漏洞",{"type":18,"tag":1105,"props":3541,"children":3542},{},[3543,3552,3561],{"type":18,"tag":210,"props":3544,"children":3545},{},[3546,3550],{"type":18,"tag":766,"props":3547,"children":3548},{},[3549],{"type":37,"value":3433},{"type":37,"value":3551},"：Microsoft Office",{"type":18,"tag":210,"props":3553,"children":3554},{},[3555,3559],{"type":18,"tag":766,"props":3556,"children":3557},{},[3558],{"type":37,"value":3443},{"type":37,"value":3560},"：通过恶意 Office 文件，攻击者利用 JIT 漏洞执行任意代码。",{"type":18,"tag":210,"props":3562,"children":3563},{},[3564,3568],{"type":18,"tag":766,"props":3565,"children":3566},{},[3567],{"type":37,"value":3453},{"type":37,"value":3493},{"type":18,"tag":210,"props":3570,"children":3571},{},[3572,3577],{"type":18,"tag":766,"props":3573,"children":3574},{},[3575],{"type":37,"value":3576},"CVE-2015-5167 - JIT 编译中的整数溢出漏洞",{"type":18,"tag":1105,"props":3578,"children":3579},{},[3580,3589,3598],{"type":18,"tag":210,"props":3581,"children":3582},{},[3583,3587],{"type":18,"tag":766,"props":3584,"children":3585},{},[3586],{"type":37,"value":3433},{"type":37,"value":3588},"：Apple WebKit",{"type":18,"tag":210,"props":3590,"children":3591},{},[3592,3596],{"type":18,"tag":766,"props":3593,"children":3594},{},[3595],{"type":37,"value":3443},{"type":37,"value":3597},"：WebKit 的 JIT 编译器整数溢出漏洞，导致内存损坏，执行恶意代码。",{"type":18,"tag":210,"props":3599,"children":3600},{},[3601,3605],{"type":18,"tag":766,"props":3602,"children":3603},{},[3604],{"type":37,"value":3453},{"type":37,"value":3606},"：Apple 发布修复补丁。",{"type":18,"tag":40,"props":3608,"children":3609},{},[3610],{"type":37,"value":3611},"在 JIT 编译中，常见的攻击手法如 JIT spraying，俗称 JIT 喷射。攻击者通过利用 JIT 编译的特性，向堆中注入恶意数据，从而使堆内存变为可执行的。当攻击者能够控制堆的内容并将代码执行转移到堆内存中时，就可能会发生安全漏洞。通过这种方式，攻击者可以执行任意代码，从而威胁系统的安全性。",{"type":18,"tag":40,"props":3613,"children":3614},{},[3615],{"type":37,"value":3616},"JIT 的工作原理就是源代码或字节码转换为机器代码，并直接在内存中执行，而不是先写入磁盘再执行。虽然提高了工作效率，但由于现代的操作系统存在内存保护的机制，因此会将 JIT 进行标记然后执行，如果内存可 W^X（即可写/可执行内存），那就会从中找到攻击的点进行利用。",{"type":18,"tag":186,"props":3618,"children":3620},{"id":3619},"类型系统-1",[3621],{"type":37,"value":3622},"类型系统 1",{"type":18,"tag":27,"props":3624,"children":3625},{":t":1634,"type":330},[],{"type":18,"tag":40,"props":3627,"children":3628},{},[3629],{"type":37,"value":3630},"作者通过在这一章引出了类型系统的概念，Ruby 的设计哲学。强类型我们都知道，比如以下 code：",{"type":18,"tag":282,"props":3632,"children":3637},{"code":3633,"language":3634,"meta":8,"className":3635},"irb(main):002:0> x = 1 - 1\n=> 0\nirb(main):003:0> x = 1 - 'one'\nTraceback (most recent call last):\n        5: from /usr/bin/irb:23:in `\u003Cmain>'\n        4: from /usr/bin/irb:23:in `load'\n        3: from /Library/Ruby/Gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `\u003Ctop (required)>'\n        2: from (irb):3\n        1: from (irb):3:in `-'\nTypeError (String can't be coerced into Integer)\n","ruby",[3636],"language-ruby",[3638],{"type":18,"tag":287,"props":3639,"children":3640},{"__ignoreMap":8},[3641],{"type":37,"value":3633},{"type":18,"tag":40,"props":3643,"children":3644},{},[3645],{"type":37,"value":3646},"Ruby 是强类型的，这意味着当类型不匹配时你会得到一个错误。Ruby 会在运行时进行这些类型检查，而不是在编译时。",{"type":18,"tag":3145,"props":3648,"children":3650},{"id":3649},"鸭子类型-1",[3651],{"type":37,"value":3652},"鸭子类型 1",{"type":18,"tag":27,"props":3654,"children":3656},{":t":3655,"type":330},"鸭子类型",[],{"type":18,"tag":40,"props":3658,"children":3659},{},[3660],{"type":37,"value":3661},"鸭子类型的核心就是一个谚语：",{"type":18,"tag":137,"props":3663,"children":3664},{"type":2179},[3665],{"type":18,"tag":40,"props":3666,"children":3667},{},[3668,3673,3675,3678],{"type":18,"tag":766,"props":3669,"children":3670},{},[3671],{"type":37,"value":3672},"如果它看起来像鸭子，游泳像鸭子，叫起来像鸭子，那么它可能是一只鸭子。",{"type":37,"value":3674}," ",{"type":18,"tag":1521,"props":3676,"children":3677},{},[],{"type":37,"value":3679},"\nIf it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.",{"type":18,"tag":40,"props":3681,"children":3682},{},[3683],{"type":37,"value":3684},"鸭子类型源自于溯因推理，也被称之为反向推理，它是开始于事实的集合，并推导出其最佳解释的推理过程。我们同样可以将那个谚语扩充以下到 WAF 中：",{"type":18,"tag":137,"props":3686,"children":3687},{},[3688],{"type":18,"tag":40,"props":3689,"children":3690},{},[3691],{"type":37,"value":3692},"如果这个用户的请求头看起来很神秘，操作也很凌乱，经常请求些隐秘数据，那么他一定不怀好意",{"type":18,"tag":282,"props":3694,"children":3697},{"code":3695,"language":3634,"meta":8,"className":3696},">> i = 0\n=> 0.0\n>> a = ['100', 100.0]\n=> ['100', 100.0]\n>> while i \u003C 2\n>> puts a[i].to_i\n>> i = i + 1\n>> end\n100\n100\n",[3636],[3698],{"type":18,"tag":287,"props":3699,"children":3700},{"__ignoreMap":8},[3701],{"type":37,"value":3695},{"type":18,"tag":40,"props":3703,"children":3704},{},[3705,3707,3713,3715,3721],{"type":37,"value":3706},"上面 code 中， ",{"type":18,"tag":287,"props":3708,"children":3710},{"className":3709},[],[3711],{"type":37,"value":3712},"'100'",{"type":37,"value":3714}," 是字符串，而 ",{"type":18,"tag":287,"props":3716,"children":3718},{"className":3717},[],[3719],{"type":37,"value":3720},"100.0",{"type":37,"value":3722}," 是浮点数，但在 ruby 运行时来看，100.0 是 100,‘100' 也是 100 所以这是鸭子类型的应用效果。",{"type":18,"tag":27,"props":3724,"children":3726},{"type":330,"t":3725},"猴子补丁",[],{"type":18,"tag":186,"props":3728,"children":3730},{"id":3729},"猴子补丁-1",[3731],{"type":37,"value":3732},"猴子补丁 1",{"type":18,"tag":40,"props":3734,"children":3735},{},[3736,3738,3745],{"type":37,"value":3737},"在 Ruby 中，开放类(Open classes) 被叫作",{"type":18,"tag":76,"props":3739,"children":3742},{"href":3740,"rel":3741},"https://en.wikipedia.org/wiki/Monkey_patch#:~:text=In%20computer%20programming%2C%20monkey%20patching,altering%20the%20original%20source%20code.",[80],[3743],{"type":37,"value":3744},"猴子补丁(Monkey Patch)",{"type":37,"value":3746},"。指的是通过动态修改现有的类或模块来增加、修改或替换它们的功能。这种做法使得原本不支持某些功能的类能够在运行时被修改，从而增加新的行为。",{"type":18,"tag":40,"props":3748,"children":3749},{},[3750,3752,3759],{"type":37,"value":3751},"虽然这种做法可以作为元编程的特性，但也有一些安全问题，演变成为了一种攻击手法。例如 ",{"type":18,"tag":76,"props":3753,"children":3756},{"href":3754,"rel":3755},"https://access.redhat.com/security/cve/CVE-2024-21896",[80],[3757],{"type":37,"value":3758},"CVE-2024-21896",{"type":37,"value":3760}," 通过猴子补丁修改 Buffer 内部实现，导致路径遍历漏洞的问题。",{"type":18,"tag":92,"props":3762,"children":3763},{},[],{"type":18,"tag":32,"props":3765,"children":3767},{"id":3766},"io-lang-1",[3768],{"type":37,"value":3769},"Io Lang 1",{"type":18,"tag":27,"props":3771,"children":3773},{":t":3772},"Io Lang",[],{"type":18,"tag":40,"props":3775,"children":3776},{},[3777],{"type":37,"value":3778},"第一次看到 IO 还有点意外，我联想到了 I/O、甚至是 CS 很火的信息学奥林匹克竞赛（英语：Olympiad in Informatics，简称：OI）后者让我有联想的是太多互联网很社会参加这个比赛了，看到初中高中的大放异彩很难不觉得自己是个废物的实事。这些大佬参加 IO 后还会去打 CTF，然后刷 hackthebox、以及各种靶场。当然像我这样的只能提交个签到题，虽然不知现在签到题难度如何。",{"type":18,"tag":40,"props":3780,"children":3781},{},[3782,3784,3791],{"type":37,"value":3783},"在我 15 岁的时候接触到了一点，做了个签到题没想到还会记录至今。",{"type":18,"tag":76,"props":3785,"children":3788},{"href":3786,"rel":3787},"https://ctftime.org/team/87624",[80],[3789],{"type":37,"value":3790},"Real World CTF 2019 Quals",{"type":37,"value":3792},"。没想到现在长亭已经给阿里收购了，不过长亭这个名字挺好听的，最近我还听到了一个名字叫「基调听云」也是很好听，一看就是注册资本没到 1000w 不给注册的那种存在。(有一说一长亭之前的官网有点 low，现在虽然慢慢变帅了，但是移动端有点小问题，不过不是我样的 loser 能评价的)",{"type":18,"tag":40,"props":3794,"children":3795},{},[3796],{"type":37,"value":3797},"我了解过 IO 的历史，根据维基百科的介绍：",{"type":18,"tag":137,"props":3799,"children":3800},{},[3801],{"type":18,"tag":40,"props":3802,"children":3803},{},[3804],{"type":37,"value":3805},"该语言由 Steve Dekorte 于 2002 年创建，当时他试图用他的语言 Cel 来帮助朋友 Dru Nelson。他发现自己确实不太了解语言的工作原理，并开始编写一种小型语言来更好地理解问题。",{"type":18,"tag":40,"props":3807,"children":3808},{},[3809,3811,3818],{"type":37,"value":3810},"看到这时我开始深深反思为什么我没有一个为了教会我语言而去编写一个语言的好朋友。如果要在线体验 Io lang 可以使用 ",{"type":18,"tag":76,"props":3812,"children":3815},{"href":3813,"rel":3814},"https://tio.run/",[80],[3816],{"type":37,"value":3817},"Tio.run",{"type":37,"value":3819}," （看 Io lang 的 Twitter 发现的好用工具）",{"type":18,"tag":92,"props":3821,"children":3822},{},[],{"type":18,"tag":186,"props":3824,"children":3826},{"id":3825},"对象原型和继承-2",[3827],{"type":37,"value":3828},"对象、原型和继承 2",{"type":18,"tag":27,"props":3830,"children":3832},{":t":3831},"对象、原型和继承",[],{"type":18,"tag":40,"props":3834,"children":3835},{},[3836],{"type":37,"value":3837},"Io lang 可以更好的理解对象、原型以及继承，因为他是基于原型的面向对象语言:",{"type":18,"tag":282,"props":3839,"children":3841},{"code":3840},"   +----------------+                                   \n   |                |                                   \n+->|     object     |                                   \n|  |                |                                   \n|  +----------------+                                   \n|                                                       \n|  +----------------+                                   \n|  |                |                                   \n+->|    Vehicle     |                                   \n|  |     +----------+----------------------------------+\n|  +-----+Prototype: Object                            |\n|        +---------------------------------------------+\n|        |Description: Something to take you far away  |\n|        +---------------------------------------------+\n|                                                       \n|  +----------------+                                   \n|  |                |                                   \n+->|      Car       |                                   \n|  |     +----------+----------------------------------+\n|  +-----+Prototype: Vehicle                           |\n|        +---------------------------------------------+\n|                                                       \n|  +----------------+                                   \n|  |                |                                   \n+--|    Ferrari     |                                   \n   |     +----------+----------------------------------+\n   +-----+Prototype: Car                               |\n         +---------------------------------------------+\n\n\n// 创建一个基础原型对象 Object\nObject := Object clone\n\n// 创建 Vehicle 原型，继承自 Object\nVehicle := Object clone\n\n// 给 Vehicle 添加一个描述属性\nVehicle description := \"Something to take you far away\"\n\n// 创建 Car 原型，继承自 Vehicle\nCar := Vehicle clone\n\n// 给 Car 添加属性\nCar description := \"A fast car\"\n\n// 创建 Ferrari 原型，继承自 Car\nFerrari := Car clone\n\n// 给 Ferrari 添加新的属性\nFerrari description := \"A Ferrari, a dream car\"\n\n// 测试创建的对象\n\n// 访问 Ferrari 的描述属性，应该返回 Ferrari 的描述\nFerrari description print  // 输出: A Ferrari, a dream car\n\n// 访问 Car 的描述属性，应该返回 Car 的描述\nCar description print      // 输出: A fast car\n\n// 访问 Vehicle 的描述属性，应该返回 Vehicle 的描述\nVehicle description print  // 输出: Something to take you far away\n",[3842],{"type":18,"tag":287,"props":3843,"children":3844},{"__ignoreMap":8},[3845],{"type":37,"value":3840},{"type":18,"tag":40,"props":3847,"children":3848},{},[3849],{"type":37,"value":3850},"这张图表示了对象的构成，描述一个对象，也就是面向对象（当然我是从书上偷的，因为我觉得这张图确实很简洁明了。）说实话我并不是很喜欢这个写法，太多继承了。",{"type":18,"tag":92,"props":3852,"children":3853},{},[],{"type":18,"tag":186,"props":3855,"children":3857},{"id":3856},"方法-1",[3858],{"type":37,"value":3859},"方法 1",{"type":18,"tag":27,"props":3861,"children":3863},{":t":3862},"方法和块",[],{"type":18,"tag":40,"props":3865,"children":3866},{},[3867],{"type":37,"value":3868},"在 Io lang 中，方法也是对象，不过给出了更符合的类型，即 Block：",{"type":18,"tag":282,"props":3870,"children":3872},{"code":3871},"method() type print\n==> Block\n",[3873],{"type":18,"tag":287,"props":3874,"children":3875},{"__ignoreMap":8},[3876],{"type":37,"value":3871},{"type":18,"tag":3145,"props":3878,"children":3880},{"id":3879},"函数-1",[3881],{"type":37,"value":3882},"函数 1",{"type":37,"value":3884},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":3886,"children":3887},{},[3888,3909],{"type":18,"tag":414,"props":3889,"children":3890},{},[3891],{"type":18,"tag":418,"props":3892,"children":3893},{},[3894,3899,3904],{"type":18,"tag":422,"props":3895,"children":3896},{},[3897],{"type":37,"value":3898},"编程语言",{"type":18,"tag":422,"props":3900,"children":3901},{},[3902],{"type":37,"value":3903},"方法是否为对象",{"type":18,"tag":422,"props":3905,"children":3906},{},[3907],{"type":37,"value":3908},"说明",{"type":18,"tag":433,"props":3910,"children":3911},{},[3912,3932,3951,3970,3990,4010],{"type":18,"tag":418,"props":3913,"children":3914},{},[3915,3922,3927],{"type":18,"tag":440,"props":3916,"children":3917},{},[3918],{"type":18,"tag":766,"props":3919,"children":3920},{},[3921],{"type":37,"value":509},{"type":18,"tag":440,"props":3923,"children":3924},{},[3925],{"type":37,"value":3926},"是",{"type":18,"tag":440,"props":3928,"children":3929},{},[3930],{"type":37,"value":3931},"在 Io 中，方法是对象，可以像其他对象一样操作、赋值、传递。",{"type":18,"tag":418,"props":3933,"children":3934},{},[3935,3942,3946],{"type":18,"tag":440,"props":3936,"children":3937},{},[3938],{"type":18,"tag":766,"props":3939,"children":3940},{},[3941],{"type":37,"value":470},{"type":18,"tag":440,"props":3943,"children":3944},{},[3945],{"type":37,"value":3926},{"type":18,"tag":440,"props":3947,"children":3948},{},[3949],{"type":37,"value":3950},"JavaScript 中的函数本质上是对象，可以作为参数传递、存储。",{"type":18,"tag":418,"props":3952,"children":3953},{},[3954,3961,3965],{"type":18,"tag":440,"props":3955,"children":3956},{},[3957],{"type":18,"tag":766,"props":3958,"children":3959},{},[3960],{"type":37,"value":444},{"type":18,"tag":440,"props":3962,"children":3963},{},[3964],{"type":37,"value":3926},{"type":18,"tag":440,"props":3966,"children":3967},{},[3968],{"type":37,"value":3969},"Python 中的函数是对象，可以像其他对象一样操作、传递。",{"type":18,"tag":418,"props":3971,"children":3972},{},[3973,3980,3985],{"type":18,"tag":440,"props":3974,"children":3975},{},[3976],{"type":18,"tag":766,"props":3977,"children":3978},{},[3979],{"type":37,"value":457},{"type":18,"tag":440,"props":3981,"children":3982},{},[3983],{"type":37,"value":3984},"否（但支持块作为对象）",{"type":18,"tag":440,"props":3986,"children":3987},{},[3988],{"type":37,"value":3989},"Ruby 中方法本身不是对象，但可以使用块（block）传递和调用。",{"type":18,"tag":418,"props":3991,"children":3992},{},[3993,4000,4005],{"type":18,"tag":440,"props":3994,"children":3995},{},[3996],{"type":18,"tag":766,"props":3997,"children":3998},{},[3999],{"type":37,"value":462},{"type":18,"tag":440,"props":4001,"children":4002},{},[4003],{"type":37,"value":4004},"否",{"type":18,"tag":440,"props":4006,"children":4007},{},[4008],{"type":37,"value":4009},"Java 中方法不是对象，方法是属于类的。可以使用 Lambda 表达式作为方法的引用，但这些并非对象。",{"type":18,"tag":418,"props":4011,"children":4012},{},[4013,4020,4025],{"type":18,"tag":440,"props":4014,"children":4015},{},[4016],{"type":18,"tag":766,"props":4017,"children":4018},{},[4019],{"type":37,"value":3368},{"type":18,"tag":440,"props":4021,"children":4022},{},[4023],{"type":37,"value":4024},"否（但支持委托作为对象）",{"type":18,"tag":440,"props":4026,"children":4027},{},[4028],{"type":37,"value":4029},"C# 中方法不是对象，但可以使用委托（Delegate）作为方法引用传递和存储。",{"type":18,"tag":40,"props":4031,"children":4032},{},[4033,4035,4167,4169,4175],{"type":37,"value":4034},"我相信看到这肯定会有疑问，函数和数学中的函数有那些共同的作用？比如数学中的函数 ",{"type":18,"tag":4036,"props":4037,"children":4041},"mjx-container",{"className":4038,"jax":4040},[4039],"MathJax","SVG",[4042],{"type":18,"tag":4043,"props":4044,"children":4052},"svg",{"style":4045,"xmlns":4046,"width":4047,"height":4048,"role":22,"focusable":4049,"viewBox":4050,"xmlnsXLink":4051},"vertical-align: -0.566ex;","http://www.w3.org/2000/svg","9.598ex","2.452ex","false","0 -833.9 4242.1 1083.9","http://www.w3.org/1999/xlink",[4053,4088],{"type":18,"tag":4054,"props":4055,"children":4056},"defs",{},[4057,4063,4068,4073,4078,4083],{"type":18,"tag":4058,"props":4059,"children":4062},"path",{"id":4060,"d":4061},"MJX-1-TEX-I-1D453","M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z",[],{"type":18,"tag":4058,"props":4064,"children":4067},{"id":4065,"d":4066},"MJX-1-TEX-N-28","M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",[],{"type":18,"tag":4058,"props":4069,"children":4072},{"id":4070,"d":4071},"MJX-1-TEX-I-1D465","M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",[],{"type":18,"tag":4058,"props":4074,"children":4077},{"id":4075,"d":4076},"MJX-1-TEX-N-29","M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",[],{"type":18,"tag":4058,"props":4079,"children":4082},{"id":4080,"d":4081},"MJX-1-TEX-N-3D","M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",[],{"type":18,"tag":4058,"props":4084,"children":4087},{"id":4085,"d":4086},"MJX-1-TEX-N-32","M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",[],{"type":18,"tag":4089,"props":4090,"children":4094},"g",{"stroke":4091,"fill":4091,"stroke-width":4092,"transform":4093},"currentColor","0","scale(1,-1)",[4095],{"type":18,"tag":4089,"props":4096,"children":4098},{"dataMmlNode":4097},"math",[4099,4109,4119,4128,4137,4146],{"type":18,"tag":4089,"props":4100,"children":4102},{"dataMmlNode":4101},"mi",[4103],{"type":18,"tag":4104,"props":4105,"children":4108},"use",{"dataC":4106,"xLinkHref":4107},"1D453","#MJX-1-TEX-I-1D453",[],{"type":18,"tag":4089,"props":4110,"children":4113},{"dataMmlNode":4111,"transform":4112},"mo","translate(550,0)",[4114],{"type":18,"tag":4104,"props":4115,"children":4118},{"dataC":4116,"xLinkHref":4117},"28","#MJX-1-TEX-N-28",[],{"type":18,"tag":4089,"props":4120,"children":4122},{"dataMmlNode":4101,"transform":4121},"translate(939,0)",[4123],{"type":18,"tag":4104,"props":4124,"children":4127},{"dataC":4125,"xLinkHref":4126},"1D465","#MJX-1-TEX-I-1D465",[],{"type":18,"tag":4089,"props":4129,"children":4131},{"dataMmlNode":4111,"transform":4130},"translate(1511,0)",[4132],{"type":18,"tag":4104,"props":4133,"children":4136},{"dataC":4134,"xLinkHref":4135},"29","#MJX-1-TEX-N-29",[],{"type":18,"tag":4089,"props":4138,"children":4140},{"dataMmlNode":4111,"transform":4139},"translate(2177.8,0)",[4141],{"type":18,"tag":4104,"props":4142,"children":4145},{"dataC":4143,"xLinkHref":4144},"3D","#MJX-1-TEX-N-3D",[],{"type":18,"tag":4089,"props":4147,"children":4150},{"dataMmlNode":4148,"transform":4149},"msup","translate(3233.6,0)",[4151,4157],{"type":18,"tag":4089,"props":4152,"children":4153},{"dataMmlNode":4101},[4154],{"type":18,"tag":4104,"props":4155,"children":4156},{"dataC":4125,"xLinkHref":4126},[],{"type":18,"tag":4089,"props":4158,"children":4161},{"dataMmlNode":4159,"transform":4160},"mn","translate(605,363) scale(0.707)",[4162],{"type":18,"tag":4104,"props":4163,"children":4166},{"dataC":4164,"xLinkHref":4165},"32","#MJX-1-TEX-N-32",[],{"type":37,"value":4168}," 这个函数我们可以通过 javascript 中的 ",{"type":18,"tag":287,"props":4170,"children":4172},{"className":4171},[],[4173],{"type":37,"value":4174},"function",{"type":37,"value":4176}," 即函数理解：",{"type":18,"tag":282,"props":4178,"children":4180},{"code":4179},"function add(x, y) {\n    return x + y;\n}\n\nlet result = add(2, 3);  // result = 5\n",[4181],{"type":18,"tag":287,"props":4182,"children":4183},{"__ignoreMap":8},[4184],{"type":37,"value":4179},{"type":18,"tag":40,"props":4186,"children":4187},{},[4188],{"type":37,"value":4189},"函数是一个特别重要的概念，特别是在数学领域。在普林斯顿微积分读本中，说明了函数在微积分的重要性：",{"type":18,"tag":137,"props":4191,"children":4192},{"type":2179},[4193],{"type":18,"tag":40,"props":4194,"children":4195},{},[4196,4198,4201],{"type":37,"value":4197},"不借助函数却想去做微积分，这无疑会是你所能做的最无意义的事。",{"type":18,"tag":1521,"props":4199,"children":4200},{},[],{"type":37,"value":4202},"\n如果说微积分也有营养成分表，那么函数肯定会排在最前面。",{"type":18,"tag":40,"props":4204,"children":4205},{},[4206],{"type":37,"value":4207},"有一说一我始终没有接触到应用到微积分的层次，但我会慢慢往这方面发展。",{"type":18,"tag":4209,"props":4210,"children":4211},"style",{},[4212],{"type":37,"value":4213},"\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n",{"title":8,"searchDepth":4215,"depth":4215,"links":4216},2,[4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4233,4236,4237,4238],{"id":188,"depth":4215,"text":191},{"id":323,"depth":4215,"text":326},{"id":520,"depth":4215,"text":523},{"id":636,"depth":4215,"text":639},{"id":698,"depth":4215,"text":701},{"id":917,"depth":4215,"text":920},{"id":1073,"depth":4215,"text":1076},{"id":1442,"depth":4215,"text":1445},{"id":1559,"depth":4215,"text":1562},{"id":1738,"depth":4215,"text":1741},{"id":1912,"depth":4215,"text":1915},{"id":2280,"depth":4215,"text":2283},{"id":3017,"depth":4215,"text":3020},{"id":3092,"depth":4215,"text":3095,"children":4231},[4232],{"id":3147,"depth":3132,"text":3150},{"id":3619,"depth":4215,"text":3622,"children":4234},[4235],{"id":3649,"depth":3132,"text":3652},{"id":3729,"depth":4215,"text":3732},{"id":3825,"depth":4215,"text":3828},{"id":3856,"depth":4215,"text":3859,"children":4239},[4240],{"id":3879,"depth":3132,"text":3882},"markdown","content:book:seven-languages-in-seven-weeks---bruce-a-tate.md","content","book/seven-languages-in-seven-weeks---bruce-a-tate.md","md",{"_path":4247,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":4248,"description":8,"director":4249,"time":4250,"img":4251,"plan":4252,"body":4253,"_type":4241,"_id":4943,"_source":4243,"_file":4944,"_extension":4245},"/book/journey-to-the-west","西游记","吴承恩","2025","07/1.png","30,323",{"type":15,"children":4254,"toc":4941},[4255],{"type":18,"tag":19,"props":4256,"children":4257},{":by":21,":img":22,":plan":23,":title":24},[4258,4264,4268,4273,4279,4283,4297,4310,4315,4320,4322,4465,4470,4475,4480,4492,4497,4502,4507,4515,4520,4523,4529,4533,4538,4546,4551,4556,4561,4569,4581,4586,4591,4594,4600,4604,4609,4614,4619,4624,4647,4652,4657,4665,4670,4682,4687,4690,4696,4700,4705,4713,4718,4726,4731,4739,4744,4749,4754,4757,4763,4767,4772,4801,4806,4814,4827,4835,4840,4843,4849,4853,4858,4863,4868,4911,4916,4928,4936],{"type":18,"tag":32,"props":4259,"children":4261},{"id":4260},"四大名著-1",[4262],{"type":37,"value":4263},"四大名著 1",{"type":18,"tag":27,"props":4265,"children":4267},{":t":4266},"终于理解了为什么这几本书是四大名著",[],{"type":18,"tag":40,"props":4269,"children":4270},{},[4271],{"type":37,"value":4272},"在小时候。老师都说三国演义、水浒传、西游记、红楼梦是中国的四大名著。那时候还不解就四本书为什么含金量这么高。过了很多年初到社会再细品这四本书，发现这就是中国社会的缩影，其中不乏对人与人之间，国家运行时的一些隐晦表达，都在这四本书中一一体会。原来是我的打开方式不对，要读懂这几本书，要贴合现实发生的事情，来进行解读，就会发现目前现代社会和几百年前的社会并无不同，人与人和国家的运行时，都与当时大差不差。",{"type":18,"tag":32,"props":4274,"children":4276},{"id":4275},"八十一难-论功行赏-4",[4277],{"type":37,"value":4278},"八十一难 论功行赏 4",{"type":18,"tag":27,"props":4280,"children":4282},{":t":4281},"论功行赏，八戒垫底",[],{"type":18,"tag":40,"props":4284,"children":4285},{},[4286,4288,4295],{"type":37,"value":4287},"如果将西天取经，比作一个项目，一个工程的话。那么取经工程保护、记录、汇报的组织就是",{"type":18,"tag":76,"props":4289,"children":4292},{"href":4290,"rel":4291},"https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%B8%B8%E8%AE%B0%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8#%E5%85%B6%E4%BB%96_2",[80],[4293],{"type":37,"value":4294},"六丁六甲",{"type":37,"value":4296},"，向观音菩萨交法旨，而观音菩萨向如来交旨。观音菩萨开始审阅六丁六甲在西天取经的记录，发现少了一难，只有八十难。",{"type":18,"tag":137,"props":4298,"children":4299},{},[4300,4305],{"type":18,"tag":40,"props":4301,"children":4302},{},[4303],{"type":37,"value":4304},"如来因打发唐僧去后，才散了传经之会。傍又闪上观世音菩萨合掌启佛祖道：“弟子当年领金旨向东土寻取经之人，今已成功，共计得一十四年，乃五千零四十日，还少八日，不合藏数。望我世尊早赐圣僧回东转西，须在八日之内庶完藏数。准弟子缴还金旨。” 如来大喜道：“所言甚当，准缴金旨。” 即叫八大金刚分付道：“汝等快使神威，驾送圣僧回东，把真经传留，即引圣僧西回。须在八日之内，以完一藏之数，勿得迟违。” 金刚随即赶上唐僧，叫道：“取经的，跟我来。” 唐僧等俱身轻体健，荡荡飘飘，随著金刚，驾云而起。这才是：",{"type":18,"tag":40,"props":4306,"children":4307},{},[4308],{"type":37,"value":4309},"大鼋是一只在通天河上的巨鼋，唐僧师徒第一次遇见他时，他载唐僧等人渡河，并希望唐僧能替他问佛祖还需修行多久才能修成正果化身成人。回程的时候大鼋再度载唐僧师徒及经书过河，半途上问起这个承诺，然而早已遗忘此事的唐三藏无言以对，于是不高兴的大鼋身子一翻，把唐僧淹入水中。这个事件是唐僧取经所需历经的八十一难中的最后一难。",{"type":18,"tag":40,"props":4311,"children":4312},{},[4313],{"type":37,"value":4314},"大鼋对唐僧的要求可谓是人之常情，毕竟在通天河上班了很多年，帮助了唐僧；想问问佛祖还有多少年才能退休。但唐僧又没有帮大鼋办事，所以将唐僧摔下。",{"type":18,"tag":40,"props":4316,"children":4317},{},[4318],{"type":37,"value":4319},"到了长安后，取经工程以步入后章。虽然取经计划原定是三年，但经历了十多年后才取回，可谓是历经磨难。虽然时间超出了，但经是取回了。因此李世民撰文《圣教序》为取经工程定性。",{"type":37,"value":4321},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":4323,"children":4324},{},[4325,4351],{"type":18,"tag":414,"props":4326,"children":4327},{},[4328],{"type":18,"tag":418,"props":4329,"children":4330},{},[4331,4336,4341,4346],{"type":18,"tag":422,"props":4332,"children":4333},{},[4334],{"type":37,"value":4335},"名字",{"type":18,"tag":422,"props":4337,"children":4338},{},[4339],{"type":37,"value":4340},"受封",{"type":18,"tag":422,"props":4342,"children":4343},{},[4344],{"type":37,"value":4345},"等级",{"type":18,"tag":422,"props":4347,"children":4348},{},[4349],{"type":37,"value":4350},"作用",{"type":18,"tag":433,"props":4352,"children":4353},{},[4354,4377,4399,4420,4443],{"type":18,"tag":418,"props":4355,"children":4356},{},[4357,4362,4367,4372],{"type":18,"tag":440,"props":4358,"children":4359},{},[4360],{"type":37,"value":4361},"唐僧",{"type":18,"tag":440,"props":4363,"children":4364},{},[4365],{"type":37,"value":4366},"旃檀功德佛",{"type":18,"tag":440,"props":4368,"children":4369},{},[4370],{"type":37,"value":4371},"修成正果",{"type":18,"tag":440,"props":4373,"children":4374},{},[4375],{"type":37,"value":4376},"一人之下万人之上",{"type":18,"tag":418,"props":4378,"children":4379},{},[4380,4385,4390,4395],{"type":18,"tag":440,"props":4381,"children":4382},{},[4383],{"type":37,"value":4384},"孙悟空",{"type":18,"tag":440,"props":4386,"children":4387},{},[4388],{"type":37,"value":4389},"斗战圣佛",{"type":18,"tag":440,"props":4391,"children":4392},{},[4393],{"type":37,"value":4394},"大职正果",{"type":18,"tag":440,"props":4396,"children":4397},{},[4398],{"type":37,"value":4376},{"type":18,"tag":418,"props":4400,"children":4401},{},[4402,4407,4412,4416],{"type":18,"tag":440,"props":4403,"children":4404},{},[4405],{"type":37,"value":4406},"沙僧",{"type":18,"tag":440,"props":4408,"children":4409},{},[4410],{"type":37,"value":4411},"金身罗汉",{"type":18,"tag":440,"props":4413,"children":4414},{},[4415],{"type":37,"value":4394},{"type":18,"tag":440,"props":4417,"children":4418},{},[4419],{"type":37,"value":4376},{"type":18,"tag":418,"props":4421,"children":4422},{},[4423,4428,4433,4438],{"type":18,"tag":440,"props":4424,"children":4425},{},[4426],{"type":37,"value":4427},"小白龙",{"type":18,"tag":440,"props":4429,"children":4430},{},[4431],{"type":37,"value":4432},"八部天龙广力菩萨",{"type":18,"tag":440,"props":4434,"children":4435},{},[4436],{"type":37,"value":4437},"汝职正果",{"type":18,"tag":440,"props":4439,"children":4440},{},[4441],{"type":37,"value":4442},"保护灵山，禁卫军首领",{"type":18,"tag":418,"props":4444,"children":4445},{},[4446,4451,4456,4460],{"type":18,"tag":440,"props":4447,"children":4448},{},[4449],{"type":37,"value":4450},"猪八戒",{"type":18,"tag":440,"props":4452,"children":4453},{},[4454],{"type":37,"value":4455},"净坛使者",{"type":18,"tag":440,"props":4457,"children":4458},{},[4459],{"type":37,"value":4437},{"type":18,"tag":440,"props":4461,"children":4462},{},[4463],{"type":37,"value":4464},"打扫贡品的",{"type":18,"tag":40,"props":4466,"children":4467},{},[4468],{"type":37,"value":4469},"回到灵山后。唐僧是如来的二弟子，但不尊重佛法，投胎至东土大唐。取经修成正果后受封——旃檀功德佛（修成正果）；孙悟空虽大闹天宫，被如来镇压五百年，但取经过程中降妖伏魔受封斗战圣佛（大职正果）；猪八戒是净坛使者（汝职正果）。",{"type":18,"tag":40,"props":4471,"children":4472},{},[4473],{"type":37,"value":4474},"猪八戒对受封不满，于是质问如来被如来狠狠 PUA。说猪八戒由于 “又有顽心，色情未泯”，为如来佛祖的部下，负责享用一切人世间作功德的供品。绝对是 PUA 猪八戒，成佛了想吃什么没有，非要当个打工人吃边角料。虽然净水楼台先得月，但如果成佛了，躺在床上还有人喂这不香吗？",{"type":18,"tag":40,"props":4476,"children":4477},{},[4478],{"type":37,"value":4479},"而到了沙僧，沙僧虽然在蟠桃会上摔杯为号，威胁到了玉帝被贬流沙河。受封金身罗汉（大职正果）；白龙马在取经路上驼经有功，受封八部天龙广力菩萨（汝职正果）",{"type":18,"tag":40,"props":4481,"children":4482},{},[4483,4485,4490],{"type":37,"value":4484},"这种论功行赏，看的是他们背后的势力。唐僧功劳最大，取经团队的主要负责人；孙悟空背后就是道教，佛教，玉帝。谁都搞不死孙悟空，那既然这样不如 ",{"type":18,"tag":766,"props":4486,"children":4487},{},[4488],{"type":37,"value":4489},"请客，斩首，收下当狗",{"type":37,"value":4491}," 你会发现都是这么做的，只不过前期玉帝给的官小了，后面佛祖总结失败经验给了个官大的，成功收下当狗。",{"type":18,"tag":40,"props":4493,"children":4494},{},[4495],{"type":37,"value":4496},"虽然沙僧最后是个菩萨，但人家职级是和孙悟空一样的。而猪八戒虽然也是菩萨，但属于是菩萨里面打杂的；甚至猪八戒不如白龙马等极高，人家起码还能训练下禁卫军，而猪八戒只能吃人家剩下的贡品。沙僧的背后代表的是玉帝；白龙马背后就是龙王家族（婆罗门），四海龙王基本上走到哪都能看到龙王什么海龙王，河龙王，井里面也有龙王，有水的地方都有龙王。",{"type":18,"tag":40,"props":4498,"children":4499},{},[4500],{"type":37,"value":4501},"虽然龙在西游记里面级别比较低，玉帝办一下什么宴会都要有个龙肝凤胆(玉帝最喜欢吃龙王了)，动不动斩个龙王，甚至梦里都要斩个龙王玩玩消遣下工作的劳累。所以小白龙吃唐三藏坐骑给观音菩萨点化完全是偶遇，龙王策划的一个剧本，把小白龙这个富哥塞进去。如果取经成功了就能大大提升龙王家族的影响力，俺们龙王也是能给灵山当禁卫军的了，也算是给赵家人当上狗了。",{"type":18,"tag":40,"props":4503,"children":4504},{},[4505],{"type":37,"value":4506},"为什么小白龙一条龙要幻化成马呢，我比较认同一个观点。作为一个婆罗门一个富哥，尽量低调点，毕竟言多必失。变成马又不用降妖除魔，还不用说话，主打一个陪伴，不容易被人关注，不容易给人开黑料。这要给人曝光出来了，其他家族就来气了，凭什么他能混个编制成为禁卫军首领啊? 所以说龙王家族是真的厉害，基本上整部西游记形形色色的龙王出境率还算是比较高的。连我龙王家的祖传如意金箍棒都给孙悟空了，起码是重仓押注取经团队，不成功便成仁。",{"type":18,"tag":137,"props":4508,"children":4509},{},[4510],{"type":18,"tag":40,"props":4511,"children":4512},{},[4513],{"type":37,"value":4514},"道德天尊又称太上老君，小说中居于离恨天兜率宫（实际上兜率为印度词汇，道教中太上老君居于太清圣境）。孙悟空因大闹天宫，被太上老君的金刚镯打到，因此被捕，后被放于太上老君的八卦炉内焚化，不料非但没有被焚化，反而练就一双 “火眼金睛”，有看穿看透人事物的功力，在取经路途中，凡有妖怪化装成凡人或神仙，都逃不过他的火眼金睛而被拆穿。后来没被焚化的孙悟空出了八卦炉，愤而踢翻，造成八卦炉爆炸，火球与炭灰降于凡间西疆，而成为火焰山。替太上老君看管八卦炉的两名童子下凡作乱，分别自称金角大王和银角大王。太上老君的坐骑是一头青牛精，下凡作乱时自称独角兕大王。",{"type":18,"tag":40,"props":4516,"children":4517},{},[4518],{"type":37,"value":4519},"龙王家族最后变成有钱有势的韩国财阀一样的家族势力。再也不是那个有钱任人宰割的群体了。而猪八戒出身就是道教，道教扛把子就是太上老君，太上老君这个人也可以细细品，基本上西游记上很多妖怪，比如什么独角兕大王、金角大王、银角大王都是太上老君的坐骑什么的。",{"type":18,"tag":92,"props":4521,"children":4522},{},[],{"type":18,"tag":32,"props":4524,"children":4526},{"id":4525},"四十九回-观音地盘-2",[4527],{"type":37,"value":4528},"四十九回 观音地盘 2",{"type":18,"tag":27,"props":4530,"children":4532},{":t":4531},"观音的回旋镖",[],{"type":18,"tag":40,"props":4534,"children":4535},{},[4536],{"type":37,"value":4537},"灵感大王要胁住在河岸的村民每年必须供奉一对童男童女，以保风调雨顺、否则降灾。孙悟空和猪八戒伪装成童男童女并偷袭他，灵感大王不敌孙悟空而躲了起来，孙悟空便找上观音菩萨协助。最后由观音用鱼篮收回妖怪后带回了池塘。",{"type":18,"tag":137,"props":4539,"children":4540},{},[4541],{"type":18,"tag":40,"props":4542,"children":4543},{},[4544],{"type":37,"value":4545},"灵感大王为住在通天河里的妖怪，真实身份为普陀山莲花池的金鱼，因为听了观音说法而有了力量便下凡作恶。能够在一晚之内，将宽度 800 里、长度连孙悟空都看不见尽头的通天河冻成冰河。",{"type":18,"tag":40,"props":4547,"children":4548},{},[4549],{"type":37,"value":4550},"在四十九回时，孙悟空和灵感大王的掰扯。孙悟空可能发现了灵感大王的背后是观音菩萨，于是去找观音收服鲤鱼精。在这个故事中，你会发现。观音来了后将通天河的小鱼小虾都灭口了，就留了个鲤鱼精。",{"type":18,"tag":40,"props":4552,"children":4553},{},[4554],{"type":37,"value":4555},"这原本是观音的地盘，被孙悟空抓住了把柄。于是在八十一难的时候，陈家庄唐僧在此处讲经可以视作为观音将这个地盘让给了取经三人。孙悟空与观音菩萨交易成功。孙悟空之后也没有在玉帝、佛祖跟前给观音菩萨上眼药。",{"type":18,"tag":40,"props":4557,"children":4558},{},[4559],{"type":37,"value":4560},"在现实社会中，这个步骤就很像是观音菩萨贪污了一块地，改造成了个山水庄园。孙悟空误打误撞发现了这块贪污巨款，之后去给观音菩萨上眼药。之后在八十一难中，其实八十难就行了，但因为观音菩萨需要告诉孙悟空，这块地方我不要了，送给你，让你们去看看这块地怎么样，将秘密守护住堵住孙悟空的嘴；让其在论功行赏的时候不要泄露出去。",{"type":18,"tag":137,"props":4562,"children":4563},{},[4564],{"type":18,"tag":40,"props":4565,"children":4566},{},[4567],{"type":37,"value":4568},"紧箍咒是《西游记》中的一个咒语，又名定心真言，由如来发明，经观音菩萨传授给唐僧，用于对其弟子孙悟空的管教。",{"type":18,"tag":40,"props":4570,"children":4571},{},[4572,4574,4579],{"type":37,"value":4573},"孙悟空其实是比较讨厌观音菩萨的，因为紧箍咒就是观音菩萨给他下的套。想拿捏孙悟空，所以在取经工程前期，孙悟空一直被唐僧拿捏。这件事情告诉我们，不幸树敌的时候，可以 ",{"type":18,"tag":766,"props":4575,"children":4576},{},[4577],{"type":37,"value":4578},"捧高",{"type":37,"value":4580}," 下对方，就比如观音在通天河陈家庄那样，给孙悟空，唐僧他们整个供奉，来暗示孙悟空你都成佛了，再计较这些岂不是不符你身份？就当我观音是个小人忘记这些恶心事吧。",{"type":18,"tag":40,"props":4582,"children":4583},{},[4584],{"type":37,"value":4585},"这样孙悟空在论功行赏的时候，就不会打破和谐的气氛，让观音不被反腐。如果没有八十一难，那么孙悟空是会将观音说出去的，因为孙悟空背景很深，背后是道教、佛教、天庭。",{"type":18,"tag":40,"props":4587,"children":4588},{},[4589],{"type":37,"value":4590},"连在灵山唐僧师徒到灵山宝阁取经时，阿难、伽叶作为如来的底子要收取人事。孙悟空都要把索要人事之事捅到如来佛祖那里，佛祖并不觉有何不妥就可以看出，孙悟空是真的敢举报观音贪污的。",{"type":18,"tag":92,"props":4592,"children":4593},{},[],{"type":18,"tag":32,"props":4595,"children":4597},{"id":4596},"九十八回-放水-1",[4598],{"type":37,"value":4599},"九十八回 放水 1",{"type":18,"tag":27,"props":4601,"children":4603},{":t":4602},"放水",[],{"type":18,"tag":40,"props":4605,"children":4606},{},[4607],{"type":37,"value":4608},"如果只看前一部分凌云渡就会发现。取经三人在玉真观的时候，孙悟空之前是来过的，也见到了那个独木桥。但当时孙悟空道心不稳，所以觉得自己道行不够就去继续修炼了。这里很大一部分是如来引动孙悟空一步一步到灵山脚下的，但孙悟空没上勾。",{"type":18,"tag":40,"props":4610,"children":4611},{},[4612],{"type":37,"value":4613},"于是有了灵台方寸山斜月三星洞菩提祖师收孙悟空为徒非法授课，传授他七十二变，长生不老和筋斗云的法门。这就相当于违反了《校外培训行政处罚暂行办法》，而菩提祖师往上追溯可能是如来，这种事情怎么可能让玉帝知道。毕竟孙悟空也是大闹天宫打了玉帝的脸，这要让玉帝知道了估计会挑起佛教和天庭的对立。就从收服孙悟空那一章可以看出，当时的天庭较为薄弱，甚至还要请如来收服孙悟空。",{"type":18,"tag":40,"props":4615,"children":4616},{},[4617],{"type":37,"value":4618},"但到了第二次，孙悟空来到了灵山脚下。已经知道跨过这个独木桥就已经可以成佛成仙了，但唐僧不知道，又不能暗示唐僧通过这条路就已经可以成为人上人了。",{"type":18,"tag":40,"props":4620,"children":4621},{},[4622],{"type":37,"value":4623},"于是金顶大仙、孙悟空、阿弥陀佛轮番疯狂暗示：",{"type":18,"tag":137,"props":4625,"children":4626},{},[4627,4632,4637,4642],{"type":18,"tag":40,"props":4628,"children":4629},{},[4630],{"type":37,"value":4631},"　　“唐僧到玉真观，金顶大仙接着。” 已是到金仙之分，而猿熟马驯，体变纯阳之时矣。故诗云：“炼就长生居胜境，修成永寿脱尘埃” 也。大圣道：“此乃灵山脚下，金顶大仙。” 以见仙即是佛，佛即是仙。仙者，金丹有为之道；佛者，圆觉无为之道。佛不得金丹不能成佛，仙不明圆觉不能成仙，一而二，二而一，灵山雷音即金顶大仙，岂可以仙佛歧而二之乎？",{"type":18,"tag":40,"props":4633,"children":4634},{},[4635],{"type":37,"value":4636},"　　至凌云渡，独木桥，唐僧心惊，以为大仙错指，是猿熟马驯，而不知此脱壳也。行者道：“不差，要从那桥上行过去，方成正果。” 言猿熟马驯，而不可不在此脱壳也。了命之后，不得不了性，了性所以脱壳也。",{"type":18,"tag":40,"props":4638,"children":4639},{},[4640],{"type":37,"value":4641},"　　盖成仙作佛，为天下希有之事，人人所欲得，人人所难能。如凌云之高而难渡，正以难渡者而渡之，则仙矣、佛矣。盖渡之之法有二，一则无为之道，一则有为之道。无为之道，最上一乘之道；有为之道，金丹之道。一乘之道，即独木桥；金丹之道，即无底船。独木桥所以接上智，无底舱所以渡中人。何为独木桥，独木者，一乘也；桥者，梁道也，即最上一乘无为之道。故曰：“从桥上过，方成正果。” 诗云：“单梁细滑浑难渡，除是神仙步彩霞。” 言最上一乘之道，惟上智顿悟者可以行，而下智渐修者则难渡。",{"type":18,"tag":40,"props":4643,"children":4644},{},[4645],{"type":37,"value":4646},"　　三藏心惊道：“这桥不是人走的。” 以见下智者则难渡；行者笑道：“正是路！正是路！” 以见上智者可以行。“行者跳上桥，须臾跑将过去，又从那边跑过来。” 上智之人，本性圆明，不假施为，顿超彼岸，随机应变，遇境而安，出入无碍，来往不拘，无为之用自成，《中庸》所谓 “自诚明，谓之性也。”“唐僧摇手、八戒沙僧咬指道：难！难！难！’” 又曰：“滑！滑！滑！” 下智之人秉性愚鲁，为私欲所蔽，为全缘所诱，忘其本来面目，失其固有天良，着于假相，好生而恶死，不能顿悟圆通，终难归于大觉。若无金丹之道，焉能过得凌云之渡？《中庸》所谓 “自明诚，谓之教也。”《参同》云：“上德无为，不以察求；下德为之，其用不休。” 此无底船之不可无者也。",{"type":18,"tag":40,"props":4648,"children":4649},{},[4650],{"type":37,"value":4651},"唐僧是不敢走过独木桥的，甚至阿弥陀佛去渡船接他们的时候。唐僧也是不敢的，但由于孙悟空提前演示了下，唐僧就敢上渡船了。这个流程就很像 30 天速成 XXX 的赵家人空降。",{"type":18,"tag":40,"props":4653,"children":4654},{},[4655],{"type":37,"value":4656},"这各部分其实就是涉及到了佛教的轮回，六根（眼、耳、鼻、舌、身、意六個識根（感官器官），為二十二根之六）唐僧之所以无法过去。是因为还未自渡，还需他人渡，需要阿弥陀佛的渡船，但唐僧还是不敢。孙悟空只能狠狠的作弊回，当着阿弥陀佛和灵山、天庭的面作弊将唐僧拉上渡船，让唐僧脱离肉体凡胎，将取经工程进行下去。",{"type":18,"tag":137,"props":4658,"children":4659},{},[4660],{"type":18,"tag":40,"props":4661,"children":4662},{},[4663],{"type":37,"value":4664},"那长老手舞足蹈，随著行者，直至雷音寺山门之外。那厢有四大金刚迎住道：“圣僧来耶？” 三藏躬身道：“是，弟子玄奘到了。” 答毕，就欲进门。金刚道：“圣僧少待，容禀过再进。” 那金刚著一个转山门报与二门上四大金刚，说唐僧到了；二门上又传入三门上，说唐僧到了。三山门内原是打供的神僧，闻得唐僧到时，急至大雄殿下，报与如来至尊释迦牟尼文佛说：“唐朝圣僧，到于宝山，取经来了。” 佛爷爷大喜。即召聚八菩萨、四金刚、五百阿罗、三千揭谛、十一大曜、十八伽蓝，两行排列。却传金旨，召唐僧进。那里边一层一节，钦依佛旨，叫：“圣僧进来。” 这唐僧循规蹈矩，同悟空、悟能、悟净，牵马挑担，径入山门。",{"type":18,"tag":40,"props":4666,"children":4667},{},[4668],{"type":37,"value":4669},"有点像是仪仗队礼兵列队欢迎各国元首，然后又整几个礼炮奏乐。原来几百年前的东西一直流行到现在。皇权和大教总是喜欢一些雄伟宏大的建筑以及人性阵列来体现自己的教义覆盖面是多么的广，多么的厉害、多么的威严、充满了神性光辉。",{"type":18,"tag":40,"props":4671,"children":4672},{},[4673,4675,4680],{"type":37,"value":4674},"这也说明了一件事情。就是关于重要的功绩性事件，能放水的就放水。如果没有孙悟空作弊，那大概率唐僧是无法成为佛的，看到了独木桥和无底船就回想回去, 于是在灭法国国王那被砍头，因为灭法国国王曾发誓要杀一万个佛教僧侣，当唐僧师徒四人到达该国时，他已杀死 9996 个僧侣。这说明之前不只唐僧三人去取经，只不过这次是 ",{"type":18,"tag":766,"props":4676,"children":4677},{},[4678],{"type":37,"value":4679},"不惜一切代价，保证取经工程顺利进行",{"type":37,"value":4681},"。",{"type":18,"tag":40,"props":4683,"children":4684},{},[4685],{"type":37,"value":4686},"所以取经团队是这样的：看到独木桥或者无底船就怕了打道回府；-> 遇到寇员外招待劝返 -> 灭法国砍头。你会发现寇员外和灭法国都是一个要招待一万个和尚，另一个是要杀一万个和尚为目标；可谓是一对卧龙凤雏。",{"type":18,"tag":92,"props":4688,"children":4689},{},[],{"type":18,"tag":32,"props":4691,"children":4693},{"id":4692},"九十八回-早期知识付费-2",[4694],{"type":37,"value":4695},"九十八回 早期知识付费 2",{"type":18,"tag":27,"props":4697,"children":4699},{":t":4698},"知识付费",[],{"type":18,"tag":40,"props":4701,"children":4702},{},[4703],{"type":37,"value":4704},"在原著中唐僧第一次白嫖取的是无字真经。白雄尊者让唐僧三人坠机后发现自己拿的竟是无字经书还以为是假的，于是返回灵山。第二次跟着阿难、迦叶去取经书时向唐僧索要人事。通俗来讲就是小费，其实唐僧身上法宝多得很，比如观世音菩萨所赠的九环锡杖和锦斓袈裟。都算上的是极品法宝也不为过。于是唐僧选了一件紫金钵盂作为人事。这钵盂可是太宗皇帝在十二回《唐王秉诚修大会 观音显圣化金蝉》中送与唐僧的：",{"type":18,"tag":137,"props":4706,"children":4707},{},[4708],{"type":18,"tag":40,"props":4709,"children":4710},{},[4711],{"type":37,"value":4712},"朕又有一个紫金钵盂，送你途中化斋而用。再选两个长行的从者。又钦赐你马一匹，送为远行脚力。你可就此行程。” 玄奘大喜，即便谢了恩，领了物事，更无留滞之意。",{"type":18,"tag":40,"props":4714,"children":4715},{},[4716],{"type":37,"value":4717},"之后孙悟空因看了无字经书，此觉得整个灵山简直就是目无法纪，竟然公开受贿。学习借个书都要钱，于是在如来面前控诉。但如来听闻并不觉得有什么奇怪，反而觉得要少了。并澄清无字经书可比有字的之前，是你们道行不够不识货。我们灵山的和尚下去讲经，可都是要送三斗金粒以及好生伺候才行的！",{"type":18,"tag":137,"props":4719,"children":4720},{},[4721],{"type":18,"tag":40,"props":4722,"children":4723},{},[4724],{"type":37,"value":4725},"“如来，我师徒们受了万蜇千魔，千辛万苦，自东土拜到此处，蒙如来分付传经，被阿傩、伽叶掯财不遂，通同作弊，故意将无字的白纸本儿教我们拿去。我们拿他去何用？望如来敕治。” 佛祖笑道：“你且休嚷。他两个问你要人事之情，我已知矣。但只是经不可轻传，亦不可以空取。向时众比丘圣僧下山，曾将此经在舍卫国赵长者家与他诵了一遍，保他家生者安全，亡者超脱，只讨得他三斗三升米粒黄金回来。我还说他们忒卖贱了，教后代儿孙没钱使用。你如今空手来取，是以传了白本。白本者，乃无字真经，倒也是好的。因你那东土众生愚迷不悟，只可以此传之耳。” 即叫：“阿傩、伽叶，快将有字的真经，每部中各检几卷与他，来此报数。”",{"type":18,"tag":40,"props":4727,"children":4728},{},[4729],{"type":37,"value":4730},"于是第二次，唐僧没有再白嫖，狠狠的知识付费了一次，原著是这样写的：",{"type":18,"tag":137,"props":4732,"children":4733},{},[4734],{"type":18,"tag":40,"props":4735,"children":4736},{},[4737],{"type":37,"value":4738},"二尊者复领四众，到珍楼宝阁之下，仍问唐僧要些人事。三藏无物奉承，即命沙僧取出紫金钵盂，双手奉上道：“弟子委是穷寒路遥，不曾备得人事。这钵盂乃唐王亲手所赐，教弟子持此沿路化斋。今特奉上，聊表寸心。万望尊者将此收下，待回朝奏上唐王，定有厚谢。只是以有字真经赐下，庶不孤钦差之意，远涉之劳也。” 那阿傩接了，但微微而笑。",{"type":18,"tag":40,"props":4740,"children":4741},{},[4742],{"type":37,"value":4743},"之所以是无字经，无论是如来还是燃灯古佛，都一致认为无字经才是真的经。《金刚经》有一句特别出名的话可以描述：“一切有为法，如梦幻泡影，如露亦如电，应作如是观” 或者： \"凡所有相，皆是虚妄。若见诸相非相，则见如来\"。因为如果要成佛，就需要六根清净，也就是抛弃肉体凡胎，经历过轮回，那个时候就不需要经书了，我就是经书！还需要你来渡我？",{"type":18,"tag":40,"props":4745,"children":4746},{},[4747],{"type":37,"value":4748},"其实这里还是可以白嫖的，因为取经工程这么大个项目，因为手底下一个小科长受贿就停摆了怎么行。这不是打燃灯古佛、如来、玉帝、观音、天庭的脸吗？就算是白嫖，如果脸皮厚点也是可以的，毕竟赚的可是扩充了佛教的地盘和影响力。",{"type":18,"tag":40,"props":4750,"children":4751},{},[4752],{"type":37,"value":4753},"唐僧几人虽然经历过凌云渡成为了佛，但还是道行不深需要他人渡己，所以看不懂无字经书。我觉得无字经书就是如来手下一大堆老干部拿着自己的意志然后贴一个如来法旨为所欲为。",{"type":18,"tag":92,"props":4755,"children":4756},{},[],{"type":18,"tag":32,"props":4758,"children":4760},{"id":4759},"九十六回-人生的选择-2",[4761],{"type":37,"value":4762},"九十六回 人生的选择 2",{"type":18,"tag":27,"props":4764,"children":4766},{":t":4765},"有时候看似选择很多，实际上只能选一个",[],{"type":18,"tag":40,"props":4768,"children":4769},{},[4770],{"type":37,"value":4771},"如果你取经走到了这里，那么再往前一走就是凌云渡。如果你不敢走独木桥，也不敢走无底船。那么大概率还是要回到寇员外这里的。也就是铜台府地灵县，\n寇员外本命寇洪，40 岁时立誓斋万僧，并在门前挂着 “万僧不阻” 四字大牌。如果要形容寇员外的家，那原文是这样描述的：",{"type":18,"tag":137,"props":4773,"children":4774},{},[4775,4780,4788,4793],{"type":18,"tag":40,"props":4776,"children":4777},{},[4778],{"type":37,"value":4779},"真个是红尘不到赛珍楼，",{"type":18,"tag":1105,"props":4781,"children":4782},{},[4783],{"type":18,"tag":210,"props":4784,"children":4785},{},[4786],{"type":37,"value":4787},"佛堂所在之处的宁静与超脱",{"type":18,"tag":40,"props":4789,"children":4790},{},[4791],{"type":37,"value":4792},"家奉佛堂欺上刹",{"type":18,"tag":1105,"props":4794,"children":4795},{},[4796],{"type":18,"tag":210,"props":4797,"children":4798},{},[4799],{"type":37,"value":4800},"其华丽程度甚至超过了正规的寺庙（“上刹” 指的是高级或有名的佛教寺院）",{"type":18,"tag":40,"props":4802,"children":4803},{},[4804],{"type":37,"value":4805},"非常碰巧的是，寇员外离自己定下的目标还差四位僧人。唐僧一行人正好补全了这个缺口，也就是说在此之前，大唐不仅只派出唐僧一人去完成取经目标：",{"type":18,"tag":137,"props":4807,"children":4808},{},[4809],{"type":18,"tag":40,"props":4810,"children":4811},{},[4812],{"type":37,"value":4813},"“弟子贱名寇洪，字大宽，虚度六十四岁。自四十岁上，许斋万僧，才做圆满。今已斋了二十四年，有一簿斋僧的帐目。连日无事，把斋过的僧名算一算，已斋过九千九百九十六员，止少四众，不得圆满。今日可可的天降老师四位，圆满万僧之数。请留尊讳，好歹宽住月馀，待做了圆满，弟子著轿马送老师上山。此间到灵山只有八百里路，苦不远也。”",{"type":18,"tag":40,"props":4815,"children":4816},{},[4817,4819,4825],{"type":37,"value":4818},"如果你将 ",{"type":18,"tag":287,"props":4820,"children":4822},{"className":4821},[],[4823],{"type":37,"value":4824},"九千九百九十六",{"type":37,"value":4826}," 进行搜索的话，那么你会发现，寇员外竟和灭法国国王重合了",{"type":18,"tag":137,"props":4828,"children":4829},{},[4830],{"type":18,"tag":40,"props":4831,"children":4832},{},[4833],{"type":37,"value":4834},"“那里去有五六里远近，乃是灭法国。那国王前生那世里结下冤仇，今世里无端造罪。二年前许下一个罗天大愿，要杀一万个和尚。这两年陆陆续续，杀够了九千九百九十六个无名和尚，只要等四个有名的和尚，凑成一万，好做圆满哩。你们去，若到城中，都是送命王菩萨。”",{"type":18,"tag":40,"props":4836,"children":4837},{},[4838],{"type":37,"value":4839},"这件事情告诉我们，有些时候。虽然看似机会有很多，大不了可以放弃。但如果真的放弃选择回头，那大概会万劫不复懵懵懂懂平庸的度过这波澜壮阔而又一事无成的一生。就像那些送命的僧人一样，即使从凌云渡退下来回到了地灵县，不听寇员外劝阻依然选择原路返回，到了灭法国了送命。",{"type":18,"tag":92,"props":4841,"children":4842},{},[],{"type":18,"tag":32,"props":4844,"children":4846},{"id":4845},"九十七回-自证陷阱-2",[4847],{"type":37,"value":4848},"九十七回 自证陷阱 2",{"type":18,"tag":27,"props":4850,"children":4852},{":t":4851},"老人被车撞，扶与不扶？",[],{"type":18,"tag":40,"props":4854,"children":4855},{},[4856],{"type":37,"value":4857},"首先我们都能认定的是，我们不是孙悟空。我们没有那种能力在人证物证俱在的情况下，证明自己的清白。哪怕这件事不是自己做的。在这种情况下，无论怎么解释，都会被人下定义，扣帽子，定立场。各种各样的诡辩层出不穷，在这样的环境下，最好的方式就是少说话，不说话。哪怕有人处在危险境地时，也不要轻易伸出援手。",{"type":18,"tag":40,"props":4859,"children":4860},{},[4861],{"type":37,"value":4862},"因为会被他人怀疑是你做的。不是你做的你为什么要帮助对方？你是不是心怀愧意？你是不是另有安排？这是不是你策划的？你有什么目的？你的动机是什么？你取得有关部门许可了吗？他们容许你发了吗？你背后是谁，发这些想做什么？你在讽刺谁？想颠覆什么？破坏什么？影射什么？",{"type":18,"tag":40,"props":4864,"children":4865},{},[4866],{"type":37,"value":4867},"指责和拷问完全不需要证据和理智，甚至不需要逻辑也不需要思考。如果你一一回答了，会被说你急了。也就是现在的网络君子六艺”：典、孝、急、乐、蚌、批、赢、麻：",{"type":18,"tag":137,"props":4869,"children":4870},{},[4871,4876,4881,4886,4891,4896,4901,4906],{"type":18,"tag":40,"props":4872,"children":4873},{},[4874],{"type":37,"value":4875},"当对方陈述观点时，无论观点对错，说“典”",{"type":18,"tag":40,"props":4877,"children":4878},{},[4879],{"type":37,"value":4880},"当对方支持自己不支持的人或事时，说“孝”",{"type":18,"tag":40,"props":4882,"children":4883},{},[4884],{"type":37,"value":4885},"当对方辩论，或是开始细致解说时，说“急”",{"type":18,"tag":40,"props":4887,"children":4888},{},[4889],{"type":37,"value":4890},"当自己难以理解对方表达的观点时，说“乐”",{"type":18,"tag":40,"props":4892,"children":4893},{},[4894],{"type":37,"value":4895},"当对方要求你表达不存在的观点时，说“蚌”",{"type":18,"tag":40,"props":4897,"children":4898},{},[4899],{"type":37,"value":4900},"当对方产生足以称为立场的观点时，说“批”",{"type":18,"tag":40,"props":4902,"children":4903},{},[4904],{"type":37,"value":4905},"当自己说出自认为一针见血的话时，说“赢”",{"type":18,"tag":40,"props":4907,"children":4908},{},[4909],{"type":37,"value":4910},"当无法对对方言论进行有效反驳时，说“麻”",{"type":18,"tag":40,"props":4912,"children":4913},{},[4914],{"type":37,"value":4915},"对于这种现象。并不能怪对方，只能引用《论语·颜渊》的一句话：",{"type":18,"tag":40,"props":4917,"children":4918},{},[4919,4921,4926],{"type":37,"value":4920},"季康子问政于孔子曰：“如杀无道，以就有道，何如？” 孔子对曰：“子为政，焉用杀？子欲善，而民善矣。",{"type":18,"tag":766,"props":4922,"children":4923},{},[4924],{"type":37,"value":4925},"君子之德风，小人之德草。草上之风，必偃。",{"type":37,"value":4927},"”",{"type":18,"tag":1105,"props":4929,"children":4930},{},[4931],{"type":18,"tag":210,"props":4932,"children":4933},{},[4934],{"type":37,"value":4935},"季康子问政：“如果杀掉恶人，延揽好人，怎样？” 孔子说：“您治理国家，怎麽要杀人呢？如果您善良，人民自然也就善良。领导的品德象风，群衆的品德象草，风在草上吹，草必随风倒。”",{"type":18,"tag":40,"props":4937,"children":4938},{},[4939],{"type":37,"value":4940},"哪怕强如孙悟空，都要要精心策划下、动用关系才能从自证陷阱走出。我们普通人没有定身法、也没有七十二变，接触不到玉帝那个层次的关系。也不能畅通 冥府，命地藏王菩萨办事。",{"title":8,"searchDepth":4215,"depth":4215,"links":4942},[],"content:book:journey-to-the-west.md","book/journey-to-the-west.md",{"_path":4946,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":4947,"description":8,"director":4948,"time":4949,"img":4950,"plan":4951,"body":4952,"_type":4241,"_id":5348,"_source":4243,"_file":5349,"_extension":4245},"/book/criminal_minds","Criminal Minds","R/N","2024.10.11","06/1.png","1,100",{"type":15,"children":4953,"toc":5343},[4954],{"type":18,"tag":19,"props":4955,"children":4956},{":by":21,":img":22,":plan":23,":title":24},[4957,4961,4967,4972,4980,4986,4991,5008,5013,5016,5020,5025,5029,5035,5041,5046,5208,5219,5222,5228,5232,5237],{"type":18,"tag":27,"props":4958,"children":4960},{":t":4959},"第一季",[],{"type":18,"tag":32,"props":4962,"children":4964},{"id":4963},"行为分析小组-0",[4965],{"type":37,"value":4966},"行为分析小组 0",{"type":18,"tag":40,"props":4968,"children":4969},{},[4970],{"type":37,"value":4971},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":18,"tag":137,"props":4973,"children":4974},{},[4975],{"type":18,"tag":40,"props":4976,"children":4977},{},[4978],{"type":37,"value":4979},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":18,"tag":186,"props":4981,"children":4983},{"id":4982},"历史学院与教会对情报工作的帮助-1",[4984],{"type":37,"value":4985},"历史学院与教会对情报工作的帮助 1",{"type":18,"tag":40,"props":4987,"children":4988},{},[4989],{"type":37,"value":4990},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":18,"tag":137,"props":4992,"children":4993},{},[4994],{"type":18,"tag":40,"props":4995,"children":4996},{},[4997,4999,5006],{"type":37,"value":4998},"比如 ",{"type":18,"tag":76,"props":5000,"children":5003},{"href":5001,"rel":5002},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[80],[5004],{"type":37,"value":5005},"洪博培",{"type":37,"value":5007}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":18,"tag":40,"props":5009,"children":5010},{},[5011],{"type":37,"value":5012},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"type":18,"tag":92,"props":5014,"children":5015},{},[],{"type":18,"tag":27,"props":5017,"children":5019},{":t":5018},"菜鸟老警",[],{"type":18,"tag":40,"props":5021,"children":5022},{},[5023],{"type":37,"value":5024},"有一说一这些美警剧集都挺多的，比如芝加哥警署、FBI 调查局、菜鸟老警这些。其中最直观的体现就是老人带新人，一个团队里三个老人两个新人。通过这种老人带新人的方式来培养接班人，并塑造荣誉感然后灌输理想使命。",{"type":18,"tag":27,"props":5026,"children":5028},{":t":5027,"type":330},"DEAR 在心理学的应用",[],{"type":18,"tag":32,"props":5030,"children":5032},{"id":5031},"dear-方法-2",[5033],{"type":37,"value":5034},"DEAR 方法 2",{"type":18,"tag":186,"props":5036,"children":5038},{"id":5037},"心理学-1",[5039],{"type":37,"value":5040},"心理学 1",{"type":18,"tag":40,"props":5042,"children":5043},{},[5044],{"type":37,"value":5045},"在心理学中，DEAR 分为了：",{"type":18,"tag":206,"props":5047,"children":5048},{},[5049,5083,5125,5173],{"type":18,"tag":210,"props":5050,"children":5051},{},[5052,5054,5059],{"type":37,"value":5053},"D – Describe ",{"type":18,"tag":766,"props":5055,"children":5056},{},[5057],{"type":37,"value":5058},"（描述）",{"type":18,"tag":1105,"props":5060,"children":5061},{},[5062,5073,5078],{"type":18,"tag":210,"props":5063,"children":5064},{},[5065,5067,5072],{"type":37,"value":5066},"客观地描述发生的事情，",{"type":18,"tag":766,"props":5068,"children":5069},{},[5070],{"type":37,"value":5071},"不带情绪、不指责。只陈述事实，避免夸大或主观推测",{"type":37,"value":4681},{"type":18,"tag":210,"props":5074,"children":5075},{},[5076],{"type":37,"value":5077},"❌：「你根本不在乎我！」",{"type":18,"tag":210,"props":5079,"children":5080},{},[5081],{"type":37,"value":5082},"✅：「我们约好了 7 点见面，但你 8 点才到，没有提前告诉我。」",{"type":18,"tag":210,"props":5084,"children":5085},{},[5086,5088,5093],{"type":37,"value":5087},"E – Express ",{"type":18,"tag":766,"props":5089,"children":5090},{},[5091],{"type":37,"value":5092},"（表达感受）",{"type":18,"tag":1105,"props":5094,"children":5095},{},[5096,5115,5120],{"type":18,"tag":210,"props":5097,"children":5098},{},[5099,5101,5106,5108,5113],{"type":37,"value":5100},"用\"",{"type":18,"tag":766,"props":5102,"children":5103},{},[5104],{"type":37,"value":5105},"我",{"type":37,"value":5107},"\"开头，表达自己的感受，而",{"type":18,"tag":766,"props":5109,"children":5110},{},[5111],{"type":37,"value":5112},"不是指责对方",{"type":37,"value":5114},"。 诚实、直接地告诉对方你的感受或想法。",{"type":18,"tag":210,"props":5116,"children":5117},{},[5118],{"type":37,"value":5119},"❌：「你总是不通知我，太自私了！」",{"type":18,"tag":210,"props":5121,"children":5122},{},[5123],{"type":37,"value":5124},"✅：「当你迟到又不通知时，我会感到被忽视和不受重视。」",{"type":18,"tag":210,"props":5126,"children":5127},{},[5128,5130,5135],{"type":37,"value":5129},"A – Assert ",{"type":18,"tag":766,"props":5131,"children":5132},{},[5133],{"type":37,"value":5134},"（主张需求）",{"type":18,"tag":1105,"props":5136,"children":5137},{},[5138,5163,5168],{"type":18,"tag":210,"props":5139,"children":5140},{},[5141,5143,5148,5150,5155,5157,5162],{"type":37,"value":5142},"清楚地表达你",{"type":18,"tag":766,"props":5144,"children":5145},{},[5146],{"type":37,"value":5147},"希望对方做什么",{"type":37,"value":5149},"，而",{"type":18,"tag":766,"props":5151,"children":5152},{},[5153],{"type":37,"value":5154},"不是让对方猜测",{"type":37,"value":5156},"。语气坚定但",{"type":18,"tag":766,"props":5158,"children":5159},{},[5160],{"type":37,"value":5161},"不攻击",{"type":37,"value":4681},{"type":18,"tag":210,"props":5164,"children":5165},{},[5166],{"type":37,"value":5167},"❌：「你应该知道这样做不对！」",{"type":18,"tag":210,"props":5169,"children":5170},{},[5171],{"type":37,"value":5172},"✅: 「如果你会迟到，请提前告诉我，这样我就能调整安排。」",{"type":18,"tag":210,"props":5174,"children":5175},{},[5176,5178,5183],{"type":37,"value":5177},"R - R – Reinforce ",{"type":18,"tag":766,"props":5179,"children":5180},{},[5181],{"type":37,"value":5182},"（强化关系）",{"type":18,"tag":1105,"props":5184,"children":5185},{},[5186,5198,5203],{"type":18,"tag":210,"props":5187,"children":5188},{},[5189,5191,5196],{"type":37,"value":5190},"说明这样做的好处，强化对方遵循你的请求的动机。可以强调",{"type":18,"tag":766,"props":5192,"children":5193},{},[5194],{"type":37,"value":5195},"双赢",{"type":37,"value":5197},"，或者提醒对方维持良好关系的重要性。",{"type":18,"tag":210,"props":5199,"children":5200},{},[5201],{"type":37,"value":5202},"❌：「你要是不改，我们就别做朋友了。」",{"type":18,"tag":210,"props":5204,"children":5205},{},[5206],{"type":37,"value":5207},"✅：「如果我们能更好地沟通，我相信我们的关系会更愉快。」",{"type":18,"tag":40,"props":5209,"children":5210},{},[5211,5213,5218],{"type":37,"value":5212},"这个属于辩证行为疗法，主要解决类似 ",{"type":18,"tag":766,"props":5214,"children":5215},{},[5216],{"type":37,"value":5217},"人际关系，情感调解，边缘型人格障碍",{"type":37,"value":4681},{"type":18,"tag":92,"props":5220,"children":5221},{},[],{"type":18,"tag":186,"props":5223,"children":5225},{"id":5224},"犯罪分析-2",[5226],{"type":37,"value":5227},"犯罪分析 2",{"type":18,"tag":27,"props":5229,"children":5231},{":t":5230,"type":330},"DEAR 在犯罪分析的应用",[],{"type":18,"tag":40,"props":5233,"children":5234},{},[5235],{"type":37,"value":5236},"在 DEAR 中，藏匿一个物品有四个原则，分别是：",{"type":18,"tag":206,"props":5238,"children":5239},{},[5240,5263,5291,5317],{"type":18,"tag":210,"props":5241,"children":5242},{},[5243,5245,5250],{"type":37,"value":5244},"D - Deception ",{"type":18,"tag":766,"props":5246,"children":5247},{},[5248],{"type":37,"value":5249},"（骗局）",{"type":18,"tag":1105,"props":5251,"children":5252},{},[5253,5258],{"type":18,"tag":210,"props":5254,"children":5255},{},[5256],{"type":37,"value":5257},"让你将一个东西理解成另外一个东西",{"type":18,"tag":210,"props":5259,"children":5260},{},[5261],{"type":37,"value":5262},"例如易拉罐里面是重要资料。",{"type":18,"tag":210,"props":5264,"children":5265},{},[5266,5268,5273],{"type":37,"value":5267},"E - Elusive ",{"type":18,"tag":766,"props":5269,"children":5270},{},[5271],{"type":37,"value":5272},"（不易记住）",{"type":18,"tag":1105,"props":5274,"children":5275},{},[5276,5286],{"type":18,"tag":210,"props":5277,"children":5278},{},[5279,5281],{"type":37,"value":5280},"看似",{"type":18,"tag":766,"props":5282,"children":5283},{},[5284],{"type":37,"value":5285},"没有用的东西很有用",{"type":18,"tag":210,"props":5287,"children":5288},{},[5289],{"type":37,"value":5290},"例如带宽接口里面别有洞天",{"type":18,"tag":210,"props":5292,"children":5293},{},[5294,5296,5301],{"type":37,"value":5295},"A - Access ",{"type":18,"tag":766,"props":5297,"children":5298},{},[5299],{"type":37,"value":5300},"（难以接近）",{"type":18,"tag":1105,"props":5302,"children":5303},{},[5304,5312],{"type":18,"tag":210,"props":5305,"children":5306},{},[5307],{"type":18,"tag":766,"props":5308,"children":5309},{},[5310],{"type":37,"value":5311},"高处、低处",{"type":18,"tag":210,"props":5313,"children":5314},{},[5315],{"type":37,"value":5316},"例如吊灯，地板第四个间隔",{"type":18,"tag":210,"props":5318,"children":5319},{},[5320,5322,5327],{"type":37,"value":5321},"R - Repulsive ",{"type":18,"tag":766,"props":5323,"children":5324},{},[5325],{"type":37,"value":5326},"（令人恶心的东西）",{"type":18,"tag":1105,"props":5328,"children":5329},{},[5330,5338],{"type":18,"tag":210,"props":5331,"children":5332},{},[5333],{"type":18,"tag":766,"props":5334,"children":5335},{},[5336],{"type":37,"value":5337},"厕所，垃圾桶，情趣玩具",{"type":18,"tag":210,"props":5339,"children":5340},{},[5341],{"type":37,"value":5342},"藏在令人作呕的地方。",{"title":8,"searchDepth":4215,"depth":4215,"links":5344},[5345,5346,5347],{"id":4982,"depth":4215,"text":4985},{"id":5037,"depth":4215,"text":5040},{"id":5224,"depth":4215,"text":5227},"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":5351,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":5352,"description":8,"director":4948,"time":5353,"img":5354,"plan":5355,"body":5356,"_type":4241,"_id":5567,"_source":4243,"_file":5568,"_extension":4245},"/book/24-hour","24 hour","2024.7.22","05/1.png","50,100",{"type":15,"children":5357,"toc":5565},[5358],{"type":18,"tag":19,"props":5359,"children":5360},{":by":21,":img":22,":plan":23,":title":24},[5361,5365,5371,5376,5381,5386,5391,5396,5401,5406,5411,5416,5421,5425,5431,5480,5481,5560],{"type":18,"tag":27,"props":5362,"children":5364},{":t":5363},"1~3 季",[],{"type":18,"tag":32,"props":5366,"children":5368},{"id":5367},"_13-季不要内耗-1",[5369],{"type":37,"value":5370},"1~3 季：不要内耗 1",{"type":18,"tag":40,"props":5372,"children":5373},{},[5374],{"type":37,"value":5375},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":18,"tag":40,"props":5377,"children":5378},{},[5379],{"type":37,"value":5380},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":18,"tag":40,"props":5382,"children":5383},{},[5384],{"type":37,"value":5385},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":18,"tag":40,"props":5387,"children":5388},{},[5389],{"type":37,"value":5390},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":18,"tag":40,"props":5392,"children":5393},{},[5394],{"type":37,"value":5395},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":18,"tag":40,"props":5397,"children":5398},{},[5399],{"type":37,"value":5400},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":18,"tag":40,"props":5402,"children":5403},{},[5404],{"type":37,"value":5405},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":18,"tag":40,"props":5407,"children":5408},{},[5409],{"type":37,"value":5410},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":18,"tag":40,"props":5412,"children":5413},{},[5414],{"type":37,"value":5415},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":18,"tag":40,"props":5417,"children":5418},{},[5419],{"type":37,"value":5420},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":18,"tag":27,"props":5422,"children":5424},{":t":5423},"Subchannel chip",[],{"type":18,"tag":32,"props":5426,"children":5428},{"id":5427},"子通道芯片-subchannel-chip-2",[5429],{"type":37,"value":5430},"子通道芯片: Subchannel chip 2",{"type":18,"tag":40,"props":5432,"children":5433},{},[5434,5436,5443,5445,5452,5453,5460,5462,5469,5471,5478],{"type":37,"value":5435},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":18,"tag":76,"props":5437,"children":5440},{"href":5438,"rel":5439},"https://24.fandom.com/wiki/Subchannel_chip",[80],[5441],{"type":37,"value":5442},"24 Wiki",{"type":37,"value":5444}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":18,"tag":76,"props":5446,"children":5449},{"href":5447,"rel":5448},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[80],[5450],{"type":37,"value":5451},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":37,"value":1979},{"type":18,"tag":76,"props":5454,"children":5457},{"href":5455,"rel":5456},"https://en.wikipedia.org/wiki/Ultra-wideband#",[80],[5458],{"type":37,"value":5459},"超宽频(UWB, Ultra-wideband)",{"type":37,"value":5461},"，",{"type":18,"tag":76,"props":5463,"children":5466},{"href":5464,"rel":5465},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[80],[5467],{"type":37,"value":5468},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":37,"value":5470}," 所常用的 ",{"type":18,"tag":76,"props":5472,"children":5475},{"href":5473,"rel":5474},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[80],[5476],{"type":37,"value":5477},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":37,"value":5479}," 协议。",{"type":37,"value":2902},{"type":18,"tag":410,"props":5482,"children":5483},{},[5484,5504],{"type":18,"tag":414,"props":5485,"children":5486},{},[5487],{"type":18,"tag":418,"props":5488,"children":5489},{},[5490,5495,5499],{"type":18,"tag":422,"props":5491,"children":5492},{},[5493],{"type":37,"value":5494},"名称",{"type":18,"tag":422,"props":5496,"children":5497},{},[5498],{"type":37,"value":3443},{"type":18,"tag":422,"props":5500,"children":5501},{},[5502],{"type":37,"value":5503},"领域",{"type":18,"tag":433,"props":5505,"children":5506},{},[5507,5525,5542],{"type":18,"tag":418,"props":5508,"children":5509},{},[5510,5515,5520],{"type":18,"tag":440,"props":5511,"children":5512},{},[5513],{"type":37,"value":5514},"FHSS",{"type":18,"tag":440,"props":5516,"children":5517},{},[5518],{"type":37,"value":5519},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":18,"tag":440,"props":5521,"children":5522},{},[5523],{"type":37,"value":5524},"无线电",{"type":18,"tag":418,"props":5526,"children":5527},{},[5528,5533,5538],{"type":18,"tag":440,"props":5529,"children":5530},{},[5531],{"type":37,"value":5532},"UWB",{"type":18,"tag":440,"props":5534,"children":5535},{},[5536],{"type":37,"value":5537},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":18,"tag":440,"props":5539,"children":5540},{},[5541],{"type":37,"value":5524},{"type":18,"tag":418,"props":5543,"children":5544},{},[5545,5550,5555],{"type":18,"tag":440,"props":5546,"children":5547},{},[5548],{"type":37,"value":5549},"NB-IoT",{"type":18,"tag":440,"props":5551,"children":5552},{},[5553],{"type":37,"value":5554},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":18,"tag":440,"props":5556,"children":5557},{},[5558],{"type":37,"value":5559},"无线电与物联网",{"type":18,"tag":40,"props":5561,"children":5562},{},[5563],{"type":37,"value":5564},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":4215,"depth":4215,"links":5566},[],"content:book:24-hour.md","book/24-hour.md",{"_path":5570,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":5571,"description":8,"director":5572,"time":5573,"img":5574,"plan":5575,"body":5576,"_type":4241,"_id":6676,"_source":4243,"_file":6677,"_extension":4245},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","100,100",{"type":15,"children":5577,"toc":6674},[5578],{"type":18,"tag":19,"props":5579,"children":5580},{":by":21,":img":22,":plan":23,":title":24},[5581,5585,5591,5612,5613,5688,5702,5710,5724,5737,5740,5745,5750,5753,5757,5761,5766,5771,5776,5777,5876,5881,5891,5892,5957,5962,5970,5975,5978,5982,5988,5993,5995,6055,6060,6073,6078,6082,6087,6089,6234,6242,6247,6255,6260,6264,6287,6311,6316,6320,6321,6401,6419,6424,6427,6432,6438,6442,6447,6451,6456,6458,6588,6601,6609,6617,6622,6630,6634,6639,6651,6663],{"type":18,"tag":27,"props":5582,"children":5584},{":t":5583},"Google Project Zero",[],{"type":18,"tag":32,"props":5586,"children":5588},{"id":5587},"作者-1",[5589],{"type":37,"value":5590},"作者 1",{"type":18,"tag":40,"props":5592,"children":5593},{},[5594,5596,5602,5604,5610],{"type":37,"value":5595},"本书的作者是 ",{"type":18,"tag":76,"props":5597,"children":5600},{"href":5598,"rel":5599},"https://github.com/tyranid",[80],[5601],{"type":37,"value":5572},{"type":37,"value":5603},"，也是著名的 ",{"type":18,"tag":76,"props":5605,"children":5608},{"href":5606,"rel":5607},"https://googleprojectzero.blogspot.com/",[80],[5609],{"type":37,"value":5583},{"type":37,"value":5611}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":37,"value":2290},{"type":18,"tag":410,"props":5614,"children":5615},{},[5616,5631],{"type":18,"tag":414,"props":5617,"children":5618},{},[5619],{"type":18,"tag":418,"props":5620,"children":5621},{},[5622,5627],{"type":18,"tag":422,"props":5623,"children":5624},{},[5625],{"type":37,"value":5626},"会议",{"type":18,"tag":422,"props":5628,"children":5629},{},[5630],{"type":37,"value":3443},{"type":18,"tag":433,"props":5632,"children":5633},{},[5634,5652,5670],{"type":18,"tag":418,"props":5635,"children":5636},{},[5637,5647],{"type":18,"tag":440,"props":5638,"children":5639},{},[5640],{"type":18,"tag":76,"props":5641,"children":5644},{"href":5642,"rel":5643},"https://www.blackhat.com/",[80],[5645],{"type":37,"value":5646},"BlackHat",{"type":18,"tag":440,"props":5648,"children":5649},{},[5650],{"type":37,"value":5651},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":18,"tag":418,"props":5653,"children":5654},{},[5655,5665],{"type":18,"tag":440,"props":5656,"children":5657},{},[5658],{"type":18,"tag":76,"props":5659,"children":5662},{"href":5660,"rel":5661},"https://www.secwest.net/",[80],[5663],{"type":37,"value":5664},"CanSecWest",{"type":18,"tag":440,"props":5666,"children":5667},{},[5668],{"type":37,"value":5669},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":18,"tag":418,"props":5671,"children":5672},{},[5673,5683],{"type":18,"tag":440,"props":5674,"children":5675},{},[5676],{"type":18,"tag":76,"props":5677,"children":5680},{"href":5678,"rel":5679},"https://events.ccc.de/",[80],[5681],{"type":37,"value":5682},"Chaos Computer Conference",{"type":18,"tag":440,"props":5684,"children":5685},{},[5686],{"type":37,"value":5687},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":18,"tag":40,"props":5689,"children":5690},{},[5691,5693,5700],{"type":37,"value":5692},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":18,"tag":76,"props":5694,"children":5697},{"href":5695,"rel":5696},"https://en.wikipedia.org/wiki/Line_management",[80],[5698],{"type":37,"value":5699},"Leader(line manager)",{"type":37,"value":5701}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":18,"tag":137,"props":5703,"children":5704},{},[5705],{"type":18,"tag":40,"props":5706,"children":5707},{},[5708],{"type":37,"value":5709},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":18,"tag":40,"props":5711,"children":5712},{},[5713,5715,5722],{"type":37,"value":5714},"在规划职业路径阶段认识了 ",{"type":18,"tag":76,"props":5716,"children":5719},{"href":5717,"rel":5718},"https://www.linkedin.com/in/mike-jordon-72193719/",[80],[5720],{"type":37,"value":5721},"Mike Jordon",{"type":37,"value":5723}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":18,"tag":137,"props":5725,"children":5726},{},[5727,5732],{"type":18,"tag":40,"props":5728,"children":5729},{},[5730],{"type":37,"value":5731},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":18,"tag":40,"props":5733,"children":5734},{},[5735],{"type":37,"value":5736},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":18,"tag":92,"props":5738,"children":5739},{},[],{"type":18,"tag":40,"props":5741,"children":5742},{},[5743],{"type":37,"value":5744},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":18,"tag":40,"props":5746,"children":5747},{},[5748],{"type":37,"value":5749},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":18,"tag":92,"props":5751,"children":5752},{},[],{"type":18,"tag":27,"props":5754,"children":5756},{":t":5755},"协议是一切的基础",[],{"type":18,"tag":32,"props":5758,"children":5759},{"id":2270},[5760],{"type":37,"value":2273},{"type":18,"tag":40,"props":5762,"children":5763},{},[5764],{"type":37,"value":5765},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":18,"tag":40,"props":5767,"children":5768},{},[5769],{"type":37,"value":5770},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":18,"tag":40,"props":5772,"children":5773},{},[5774],{"type":37,"value":5775},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":37,"value":408},{"type":18,"tag":410,"props":5778,"children":5779},{},[5780,5795],{"type":18,"tag":414,"props":5781,"children":5782},{},[5783],{"type":18,"tag":418,"props":5784,"children":5785},{},[5786,5791],{"type":18,"tag":422,"props":5787,"children":5788},{},[5789],{"type":37,"value":5790},"功能",{"type":18,"tag":422,"props":5792,"children":5793},{},[5794],{"type":37,"value":3443},{"type":18,"tag":433,"props":5796,"children":5797},{},[5798,5811,5824,5837,5850,5863],{"type":18,"tag":418,"props":5799,"children":5800},{},[5801,5806],{"type":18,"tag":440,"props":5802,"children":5803},{},[5804],{"type":37,"value":5805},"维护会话状态",{"type":18,"tag":440,"props":5807,"children":5808},{},[5809],{"type":37,"value":5810},"创建新的连接或终止连接",{"type":18,"tag":418,"props":5812,"children":5813},{},[5814,5819],{"type":18,"tag":440,"props":5815,"children":5816},{},[5817],{"type":37,"value":5818},"通过寻址识别节点",{"type":18,"tag":440,"props":5820,"children":5821},{},[5822],{"type":37,"value":5823},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":18,"tag":418,"props":5825,"children":5826},{},[5827,5832],{"type":18,"tag":440,"props":5828,"children":5829},{},[5830],{"type":37,"value":5831},"控制流量",{"type":18,"tag":440,"props":5833,"children":5834},{},[5835],{"type":37,"value":5836},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":18,"tag":418,"props":5838,"children":5839},{},[5840,5845],{"type":18,"tag":440,"props":5841,"children":5842},{},[5843],{"type":37,"value":5844},"保证传输数据的顺序",{"type":18,"tag":440,"props":5846,"children":5847},{},[5848],{"type":37,"value":5849},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":18,"tag":418,"props":5851,"children":5852},{},[5853,5858],{"type":18,"tag":440,"props":5854,"children":5855},{},[5856],{"type":37,"value":5857},"检测和纠正错误",{"type":18,"tag":440,"props":5859,"children":5860},{},[5861],{"type":37,"value":5862},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":18,"tag":418,"props":5864,"children":5865},{},[5866,5871],{"type":18,"tag":440,"props":5867,"children":5868},{},[5869],{"type":37,"value":5870},"格式化和编码数据",{"type":18,"tag":440,"props":5872,"children":5873},{},[5874],{"type":37,"value":5875},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":18,"tag":40,"props":5877,"children":5878},{},[5879],{"type":37,"value":5880},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":18,"tag":282,"props":5882,"children":5886},{"code":5883,"language":37,"meta":8,"className":5884},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[5885],"language-text",[5887],{"type":18,"tag":287,"props":5888,"children":5889},{"__ignoreMap":8},[5890],{"type":37,"value":5883},{"type":37,"value":2290},{"type":18,"tag":410,"props":5893,"children":5894},{},[5895,5910],{"type":18,"tag":414,"props":5896,"children":5897},{},[5898],{"type":18,"tag":418,"props":5899,"children":5900},{},[5901,5906],{"type":18,"tag":422,"props":5902,"children":5903},{},[5904],{"type":37,"value":5905},"协议模型",{"type":18,"tag":422,"props":5907,"children":5908},{},[5909],{"type":37,"value":3443},{"type":18,"tag":433,"props":5911,"children":5912},{},[5913,5926,5939],{"type":18,"tag":418,"props":5914,"children":5915},{},[5916,5921],{"type":18,"tag":440,"props":5917,"children":5918},{},[5919],{"type":37,"value":5920},"内容层 (文件请求)",{"type":18,"tag":440,"props":5922,"children":5923},{},[5924],{"type":37,"value":5925},"我想要一个 image.png 图片",{"type":18,"tag":418,"props":5927,"children":5928},{},[5929,5934],{"type":18,"tag":440,"props":5930,"children":5931},{},[5932],{"type":37,"value":5933},"编码层 (HTTP)",{"type":18,"tag":440,"props":5935,"children":5936},{},[5937],{"type":37,"value":5938},"GET /image.png HTTP/1.1",{"type":18,"tag":418,"props":5940,"children":5941},{},[5942,5947],{"type":18,"tag":440,"props":5943,"children":5944},{},[5945],{"type":37,"value":5946},"传输层 (TCP/IP)",{"type":18,"tag":440,"props":5948,"children":5949},{},[5950,5952,5955],{"type":37,"value":5951},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":18,"tag":1521,"props":5953,"children":5954},{},[],{"type":37,"value":5956}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":18,"tag":40,"props":5958,"children":5959},{},[5960],{"type":37,"value":5961},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":18,"tag":137,"props":5963,"children":5964},{},[5965],{"type":18,"tag":40,"props":5966,"children":5967},{},[5968],{"type":37,"value":5969},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":18,"tag":40,"props":5971,"children":5972},{},[5973],{"type":37,"value":5974},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":18,"tag":92,"props":5976,"children":5977},{},[],{"type":18,"tag":27,"props":5979,"children":5981},{":t":5980},"流量捕获",[],{"type":18,"tag":32,"props":5983,"children":5985},{"id":5984},"捕获-2",[5986],{"type":37,"value":5987},"捕获 2",{"type":18,"tag":40,"props":5989,"children":5990},{},[5991],{"type":37,"value":5992},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":37,"value":5994},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":5996,"children":5997},{},[5998,6016],{"type":18,"tag":414,"props":5999,"children":6000},{},[6001],{"type":18,"tag":418,"props":6002,"children":6003},{},[6004,6008,6012],{"type":18,"tag":422,"props":6005,"children":6006},{},[6007],{"type":37,"value":5494},{"type":18,"tag":422,"props":6009,"children":6010},{},[6011],{"type":37,"value":3443},{"type":18,"tag":422,"props":6013,"children":6014},{},[6015],{"type":37,"value":2304},{"type":18,"tag":433,"props":6017,"children":6018},{},[6019,6037],{"type":18,"tag":418,"props":6020,"children":6021},{},[6022,6027,6032],{"type":18,"tag":440,"props":6023,"children":6024},{},[6025],{"type":37,"value":6026},"被动捕获",{"type":18,"tag":440,"props":6028,"children":6029},{},[6030],{"type":37,"value":6031},"在线路上传输时提取数据，如 Wireshark",{"type":18,"tag":440,"props":6033,"children":6034},{},[6035],{"type":37,"value":6036},"不直接与流量交互",{"type":18,"tag":418,"props":6038,"children":6039},{},[6040,6045,6050],{"type":18,"tag":440,"props":6041,"children":6042},{},[6043],{"type":37,"value":6044},"主动捕获",{"type":18,"tag":440,"props":6046,"children":6047},{},[6048],{"type":37,"value":6049},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":18,"tag":440,"props":6051,"children":6052},{},[6053],{"type":37,"value":6054},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":18,"tag":40,"props":6056,"children":6057},{},[6058],{"type":37,"value":6059},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":18,"tag":206,"props":6061,"children":6062},{},[6063,6068],{"type":18,"tag":210,"props":6064,"children":6065},{},[6066],{"type":37,"value":6067},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":18,"tag":210,"props":6069,"children":6070},{},[6071],{"type":37,"value":6072},"只查看正在测试的应用程序的流量",{"type":18,"tag":40,"props":6074,"children":6075},{},[6076],{"type":37,"value":6077},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":18,"tag":27,"props":6079,"children":6081},{":t":6080,":type":330},"系统调用跟踪",[],{"type":18,"tag":40,"props":6083,"children":6084},{},[6085],{"type":37,"value":6086},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":37,"value":6088},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":6090,"children":6091},{},[6092,6111],{"type":18,"tag":414,"props":6093,"children":6094},{},[6095],{"type":18,"tag":418,"props":6096,"children":6097},{},[6098,6103,6107],{"type":18,"tag":422,"props":6099,"children":6100},{},[6101],{"type":37,"value":6102},"模式",{"type":18,"tag":422,"props":6104,"children":6105},{},[6106],{"type":37,"value":3443},{"type":18,"tag":422,"props":6108,"children":6109},{},[6110],{"type":37,"value":2304},{"type":18,"tag":433,"props":6112,"children":6113},{},[6114,6132,6146,6160,6174,6192,6206,6220],{"type":18,"tag":418,"props":6115,"children":6116},{},[6117,6122,6127],{"type":18,"tag":440,"props":6118,"children":6119},{},[6120],{"type":37,"value":6121},"用户模式",{"type":18,"tag":440,"props":6123,"children":6124},{},[6125],{"type":37,"value":6126},"操作系统普通应用程序和用户空间进程运行的模式",{"type":18,"tag":440,"props":6128,"children":6129},{},[6130],{"type":37,"value":6131},"权限限制",{"type":18,"tag":418,"props":6133,"children":6134},{},[6135,6138,6141],{"type":18,"tag":440,"props":6136,"children":6137},{},[],{"type":18,"tag":440,"props":6139,"children":6140},{},[],{"type":18,"tag":440,"props":6142,"children":6143},{},[6144],{"type":37,"value":6145},"隔离",{"type":18,"tag":418,"props":6147,"children":6148},{},[6149,6152,6155],{"type":18,"tag":440,"props":6150,"children":6151},{},[],{"type":18,"tag":440,"props":6153,"children":6154},{},[],{"type":18,"tag":440,"props":6156,"children":6157},{},[6158],{"type":37,"value":6159},"限制对系统资源的直接访问",{"type":18,"tag":418,"props":6161,"children":6162},{},[6163,6166,6169],{"type":18,"tag":440,"props":6164,"children":6165},{},[],{"type":18,"tag":440,"props":6167,"children":6168},{},[],{"type":18,"tag":440,"props":6170,"children":6171},{},[6172],{"type":37,"value":6173},"日常应用程序的运行",{"type":18,"tag":418,"props":6175,"children":6176},{},[6177,6182,6187],{"type":18,"tag":440,"props":6178,"children":6179},{},[6180],{"type":37,"value":6181},"内核模式",{"type":18,"tag":440,"props":6183,"children":6184},{},[6185],{"type":37,"value":6186},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":18,"tag":440,"props":6188,"children":6189},{},[6190],{"type":37,"value":6191},"完全权限",{"type":18,"tag":418,"props":6193,"children":6194},{},[6195,6198,6201],{"type":18,"tag":440,"props":6196,"children":6197},{},[],{"type":18,"tag":440,"props":6199,"children":6200},{},[],{"type":18,"tag":440,"props":6202,"children":6203},{},[6204],{"type":37,"value":6205},"关键操作",{"type":18,"tag":418,"props":6207,"children":6208},{},[6209,6212,6215],{"type":18,"tag":440,"props":6210,"children":6211},{},[],{"type":18,"tag":440,"props":6213,"children":6214},{},[],{"type":18,"tag":440,"props":6216,"children":6217},{},[6218],{"type":37,"value":6219},"直接访问和控制系统资源",{"type":18,"tag":418,"props":6221,"children":6222},{},[6223,6226,6229],{"type":18,"tag":440,"props":6224,"children":6225},{},[],{"type":18,"tag":440,"props":6227,"children":6228},{},[],{"type":18,"tag":440,"props":6230,"children":6231},{},[6232],{"type":37,"value":6233},"系统级调用",{"type":18,"tag":137,"props":6235,"children":6236},{},[6237],{"type":18,"tag":40,"props":6238,"children":6239},{},[6240],{"type":37,"value":6241},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":18,"tag":40,"props":6243,"children":6244},{},[6245],{"type":37,"value":6246},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":18,"tag":282,"props":6248,"children":6250},{"code":6249},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[6251],{"type":18,"tag":287,"props":6252,"children":6253},{"__ignoreMap":8},[6254],{"type":37,"value":6249},{"type":18,"tag":40,"props":6256,"children":6257},{},[6258],{"type":37,"value":6259},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":18,"tag":27,"props":6261,"children":6263},{":t":6262,":type":330},"网络编程的基础",[],{"type":18,"tag":40,"props":6265,"children":6266},{},[6267,6269,6276,6278,6285],{"type":37,"value":6268},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":18,"tag":76,"props":6270,"children":6273},{"href":6271,"rel":6272},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[80],[6274],{"type":37,"value":6275},"Berkeley Software Distribution（BSD）",{"type":37,"value":6277}," 完成的。因此在网络通信领域中，就离不开 ",{"type":18,"tag":76,"props":6279,"children":6282},{"href":6280,"rel":6281},"https://en.wikipedia.org/wiki/Berkeley_sockets",[80],[6283],{"type":37,"value":6284},"Berkeley Sockets",{"type":37,"value":6286},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":18,"tag":137,"props":6288,"children":6289},{},[6290],{"type":18,"tag":40,"props":6291,"children":6292},{},[6293,6295,6301,6303,6309],{"type":37,"value":6294},"如果你是类 Unix 系统，可以在终端输入 ",{"type":18,"tag":287,"props":6296,"children":6298},{"className":6297},[],[6299],{"type":37,"value":6300},"man 2 syscall_name",{"type":37,"value":6302}," 在终端中查看手册，比如 ",{"type":18,"tag":287,"props":6304,"children":6306},{"className":6305},[],[6307],{"type":37,"value":6308},"man 2 open",{"type":37,"value":6310}," 就可以查看系统调用第二章有关 open 的内容。",{"type":18,"tag":40,"props":6312,"children":6313},{},[6314],{"type":37,"value":6315},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":18,"tag":27,"props":6317,"children":6319},{":t":6318,":type":330},"不同平台之间的捕获",[],{"type":37,"value":2902},{"type":18,"tag":410,"props":6322,"children":6323},{},[6324,6344],{"type":18,"tag":414,"props":6325,"children":6326},{},[6327],{"type":18,"tag":418,"props":6328,"children":6329},{},[6330,6335,6340],{"type":18,"tag":422,"props":6331,"children":6332},{},[6333],{"type":37,"value":6334},"平台",{"type":18,"tag":422,"props":6336,"children":6337},{},[6338],{"type":37,"value":6339},"应用",{"type":18,"tag":422,"props":6341,"children":6342},{},[6343],{"type":37,"value":3443},{"type":18,"tag":433,"props":6345,"children":6346},{},[6347,6365,6383],{"type":18,"tag":418,"props":6348,"children":6349},{},[6350,6355,6360],{"type":18,"tag":440,"props":6351,"children":6352},{},[6353],{"type":37,"value":6354},"Linux",{"type":18,"tag":440,"props":6356,"children":6357},{},[6358],{"type":37,"value":6359},"Strace",{"type":18,"tag":440,"props":6361,"children":6362},{},[6363],{"type":37,"value":6364},"跟踪系统调用和信号",{"type":18,"tag":418,"props":6366,"children":6367},{},[6368,6373,6378],{"type":18,"tag":440,"props":6369,"children":6370},{},[6371],{"type":37,"value":6372},"macOS",{"type":18,"tag":440,"props":6374,"children":6375},{},[6376],{"type":37,"value":6377},"DTrace",{"type":18,"tag":440,"props":6379,"children":6380},{},[6381],{"type":37,"value":6382},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":18,"tag":418,"props":6384,"children":6385},{},[6386,6391,6396],{"type":18,"tag":440,"props":6387,"children":6388},{},[6389],{"type":37,"value":6390},"Windows",{"type":18,"tag":440,"props":6392,"children":6393},{},[6394],{"type":37,"value":6395},"Process Monitor",{"type":18,"tag":440,"props":6397,"children":6398},{},[6399],{"type":37,"value":6400},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":18,"tag":137,"props":6402,"children":6403},{},[6404,6409,6414],{"type":18,"tag":40,"props":6405,"children":6406},{},[6407],{"type":37,"value":6408},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":18,"tag":40,"props":6410,"children":6411},{},[6412],{"type":37,"value":6413},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":18,"tag":40,"props":6415,"children":6416},{},[6417],{"type":37,"value":6418},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":18,"tag":40,"props":6420,"children":6421},{},[6422],{"type":37,"value":6423},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":18,"tag":27,"props":6425,"children":6426},{":t":6044,":type":330},[],{"type":18,"tag":40,"props":6428,"children":6429},{},[6430],{"type":37,"value":6431},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":18,"tag":32,"props":6433,"children":6435},{"id":6434},"太阳底下没有新鲜事-3",[6436],{"type":37,"value":6437},"太阳底下没有新鲜事 3",{"type":18,"tag":27,"props":6439,"children":6441},{":t":6440},"太阳底下没有新鲜事",[],{"type":18,"tag":40,"props":6443,"children":6444},{},[6445],{"type":37,"value":6446},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":18,"tag":27,"props":6448,"children":6450},{":t":6449,":type":330},"一些进制的基础",[],{"type":18,"tag":40,"props":6452,"children":6453},{},[6454],{"type":37,"value":6455},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":37,"value":6457},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":410,"props":6459,"children":6460},{},[6461,6479],{"type":18,"tag":414,"props":6462,"children":6463},{},[6464],{"type":18,"tag":418,"props":6465,"children":6466},{},[6467,6471,6475],{"type":18,"tag":422,"props":6468,"children":6469},{},[6470],{"type":37,"value":1613},{"type":18,"tag":422,"props":6472,"children":6473},{},[6474],{"type":37,"value":3443},{"type":18,"tag":422,"props":6476,"children":6477},{},[6478],{"type":37,"value":2304},{"type":18,"tag":433,"props":6480,"children":6481},{},[6482,6500,6514,6528,6542,6560,6574],{"type":18,"tag":418,"props":6483,"children":6484},{},[6485,6490,6495],{"type":18,"tag":440,"props":6486,"children":6487},{},[6488],{"type":37,"value":6489},"二进制协议",{"type":18,"tag":440,"props":6491,"children":6492},{},[6493],{"type":37,"value":6494},"以二进制格式传输数据",{"type":18,"tag":440,"props":6496,"children":6497},{},[6498],{"type":37,"value":6499},"高效性",{"type":18,"tag":418,"props":6501,"children":6502},{},[6503,6506,6509],{"type":18,"tag":440,"props":6504,"children":6505},{},[],{"type":18,"tag":440,"props":6507,"children":6508},{},[],{"type":18,"tag":440,"props":6510,"children":6511},{},[6512],{"type":37,"value":6513},"紧凑性",{"type":18,"tag":418,"props":6515,"children":6516},{},[6517,6520,6523],{"type":18,"tag":440,"props":6518,"children":6519},{},[],{"type":18,"tag":440,"props":6521,"children":6522},{},[],{"type":18,"tag":440,"props":6524,"children":6525},{},[6526],{"type":37,"value":6527},"复杂性",{"type":18,"tag":418,"props":6529,"children":6530},{},[6531,6534,6537],{"type":18,"tag":440,"props":6532,"children":6533},{},[],{"type":18,"tag":440,"props":6535,"children":6536},{},[],{"type":18,"tag":440,"props":6538,"children":6539},{},[6540],{"type":37,"value":6541},"依赖性",{"type":18,"tag":418,"props":6543,"children":6544},{},[6545,6550,6555],{"type":18,"tag":440,"props":6546,"children":6547},{},[6548],{"type":37,"value":6549},"文本协议",{"type":18,"tag":440,"props":6551,"children":6552},{},[6553],{"type":37,"value":6554},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":18,"tag":440,"props":6556,"children":6557},{},[6558],{"type":37,"value":6559},"可读性",{"type":18,"tag":418,"props":6561,"children":6562},{},[6563,6566,6569],{"type":18,"tag":440,"props":6564,"children":6565},{},[],{"type":18,"tag":440,"props":6567,"children":6568},{},[],{"type":18,"tag":440,"props":6570,"children":6571},{},[6572],{"type":37,"value":6573},"效率低",{"type":18,"tag":418,"props":6575,"children":6576},{},[6577,6580,6583],{"type":18,"tag":440,"props":6578,"children":6579},{},[],{"type":18,"tag":440,"props":6581,"children":6582},{},[],{"type":18,"tag":440,"props":6584,"children":6585},{},[6586],{"type":37,"value":6587},"灵活性（容错性和可扩展性）",{"type":18,"tag":40,"props":6589,"children":6590},{},[6591,6593,6599],{"type":37,"value":6592},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":18,"tag":287,"props":6594,"children":6596},{"className":6595},[],[6597],{"type":37,"value":6598},"octet",{"type":37,"value":6600}," 来确保每个单位确实是 8 位。",{"type":18,"tag":137,"props":6602,"children":6603},{},[6604],{"type":18,"tag":40,"props":6605,"children":6606},{},[6607],{"type":37,"value":6608},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":18,"tag":282,"props":6610,"children":6612},{"code":6611},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[6613],{"type":18,"tag":287,"props":6614,"children":6615},{"__ignoreMap":8},[6616],{"type":37,"value":6611},{"type":18,"tag":40,"props":6618,"children":6619},{},[6620],{"type":37,"value":6621},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":18,"tag":137,"props":6623,"children":6624},{},[6625],{"type":18,"tag":40,"props":6626,"children":6627},{},[6628],{"type":37,"value":6629},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":18,"tag":27,"props":6631,"children":6633},{":t":6632,":type":330},"数值数据",[],{"type":18,"tag":40,"props":6635,"children":6636},{},[6637],{"type":37,"value":6638},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":18,"tag":40,"props":6640,"children":6641},{},[6642,6644,6649],{"type":37,"value":6643},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":18,"tag":766,"props":6645,"children":6646},{},[6647],{"type":37,"value":6648},"协议结构",{"type":37,"value":6650}," 与逆向。",{"type":18,"tag":40,"props":6652,"children":6653},{},[6654,6656,6661],{"type":37,"value":6655},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":18,"tag":766,"props":6657,"children":6658},{},[6659],{"type":37,"value":6660},"握手过程",{"type":37,"value":6662}," 来识别出加密套件。",{"type":18,"tag":40,"props":6664,"children":6665},{},[6666,6668],{"type":37,"value":6667},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":18,"tag":6669,"props":6670,"children":6671},"the",{"ida":8,"pro":8,"book":8},[6672],{"type":37,"value":6673}," 找到我想要的。",{"title":8,"searchDepth":4215,"depth":4215,"links":6675},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":6679,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":6680,"description":8,"director":6681,"time":5573,"img":6682,"plan":5575,"body":6683,"_type":4241,"_id":6836,"_source":4243,"_file":6837,"_extension":4245},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":15,"children":6684,"toc":6834},[6685],{"type":18,"tag":19,"props":6686,"children":6687},{":by":21,":img":22,":plan":23,":title":24},[6688,6694,6698,6703,6708,6713,6718,6741,6755,6763,6768,6773,6811,6814,6820,6824,6829],{"type":18,"tag":32,"props":6689,"children":6691},{"id":6690},"理念-1",[6692],{"type":37,"value":6693},"理念 1",{"type":18,"tag":27,"props":6695,"children":6697},{":t":6696},"为什么看这本回忆录？",[],{"type":18,"tag":40,"props":6699,"children":6700},{},[6701],{"type":37,"value":6702},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":18,"tag":40,"props":6704,"children":6705},{},[6706],{"type":37,"value":6707},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":18,"tag":40,"props":6709,"children":6710},{},[6711],{"type":37,"value":6712},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":18,"tag":40,"props":6714,"children":6715},{},[6716],{"type":37,"value":6717},"以打开网站的第一版为例；",{"type":18,"tag":206,"props":6719,"children":6720},{},[6721,6726,6731,6736],{"type":18,"tag":210,"props":6722,"children":6723},{},[6724],{"type":37,"value":6725},"有的政府官网，显示的是当权者的讲话和文件；",{"type":18,"tag":210,"props":6727,"children":6728},{},[6729],{"type":37,"value":6730},"有的政府官网，是一些便民的工具；",{"type":18,"tag":210,"props":6732,"children":6733},{},[6734],{"type":37,"value":6735},"有的政府官网，是国家的景色，旅游信息；",{"type":18,"tag":210,"props":6737,"children":6738},{},[6739],{"type":37,"value":6740},"有的政府官网，是一些数据，一些便民信息；",{"type":18,"tag":40,"props":6742,"children":6743},{},[6744,6746,6753],{"type":37,"value":6745},"打开 ",{"type":18,"tag":76,"props":6747,"children":6750},{"href":6748,"rel":6749},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[80],[6751],{"type":37,"value":6752},"https://www.president.go.kr/",{"type":37,"value":6754}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":18,"tag":137,"props":6756,"children":6757},{},[6758],{"type":18,"tag":40,"props":6759,"children":6760},{},[6761],{"type":37,"value":6762},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":18,"tag":40,"props":6764,"children":6765},{},[6766],{"type":37,"value":6767},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":18,"tag":126,"props":6769,"children":6772},{"text":6770,"url":6771},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":18,"tag":137,"props":6774,"children":6775},{},[6776,6781,6786,6791,6796,6801,6806],{"type":18,"tag":40,"props":6777,"children":6778},{},[6779],{"type":37,"value":6780},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":18,"tag":40,"props":6782,"children":6783},{},[6784],{"type":37,"value":6785},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":18,"tag":40,"props":6787,"children":6788},{},[6789],{"type":37,"value":6790},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":18,"tag":40,"props":6792,"children":6793},{},[6794],{"type":37,"value":6795},"希望公民，与此同时和我一起走出这段历史。",{"type":18,"tag":40,"props":6797,"children":6798},{},[6799],{"type":37,"value":6800},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":18,"tag":40,"props":6802,"children":6803},{},[6804],{"type":37,"value":6805},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":18,"tag":40,"props":6807,"children":6808},{},[6809],{"type":37,"value":6810},"——文在寅",{"type":18,"tag":92,"props":6812,"children":6813},{},[],{"type":18,"tag":32,"props":6815,"children":6817},{"id":6816},"检察官-2",[6818],{"type":37,"value":6819},"检察官 2",{"type":18,"tag":27,"props":6821,"children":6823},{":t":6822},"青瓦台魔咒",[],{"type":18,"tag":40,"props":6825,"children":6826},{},[6827],{"type":37,"value":6828},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":18,"tag":40,"props":6830,"children":6831},{},[6832],{"type":37,"value":6833},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":4215,"depth":4215,"links":6835},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1740591708809]