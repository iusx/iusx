[{"data":1,"prerenderedAt":1645},["Reactive",2],{"equalBook":3},[4,207,275,495,1617,1631],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"plan":13,"body":14,"_type":202,"_id":203,"_source":204,"_file":205,"_extension":206},"/book/the_ida_pro_book","book",false,"","The IDA Pro Book: The Unofficial Guide to the World’s Most Popular Disassembler, 2nd Edition","Chris Eagle","2024.10.30","07/1.png","01",{"type":15,"children":16,"toc":199},"root",[17],{"type":18,"tag":19,"props":20,"children":25},"element","book-content",{":by":21,":img":22,":plan":23,":title":24},"director","img","plan","title",[26,33,38,40,107,112,119,124,126],{"type":18,"tag":27,"props":28,"children":29},"p",{},[30],{"type":31,"value":32},"text","\"IDA Pro 书籍的第二版被 IDA Pro 的创建者誉为 “深刻、全面、准确”，涵盖了从最初的步骤到高级自动化技术的所有内容。\"",{"type":18,"tag":27,"props":34,"children":35},{},[36],{"type":31,"value":37},"本书的作者是美国加利福尼亚州蒙特雷市海军研究院计算机科学高级讲师。是许多 IDA 插件的作者，在 Black Hat、Defcon、ToorCon 和 ShmooCon。都有演讲。是一位活跃的 CTF 选手，并两次获得了在 Defcon 举行的享有盛名的 CTF 竞赛的冠军。兴趣包括计算机网络操作、计算机取证以及逆向 / 反逆向工程。他曾是 DARPA 网络大挑战（Cyber Grand Challenge）竞赛基础设施的首席架构师。",{"type":31,"value":39},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":41,"props":42,"children":43},"table",{},[44,63],{"type":18,"tag":45,"props":46,"children":47},"thead",{},[48],{"type":18,"tag":49,"props":50,"children":51},"tr",{},[52,58],{"type":18,"tag":53,"props":54,"children":55},"th",{},[56],{"type":31,"value":57},"活动",{"type":18,"tag":53,"props":59,"children":60},{},[61],{"type":31,"value":62},"描述",{"type":18,"tag":64,"props":65,"children":66},"tbody",{},[67,81,94],{"type":18,"tag":49,"props":68,"children":69},{},[70,76],{"type":18,"tag":71,"props":72,"children":73},"td",{},[74],{"type":31,"value":75},"ToorCon",{"type":18,"tag":71,"props":77,"children":78},{},[79],{"type":31,"value":80},"自 1999 年（Defcon 还处于起步阶段）加州圣地亚哥举办黑客们举办的活动，风格偏向于实际操作和技术深度。",{"type":18,"tag":49,"props":82,"children":83},{},[84,89],{"type":18,"tag":71,"props":85,"children":86},{},[87],{"type":31,"value":88},"ShmooCon",{"type":18,"tag":71,"props":90,"children":91},{},[92],{"type":31,"value":93},"由 Shmoo Group 组织的在华盛顿特区举办的黑客大会，以其社区驱动的开放氛围而闻名。",{"type":18,"tag":49,"props":95,"children":96},{},[97,102],{"type":18,"tag":71,"props":98,"children":99},{},[100],{"type":31,"value":101},"DARPA (美国国防高级研究计划局，Defense Advanced Research Projects Agency)",{"type":18,"tag":71,"props":103,"children":104},{},[105],{"type":31,"value":106},"是美国国防部下属的高级研究机构，致力于支持前沿科技的研究和开发，以保持美国的技术和军事领先地位。",{"type":18,"tag":108,"props":109,"children":111},"text-title",{":t":110},"拆解语言",[],{"type":18,"tag":113,"props":114,"children":116},"h1",{"id":115},"拆解理论-1",[117],{"type":31,"value":118},"拆解理论 1",{"type":18,"tag":27,"props":120,"children":121},{},[122],{"type":31,"value":123},"开篇作者就介绍了一个计算机语言的发展阶段：",{"type":31,"value":125},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":41,"props":127,"children":128},{},[129,144],{"type":18,"tag":45,"props":130,"children":131},{},[132],{"type":18,"tag":49,"props":133,"children":134},{},[135,140],{"type":18,"tag":53,"props":136,"children":137},{},[138],{"type":31,"value":139},"发展",{"type":18,"tag":53,"props":141,"children":142},{},[143],{"type":31,"value":62},{"type":18,"tag":64,"props":145,"children":146},{},[147,160,173,186],{"type":18,"tag":49,"props":148,"children":149},{},[150,155],{"type":18,"tag":71,"props":151,"children":152},{},[153],{"type":31,"value":154},"第一代语言",{"type":18,"tag":71,"props":156,"children":157},{},[158],{"type":31,"value":159},"机器语言，由 1 和 0 或某种速记形式（例如十六进制）组成，并且只能由二进制读取。",{"type":18,"tag":49,"props":161,"children":162},{},[163,168],{"type":18,"tag":71,"props":164,"children":165},{},[166],{"type":31,"value":167},"第二代语言",{"type":18,"tag":71,"props":169,"children":170},{},[171],{"type":31,"value":172},"汇编语言，直接与计算机硬件的指令集相对应。",{"type":18,"tag":49,"props":174,"children":175},{},[176,181],{"type":18,"tag":71,"props":177,"children":178},{},[179],{"type":31,"value":180},"第三代语言",{"type":18,"tag":71,"props":182,"children":183},{},[184],{"type":31,"value":185},"常见的第三代语言包括 FORTRAN、COBOL、C 和 Java。特点是通常使用编译器将程序翻译成汇编语言或机器语言（或类似的字节码），以便计算机可以执行。",{"type":18,"tag":49,"props":187,"children":188},{},[189,194],{"type":18,"tag":71,"props":190,"children":191},{},[192],{"type":31,"value":193},"第四代语言",{"type":18,"tag":71,"props":195,"children":196},{},[197],{"type":31,"value":198},"作者承认存在，但不是本书讨论范围。",{"title":8,"searchDepth":200,"depth":200,"links":201},2,[],"markdown","content:book:the_ida_pro_book.md","content","book/the_ida_pro_book.md","md",{"_path":208,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":209,"description":8,"director":210,"time":211,"img":212,"plan":13,"body":213,"_type":202,"_id":273,"_source":204,"_file":274,"_extension":206},"/book/criminal_minds","Criminal Minds","ritsu","2024.10.11","06/1.png",{"type":15,"children":214,"toc":271},[215],{"type":18,"tag":19,"props":216,"children":217},{":by":21,":img":22,":plan":23,":title":24},[218,222,228,233,242,247,266],{"type":18,"tag":108,"props":219,"children":221},{":t":220},"第一季",[],{"type":18,"tag":113,"props":223,"children":225},{"id":224},"行为分析小组-0",[226],{"type":31,"value":227},"行为分析小组 0",{"type":18,"tag":27,"props":229,"children":230},{},[231],{"type":31,"value":232},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":18,"tag":234,"props":235,"children":236},"text-tip",{},[237],{"type":18,"tag":27,"props":238,"children":239},{},[240],{"type":31,"value":241},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":18,"tag":27,"props":243,"children":244},{},[245],{"type":31,"value":246},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":18,"tag":234,"props":248,"children":249},{},[250],{"type":18,"tag":27,"props":251,"children":252},{},[253,255,264],{"type":31,"value":254},"比如 ",{"type":18,"tag":256,"props":257,"children":261},"a",{"href":258,"rel":259},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[260],"nofollow",[262],{"type":31,"value":263},"洪博培",{"type":31,"value":265}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":18,"tag":27,"props":267,"children":268},{},[269],{"type":31,"value":270},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"title":8,"searchDepth":200,"depth":200,"links":272},[],"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":276,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":277,"description":8,"director":210,"time":278,"img":279,"plan":280,"body":281,"_type":202,"_id":493,"_source":204,"_file":494,"_extension":206},"/book/24-hour","24 hour","2024.7.22","05/1.png","30",{"type":15,"children":282,"toc":491},[283],{"type":18,"tag":19,"props":284,"children":285},{":by":21,":img":22,":plan":23,":title":24},[286,290,296,301,306,311,316,321,326,331,336,341,346,350,356,406,407,486],{"type":18,"tag":108,"props":287,"children":289},{":t":288},"1~3 季",[],{"type":18,"tag":113,"props":291,"children":293},{"id":292},"_13-季不要内耗-1",[294],{"type":31,"value":295},"1~3 季：不要内耗 1",{"type":18,"tag":27,"props":297,"children":298},{},[299],{"type":31,"value":300},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":18,"tag":27,"props":302,"children":303},{},[304],{"type":31,"value":305},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":18,"tag":27,"props":307,"children":308},{},[309],{"type":31,"value":310},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":18,"tag":27,"props":312,"children":313},{},[314],{"type":31,"value":315},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":18,"tag":27,"props":317,"children":318},{},[319],{"type":31,"value":320},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":18,"tag":27,"props":322,"children":323},{},[324],{"type":31,"value":325},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":18,"tag":27,"props":327,"children":328},{},[329],{"type":31,"value":330},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":18,"tag":27,"props":332,"children":333},{},[334],{"type":31,"value":335},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":18,"tag":27,"props":337,"children":338},{},[339],{"type":31,"value":340},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":18,"tag":27,"props":342,"children":343},{},[344],{"type":31,"value":345},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":18,"tag":108,"props":347,"children":349},{":t":348},"Subchannel chip",[],{"type":18,"tag":113,"props":351,"children":353},{"id":352},"子通道芯片-subchannel-chip-2",[354],{"type":31,"value":355},"子通道芯片: Subchannel chip 2",{"type":18,"tag":27,"props":357,"children":358},{},[359,361,368,370,377,379,386,388,395,397,404],{"type":31,"value":360},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":18,"tag":256,"props":362,"children":365},{"href":363,"rel":364},"https://24.fandom.com/wiki/Subchannel_chip",[260],[366],{"type":31,"value":367},"24 Wiki",{"type":31,"value":369}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":18,"tag":256,"props":371,"children":374},{"href":372,"rel":373},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[260],[375],{"type":31,"value":376},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":31,"value":378},"、",{"type":18,"tag":256,"props":380,"children":383},{"href":381,"rel":382},"https://en.wikipedia.org/wiki/Ultra-wideband#",[260],[384],{"type":31,"value":385},"超宽频(UWB, Ultra-wideband)",{"type":31,"value":387},"，",{"type":18,"tag":256,"props":389,"children":392},{"href":390,"rel":391},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[260],[393],{"type":31,"value":394},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":31,"value":396}," 所常用的 ",{"type":18,"tag":256,"props":398,"children":401},{"href":399,"rel":400},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[260],[402],{"type":31,"value":403},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":31,"value":405}," 协议。",{"type":31,"value":125},{"type":18,"tag":41,"props":408,"children":409},{},[410,430],{"type":18,"tag":45,"props":411,"children":412},{},[413],{"type":18,"tag":49,"props":414,"children":415},{},[416,421,425],{"type":18,"tag":53,"props":417,"children":418},{},[419],{"type":31,"value":420},"名称",{"type":18,"tag":53,"props":422,"children":423},{},[424],{"type":31,"value":62},{"type":18,"tag":53,"props":426,"children":427},{},[428],{"type":31,"value":429},"领域",{"type":18,"tag":64,"props":431,"children":432},{},[433,451,468],{"type":18,"tag":49,"props":434,"children":435},{},[436,441,446],{"type":18,"tag":71,"props":437,"children":438},{},[439],{"type":31,"value":440},"FHSS",{"type":18,"tag":71,"props":442,"children":443},{},[444],{"type":31,"value":445},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":18,"tag":71,"props":447,"children":448},{},[449],{"type":31,"value":450},"无线电",{"type":18,"tag":49,"props":452,"children":453},{},[454,459,464],{"type":18,"tag":71,"props":455,"children":456},{},[457],{"type":31,"value":458},"UWB",{"type":18,"tag":71,"props":460,"children":461},{},[462],{"type":31,"value":463},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":18,"tag":71,"props":465,"children":466},{},[467],{"type":31,"value":450},{"type":18,"tag":49,"props":469,"children":470},{},[471,476,481],{"type":18,"tag":71,"props":472,"children":473},{},[474],{"type":31,"value":475},"NB-IoT",{"type":18,"tag":71,"props":477,"children":478},{},[479],{"type":31,"value":480},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":18,"tag":71,"props":482,"children":483},{},[484],{"type":31,"value":485},"无线电与物联网",{"type":18,"tag":27,"props":487,"children":488},{},[489],{"type":31,"value":490},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":200,"depth":200,"links":492},[],"content:book:24-hour.md","book/24-hour.md",{"_path":496,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":497,"description":8,"director":498,"time":499,"img":500,"plan":501,"body":502,"_type":202,"_id":1615,"_source":204,"_file":1616,"_extension":206},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","1",{"type":15,"children":503,"toc":1613},[504],{"type":18,"tag":19,"props":505,"children":506},{":by":21,":img":22,":plan":23,":title":24},[507,511,517,538,539,614,628,636,650,663,667,672,677,680,684,690,695,700,705,707,806,811,823,824,890,895,903,908,911,915,921,926,928,989,994,1009,1014,1019,1024,1026,1171,1179,1184,1192,1197,1201,1224,1248,1253,1257,1258,1338,1356,1361,1364,1369,1375,1379,1384,1388,1393,1395,1526,1539,1547,1555,1560,1568,1572,1577,1590,1602],{"type":18,"tag":108,"props":508,"children":510},{":t":509},"Google Project Zero",[],{"type":18,"tag":113,"props":512,"children":514},{"id":513},"作者-1",[515],{"type":31,"value":516},"作者 1",{"type":18,"tag":27,"props":518,"children":519},{},[520,522,528,530,536],{"type":31,"value":521},"本书的作者是 ",{"type":18,"tag":256,"props":523,"children":526},{"href":524,"rel":525},"https://github.com/tyranid",[260],[527],{"type":31,"value":498},{"type":31,"value":529},"，也是著名的 ",{"type":18,"tag":256,"props":531,"children":534},{"href":532,"rel":533},"https://googleprojectzero.blogspot.com/",[260],[535],{"type":31,"value":509},{"type":31,"value":537}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":31,"value":39},{"type":18,"tag":41,"props":540,"children":541},{},[542,557],{"type":18,"tag":45,"props":543,"children":544},{},[545],{"type":18,"tag":49,"props":546,"children":547},{},[548,553],{"type":18,"tag":53,"props":549,"children":550},{},[551],{"type":31,"value":552},"会议",{"type":18,"tag":53,"props":554,"children":555},{},[556],{"type":31,"value":62},{"type":18,"tag":64,"props":558,"children":559},{},[560,578,596],{"type":18,"tag":49,"props":561,"children":562},{},[563,573],{"type":18,"tag":71,"props":564,"children":565},{},[566],{"type":18,"tag":256,"props":567,"children":570},{"href":568,"rel":569},"https://www.blackhat.com/",[260],[571],{"type":31,"value":572},"BlackHat",{"type":18,"tag":71,"props":574,"children":575},{},[576],{"type":31,"value":577},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":18,"tag":49,"props":579,"children":580},{},[581,591],{"type":18,"tag":71,"props":582,"children":583},{},[584],{"type":18,"tag":256,"props":585,"children":588},{"href":586,"rel":587},"https://www.secwest.net/",[260],[589],{"type":31,"value":590},"CanSecWest",{"type":18,"tag":71,"props":592,"children":593},{},[594],{"type":31,"value":595},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":18,"tag":49,"props":597,"children":598},{},[599,609],{"type":18,"tag":71,"props":600,"children":601},{},[602],{"type":18,"tag":256,"props":603,"children":606},{"href":604,"rel":605},"https://events.ccc.de/",[260],[607],{"type":31,"value":608},"Chaos Computer Conference",{"type":18,"tag":71,"props":610,"children":611},{},[612],{"type":31,"value":613},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":18,"tag":27,"props":615,"children":616},{},[617,619,626],{"type":31,"value":618},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":18,"tag":256,"props":620,"children":623},{"href":621,"rel":622},"https://en.wikipedia.org/wiki/Line_management",[260],[624],{"type":31,"value":625},"Leader(line manager)",{"type":31,"value":627}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":18,"tag":234,"props":629,"children":630},{},[631],{"type":18,"tag":27,"props":632,"children":633},{},[634],{"type":31,"value":635},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":18,"tag":27,"props":637,"children":638},{},[639,641,648],{"type":31,"value":640},"在规划职业路径阶段认识了 ",{"type":18,"tag":256,"props":642,"children":645},{"href":643,"rel":644},"https://www.linkedin.com/in/mike-jordon-72193719/",[260],[646],{"type":31,"value":647},"Mike Jordon",{"type":31,"value":649}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":18,"tag":234,"props":651,"children":652},{},[653,658],{"type":18,"tag":27,"props":654,"children":655},{},[656],{"type":31,"value":657},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":18,"tag":27,"props":659,"children":660},{},[661],{"type":31,"value":662},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":18,"tag":664,"props":665,"children":666},"hr",{},[],{"type":18,"tag":27,"props":668,"children":669},{},[670],{"type":31,"value":671},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":18,"tag":27,"props":673,"children":674},{},[675],{"type":31,"value":676},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":18,"tag":664,"props":678,"children":679},{},[],{"type":18,"tag":108,"props":681,"children":683},{":t":682},"协议是一切的基础",[],{"type":18,"tag":113,"props":685,"children":687},{"id":686},"基础-2",[688],{"type":31,"value":689},"基础 2",{"type":18,"tag":27,"props":691,"children":692},{},[693],{"type":31,"value":694},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":18,"tag":27,"props":696,"children":697},{},[698],{"type":31,"value":699},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":18,"tag":27,"props":701,"children":702},{},[703],{"type":31,"value":704},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":31,"value":706},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":41,"props":708,"children":709},{},[710,725],{"type":18,"tag":45,"props":711,"children":712},{},[713],{"type":18,"tag":49,"props":714,"children":715},{},[716,721],{"type":18,"tag":53,"props":717,"children":718},{},[719],{"type":31,"value":720},"功能",{"type":18,"tag":53,"props":722,"children":723},{},[724],{"type":31,"value":62},{"type":18,"tag":64,"props":726,"children":727},{},[728,741,754,767,780,793],{"type":18,"tag":49,"props":729,"children":730},{},[731,736],{"type":18,"tag":71,"props":732,"children":733},{},[734],{"type":31,"value":735},"维护会话状态",{"type":18,"tag":71,"props":737,"children":738},{},[739],{"type":31,"value":740},"创建新的连接或终止连接",{"type":18,"tag":49,"props":742,"children":743},{},[744,749],{"type":18,"tag":71,"props":745,"children":746},{},[747],{"type":31,"value":748},"通过寻址识别节点",{"type":18,"tag":71,"props":750,"children":751},{},[752],{"type":31,"value":753},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":18,"tag":49,"props":755,"children":756},{},[757,762],{"type":18,"tag":71,"props":758,"children":759},{},[760],{"type":31,"value":761},"控制流量",{"type":18,"tag":71,"props":763,"children":764},{},[765],{"type":31,"value":766},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":18,"tag":49,"props":768,"children":769},{},[770,775],{"type":18,"tag":71,"props":771,"children":772},{},[773],{"type":31,"value":774},"保证传输数据的顺序",{"type":18,"tag":71,"props":776,"children":777},{},[778],{"type":31,"value":779},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":18,"tag":49,"props":781,"children":782},{},[783,788],{"type":18,"tag":71,"props":784,"children":785},{},[786],{"type":31,"value":787},"检测和纠正错误",{"type":18,"tag":71,"props":789,"children":790},{},[791],{"type":31,"value":792},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":18,"tag":49,"props":794,"children":795},{},[796,801],{"type":18,"tag":71,"props":797,"children":798},{},[799],{"type":31,"value":800},"格式化和编码数据",{"type":18,"tag":71,"props":802,"children":803},{},[804],{"type":31,"value":805},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":18,"tag":27,"props":807,"children":808},{},[809],{"type":31,"value":810},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":18,"tag":812,"props":813,"children":817},"pre",{"code":814,"language":31,"meta":8,"className":815},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[816],"language-text",[818],{"type":18,"tag":819,"props":820,"children":821},"code",{"__ignoreMap":8},[822],{"type":31,"value":814},{"type":31,"value":39},{"type":18,"tag":41,"props":825,"children":826},{},[827,842],{"type":18,"tag":45,"props":828,"children":829},{},[830],{"type":18,"tag":49,"props":831,"children":832},{},[833,838],{"type":18,"tag":53,"props":834,"children":835},{},[836],{"type":31,"value":837},"协议模型",{"type":18,"tag":53,"props":839,"children":840},{},[841],{"type":31,"value":62},{"type":18,"tag":64,"props":843,"children":844},{},[845,858,871],{"type":18,"tag":49,"props":846,"children":847},{},[848,853],{"type":18,"tag":71,"props":849,"children":850},{},[851],{"type":31,"value":852},"内容层 (文件请求)",{"type":18,"tag":71,"props":854,"children":855},{},[856],{"type":31,"value":857},"我想要一个 image.png 图片",{"type":18,"tag":49,"props":859,"children":860},{},[861,866],{"type":18,"tag":71,"props":862,"children":863},{},[864],{"type":31,"value":865},"编码层 (HTTP)",{"type":18,"tag":71,"props":867,"children":868},{},[869],{"type":31,"value":870},"GET /image.png HTTP/1.1",{"type":18,"tag":49,"props":872,"children":873},{},[874,879],{"type":18,"tag":71,"props":875,"children":876},{},[877],{"type":31,"value":878},"传输层 (TCP/IP)",{"type":18,"tag":71,"props":880,"children":881},{},[882,884,888],{"type":31,"value":883},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":18,"tag":885,"props":886,"children":887},"br",{},[],{"type":31,"value":889}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":18,"tag":27,"props":891,"children":892},{},[893],{"type":31,"value":894},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":18,"tag":234,"props":896,"children":897},{},[898],{"type":18,"tag":27,"props":899,"children":900},{},[901],{"type":31,"value":902},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":18,"tag":27,"props":904,"children":905},{},[906],{"type":31,"value":907},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":18,"tag":664,"props":909,"children":910},{},[],{"type":18,"tag":108,"props":912,"children":914},{":t":913},"流量捕获",[],{"type":18,"tag":113,"props":916,"children":918},{"id":917},"捕获-2",[919],{"type":31,"value":920},"捕获 2",{"type":18,"tag":27,"props":922,"children":923},{},[924],{"type":31,"value":925},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":31,"value":927},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":41,"props":929,"children":930},{},[931,950],{"type":18,"tag":45,"props":932,"children":933},{},[934],{"type":18,"tag":49,"props":935,"children":936},{},[937,941,945],{"type":18,"tag":53,"props":938,"children":939},{},[940],{"type":31,"value":420},{"type":18,"tag":53,"props":942,"children":943},{},[944],{"type":31,"value":62},{"type":18,"tag":53,"props":946,"children":947},{},[948],{"type":31,"value":949},"特点",{"type":18,"tag":64,"props":951,"children":952},{},[953,971],{"type":18,"tag":49,"props":954,"children":955},{},[956,961,966],{"type":18,"tag":71,"props":957,"children":958},{},[959],{"type":31,"value":960},"被动捕获",{"type":18,"tag":71,"props":962,"children":963},{},[964],{"type":31,"value":965},"在线路上传输时提取数据，如 Wireshark",{"type":18,"tag":71,"props":967,"children":968},{},[969],{"type":31,"value":970},"不直接与流量交互",{"type":18,"tag":49,"props":972,"children":973},{},[974,979,984],{"type":18,"tag":71,"props":975,"children":976},{},[977],{"type":31,"value":978},"主动捕获",{"type":18,"tag":71,"props":980,"children":981},{},[982],{"type":31,"value":983},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":18,"tag":71,"props":985,"children":986},{},[987],{"type":31,"value":988},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":18,"tag":27,"props":990,"children":991},{},[992],{"type":31,"value":993},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":18,"tag":995,"props":996,"children":997},"ol",{},[998,1004],{"type":18,"tag":999,"props":1000,"children":1001},"li",{},[1002],{"type":31,"value":1003},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":18,"tag":999,"props":1005,"children":1006},{},[1007],{"type":31,"value":1008},"只查看正在测试的应用程序的流量",{"type":18,"tag":27,"props":1010,"children":1011},{},[1012],{"type":31,"value":1013},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":18,"tag":108,"props":1015,"children":1018},{":t":1016,":type":1017},"系统调用跟踪","2",[],{"type":18,"tag":27,"props":1020,"children":1021},{},[1022],{"type":31,"value":1023},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":31,"value":1025},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":41,"props":1027,"children":1028},{},[1029,1048],{"type":18,"tag":45,"props":1030,"children":1031},{},[1032],{"type":18,"tag":49,"props":1033,"children":1034},{},[1035,1040,1044],{"type":18,"tag":53,"props":1036,"children":1037},{},[1038],{"type":31,"value":1039},"模式",{"type":18,"tag":53,"props":1041,"children":1042},{},[1043],{"type":31,"value":62},{"type":18,"tag":53,"props":1045,"children":1046},{},[1047],{"type":31,"value":949},{"type":18,"tag":64,"props":1049,"children":1050},{},[1051,1069,1083,1097,1111,1129,1143,1157],{"type":18,"tag":49,"props":1052,"children":1053},{},[1054,1059,1064],{"type":18,"tag":71,"props":1055,"children":1056},{},[1057],{"type":31,"value":1058},"用户模式",{"type":18,"tag":71,"props":1060,"children":1061},{},[1062],{"type":31,"value":1063},"操作系统普通应用程序和用户空间进程运行的模式",{"type":18,"tag":71,"props":1065,"children":1066},{},[1067],{"type":31,"value":1068},"权限限制",{"type":18,"tag":49,"props":1070,"children":1071},{},[1072,1075,1078],{"type":18,"tag":71,"props":1073,"children":1074},{},[],{"type":18,"tag":71,"props":1076,"children":1077},{},[],{"type":18,"tag":71,"props":1079,"children":1080},{},[1081],{"type":31,"value":1082},"隔离",{"type":18,"tag":49,"props":1084,"children":1085},{},[1086,1089,1092],{"type":18,"tag":71,"props":1087,"children":1088},{},[],{"type":18,"tag":71,"props":1090,"children":1091},{},[],{"type":18,"tag":71,"props":1093,"children":1094},{},[1095],{"type":31,"value":1096},"限制对系统资源的直接访问",{"type":18,"tag":49,"props":1098,"children":1099},{},[1100,1103,1106],{"type":18,"tag":71,"props":1101,"children":1102},{},[],{"type":18,"tag":71,"props":1104,"children":1105},{},[],{"type":18,"tag":71,"props":1107,"children":1108},{},[1109],{"type":31,"value":1110},"日常应用程序的运行",{"type":18,"tag":49,"props":1112,"children":1113},{},[1114,1119,1124],{"type":18,"tag":71,"props":1115,"children":1116},{},[1117],{"type":31,"value":1118},"内核模式",{"type":18,"tag":71,"props":1120,"children":1121},{},[1122],{"type":31,"value":1123},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":18,"tag":71,"props":1125,"children":1126},{},[1127],{"type":31,"value":1128},"完全权限",{"type":18,"tag":49,"props":1130,"children":1131},{},[1132,1135,1138],{"type":18,"tag":71,"props":1133,"children":1134},{},[],{"type":18,"tag":71,"props":1136,"children":1137},{},[],{"type":18,"tag":71,"props":1139,"children":1140},{},[1141],{"type":31,"value":1142},"关键操作",{"type":18,"tag":49,"props":1144,"children":1145},{},[1146,1149,1152],{"type":18,"tag":71,"props":1147,"children":1148},{},[],{"type":18,"tag":71,"props":1150,"children":1151},{},[],{"type":18,"tag":71,"props":1153,"children":1154},{},[1155],{"type":31,"value":1156},"直接访问和控制系统资源",{"type":18,"tag":49,"props":1158,"children":1159},{},[1160,1163,1166],{"type":18,"tag":71,"props":1161,"children":1162},{},[],{"type":18,"tag":71,"props":1164,"children":1165},{},[],{"type":18,"tag":71,"props":1167,"children":1168},{},[1169],{"type":31,"value":1170},"系统级调用",{"type":18,"tag":234,"props":1172,"children":1173},{},[1174],{"type":18,"tag":27,"props":1175,"children":1176},{},[1177],{"type":31,"value":1178},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":18,"tag":27,"props":1180,"children":1181},{},[1182],{"type":31,"value":1183},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":18,"tag":812,"props":1185,"children":1187},{"code":1186},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[1188],{"type":18,"tag":819,"props":1189,"children":1190},{"__ignoreMap":8},[1191],{"type":31,"value":1186},{"type":18,"tag":27,"props":1193,"children":1194},{},[1195],{"type":31,"value":1196},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":18,"tag":108,"props":1198,"children":1200},{":t":1199,":type":1017},"网络编程的基础",[],{"type":18,"tag":27,"props":1202,"children":1203},{},[1204,1206,1213,1215,1222],{"type":31,"value":1205},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":18,"tag":256,"props":1207,"children":1210},{"href":1208,"rel":1209},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[260],[1211],{"type":31,"value":1212},"Berkeley Software Distribution（BSD）",{"type":31,"value":1214}," 完成的。因此在网络通信领域中，就离不开 ",{"type":18,"tag":256,"props":1216,"children":1219},{"href":1217,"rel":1218},"https://en.wikipedia.org/wiki/Berkeley_sockets",[260],[1220],{"type":31,"value":1221},"Berkeley Sockets",{"type":31,"value":1223},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":18,"tag":234,"props":1225,"children":1226},{},[1227],{"type":18,"tag":27,"props":1228,"children":1229},{},[1230,1232,1238,1240,1246],{"type":31,"value":1231},"如果你是类 Unix 系统，可以在终端输入 ",{"type":18,"tag":819,"props":1233,"children":1235},{"className":1234},[],[1236],{"type":31,"value":1237},"man 2 syscall_name",{"type":31,"value":1239}," 在终端中查看手册，比如 ",{"type":18,"tag":819,"props":1241,"children":1243},{"className":1242},[],[1244],{"type":31,"value":1245},"man 2 open",{"type":31,"value":1247}," 就可以查看系统调用第二章有关 open 的内容。",{"type":18,"tag":27,"props":1249,"children":1250},{},[1251],{"type":31,"value":1252},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":18,"tag":108,"props":1254,"children":1256},{":t":1255,":type":1017},"不同平台之间的捕获",[],{"type":31,"value":125},{"type":18,"tag":41,"props":1259,"children":1260},{},[1261,1281],{"type":18,"tag":45,"props":1262,"children":1263},{},[1264],{"type":18,"tag":49,"props":1265,"children":1266},{},[1267,1272,1277],{"type":18,"tag":53,"props":1268,"children":1269},{},[1270],{"type":31,"value":1271},"平台",{"type":18,"tag":53,"props":1273,"children":1274},{},[1275],{"type":31,"value":1276},"应用",{"type":18,"tag":53,"props":1278,"children":1279},{},[1280],{"type":31,"value":62},{"type":18,"tag":64,"props":1282,"children":1283},{},[1284,1302,1320],{"type":18,"tag":49,"props":1285,"children":1286},{},[1287,1292,1297],{"type":18,"tag":71,"props":1288,"children":1289},{},[1290],{"type":31,"value":1291},"Linux",{"type":18,"tag":71,"props":1293,"children":1294},{},[1295],{"type":31,"value":1296},"Strace",{"type":18,"tag":71,"props":1298,"children":1299},{},[1300],{"type":31,"value":1301},"跟踪系统调用和信号",{"type":18,"tag":49,"props":1303,"children":1304},{},[1305,1310,1315],{"type":18,"tag":71,"props":1306,"children":1307},{},[1308],{"type":31,"value":1309},"macOS",{"type":18,"tag":71,"props":1311,"children":1312},{},[1313],{"type":31,"value":1314},"DTrace",{"type":18,"tag":71,"props":1316,"children":1317},{},[1318],{"type":31,"value":1319},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":18,"tag":49,"props":1321,"children":1322},{},[1323,1328,1333],{"type":18,"tag":71,"props":1324,"children":1325},{},[1326],{"type":31,"value":1327},"Windows",{"type":18,"tag":71,"props":1329,"children":1330},{},[1331],{"type":31,"value":1332},"Process Monitor",{"type":18,"tag":71,"props":1334,"children":1335},{},[1336],{"type":31,"value":1337},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":18,"tag":234,"props":1339,"children":1340},{},[1341,1346,1351],{"type":18,"tag":27,"props":1342,"children":1343},{},[1344],{"type":31,"value":1345},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":18,"tag":27,"props":1347,"children":1348},{},[1349],{"type":31,"value":1350},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":18,"tag":27,"props":1352,"children":1353},{},[1354],{"type":31,"value":1355},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":18,"tag":27,"props":1357,"children":1358},{},[1359],{"type":31,"value":1360},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":18,"tag":108,"props":1362,"children":1363},{":t":978,":type":1017},[],{"type":18,"tag":27,"props":1365,"children":1366},{},[1367],{"type":31,"value":1368},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":18,"tag":113,"props":1370,"children":1372},{"id":1371},"太阳底下没有新鲜事-3",[1373],{"type":31,"value":1374},"太阳底下没有新鲜事 3",{"type":18,"tag":108,"props":1376,"children":1378},{":t":1377},"太阳底下没有新鲜事",[],{"type":18,"tag":27,"props":1380,"children":1381},{},[1382],{"type":31,"value":1383},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":18,"tag":108,"props":1385,"children":1387},{":t":1386,":type":1017},"一些进制的基础",[],{"type":18,"tag":27,"props":1389,"children":1390},{},[1391],{"type":31,"value":1392},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":31,"value":1394},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":41,"props":1396,"children":1397},{},[1398,1417],{"type":18,"tag":45,"props":1399,"children":1400},{},[1401],{"type":18,"tag":49,"props":1402,"children":1403},{},[1404,1409,1413],{"type":18,"tag":53,"props":1405,"children":1406},{},[1407],{"type":31,"value":1408},"类型",{"type":18,"tag":53,"props":1410,"children":1411},{},[1412],{"type":31,"value":62},{"type":18,"tag":53,"props":1414,"children":1415},{},[1416],{"type":31,"value":949},{"type":18,"tag":64,"props":1418,"children":1419},{},[1420,1438,1452,1466,1480,1498,1512],{"type":18,"tag":49,"props":1421,"children":1422},{},[1423,1428,1433],{"type":18,"tag":71,"props":1424,"children":1425},{},[1426],{"type":31,"value":1427},"二进制协议",{"type":18,"tag":71,"props":1429,"children":1430},{},[1431],{"type":31,"value":1432},"以二进制格式传输数据",{"type":18,"tag":71,"props":1434,"children":1435},{},[1436],{"type":31,"value":1437},"高效性",{"type":18,"tag":49,"props":1439,"children":1440},{},[1441,1444,1447],{"type":18,"tag":71,"props":1442,"children":1443},{},[],{"type":18,"tag":71,"props":1445,"children":1446},{},[],{"type":18,"tag":71,"props":1448,"children":1449},{},[1450],{"type":31,"value":1451},"紧凑性",{"type":18,"tag":49,"props":1453,"children":1454},{},[1455,1458,1461],{"type":18,"tag":71,"props":1456,"children":1457},{},[],{"type":18,"tag":71,"props":1459,"children":1460},{},[],{"type":18,"tag":71,"props":1462,"children":1463},{},[1464],{"type":31,"value":1465},"复杂性",{"type":18,"tag":49,"props":1467,"children":1468},{},[1469,1472,1475],{"type":18,"tag":71,"props":1470,"children":1471},{},[],{"type":18,"tag":71,"props":1473,"children":1474},{},[],{"type":18,"tag":71,"props":1476,"children":1477},{},[1478],{"type":31,"value":1479},"依赖性",{"type":18,"tag":49,"props":1481,"children":1482},{},[1483,1488,1493],{"type":18,"tag":71,"props":1484,"children":1485},{},[1486],{"type":31,"value":1487},"文本协议",{"type":18,"tag":71,"props":1489,"children":1490},{},[1491],{"type":31,"value":1492},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":18,"tag":71,"props":1494,"children":1495},{},[1496],{"type":31,"value":1497},"可读性",{"type":18,"tag":49,"props":1499,"children":1500},{},[1501,1504,1507],{"type":18,"tag":71,"props":1502,"children":1503},{},[],{"type":18,"tag":71,"props":1505,"children":1506},{},[],{"type":18,"tag":71,"props":1508,"children":1509},{},[1510],{"type":31,"value":1511},"效率低",{"type":18,"tag":49,"props":1513,"children":1514},{},[1515,1518,1521],{"type":18,"tag":71,"props":1516,"children":1517},{},[],{"type":18,"tag":71,"props":1519,"children":1520},{},[],{"type":18,"tag":71,"props":1522,"children":1523},{},[1524],{"type":31,"value":1525},"灵活性（容错性和可扩展性）",{"type":18,"tag":27,"props":1527,"children":1528},{},[1529,1531,1537],{"type":31,"value":1530},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":18,"tag":819,"props":1532,"children":1534},{"className":1533},[],[1535],{"type":31,"value":1536},"octet",{"type":31,"value":1538}," 来确保每个单位确实是 8 位。",{"type":18,"tag":234,"props":1540,"children":1541},{},[1542],{"type":18,"tag":27,"props":1543,"children":1544},{},[1545],{"type":31,"value":1546},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":18,"tag":812,"props":1548,"children":1550},{"code":1549},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[1551],{"type":18,"tag":819,"props":1552,"children":1553},{"__ignoreMap":8},[1554],{"type":31,"value":1549},{"type":18,"tag":27,"props":1556,"children":1557},{},[1558],{"type":31,"value":1559},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":18,"tag":234,"props":1561,"children":1562},{},[1563],{"type":18,"tag":27,"props":1564,"children":1565},{},[1566],{"type":31,"value":1567},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":18,"tag":108,"props":1569,"children":1571},{":t":1570,":type":1017},"数值数据",[],{"type":18,"tag":27,"props":1573,"children":1574},{},[1575],{"type":31,"value":1576},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":18,"tag":27,"props":1578,"children":1579},{},[1580,1582,1588],{"type":31,"value":1581},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":18,"tag":1583,"props":1584,"children":1585},"strong",{},[1586],{"type":31,"value":1587},"协议结构",{"type":31,"value":1589}," 与逆向。",{"type":18,"tag":27,"props":1591,"children":1592},{},[1593,1595,1600],{"type":31,"value":1594},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":18,"tag":1583,"props":1596,"children":1597},{},[1598],{"type":31,"value":1599},"握手过程",{"type":31,"value":1601}," 来识别出加密套件。",{"type":18,"tag":27,"props":1603,"children":1604},{},[1605,1607],{"type":31,"value":1606},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":18,"tag":1608,"props":1609,"children":1610},"the",{"ida":8,"pro":8,"book":8},[1611],{"type":31,"value":1612}," 找到我想要的。",{"title":8,"searchDepth":200,"depth":200,"links":1614},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":1618,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1619,"description":8,"director":210,"time":499,"img":1620,"body":1621,"_type":202,"_id":1629,"_source":204,"_file":1630,"_extension":206},"/book/ex-president-moon-s-memoir","Ex-President Moon's memoir","04/4.png",{"type":15,"children":1622,"toc":1627},[1623],{"type":18,"tag":1624,"props":1625,"children":1626},"text-an-next",{},[],{"title":8,"searchDepth":200,"depth":200,"links":1628},[],"content:book:Ex-President-Moon-s-memoir.md","book/Ex-President-Moon-s-memoir.md",{"_path":1632,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1633,"description":8,"director":210,"time":1634,"img":1635,"body":1636,"_type":202,"_id":1643,"_source":204,"_file":1644,"_extension":206},"/book/the-calculus-lifesaver","The Calculus Lifesaver: All the Tools You Need to Excel at Calculus","2023","03/3.png",{"type":15,"children":1637,"toc":1641},[1638],{"type":18,"tag":1624,"props":1639,"children":1640},{},[],{"title":8,"searchDepth":200,"depth":200,"links":1642},[],"content:book:the-calculus-lifesaver.md","book/the-calculus-lifesaver.md",1733163122060]