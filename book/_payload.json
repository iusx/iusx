[{"data":1,"prerenderedAt":20862},["Reactive",2],{"equalBook":3},[4,14458,15189,15886,16367,16798,17009,18206,18983,19388,19605,20702],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"plan":13,"body":14,"_type":14453,"_id":14454,"_source":14455,"_file":14456,"_extension":14457},"/book/seven-languages-in-seven-weeks-bruce-a-tate","book",false,"","Seven Languages in Seven Weeks","Bruce A. Tate","2025.01.08","08/1.png","268,323",{"type":15,"children":16,"toc":14368},"root",[17,14362],{"type":18,"tag":19,"props":20,"children":25},"element","book-content",{":by":21,":img":22,":plan":23,":title":24},"director","img","plan","title",[26,31,39,45,50,55,60,65,70,74,78,84,89,94,99,104,110,115,124,129,134,139,144,152,157,160,164,171,176,184,257,262,272,285,299,302,308,313,318,352,357,362,370,375,383,388,390,496,499,505,509,523,531,554,607,612,615,621,625,630,638,674,677,683,687,710,724,732,752,760,778,791,799,817,822,830,858,893,896,902,906,947,955,960,968,973,981,1043,1046,1052,1058,1062,1067,1072,1077,1185,1190,1195,1237,1242,1271,1276,1305,1310,1315,1320,1325,1354,1359,1371,1376,1418,1421,1427,1431,1436,1441,1446,1522,1525,1531,1535,1540,1546,1550,1553,1566,1571,1576,1578,1695,1711,1716,1719,1725,1729,1734,1757,1762,1764,1874,1890,1893,1899,1903,1926,1949,1996,1998,2155,2160,2169,2174,2182,2187,2210,2215,2243,2248,2251,2257,2261,2267,2272,2274,2334,2339,2344,2355,2360,2373,2378,2391,2396,2415,2420,2428,2431,2435,2439,2447,2452,2460,2464,2472,2477,2485,2490,2514,2519,2535,2538,2546,2565,2584,2588,2593,2601,2609,2623,2635,2662,2670,2678,2706,2718,2726,2731,2739,2744,2749,2757,2765,2770,2775,2788,2793,2800,2805,2810,2818,2822,2827,2832,2840,2848,2861,2866,2869,2875,2879,2900,2908,2911,2932,2935,2949,2957,2976,2994,2997,3003,3007,3012,3014,3113,3151,3154,3160,3164,3191,3199,3204,3227,3232,3240,3245,3263,3268,3296,3301,3302,3412,3417,3419,3635,3638,3644,3648,3666,3718,3719,3759,3764,3772,3785,3788,3794,3798,3803,3811,3814,3822,3827,3829,3902,3907,3920,3925,3933,3938,3941,3947,3951,3956,3964,3969,3974,3979,3987,3992,4000,4005,4013,4016,4022,4026,4038,4051,4056,4065,4070,4077,4081,4086,4087,4204,4209,4210,4322,4329,4333,4338,4533,4538,4543,4549,4552,4557,4568,4573,4579,4583,4588,4605,4610,4618,4627,4648,4652,4658,4672,4686,4689,4695,4699,4704,4718,4723,4731,4745,4748,4754,4758,4763,4771,4776,4788,4796,4799,4805,4809,4814,4822,4828,4830,4975,5122,5130,5135,5148,5153,5156,5162,5166,5180,5203,5223,5228,5230,5350,5355,5361,5365,5370,5372,5438,5441,5447,5451,5479,5492,5500,5503,5509,5513,5518,5528,5533,5541,5544,5550,5553,5558,5564,5568,5573,5574,5644,5665,5677,5690,5695,5703,5708,5716,5729,5737,5745,5751,5755,5767,5768,5877,5878,5950,5956,5960,5971,5979,6033,6039,6043,6053,6055,6288,6293,6294,6425,6431,6435,6447,6470,6473,6490,6495,6500,6505,6517,6540,6552,6570,6587,6593,6596,6608,6620,6624,6632,6650,6658,6691,6706,6718,6726,6729,6735,6739,6758,6766,6769,7000,7018,7419,7728,7746,7758,7764,7768,7781,7789,7801,7814,7820,7824,7852,7860,7887,7890,7896,7900,7903,7911,7938,7944,7948,7951,7959,7972,7980,7991,7999,8005,8009,8014,8022,8025,8038,8048,8061,8070,8088,8096,8097,8158,8163,8390,8398,8419,8425,8429,8443,8451,8461,8469,8480,8491,8494,8500,8503,8526,8532,8535,8547,8568,8573,8581,8589,8594,8595,8630,8643,8651,8664,8682,8687,8695,8696,8754,8760,8763,8784,8821,8829,8834,8840,8844,8855,8876,8884,8934,8937,8943,8947,8959,8972,8984,8992,9005,9013,9016,9022,9026,9047,9055,9063,9070,9074,9079,9092,9105,9113,9118,9126,9129,9135,9139,9144,9180,9206,9214,9227,9235,9238,9244,9248,9249,9358,9364,9368,9394,9413,9421,9427,9431,9442,9450,9478,9486,9491,9499,9505,9508,9521,9529,9534,9542,9545,9551,9555,9583,9616,9624,9644,9646,9918,9923,9926,9932,9936,9944,9949,9955,9959,9970,9971,10069,10099,10107,10119,10127,10139,10147,10150,10156,10160,10174,10187,10192,10200,10205,10206,10322,10327,10328,10452,10457,10475,10481,10484,10515,10523,10526,10532,10536,10548,10549,10609,10638,10699,10711,10712,10829,10834,10837,10843,10846,10858,10863,10875,10880,10891,10894,10902,10907,10910,10916,10919,10931,10943,10946,10952,10956,10979,10987,11015,11023,11028,11036,11049,11057,11087,11093,11097,11099,11524,11530,11534,11546,11558,11576,11588,11596,11599,11605,11609,11620,11625,11672,11681,11695,11696,11806,11809,11815,11819,11827,11841,11856,11878,11880,12016,12019,12025,12028,12033,12038,12046,12054,12077,12099,12105,12109,12122,12130,12138,12167,12173,12177,12182,12202,12207,12213,12217,12228,12250,12258,12263,12269,12273,12293,12301,12306,12314,12335,12348,12353,12650,12967,12979,12988,12991,12997,13001,13006,13012,13016,13055,13067,13106,13125,13133,13136,13504,13518,13526,13532,13536,13561,13583,13591,13599,13605,13608,13616,13634,13642,13647,13653,13657,13690,13695,13700,13705,13708,13714,13718,13756,13757,13830,13838,13841,13847,13851,13863,13885,13887,14115,14120,14128,14159,14164,14167,14173,14176,14204,14217,14232,14240,14245,14250,14256,14260,14294,14302],{"type":18,"tag":27,"props":28,"children":30},"text-title",{":t":29},"回顾下自己的十年经历",[],{"type":18,"tag":32,"props":33,"children":35},"h1",{"id":34},"总结自己-0",[36],{"type":37,"value":38},"text","总结自己 0",{"type":18,"tag":40,"props":41,"children":42},"p",{},[43],{"type":37,"value":44},"如果从 2015 那个对计算机懵懂的我来说，到 2025 年已经过了十年。可以说对计算机方面拥有了十年的兴趣。假如从 2018 我第一个漏洞算起，至今已经过了七年。再从 2020 我打算学习设计开始，已经过了五年。",{"type":18,"tag":40,"props":46,"children":47},{},[48],{"type":37,"value":49},"我觉得自己有很大的缺陷，基础不是特别牢固。之前做全栈的时候就有朋友指出我的基础不是特别好，最常说的话就是：“基础不牢，地动山摇”。做出的项目只是看起来很不错，但如果深挖细节，性能的处理就有一小部分的问题。虽然我总以 \"安全爱好者\" 作为 title，但我貌似并没有发现过比较知名且威胁较大的漏洞。",{"type":18,"tag":40,"props":51,"children":52},{},[53],{"type":37,"value":54},"更不用说什么 EDUSRC、MSRC、TSRC 这些了，仅仅是公益 SRC 和 CNVD 以及 Hackerone 这些，我所发现到的或提交的更多是大佬吃剩的边角料，甚至是不屑一顾的。但我之前缺奉为瑰宝，以筑起我那脆弱且不堪一击的自信。",{"type":18,"tag":40,"props":56,"children":57},{},[58],{"type":37,"value":59},"我还是比较庆幸自己无论做什么起码都能有一点成就的。虽然这个成就不高，但足以出去找个班上不至于饿死。做设计会有很多朋友施舍下我;做安全拿到了漏洞赏金（虽然不多）;做全栈起码能混到小公司 offer；做舆情分析的时候，能被专业的人发现，引导我继续做下去。所以我还是比较幸运的，起码有点东西，虽然不多。",{"type":18,"tag":40,"props":61,"children":62},{},[63],{"type":37,"value":64},"看完这本书后，我觉得是时候筹备下我的代表作了。因为之前很多人觉得我是臭做设计的，甚至还有人说我是个臭美工！完全无视掉了我全栈和安全架构方面的才华。所以在这之后，我会筹备一个全栈的代表作；另一个是安全架构的代表作。至于设计的代表作已经有了，再往后无非是作品。我觉得代表作这个东西首先是能给人用的，其次才是给人看的；这样说服力大一点。",{"type":18,"tag":40,"props":66,"children":67},{},[68],{"type":37,"value":69},"之所以看这本书。首先是我觉得自己 Code 方面还是比较有问题，写 Code 总是很磨叽，和那种一写 code 就是写一天的有很大的差距。其次是我承认是被这本书的标题所吸引，作者懂不懂语言不重要，但他一定懂营销。我还不知道这本书有没有被 Percipio 收入，反正我 ACM 会员资格是到期了。这里我想吐槽下 ACM 的续费规则，我有钱的时候是想提前续费的，但 ACM 只能是快过期的时候才能续费。等真快过期的时候，我反而没钱续费了。",{"type":18,"tag":71,"props":72,"children":73},"hr",{},[],{"type":18,"tag":27,"props":75,"children":77},{":t":76},"作者致谢",[],{"type":18,"tag":32,"props":79,"children":81},{"id":80},"致谢-2",[82],{"type":37,"value":83},"致谢 2",{"type":18,"tag":40,"props":85,"children":86},{},[87],{"type":37,"value":88},"又到了一个非常具有代表性的篇幅，也就是：“What Readers Are Saying About Seven Languages in Seven Weeks” 你会看到国内那种类似 xxx 专家，xxx 公司 xxx 总监 xxx 团队 xxx 实验室对某本书的友情肯定和推荐。你别说你还真别说，如果这本书讲的是思维逻辑和拆解，那确实是很不错的。但如果是技术性的，那可能从 2010 年发售至今 2025 年历经十多年的发展，技术也可能会淘汰，语法可能会变，但逻辑和思维，依然是那套惯式。",{"type":18,"tag":40,"props":90,"children":91},{},[92],{"type":37,"value":93},"在这本书的前言中，作者透露出在 2009~2010 的时间段经历了很多人生的体验。例如他那 40 多岁的弟弟经历了心脏搭桥手术；三月底，他的妹妹确诊的乳腺癌；同月，他的母亲确诊晚期癌症。短短几天就去世了。",{"type":18,"tag":40,"props":95,"children":96},{},[97],{"type":37,"value":98},"在这期间内，作者虽然伤心欲绝。但他回想起母亲的点点滴滴，与母亲的每次相处，特别是在作者离家前上了母亲的几节美术课，虽然作者的画很糟糕。但母亲总能将破碎不堪的画幅玩就回来成为一件精美的艺术作品。这需要天赋和经验才能将一副处在崩溃边缘的画作挽救回来。",{"type":18,"tag":40,"props":100,"children":101},{},[102],{"type":37,"value":103},"不知你是否接触过绘画、美术。在我初中最后一年时，我因成绩垫底转到了美术班，我比较遗憾没有接触到绘画的全过程。",{"type":18,"tag":105,"props":106,"children":109},"img-tip",{"text":107,"url":108},"绘画这门艺术，你需要经历过前期的 \u003Cb>构图、草稿、描边、上色、光影\u003C/b> 如果你是素描类的作品，还需要经历前期的封边到最后将美纹纸胶带撕下的过程。","08/1.jpg",[],{"type":18,"tag":40,"props":111,"children":112},{},[113],{"type":37,"value":114},"在作画前期，你需要构思好要画什么，然后通过一些技巧完成构图。比如透视、人体结构等。然后就是用铅笔打草稿，打草稿的过程要求一笔带过，如果不能一笔，那就需要勤加练习。所以在美术课中你会看到一开始要求画线，无论板绘还是素描都是这样。",{"type":18,"tag":116,"props":117,"children":118},"text-tip",{},[119],{"type":18,"tag":40,"props":120,"children":121},{},[122],{"type":37,"value":123},"美术一般讲究人较多，水彩纸要用 Arches、素描纸要用 Canson、铅笔要用 Marie's，高级点的铅笔还有 Derwent。水彩颜料要用 Winsor & Newton、白夜，一张不起眼的纸每张也许都是几块钱的。",{"type":18,"tag":40,"props":125,"children":126},{},[127],{"type":37,"value":128},"学会画线后，就需要学会光影。光的照射范围和影子，在素描中，只有黑色和白色，因此需要用到擦纸笔甚至可塑橡皮来实现。当然有些功力比较深的喜欢用手进行擦来延续黑色。",{"type":18,"tag":40,"props":130,"children":131},{},[132],{"type":37,"value":133},"如果你是走那种水彩、或者板绘，数字传媒的。可能会经历构图、草稿、描边的这个过程。然后就是上色、光影的应用。所以这个阶段，就和开发很类似。前期实现一个功能，然后用一个简陋的 GUi 进行交互。后期再将 GUi 进行美化和布局的排列。那么恭喜你，你已经成为了一个优秀的 Web 开发工程师，俗称前端。",{"type":18,"tag":40,"props":135,"children":136},{},[137],{"type":37,"value":138},"但对于后端，更多的是 code 和 code 之间功能的划分，每个 code 负责不同的功能，最后连点成线，打通 API 和 GUI 之间的联系。组成一个能跑的 base 或 GUI 程序，或者输出一个接口作为 API。那么恭喜你，你成为了软件开发工程师或后端工程师。",{"type":18,"tag":40,"props":140,"children":141},{},[142],{"type":37,"value":143},"一个简简单单的前言，就透露出作者对于软件设计和软件工程的功底。即使过了十多年，这套逻辑和拆解也亦然可以套在现代软件工程中，如果读者理解过 MVC 架构，那简直就是异曲同工。",{"type":18,"tag":116,"props":145,"children":146},{},[147],{"type":18,"tag":40,"props":148,"children":149},{},[150],{"type":37,"value":151},"When I told my mother that I would dedicate this book to her, she\nsaid that she would like that, but she had nothing to do with com-\nputers. That is true enough. The very thought of Windows would leave\nher helpless. But Mom, you have had everything to do with me. Your\nwell-timed words of encouragement inspired me, your love of creativity\nshaped me, and your enthusiasm and love of life guide me even now.\nAs I think about these experiences, I can’t help but feel a little better\nand a little stronger because I, too, am a canvas shaped by the master.\nThis book is dedicated with love to Lynda Lyle Tate, 1936–2010.",{"type":18,"tag":40,"props":153,"children":154},{},[155],{"type":37,"value":156},"所以在前沿的结尾，作者说母亲对作者的影响很大。这无关他的目前连 Windows 都不会用，而是传授给了儿子拆解的艺术。看一个产品如果从成品看肯定是高攀不起的，但如果一步一步的拆解，一个一个的功能实现，就会发现也不是那么的特别高攀不起。",{"type":18,"tag":71,"props":158,"children":159},{},[],{"type":18,"tag":27,"props":161,"children":163},{":t":162},"作者的致谢",[],{"type":18,"tag":165,"props":166,"children":168},"h2",{"id":167},"ruby简洁灵活面向对象-1",[169],{"type":37,"value":170},"Ruby:简洁，灵活，面向对象 1",{"type":18,"tag":40,"props":172,"children":173},{},[174],{"type":37,"value":175},"在致谢阶段，作者展示出了这本书的含金量，甚至比开篇那几位挂名推荐的还重量级。首先映入眼帘的是 Ruby community：",{"type":18,"tag":116,"props":177,"children":178},{},[179],{"type":18,"tag":40,"props":180,"children":181},{},[182],{"type":37,"value":183},"*相信能在 Wikipedia 中留名的实力。",{"type":18,"tag":185,"props":186,"children":187},"ol",{},[188,203,224,245],{"type":18,"tag":189,"props":190,"children":191},"li",{},[192,201],{"type":18,"tag":193,"props":194,"children":198},"a",{"href":195,"rel":196},"https://ja.wikipedia.org/wiki/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D",[197],"nofollow",[199],{"type":37,"value":200},"松本行弘(Matz)",{"type":37,"value":202}," 他最著名的是 Ruby 编程语言及其原始参考实现 Matz 的 Ruby 解释器的首席设计师；",{"type":18,"tag":189,"props":204,"children":205},{},[206,213,215,222],{"type":18,"tag":193,"props":207,"children":210},{"href":208,"rel":209},"https://github.com/headius",[197],[211],{"type":37,"value":212},"Charles Nutter",{"type":37,"value":214},": ",{"type":18,"tag":193,"props":216,"children":219},{"href":217,"rel":218},"https://en.wikipedia.org/wiki/JRuby",[197],[220],{"type":37,"value":221},"Jruby",{"type":37,"value":223}," 的作者之一，能在 Java 和 Ruby 代码之间进行完全双向访问（类似于 Python 语言的 Jython ）。",{"type":18,"tag":189,"props":225,"children":226},{},[227,234,236,243],{"type":18,"tag":193,"props":228,"children":231},{"href":229,"rel":230},"https://github.com/evanphx",[197],[232],{"type":37,"value":233},"Evan Phoenix",{"type":37,"value":235}," : ",{"type":18,"tag":193,"props":237,"children":240},{"href":238,"rel":239},"https://en.wikipedia.org/wiki/Rubinius",[197],[241],{"type":37,"value":242},"Rubinius",{"type":37,"value":244}," 的作者；旨在 “为运行 Ruby 代码提供丰富、高性能的环境”",{"type":18,"tag":189,"props":246,"children":247},{},[248,255],{"type":18,"tag":193,"props":249,"children":252},{"href":250,"rel":251},"https://en.wikipedia.org/wiki/Tim_Bray",[197],[253],{"type":37,"value":254},"Tim Bray",{"type":37,"value":256},": 原始 XML 规范的共同作者之一;",{"type":18,"tag":40,"props":258,"children":259},{},[260],{"type":37,"value":261},"Ruby 以完全面向对象、可读性和简洁性、灵活性而知名。例如灵活的语法与动态特性：",{"type":18,"tag":263,"props":264,"children":266},"pre",{"code":265},"class Greeter\n  def initialize(name)\n    @name = name.capitalize\n  end\nend\n\n# 动态添加方法\nGreeter.define_method(:greet) do\n  \"Hello, #{@name}!\"\nend\n\ng = Greeter.new(\"ruby\")\nputs g.greet\n# 输出：Hello, Ruby!\n",[267],{"type":18,"tag":268,"props":269,"children":270},"code",{"__ignoreMap":8},[271],{"type":37,"value":265},{"type":18,"tag":40,"props":273,"children":274},{},[275,277,283],{"type":37,"value":276},"但看输出 ",{"type":18,"tag":268,"props":278,"children":280},{"className":279},[],[281],{"type":37,"value":282},"Hello, Ruby!",{"type":37,"value":284}," 的这个过程就感觉元编程也是 ruby 的特点之一。",{"type":18,"tag":40,"props":286,"children":287},{},[288,290,297],{"type":37,"value":289},"我之前浏览过 ",{"type":18,"tag":193,"props":291,"children":294},{"href":292,"rel":293},"https://ruby-china.org/",[197],[295],{"type":37,"value":296},"Ruby China",{"type":37,"value":298},"，那时候我有一个对 Ruby 的问题。但 Ruby China community 有一个会员限制。注册完需要三个月后才能发帖或发消息，结果就是一天后我的问题被我自己解决了，之后我就再也没有浏览过这个社区。",{"type":18,"tag":71,"props":300,"children":301},{},[],{"type":18,"tag":165,"props":303,"children":305},{"id":304},"io更好的理解-1",[306],{"type":37,"value":307},"Io:更好的理解 1",{"type":18,"tag":27,"props":309,"children":312},{":t":310,"type":311},"IO：更好的理解语言","2",[],{"type":18,"tag":40,"props":314,"children":315},{},[316],{"type":37,"value":317},"接下来的就是 Io community, 并不是信息学奥林匹克竞赛 (英语：Olympiad in Informatics，简称：OI) 的那个 IO。而是 Io Programming Language：",{"type":18,"tag":185,"props":319,"children":320},{},[321,340],{"type":18,"tag":189,"props":322,"children":323},{},[324,331,332,338],{"type":18,"tag":193,"props":325,"children":328},{"href":326,"rel":327},"https://github.com/jeremytregunna",[197],[329],{"type":37,"value":330},"Jeremy Tregunna",{"type":37,"value":214},{"type":18,"tag":193,"props":333,"children":335},{"href":326,"rel":334},[197],[336],{"type":37,"value":337},"ioLang",{"type":37,"value":339}," 的作者之一;Io 的目标是探索概念统一和动态语言，因此权衡往往倾向于简单性和灵活性而不是性能。",{"type":18,"tag":189,"props":341,"children":342},{},[343,350],{"type":18,"tag":193,"props":344,"children":347},{"href":345,"rel":346},"https://github.com/stevedekorte",[197],[348],{"type":37,"value":349},"Steve Dekorte",{"type":37,"value":351},": Iolang 的作者之一；Iolang 于 2002 年创建，当时他试图用他的语言 Cel 来帮助朋友 Dru Nelson。他发现自己确实不太了解语言的工作原理，并开始编写一种小型语言来更好地理解问题。(ps: 我什么时候才能拥有这样的好朋友)",{"type":18,"tag":40,"props":353,"children":354},{},[355],{"type":37,"value":356},"光从描述，我已经对 Iolang 开始有兴趣了，特别句尾处的: \"You captured the imagination of the beta readers and cre-\nated the favorite language of many of them.(你激发并测试了读者的想象力，同时创造了许多人最喜欢的语言。)\"",{"type":18,"tag":40,"props":358,"children":359},{},[360],{"type":37,"value":361},"Iolang 作为动态语言，在类型阶段就比较宽松，比较灵活，例如:",{"type":18,"tag":263,"props":363,"children":365},{"code":364},"x = 42        # 整数\nx = \"Hello\"   # 重新赋值为字符串\n",[366],{"type":18,"tag":268,"props":367,"children":368},{"__ignoreMap":8},[369],{"type":37,"value":364},{"type":18,"tag":40,"props":371,"children":372},{},[373],{"type":37,"value":374},"而静态语言呢，类似 Typescript 这种类型比较强硬的：",{"type":18,"tag":263,"props":376,"children":378},{"code":377},"let x: number = 42;\nx = \"Hello\"; // 编译错误：类型不匹配\n",[379],{"type":18,"tag":268,"props":380,"children":381},{"__ignoreMap":8},[382],{"type":37,"value":377},{"type":18,"tag":40,"props":384,"children":385},{},[386],{"type":37,"value":387},"当然他们各具特点，灵活性、性能各有千秋，适应的项目需求也不同，有的适合大型的，多人合作开发，有的适合写个脚本或前期功能论证阶段的原型设计。动态语言的刻板印象就是 易上手、Code 简洁、类型宽松、快速开发、运行时发现等作为优点。我们列举几个常见的静态和动态语言：",{"type":37,"value":389},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":392,"children":393},"table",{},[394,413],{"type":18,"tag":395,"props":396,"children":397},"thead",{},[398],{"type":18,"tag":399,"props":400,"children":401},"tr",{},[402,408],{"type":18,"tag":403,"props":404,"children":405},"th",{},[406],{"type":37,"value":407},"动态语言",{"type":18,"tag":403,"props":409,"children":410},{},[411],{"type":37,"value":412},"静态语言",{"type":18,"tag":414,"props":415,"children":416},"tbody",{},[417,431,444,457,470,483],{"type":18,"tag":399,"props":418,"children":419},{},[420,426],{"type":18,"tag":421,"props":422,"children":423},"td",{},[424],{"type":37,"value":425},"Python",{"type":18,"tag":421,"props":427,"children":428},{},[429],{"type":37,"value":430},"C/C++",{"type":18,"tag":399,"props":432,"children":433},{},[434,439],{"type":18,"tag":421,"props":435,"children":436},{},[437],{"type":37,"value":438},"Ruby",{"type":18,"tag":421,"props":440,"children":441},{},[442],{"type":37,"value":443},"Java",{"type":18,"tag":399,"props":445,"children":446},{},[447,452],{"type":18,"tag":421,"props":448,"children":449},{},[450],{"type":37,"value":451},"JavaScript",{"type":18,"tag":421,"props":453,"children":454},{},[455],{"type":37,"value":456},"Go",{"type":18,"tag":399,"props":458,"children":459},{},[460,465],{"type":18,"tag":421,"props":461,"children":462},{},[463],{"type":37,"value":464},"PHP",{"type":18,"tag":421,"props":466,"children":467},{},[468],{"type":37,"value":469},"TypeScript",{"type":18,"tag":399,"props":471,"children":472},{},[473,478],{"type":18,"tag":421,"props":474,"children":475},{},[476],{"type":37,"value":477},"Lua",{"type":18,"tag":421,"props":479,"children":480},{},[481],{"type":37,"value":482},"Rust",{"type":18,"tag":399,"props":484,"children":485},{},[486,491],{"type":18,"tag":421,"props":487,"children":488},{},[489],{"type":37,"value":490},"Io",{"type":18,"tag":421,"props":492,"children":493},{},[494],{"type":37,"value":495},"Swift",{"type":18,"tag":71,"props":497,"children":498},{},[],{"type":18,"tag":165,"props":500,"children":502},{"id":501},"prolog逻辑编程-1",[503],{"type":37,"value":504},"Prolog:逻辑编程 1",{"type":18,"tag":27,"props":506,"children":508},{":t":507,"type":311},"Prolog:逻辑编程",[],{"type":18,"tag":40,"props":510,"children":511},{},[512,514,521],{"type":37,"value":513},"再然后就是 ",{"type":18,"tag":193,"props":515,"children":518},{"href":516,"rel":517},"https://en.wikipedia.org/wiki/Prolog",[197],[519],{"type":37,"value":520},"Prolog community(Programming in Logic community)",{"type":37,"value":522},"，这是一种逻辑编程语言。这种类型的我还没有接触过，他更像是数学中的逻辑推理。他的基础是一阶逻辑(First-order logic) 其核心的写法和经常接触到的语言有很大的不同。他的语法例如：",{"type":18,"tag":263,"props":524,"children":526},{"code":525},"grandparent(X, Z) :- parent(X, Y), parent(Y, Z).\n父母关系：如果 X 是 Y 的父母，且 Y 是 Z 的父母，则 X 是 Z 的祖父母。\n",[527],{"type":18,"tag":268,"props":528,"children":529},{"__ignoreMap":8},[530],{"type":37,"value":525},{"type":18,"tag":40,"props":532,"children":533},{},[534,536,543,545,552],{"type":37,"value":535},"在一些大学中，会将 Prolog 放到",{"type":18,"tag":193,"props":537,"children":540},{"href":538,"rel":539},"https://en.wikipedia.org/wiki/Logic_programming",[197],[541],{"type":37,"value":542},"逻辑编程课",{"type":37,"value":544}," 中。如果很不幸你没有上过（ps: 我也没上过）那可以蹭一下 The University of Texas at Dallas(德克萨斯大学达拉斯分校) 的课件 ",{"type":18,"tag":193,"props":546,"children":549},{"href":547,"rel":548},"https://personal.utdallas.edu/~hamlen/cs6371sp14/lecture21.pdf",[197],[550],{"type":37,"value":551},"Logic Programming:CS 6371: Advanced Programming Languages",{"type":37,"value":553},"；如果要介绍 Prolog 那就需要介绍一阶逻辑和逻辑连接词、谓词逻辑、量词等。所以我会将这部分的介绍放到 Prolog 那一章节中，这里我们就介绍作者致谢的大佬。",{"type":18,"tag":185,"props":555,"children":556},{},[557,578],{"type":18,"tag":189,"props":558,"children":559},{},[560,567,569,576],{"type":18,"tag":193,"props":561,"children":564},{"href":562,"rel":563},"https://aws.amazon.com/cn/developer/community/heroes/brian-tarbox/",[197],[565],{"type":37,"value":566},"Brian Tarbox",{"type":37,"value":568},": 通过 Prolog 进行建模，用于模拟和分析海豚在实验中的思维模式，非常有趣。可以前往他的个人 ",{"type":18,"tag":193,"props":570,"children":573},{"href":571,"rel":572},"https://briantarbox.com/",[197],[574],{"type":37,"value":575},"blog",{"type":37,"value":577}," 了解更多",{"type":18,"tag":189,"props":579,"children":580},{},[581,588,589,596,598,605],{"type":18,"tag":193,"props":582,"children":585},{"href":583,"rel":584},"https://en.wikipedia.org/wiki/Joe_Armstrong_(programmer)",[197],[586],{"type":37,"value":587},"Joe Armstrong",{"type":37,"value":214},{"type":18,"tag":193,"props":590,"children":593},{"href":591,"rel":592},"https://en.wikipedia.org/wiki/Erlang_(programming_language)",[197],[594],{"type":37,"value":595},"Erlang",{"type":37,"value":597}," 设计者之一。这是一种并发、分布式、容错的编程语言，",{"type":18,"tag":193,"props":599,"children":602},{"href":600,"rel":601},"https://en.wikipedia.org/wiki/Elixir_(programming_language)",[197],[603],{"type":37,"value":604},"Elixir",{"type":37,"value":606}," 就是构建在 Erlang 之上。",{"type":18,"tag":40,"props":608,"children":609},{},[610],{"type":37,"value":611},"作为以分布式、多线程而闻名的语言。“Let it crash（让它崩溃）” 是 Erlang 语言的一种设计哲学。当一个进程发生错误或异常时，不必尝试捕获和处理错误，而是让该进程崩溃，然后通过其他机制（如重启或恢复）来恢复系统的正常运行。",{"type":18,"tag":71,"props":613,"children":614},{},[],{"type":18,"tag":165,"props":616,"children":618},{"id":617},"scala解决对java批评-1",[619],{"type":37,"value":620},"Scala:解决对Java批评 1",{"type":18,"tag":27,"props":622,"children":624},{":t":623,"type":311},"Scala：为了解决对 Java 的批评",[],{"type":18,"tag":40,"props":626,"children":627},{},[628],{"type":37,"value":629},"接下来轮到了 Scala community 登场。该语言旨在解决 对 Java 的批评，一句话就以证明其含金量。他是一种 强大的静态类型高级通用编程语言，支持面向对象编程和函数式编程。",{"type":18,"tag":263,"props":631,"children":633},{"code":632},"import java.time.LocalDate as Date\nimport Payment.*\n\nval name = \"Bib Fortuna\"\nval digits = 1983_0525_0000_0000L\nval expires = Date.of(1983, 5, 25)\n\nenum Payment:\n  case Card(name: String, digits: Long, expires: Date)\n  case PayPal(email: String)\n\ndef process(kind: Payment) = kind match\n  case Card(name, digits, expires) =>\n    s\"Processing credit card $name, $digits, $expires\"\n  case PayPal(email) =>\n    s\"Processing PayPal account $email\"\n\nprocess(Card(name, digits, expires))\n",[634],{"type":18,"tag":268,"props":635,"children":636},{"__ignoreMap":8},[637],{"type":37,"value":632},{"type":18,"tag":185,"props":639,"children":640},{},[641,662],{"type":18,"tag":189,"props":642,"children":643},{},[644,651,653,660],{"type":18,"tag":193,"props":645,"children":648},{"href":646,"rel":647},"https://dev.java/author/VenkatSubramaniam/",[197],[649],{"type":37,"value":650},"Venkat Subramaniam ",{"type":37,"value":652},": ACM 高级会员，",{"type":18,"tag":193,"props":654,"children":657},{"href":655,"rel":656},"https://pragprog.com/titles/vsscala2/pragmatic-scala/",[197],[658],{"type":37,"value":659},"Programming Scala",{"type":37,"value":661}," 一书作者。",{"type":18,"tag":189,"props":663,"children":664},{},[665,672],{"type":18,"tag":193,"props":666,"children":669},{"href":667,"rel":668},"https://en.wikipedia.org/wiki/Martin_Odersky",[197],[670],{"type":37,"value":671},"Martin Odersky",{"type":37,"value":673},": 他设计了 Scala。",{"type":18,"tag":71,"props":675,"children":676},{},[],{"type":18,"tag":165,"props":678,"children":680},{"id":679},"clojure不变数据结构-1",[681],{"type":37,"value":682},"Clojure:不变数据结构 1",{"type":18,"tag":27,"props":684,"children":686},{":t":685,"type":311},"Clojure: 不可变数据结构",[],{"type":18,"tag":40,"props":688,"children":689},{},[690,692,699,701,708],{"type":37,"value":691},"还有 ",{"type":18,"tag":193,"props":693,"children":696},{"href":694,"rel":695},"https://en.wikipedia.org/wiki/Clojure",[197],[697],{"type":37,"value":698},"Clojure community",{"type":37,"value":700},"。Clojure 是 ",{"type":18,"tag":193,"props":702,"children":705},{"href":703,"rel":704},"https://en.wikipedia.org/wiki/Lisp_(programming_language)",[197],[706],{"type":37,"value":707},"lisp",{"type":37,"value":709}," 家族的一部分，或者说他是 Lisp 的现代化变体。他继承了 lisp 的特性。同时在并在并发和不变数据结构上做出了优化（Lisp 是可变的）",{"type":18,"tag":40,"props":711,"children":712},{},[713,715,722],{"type":37,"value":714},"Lisp 发明和推广的 ",{"type":18,"tag":193,"props":716,"children":719},{"href":717,"rel":718},"https://en.wikipedia.org/wiki/S-expression",[197],[720],{"type":37,"value":721},"S 表达式(S-expression)",{"type":37,"value":723}," 还是很有特点的，例如一个计算式子：",{"type":18,"tag":263,"props":725,"children":727},{"code":726},"(* (+ 1 2) (+ 3 4))\n\n  + 1 2：表示加法操作，等于 3。\n  + 3 4：表示加法操作，等于 7。\n  *：表示乘法操作，将 3 和 7 相乘，结果是 21。\n  \n  如果是 Python 式子就是：\n\nresult = (1 + 2) * (3 + 4)\nprint(result)\n",[728],{"type":18,"tag":268,"props":729,"children":730},{"__ignoreMap":8},[731],{"type":37,"value":726},{"type":18,"tag":40,"props":733,"children":734},{},[735,737,744,746],{"type":37,"value":736},"到这里可能 Python 的式子比 S-expression 更接近传统的数学表达式。如果看到这那就可能认为 Lisp 还是不行，不如去学 Python。但 Lisp 还有一个特点是 ",{"type":18,"tag":193,"props":738,"children":741},{"href":739,"rel":740},"https://en.wikipedia.org/wiki/Metaprogramming#:~:text=Metaprogramming%20is%20a%20computer%20programming,even%20modify%20itself%2C%20while%20running.",[197],[742],{"type":37,"value":743},"元编程（Metaprogramming）能力",{"type":37,"value":745}," 指编写可以操作、生成、或修改程序代码的程序的能力。也就是 ",{"type":18,"tag":747,"props":748,"children":749},"strong",{},[750],{"type":37,"value":751},"——把代码当作数据来处理，从而实现动态的行为和更高的灵活性。",{"type":18,"tag":263,"props":753,"children":755},{"code":754},";; 定义一个宏，用来生成“加法函数”\n(defmacro make-adder (n)\n  `(lambda (x) (+ x ,n)))\n\n;; 使用宏生成一个加法函数\n(defparameter add-five (make-adder 5))\n\n;; 测试生成的函数\n(format t \"Result: ~A~%\" (funcall add-five 10))  ; 输出 \"Result: 15\"\n",[756],{"type":18,"tag":268,"props":757,"children":758},{"__ignoreMap":8},[759],{"type":37,"value":754},{"type":18,"tag":185,"props":761,"children":762},{},[763,768,773],{"type":18,"tag":189,"props":764,"children":765},{},[766],{"type":37,"value":767},"make-adder 是一个宏，它接收参数 n，并返回一个 新的函数代码：(lambda (x) (+ x ,n))。注意，这里返回的是代码，而不是一个值。",{"type":18,"tag":189,"props":769,"children":770},{},[771],{"type":37,"value":772},"宏的作用是在 编译时生成或修改代码，而不是像 Python 闭包那样只是生成行为。",{"type":18,"tag":189,"props":774,"children":775},{},[776],{"type":37,"value":777},"宏展开时，(make-adder 5) 会变成 (lambda (x) (+ x 5))，并且这个生成的函数将在运行时执行。",{"type":18,"tag":40,"props":779,"children":780},{},[781,783,789],{"type":37,"value":782},"在上面这个例子中，",{"type":18,"tag":268,"props":784,"children":786},{"className":785},[],[787],{"type":37,"value":788},"宏的定义实际上是操作代码的模板，生成新的 Code。",{"type":37,"value":790}," 如果是 Python，那么可以通过函数来生成一个加法函数：",{"type":18,"tag":263,"props":792,"children":794},{"code":793},"def make_adder(n):\n    return lambda x: x + n\n\n# 使用函数生成一个加法函数\nadd_five = make_adder(5)\n\n# 测试生成的函数\nprint(f\"Result: {add_five(10)}\")  # 输出 \"Result: 15\"\n",[795],{"type":18,"tag":268,"props":796,"children":797},{"__ignoreMap":8},[798],{"type":37,"value":793},{"type":18,"tag":185,"props":800,"children":801},{},[802,807,812],{"type":18,"tag":189,"props":803,"children":804},{},[805],{"type":37,"value":806},"make_adder 函数返回了一个新的函数（lambda x: x + n）。",{"type":18,"tag":189,"props":808,"children":809},{},[810],{"type":37,"value":811},"n 被捕获在闭包中，生成了一个 “动态的行为”：返回的函数始终会把输入值 x 加上 n。",{"type":18,"tag":189,"props":813,"children":814},{},[815],{"type":37,"value":816},"这只是动态生成了一个函数，而 没有生成或修改代码。我们只是定义了一个行为，而不是在代码层面进行操作。",{"type":18,"tag":40,"props":818,"children":819},{},[820],{"type":37,"value":821},"Lisp、Clojure、Scheme 等语言通过其 S-expression 和宏系统提供强大的元编程能力。特点是代码即数据（homoiconicity），天然支持元编程；而 Python 通过反射和动态代码生成支持元编程，他的运行时动态性强，支持动态类型，如果要展示不可变结构，那下面的例子就很贴合：",{"type":18,"tag":263,"props":823,"children":825},{"code":824},"(defn transform [person]\n   (update (assoc person :hair-color :gray) :age inc))\n\n(transform {:name \"Socrates\", :age 39})\n;; => {:name \"Socrates\", :age 40, :hair-color :gray}\n",[826],{"type":18,"tag":268,"props":827,"children":828},{"__ignoreMap":8},[829],{"type":37,"value":824},{"type":18,"tag":40,"props":831,"children":832},{},[833,835,841,843,849,851,856],{"type":37,"value":834},"最后输出的还是 40，因为在这个过程中 ",{"type":18,"tag":268,"props":836,"children":838},{"className":837},[],[839],{"type":37,"value":840},"age",{"type":37,"value":842}," 通过 ",{"type":18,"tag":268,"props":844,"children":846},{"className":845},[],[847],{"type":37,"value":848},"inc",{"type":37,"value":850}," 函数进行了递增操作，所以是 40 而不是 39。这展示了 Clojure 的不可变结构的特性。所以，我们花了几个部分了解 Lisp 和 Clojure，不仅是处于了解，而是对 ",{"type":18,"tag":747,"props":852,"children":853},{},[854],{"type":37,"value":855},"一个具有悠久历史和独特的、完全括号的前缀表示法的编程语言家族。",{"type":37,"value":857}," 的敬意。",{"type":18,"tag":185,"props":859,"children":860},{},[861,881],{"type":18,"tag":189,"props":862,"children":863},{},[864,871,873,880],{"type":18,"tag":193,"props":865,"children":868},{"href":866,"rel":867},"https://github.com/stuarthalloway",[197],[869],{"type":37,"value":870},"Stuart Halloway",{"type":37,"value":872},": Clojure 协作者; ",{"type":18,"tag":193,"props":874,"children":877},{"href":875,"rel":876},"https://pragprog.com/titles/shcloj3/programming-clojure-third-edition/",[197],[878],{"type":37,"value":879},"Programming Clojure",{"type":37,"value":661},{"type":18,"tag":189,"props":882,"children":883},{},[884,891],{"type":18,"tag":193,"props":885,"children":888},{"href":886,"rel":887},"https://en.wikipedia.org/wiki/Rich_Hickey",[197],[889],{"type":37,"value":890},"Rich Hickey ",{"type":37,"value":892},": Clojure 创建者。",{"type":18,"tag":71,"props":894,"children":895},{},[],{"type":18,"tag":165,"props":897,"children":899},{"id":898},"haskell纯函数语言-1",[900],{"type":37,"value":901},"Haskell:纯函数语言 1",{"type":18,"tag":27,"props":903,"children":905},{":t":904,"type":311},"Haskell: 纯函数语言",[],{"type":18,"tag":40,"props":907,"children":908},{},[909,911,918,920,927,929,936,938,945],{"type":37,"value":910},"还还还有 ",{"type":18,"tag":193,"props":912,"children":915},{"href":913,"rel":914},"https://en.wikipedia.org/wiki/Haskell",[197],[916],{"type":37,"value":917},"Haskell community",{"type":37,"value":919},"，Haskell 专为教学、研究和工业应用而设计。以逻辑学家",{"type":18,"tag":193,"props":921,"children":924},{"href":922,"rel":923},"https://en.wikipedia.org/wiki/Haskell_Curry",[197],[925],{"type":37,"value":926},"哈斯克尔・柯里 (Haskell Curry) ",{"type":37,"value":928}," 的名字命名，他的研究之一 ",{"type":18,"tag":193,"props":930,"children":933},{"href":931,"rel":932},"https://en.wikipedia.org/wiki/Lambda_calculus",[197],[934],{"type":37,"value":935},"Lambda 演算（Lambda Calculus）",{"type":37,"value":937}," 是函数式编程的基础，同时他还是 ",{"type":18,"tag":193,"props":939,"children":942},{"href":940,"rel":941},"https://en.wikipedia.org/wiki/Currying",[197],[943],{"type":37,"value":944},"Currying",{"type":37,"value":946}," 的贡献者之一。",{"type":18,"tag":263,"props":948,"children":950},{"code":949},"•   在 Haskell 诞生之前，函数式编程语言如 Lisp、ML 等已经存在，但它们没有完全基于纯函数式的理念。\n•   Haskell 作为一门“纯函数式编程语言”，其命名体现了其与数学逻辑和 Lambda 演算的深厚联系。\n",[951],{"type":18,"tag":268,"props":952,"children":953},{"__ignoreMap":8},[954],{"type":37,"value":949},{"type":18,"tag":40,"props":956,"children":957},{},[958],{"type":37,"value":959},"所以，作为一个纯函数式的编程语言，它的式子是这样的：",{"type":18,"tag":263,"props":961,"children":963},{"code":962},"-- 纯函数：输入相同，输出总是相同\nadd :: Int -> Int -> Int\nadd x y = x + y\n\n-- 调用\nmain = print (add 3 5)  -- 输出 8\n",[964],{"type":18,"tag":268,"props":965,"children":966},{"__ignoreMap":8},[967],{"type":37,"value":962},{"type":18,"tag":40,"props":969,"children":970},{},[971],{"type":37,"value":972},"那么不是纯函数的是这样的：",{"type":18,"tag":263,"props":974,"children":976},{"code":975},"counter = 0\n\ndef increment():\n    global counter\n    counter += 1\n    return counter\n",[977],{"type":18,"tag":268,"props":978,"children":979},{"__ignoreMap":8},[980],{"type":37,"value":975},{"type":18,"tag":185,"props":982,"children":983},{},[984,1005],{"type":18,"tag":189,"props":985,"children":986},{},[987,994,996,1003],{"type":18,"tag":193,"props":988,"children":991},{"href":989,"rel":990},"https://en.wikipedia.org/wiki/Philip_Wadler",[197],[992],{"type":37,"value":993},"Phillip Wadler",{"type":37,"value":995},": 创造的 ",{"type":18,"tag":193,"props":997,"children":1000},{"href":998,"rel":999},"https://en.wikipedia.org/wiki/Orwell_(programming_language)",[197],[1001],{"type":37,"value":1002},"Orwell",{"type":37,"value":1004}," 被认为是 Haskell 的先驱; Haskell 设计者之一。推动了函数式编程从理论研究到实际应用的转变。",{"type":18,"tag":189,"props":1006,"children":1007},{},[1008,1015,1016,1023,1025,1032,1034,1041],{"type":18,"tag":193,"props":1009,"children":1012},{"href":1010,"rel":1011},"https://en.wikipedia.org/wiki/Simon_Peyton_Jones",[197],[1013],{"type":37,"value":1014},"Simon Peyton Jones",{"type":37,"value":214},{"type":18,"tag":193,"props":1017,"children":1020},{"href":1018,"rel":1019},"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler",[197],[1021],{"type":37,"value":1022},"GHC(The Glasgow Haskell Compiler, Haskell 编译器) ",{"type":37,"value":1024}," 开发者之一，他推动了 ",{"type":18,"tag":193,"props":1026,"children":1029},{"href":1027,"rel":1028},"https://en.wikipedia.org/wiki/Type_inference",[197],[1030],{"type":37,"value":1031},"类型推导",{"type":37,"value":1033}," 和 ",{"type":18,"tag":193,"props":1035,"children":1038},{"href":1036,"rel":1037},"https://en.wikipedia.org/wiki/Type_safety",[197],[1039],{"type":37,"value":1040},"类型安全",{"type":37,"value":1042}," 的概念",{"type":18,"tag":71,"props":1044,"children":1045},{},[],{"type":18,"tag":32,"props":1047,"children":1049},{"id":1048},"前言-3",[1050],{"type":37,"value":1051},"前言 3",{"type":18,"tag":165,"props":1053,"children":1055},{"id":1054},"学习的快乐-1",[1056],{"type":37,"value":1057},"学习的快乐 1",{"type":18,"tag":27,"props":1059,"children":1061},{":t":1060},"前言",[],{"type":18,"tag":40,"props":1063,"children":1064},{},[1065],{"type":37,"value":1066},"在本书的开篇，作者引用了 'How Proust Can Make You a Better Programmer' 直译为 《普鲁斯特如何让你成为更好的程序员》作者是 Erlang 的创建者 Joe Armstrong。这里有个小彩蛋，Marcel Proust 就是 'A la\nrecherche du temps perdu.' 的作者。也就是说出色的 Coder 需要具备耐心、有创造力、抽象思维、细节。这么表达还是比较抽象。",{"type":18,"tag":40,"props":1068,"children":1069},{},[1070],{"type":37,"value":1071},"对于耐心、思考我们可以以一个 Bug 举例，假如你碰到了一个 Bug，少则几分钟多则几小时甚至几天。在这么个阶段中，不断的经历失败还没有放弃，还是非常难能可贵的。但如果你具备抽象思维的能力，那么可以换一个视角思考。",{"type":18,"tag":40,"props":1073,"children":1074},{},[1075],{"type":37,"value":1076},"“既然我这样实现会碰到这样的问题，那么我换一种实现思路，是不是就能避免这样的问题，有概率陷入一个更简单或比这个问题更复杂的问题呢？”",{"type":18,"tag":116,"props":1078,"children":1079},{},[1080,1085,1094,1099,1107,1112,1120,1125,1133,1138,1146,1151,1159,1164,1172,1177],{"type":18,"tag":40,"props":1081,"children":1082},{},[1083],{"type":37,"value":1084},"“The Gmail editor cannot get typographic quotes right.”",{"type":18,"tag":1086,"props":1087,"children":1088},"ul",{},[1089],{"type":18,"tag":189,"props":1090,"children":1091},{},[1092],{"type":37,"value":1093},"“Gmail 编辑器无法正确排版引号，例如：‘单引号’、“双引号””",{"type":18,"tag":40,"props":1095,"children":1096},{},[1097],{"type":37,"value":1098},"“Disgraceful,” said Margery, “the sign of an illiterate programmer and a\ndecadent culture.”",{"type":18,"tag":1086,"props":1100,"children":1101},{},[1102],{"type":18,"tag":189,"props":1103,"children":1104},{},[1105],{"type":37,"value":1106},"“可耻，”Margery 说，“这是文盲程序员和颓废文化的标志。”",{"type":18,"tag":40,"props":1108,"children":1109},{},[1110],{"type":37,"value":1111},"“What should we do about it?”",{"type":18,"tag":1086,"props":1113,"children":1114},{},[1115],{"type":18,"tag":189,"props":1116,"children":1117},{},[1118],{"type":37,"value":1119},"“我们应该怎么做？”",{"type":18,"tag":40,"props":1121,"children":1122},{},[1123],{"type":37,"value":1124},"“We must insist that the next programmer we hire has read all of ‘A la\nrecherche du temps perdu.”’",{"type":18,"tag":1086,"props":1126,"children":1127},{},[1128],{"type":18,"tag":189,"props":1129,"children":1130},{},[1131],{"type":37,"value":1132},"我们必须坚持要求我们雇用的下一个程序员阅读《追忆似水年华》的全部内容。",{"type":18,"tag":40,"props":1134,"children":1135},{},[1136],{"type":37,"value":1137},"“All seven volumes?”",{"type":18,"tag":1086,"props":1139,"children":1140},{},[1141],{"type":18,"tag":189,"props":1142,"children":1143},{},[1144],{"type":37,"value":1145},"“全部七卷？”",{"type":18,"tag":40,"props":1147,"children":1148},{},[1149],{"type":37,"value":1150},"“All seven volumes.”",{"type":18,"tag":1086,"props":1152,"children":1153},{},[1154],{"type":18,"tag":189,"props":1155,"children":1156},{},[1157],{"type":37,"value":1158},"“全部七卷。”",{"type":18,"tag":40,"props":1160,"children":1161},{},[1162],{"type":37,"value":1163},"“Will it make them better at punctuation and make them get their quotes\nright?”",{"type":18,"tag":1086,"props":1165,"children":1166},{},[1167],{"type":18,"tag":189,"props":1168,"children":1169},{},[1170],{"type":37,"value":1171},"“这会让他们更好地使用标点符号并正确引用吗？”",{"type":18,"tag":40,"props":1173,"children":1174},{},[1175],{"type":37,"value":1176},"“Not necessarily, but it will make them a better programmer. It’s a Zen\nthing....”",{"type":18,"tag":1086,"props":1178,"children":1179},{},[1180],{"type":18,"tag":189,"props":1181,"children":1182},{},[1183],{"type":37,"value":1184},"“不一定，但它会让他们成为更好的程序员。这是禅宗的事情......”",{"type":18,"tag":40,"props":1186,"children":1187},{},[1188],{"type":37,"value":1189},"这里的举例：”Gmail 编辑器无法正确排版引号，例如：‘单引号’、“双引号”“ 我觉得很大一部分原因是因为当时为了避免构造注入语句，然后又不想重构源数据所以就不渲染引号来得快些所导致的。即使现在是 2025 年，有些网站依然不允许除了 Gmail、Outlook、Yahoo、ProtonMail、Zoho 的邮箱注册账号。",{"type":18,"tag":40,"props":1191,"children":1192},{},[1193],{"type":37,"value":1194},"这种做法通常是为了减少后端 API 针对一些特殊字符的处理和过滤。有些甚至是为了解决下 OWASP TOP TEN 的注入问题，因此这么做最保险的做法就是不允许传入特殊字符，比如 ‘“/.!@#*()!$) 这种。",{"type":18,"tag":116,"props":1196,"children":1197},{},[1198,1203,1211,1216,1224,1229],{"type":18,"tag":40,"props":1199,"children":1200},{},[1201],{"type":37,"value":1202},"Learning to program is like learning to swim. No amount of theory is\na substitute for diving into the pool and flailing around in the water\ngasping for air.",{"type":18,"tag":1086,"props":1204,"children":1205},{},[1206],{"type":18,"tag":189,"props":1207,"children":1208},{},[1209],{"type":37,"value":1210},"学习编程就像学习游泳。再多的理论也无法代替跳入游泳池并在水中挣扎呼吸的感觉。",{"type":18,"tag":40,"props":1212,"children":1213},{},[1214],{"type":37,"value":1215},"The first time you sink under the water, you panic, but\nwhen you bob to the surface and gulp in some air, you feel elated.",{"type":18,"tag":1086,"props":1217,"children":1218},{},[1219],{"type":18,"tag":189,"props":1220,"children":1221},{},[1222],{"type":37,"value":1223},"第一次尝试跳入水中时，你会感到恐慌，但当你浮出水面并大口呼吸时，你会感到兴奋。",{"type":18,"tag":40,"props":1225,"children":1226},{},[1227],{"type":37,"value":1228},"You\nthink to yourself, “I can swim.” At least that’s how I felt when I learned\nto swim.",{"type":18,"tag":1086,"props":1230,"children":1231},{},[1232],{"type":18,"tag":189,"props":1233,"children":1234},{},[1235],{"type":37,"value":1236},"你会想，“我会游泳。” 至少这是我学游泳时的感觉。",{"type":18,"tag":40,"props":1238,"children":1239},{},[1240],{"type":37,"value":1241},"很多人第一次接触计算机时。其恐惧在于会不会将系统、硬件破坏掉，前期是系统环境，后期是服务器、数据库等。但经历过无数次重装系统和格式化之后，就会发现也没什么难的。于是就有了尝试的勇气，不断经历恐惧、失败，这正是 Code 所带来的体验。",{"type":18,"tag":116,"props":1243,"children":1244},{},[1245,1250,1258,1263],{"type":18,"tag":40,"props":1246,"children":1247},{},[1248],{"type":37,"value":1249},"It’s the same with programming. The first steps are the most difficult,",{"type":18,"tag":1086,"props":1251,"children":1252},{},[1253],{"type":18,"tag":189,"props":1254,"children":1255},{},[1256],{"type":37,"value":1257},"编程也一样。万事开头难，",{"type":18,"tag":40,"props":1259,"children":1260},{},[1261],{"type":37,"value":1262},"and you need a good teacher to encourage you to jump into the water.",{"type":18,"tag":1086,"props":1264,"children":1265},{},[1266],{"type":18,"tag":189,"props":1267,"children":1268},{},[1269],{"type":37,"value":1270},"你需要一个好老师来鼓励你跳入水中。",{"type":18,"tag":40,"props":1272,"children":1273},{},[1274],{"type":37,"value":1275},"Code 就像搭积木一样，如果你学习过后端相关的技术栈，例如 MVC。在未深入学习的时候，整个 Code 都显得很乱，所有功能都包含在一个文件中。动不动就是及千行几百行，但通过 MVC 这样的设计模式，一个功能就是一个文件的划分，就能很好的梳理整个项目的逻辑。Code 功能简洁明了，方便后续的维护与扩充。",{"type":18,"tag":116,"props":1277,"children":1278},{},[1279,1284,1292,1297],{"type":18,"tag":40,"props":1280,"children":1281},{},[1282],{"type":37,"value":1283},"Let’s assume that you’ve actually managed the difficult task of down-\nloading and installing the interpreter or compiler for the language you\nare interested in.",{"type":18,"tag":1086,"props":1285,"children":1286},{},[1287],{"type":18,"tag":189,"props":1288,"children":1289},{},[1290],{"type":37,"value":1291},"假设你已经完成了下载并安装你感兴趣的语言的解释器或编译器这一艰巨的任务。",{"type":18,"tag":40,"props":1293,"children":1294},{},[1295],{"type":37,"value":1296},"What should you do next? What will be your first\nprogram?",{"type":18,"tag":1086,"props":1298,"children":1299},{},[1300],{"type":18,"tag":189,"props":1301,"children":1302},{},[1303],{"type":37,"value":1304},"你下一步该做什么？你的第一个程序是什么？",{"type":18,"tag":40,"props":1306,"children":1307},{},[1308],{"type":37,"value":1309},"看到这里的时候我大概已经知道作者整本书的意图了。即 ”自信“，我个人认为自信是比较难能可贵的。特别是互联网黑社会遍地走的今天，如何树立起自信是很难的。如果你创建了一个开源项目，那衡量你的就是 Star、Fork 甚至是有多少人在用。",{"type":18,"tag":40,"props":1311,"children":1312},{},[1313],{"type":37,"value":1314},"如果出了点问题，有些人还会直接开喷。当然，这也是体验的一部分，毕竟挨骂的机会并不是谁都有的，免费打工的机会也不是什么人都行的，所以这也是一个很好的人生经历。因此如果您跨过此关，那么还会经历推广的阶段，因为 Code 厉害的大佬不一定圈子就多，所以即使 Code 再厉害，可能还没有那些比他 Code 不那么厉害的人 Star 多。",{"type":18,"tag":40,"props":1316,"children":1317},{},[1318],{"type":37,"value":1319},"如果您恰好在 CHINA，那您在未来肯定会接触到一句话：”技术哪有推广重要“。也就是：”橘生淮南则为橘，生于淮北则为枳“",{"type":18,"tag":40,"props":1321,"children":1322},{},[1323],{"type":37,"value":1324},"因此就跨入到比拼圈子和推广的阶段了，如果您是一个不善言辞、朝九晚五、循规蹈矩。没什么圈子的人，朋友就几个，那大概也就是 100+ Star。如果您混迹开源设计，各个群都是 200+，那么您大概是 1000+ Star。如果我是一个带货主播，那我会为你推荐 《被讨厌的勇气》，恰好我不是。",{"type":18,"tag":116,"props":1326,"children":1327},{},[1328,1333,1341,1346],{"type":18,"tag":40,"props":1329,"children":1330},{},[1331],{"type":37,"value":1332},"The first step in acquiring any new skill is not being able to do your own\nthing but being able to reproduce what other people have done before\nyou.",{"type":18,"tag":1086,"props":1334,"children":1335},{},[1336],{"type":18,"tag":189,"props":1337,"children":1338},{},[1339],{"type":37,"value":1340},"获得任何新技能的第一步不是能够做自己的事情，而是能够复制别人在你之前做过的事情。",{"type":18,"tag":40,"props":1342,"children":1343},{},[1344],{"type":37,"value":1345},"This is the quickest way to mastering a skill.",{"type":18,"tag":1086,"props":1347,"children":1348},{},[1349],{"type":18,"tag":189,"props":1350,"children":1351},{},[1352],{"type":37,"value":1353},"这是掌握技能最快的方法。",{"type":18,"tag":40,"props":1355,"children":1356},{},[1357],{"type":37,"value":1358},"在引库调参和生成大模型的时代，独立思考以及实现某个比较基础的功能逻辑是比较难的。大多数人都会依赖于无数个包或库来实现需要的功能，甚至不需要了解这个功能怎么实现的就可以实现其想要的。这就是我对这句话的理解，但是在一些地方还有少数人认为，Copy 开源项目改一改加一个支付页面就是自己的，才是作者的意思。",{"type":18,"tag":40,"props":1360,"children":1361},{},[1362,1364,1369],{"type":37,"value":1363},"作者在前言给出了一个很有含金量的逻辑。",{"type":18,"tag":747,"props":1365,"children":1366},{},[1367],{"type":37,"value":1368},"学习一个语言，不需要了解其基础的原理实现，先理解其语法规则。知道怎么表达即可。",{"type":37,"value":1370}," 我具有一些开发经验的读者肯定会感同身受，因为一个框架、一个语言，这一个版本是这样的写法，但过几个月、半年、一年。就会是另一个写法了，因此需要不断学习，不断花时间去适应和理解。",{"type":18,"tag":40,"props":1372,"children":1373},{},[1374],{"type":37,"value":1375},"所以一些 Coder 倡导终身学习，学 Code 可以有效的避免老年痴呆。",{"type":18,"tag":116,"props":1377,"children":1378},{},[1379,1384,1392,1397,1405,1410],{"type":18,"tag":40,"props":1380,"children":1381},{},[1382],{"type":37,"value":1383},"Each language has its own set of idioms, its strengths, and its weak-\nnesses. By learning several different programming languages, you will\nbe able to see which language is best suited to the kinds of problems\nthat interest you most.",{"type":18,"tag":1086,"props":1385,"children":1386},{},[1387],{"type":18,"tag":189,"props":1388,"children":1389},{},[1390],{"type":37,"value":1391},"每种语言都有自己的一套习语、优点和缺点。通过学习几种不同的编程语言，您将能够了解哪种语言最适合您最感兴趣的问题。",{"type":18,"tag":40,"props":1393,"children":1394},{},[1395],{"type":37,"value":1396},"Ultimately, programming is\nabout understanding, and understanding is about ideas.",{"type":18,"tag":1086,"props":1398,"children":1399},{},[1400],{"type":18,"tag":189,"props":1401,"children":1402},{},[1403],{"type":37,"value":1404},"归根结底，编程就是理解，而理解就是想法。",{"type":18,"tag":40,"props":1406,"children":1407},{},[1408],{"type":37,"value":1409},"So, exposure\nto new ideas is essential to a deeper understanding of what program-\nming is all about.",{"type":18,"tag":1086,"props":1411,"children":1412},{},[1413],{"type":18,"tag":189,"props":1414,"children":1415},{},[1416],{"type":37,"value":1417},"因此，接触新想法对于更深入地了解编程的意义至关重要。",{"type":18,"tag":71,"props":1419,"children":1420},{},[],{"type":18,"tag":165,"props":1422,"children":1424},{"id":1423},"我那一事无成且一直在学习的一生-2",[1425],{"type":37,"value":1426},"我那一事无成且一直在学习的一生 2",{"type":18,"tag":27,"props":1428,"children":1430},{":t":1429},"我那一事无成且一直在学习的一生",[],{"type":18,"tag":40,"props":1432,"children":1433},{},[1434],{"type":37,"value":1435},"让我意外的是，这本书的前言竟然不是作者自己写的。而是 Erlang 的创建者 Joe Armstrong。我认为结尾处是比较具有讽刺意味的，如果一直学习，那么就会感觉自己超级菜，从而缺少了勇气去创建、编写一个项目，甚至是与人分享的喜悦。",{"type":18,"tag":40,"props":1437,"children":1438},{},[1439],{"type":37,"value":1440},"如果你将自己的项目分享到某个群组，那个群组的人可能觉得你打广告，或者说炫耀？于是 Code 警察开始出动，不断的给你批斗拉踩甚至是网暴。跟你诉说你所做的无非是重复造轮子，毫无意义的事情。如果你的抗压能力不是很强，或许就开始退群退网、Github 设置为隐私三件套走起。",{"type":18,"tag":40,"props":1442,"children":1443},{},[1444],{"type":37,"value":1445},"但你如果与 ChatGPT 分享一个项目、一个思路。TA 会先肯定你，然后提出可以优化的建议。虽然整个流程看起来很正常，属于非常理智的。但如果是几十人、几百人的群组，理智往往是那么的珍贵和稀缺，大概只有立场先行和整活、玩梗的存在。",{"type":18,"tag":1447,"props":1448,"children":1450},"text-space",{"type":1449},"tip",[1451,1456,1464,1469,1477,1482,1490,1495,1503,1507],{"type":18,"tag":40,"props":1452,"children":1453},{},[1454],{"type":37,"value":1455},"A Zen master might tell you that to be better at mathematics you’d\nbetter study Latin. Thus it is with programming. To better understand\nthe essence of OO programming, you should study logic or functional\nprogramming (FP). To be better at FP, you should study Assembler.",{"type":18,"tag":1086,"props":1457,"children":1458},{},[1459],{"type":18,"tag":189,"props":1460,"children":1461},{},[1462],{"type":37,"value":1463},"禅师可能会告诉你，要想学好数学，最好学习拉丁语。编程也是如此。为了更好地理解面向对象编程的本质，你应该学习逻辑或函数式编程 (FP)。为了更好地掌握 FP，你应该学习汇编语言。",{"type":18,"tag":40,"props":1465,"children":1466},{},[1467],{"type":37,"value":1468},"Books on comparative programming languages were popular when I\ngrew up as a programmer, but most of these were academic tomes that\ngave little practical guidance to how to actually go about using a lan-\nguage. This reflected the technology of the age. You could read about\nthe ideas in a language, but actually trying it out was virtually impos-\nsible.",{"type":18,"tag":1086,"props":1470,"children":1471},{},[1472],{"type":18,"tag":189,"props":1473,"children":1474},{},[1475],{"type":37,"value":1476},"在我作为程序员成长的过程中，比较编程语言的书籍很受欢迎，但其中大多数都是学术性的大部头，几乎没有提供关于如何实际使用语言的实用指导。这反映了那个时代的技术。你可以阅读语言中的想法，但实际上尝试它几乎是不可能的。",{"type":18,"tag":40,"props":1478,"children":1479},{},[1480],{"type":37,"value":1481},"Today, not only can we read about the ideas, but we can try them in\npractice. This makes the difference between standing on the poolside\nwondering whether it would be nice to swim and diving in and enjoying\nthe water.",{"type":18,"tag":1086,"props":1483,"children":1484},{},[1485],{"type":18,"tag":189,"props":1486,"children":1487},{},[1488],{"type":37,"value":1489},"今天，我们不仅可以阅读这些想法，还可以在实践中尝试它们。这使得站在泳池边想知道游泳是否好玩和跳进水里享受水的差别。",{"type":18,"tag":40,"props":1491,"children":1492},{},[1493],{"type":37,"value":1494},"I warmly recommend this book and hope that you enjoy reading it as\nmuch as I have.",{"type":18,"tag":1086,"props":1496,"children":1497},{},[1498],{"type":18,"tag":189,"props":1499,"children":1500},{},[1501],{"type":37,"value":1502},"我热烈推荐这本书，希望你和我一样喜欢阅读它。",{"type":18,"tag":1504,"props":1505,"children":1506},"br",{},[],{"type":18,"tag":40,"props":1508,"children":1509},{},[1510,1512,1515,1517,1520],{"type":37,"value":1511},"Joe Armstrong, creator of Erlang",{"type":18,"tag":1504,"props":1513,"children":1514},{},[],{"type":37,"value":1516}," 2 March 2010 ",{"type":18,"tag":1504,"props":1518,"children":1519},{},[],{"type":37,"value":1521},"Stockholm",{"type":18,"tag":71,"props":1523,"children":1524},{},[],{"type":18,"tag":32,"props":1526,"children":1528},{"id":1527},"介绍-2",[1529],{"type":37,"value":1530},"介绍 2",{"type":18,"tag":27,"props":1532,"children":1534},{":t":1533},"章节介绍",[],{"type":18,"tag":40,"props":1536,"children":1537},{},[1538],{"type":37,"value":1539},"学习第一种语言，可能是为了生活。但如果学习第二个语言，那大概是想扩充下自己或者为了职业道路更加宽阔。人类对于求知的需求是刻在其基因的，编程语言亦是如此。这本书所想传达的，并不是让你照着敲击 Code，而是思考其逻辑思维。",{"type":18,"tag":165,"props":1541,"children":1543},{"id":1542},"语言的核心概念-1",[1544],{"type":37,"value":1545},"语言的核心概念 1",{"type":18,"tag":27,"props":1547,"children":1549},{":t":1548,":type":311},"1.1 语言的核心概念",[],{"type":18,"tag":1504,"props":1551,"children":1552},{},[],{"type":18,"tag":116,"props":1554,"children":1555},{},[1556,1561],{"type":18,"tag":40,"props":1557,"children":1558},{},[1559],{"type":37,"value":1560},"大部分时间里，当我学习一门新的编程语言或框架时，我会寻找一个快速的交互式教程。",{"type":18,"tag":40,"props":1562,"children":1563},{},[1564],{"type":37,"value":1565},"但我的基本目标是快速地了解语言的语法糖和核心概念。",{"type":18,"tag":40,"props":1567,"children":1568},{},[1569],{"type":37,"value":1570},"这样的经历我深有体会，但问题在于，学完了语言本体还是基础。有时还需要看各个库、包、插件、框架的文档。将这些散落在各地的积木拼装起来，抽象思维就显得非常重要，因为有时学了个语言本体还只是基础，框架再来上一个语法糖，又需要重新学习、反复学习。",{"type":18,"tag":40,"props":1572,"children":1573},{},[1574],{"type":37,"value":1575},"作者在前期问了五个问题，也就是说读完了这本书，这七个问题都会迎刃而解。同时，这七个问题设计了语言的基础，即：",{"type":37,"value":1577},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":1579,"children":1580},{},[1581,1602],{"type":18,"tag":395,"props":1582,"children":1583},{},[1584],{"type":18,"tag":399,"props":1585,"children":1586},{},[1587,1592,1597],{"type":18,"tag":403,"props":1588,"children":1589},{},[1590],{"type":37,"value":1591},"问题",{"type":18,"tag":403,"props":1593,"children":1594},{},[1595],{"type":37,"value":1596},"类型",{"type":18,"tag":403,"props":1598,"children":1599},{},[1600],{"type":37,"value":1601},"解释",{"type":18,"tag":414,"props":1603,"children":1604},{},[1605,1623,1641,1659,1677],{"type":18,"tag":399,"props":1606,"children":1607},{},[1608,1613,1618],{"type":18,"tag":421,"props":1609,"children":1610},{},[1611],{"type":37,"value":1612},"类型模型是什么？",{"type":18,"tag":421,"props":1614,"children":1615},{},[1616],{"type":37,"value":1617},"类型系统",{"type":18,"tag":421,"props":1619,"children":1620},{},[1621],{"type":37,"value":1622},"是强类型（如 Java）还是弱类型（如 C）？是静态类型（如 Java）还是动态类型（如 Ruby）？",{"type":18,"tag":399,"props":1624,"children":1625},{},[1626,1631,1636],{"type":18,"tag":421,"props":1627,"children":1628},{},[1629],{"type":37,"value":1630},"编程模型是什么？",{"type":18,"tag":421,"props":1632,"children":1633},{},[1634],{"type":37,"value":1635},"编程范式",{"type":18,"tag":421,"props":1637,"children":1638},{},[1639],{"type":37,"value":1640},"支持哪些编程模型（面向对象、函数式等）？",{"type":18,"tag":399,"props":1642,"children":1643},{},[1644,1649,1654],{"type":18,"tag":421,"props":1645,"children":1646},{},[1647],{"type":37,"value":1648},"如何与语言交互？",{"type":18,"tag":421,"props":1650,"children":1651},{},[1652],{"type":37,"value":1653},"交互方式",{"type":18,"tag":421,"props":1655,"children":1656},{},[1657],{"type":37,"value":1658},"语言是编译型还是解释型？如何运行和调试？",{"type":18,"tag":399,"props":1660,"children":1661},{},[1662,1667,1672],{"type":18,"tag":421,"props":1663,"children":1664},{},[1665],{"type":37,"value":1666},"决策结构和核心数据结构是什么？",{"type":18,"tag":421,"props":1668,"children":1669},{},[1670],{"type":37,"value":1671},"语言的控制结构与核心数据结构",{"type":18,"tag":421,"props":1673,"children":1674},{},[1675],{"type":37,"value":1676},"条件语句、集合操作的独特性。",{"type":18,"tag":399,"props":1678,"children":1679},{},[1680,1685,1690],{"type":18,"tag":421,"props":1681,"children":1682},{},[1683],{"type":37,"value":1684},"语言有哪些独特的核心特性？",{"type":18,"tag":421,"props":1686,"children":1687},{},[1688],{"type":37,"value":1689},"语言的独特特性",{"type":18,"tag":421,"props":1691,"children":1692},{},[1693],{"type":37,"value":1694},"并发支持、宏系统、虚拟机等",{"type":18,"tag":116,"props":1696,"children":1697},{},[1698,1703],{"type":18,"tag":40,"props":1699,"children":1700},{},[1701],{"type":37,"value":1702},"When you’re through, you will not be an expert in any of these lan-\nguages, but you will know what each uniquely has to offer.",{"type":18,"tag":1086,"props":1704,"children":1705},{},[1706],{"type":18,"tag":189,"props":1707,"children":1708},{},[1709],{"type":37,"value":1710},"阅读本书后，你或许无法成为这些语言的专家，但你将了解每种语言独有的优势。",{"type":18,"tag":40,"props":1712,"children":1713},{},[1714],{"type":37,"value":1715},"在实际项目开发中，多语言配合是常见的。他们的关联桥梁就是数据的 CURD，各个语言实现的功能获取到的数据存入数据库。之后前端展示和交互逻辑的设计，后端将数据映射为 API 递交给前端或 View 来构成一个网页应用或客户端应用。",{"type":18,"tag":71,"props":1717,"children":1718},{},[],{"type":18,"tag":165,"props":1720,"children":1722},{"id":1721},"为什么选择这些语言-1",[1723],{"type":37,"value":1724},"为什么选择这些语言 1",{"type":18,"tag":27,"props":1726,"children":1728},{":t":1727,":type":311},"1.2 为什么选这几个语言？",[],{"type":18,"tag":40,"props":1730,"children":1731},{},[1732],{"type":37,"value":1733},"书中选择的七种编程语言（Ruby、Io、Prolog、Scala、Erlang、Clojure、Haskell）以及每种语言的选择理由和独特价值。作者表示，这些语言未必是最流行或最实用的，但它们在类型系统、编程范式、并发性、元编程等方面具有独特的学习价值：",{"type":18,"tag":185,"props":1735,"children":1736},{},[1737,1742,1747,1752],{"type":18,"tag":189,"props":1738,"children":1739},{},[1740],{"type":37,"value":1741},"类型系统：涵盖了强类型、动态类型和静态类型的多样组合。",{"type":18,"tag":189,"props":1743,"children":1744},{},[1745],{"type":37,"value":1746},"编程范式：包括面向对象、函数式、逻辑编程、原型编程等多种范式。",{"type":18,"tag":189,"props":1748,"children":1749},{},[1750],{"type":37,"value":1751},"语言特色：如 Ruby 的元编程、Io 的简洁语法与消息分发、Prolog 的逻辑推理能力等。",{"type":18,"tag":189,"props":1753,"children":1754},{},[1755],{"type":37,"value":1756},"多样性：通过对比不同语言的特性，帮助读者理解各种编程思维方式的优劣。",{"type":18,"tag":40,"props":1758,"children":1759},{},[1760],{"type":37,"value":1761},"以下是最终入选的语言及其选择理由：",{"type":37,"value":1763},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":1765,"children":1766},{},[1767,1783],{"type":18,"tag":395,"props":1768,"children":1769},{},[1770],{"type":18,"tag":399,"props":1771,"children":1772},{},[1773,1778],{"type":18,"tag":403,"props":1774,"children":1775},{},[1776],{"type":37,"value":1777},"Lang",{"type":18,"tag":403,"props":1779,"children":1780},{},[1781],{"type":37,"value":1782},"理由",{"type":18,"tag":414,"props":1784,"children":1785},{},[1786,1798,1810,1823,1836,1848,1861],{"type":18,"tag":399,"props":1787,"children":1788},{},[1789,1793],{"type":18,"tag":421,"props":1790,"children":1791},{},[1792],{"type":37,"value":438},{"type":18,"tag":421,"props":1794,"children":1795},{},[1796],{"type":37,"value":1797},"面向对象语言，以易用性和可读性闻名。本书特别探讨了 Ruby 的元编程能力，展示其语法扩展的潜力。",{"type":18,"tag":399,"props":1799,"children":1800},{},[1801,1805],{"type":18,"tag":421,"props":1802,"children":1803},{},[1804],{"type":37,"value":490},{"type":18,"tag":421,"props":1806,"children":1807},{},[1808],{"type":37,"value":1809},"简洁的语法和消息分发机制是亮点。它是一种原型语言，强调并发模型，与 Lisp 有相似之处。",{"type":18,"tag":399,"props":1811,"children":1812},{},[1813,1818],{"type":18,"tag":421,"props":1814,"children":1815},{},[1816],{"type":37,"value":1817},"Prolog",{"type":18,"tag":421,"props":1819,"children":1820},{},[1821],{"type":37,"value":1822},"强大的逻辑推理能力，特别适合解决问题（如数独）。对 Erlang 影响深远，适合逻辑驱动的场景。",{"type":18,"tag":399,"props":1824,"children":1825},{},[1826,1831],{"type":18,"tag":421,"props":1827,"children":1828},{},[1829],{"type":37,"value":1830},"Scala",{"type":18,"tag":421,"props":1832,"children":1833},{},[1834],{"type":37,"value":1835},"结合了函数式编程和 OOP，运行于 JVM。被认为是连接过程式编程和 OOP 的桥梁，对 Java 开发者非常友好。",{"type":18,"tag":399,"props":1837,"children":1838},{},[1839,1843],{"type":18,"tag":421,"props":1840,"children":1841},{},[1842],{"type":37,"value":595},{"type":18,"tag":421,"props":1844,"children":1845},{},[1846],{"type":37,"value":1847},"专注于并发、分布式和容错性，是开发高可靠性系统的首选语言，像 CouchDB 就使用了 Erlang。",{"type":18,"tag":399,"props":1849,"children":1850},{},[1851,1856],{"type":18,"tag":421,"props":1852,"children":1853},{},[1854],{"type":37,"value":1855},"Clojure",{"type":18,"tag":421,"props":1857,"children":1858},{},[1859],{"type":37,"value":1860},"Lisp 方言，运行于 JVM，强调并发管理和灵活性。减少了传统 Lisp 的括号使用，并拥有丰富的 Java 生态支持。",{"type":18,"tag":399,"props":1862,"children":1863},{},[1864,1869],{"type":18,"tag":421,"props":1865,"children":1866},{},[1867],{"type":37,"value":1868},"Haskell",{"type":18,"tag":421,"props":1870,"children":1871},{},[1872],{"type":37,"value":1873},"唯一的纯函数式语言，以强类型和不可变状态为特点，提供了一种更高效、更安全的编程方式。",{"type":18,"tag":116,"props":1875,"children":1876},{},[1877,1882],{"type":18,"tag":40,"props":1878,"children":1879},{},[1880],{"type":37,"value":1881},"Those languages that I picked are not necessarily the best, but each\none is unique, with something important to teach you.",{"type":18,"tag":1086,"props":1883,"children":1884},{},[1885],{"type":18,"tag":189,"props":1886,"children":1887},{},[1888],{"type":37,"value":1889},"我挑选的这些语言未必是最好的，但它们每一种都独特且有重要的东西值得学习。",{"type":18,"tag":71,"props":1891,"children":1892},{},[],{"type":18,"tag":165,"props":1894,"children":1896},{"id":1895},"出版社的背景-1",[1897],{"type":37,"value":1898},"出版社的背景 1",{"type":18,"tag":27,"props":1900,"children":1902},{":t":1901,":type":311},"2 谁该看这本书？",[],{"type":18,"tag":40,"props":1904,"children":1905},{},[1906,1908,1915,1917,1924],{"type":37,"value":1907},"作者介绍了这家出版社，也就是 ",{"type":18,"tag":193,"props":1909,"children":1912},{"href":1910,"rel":1911},"https://pragprog.com/",[197],[1913],{"type":37,"value":1914},"Pragmatic Bookshelf",{"type":37,"value":1916}," 这家出版社几乎技术性的书籍占比很多。毕竟名字直译过来就是:\"实用书架\"  这家出版社的创始人 David Thomas 曾经还写过一本书叫 ",{"type":18,"tag":193,"props":1918,"children":1921},{"href":1919,"rel":1920},"https://en.wikipedia.org/wiki/The_Pragmatic_Programmer",[197],[1922],{"type":37,"value":1923},"\"The Pragmatic Programmer\"",{"type":37,"value":1925}," 直译过来就是：“务实的程序员”。并定义了务实的程序员具有以下品质：",{"type":18,"tag":185,"props":1927,"children":1928},{},[1929,1934,1939,1944],{"type":18,"tag":189,"props":1930,"children":1931},{},[1932],{"type":37,"value":1933},"早期采用者",{"type":18,"tag":189,"props":1935,"children":1936},{},[1937],{"type":37,"value":1938},"快速适应",{"type":18,"tag":189,"props":1940,"children":1941},{},[1942],{"type":37,"value":1943},"好奇心和批判性思维",{"type":18,"tag":189,"props":1945,"children":1946},{},[1947],{"type":37,"value":1948},"现实主义以及万事通。",{"type":18,"tag":40,"props":1950,"children":1951},{},[1952,1954,1961,1963,1970,1971,1978,1979,1986,1987,1994],{"type":37,"value":1953},"这本书还提到了 ",{"type":18,"tag":193,"props":1955,"children":1958},{"href":1956,"rel":1957},"https://en.wikipedia.org/wiki/Broken_windows_theory",[197],[1959],{"type":37,"value":1960},"破窗理论（Broken Windows Theory）",{"type":37,"value":1962},"、",{"type":18,"tag":193,"props":1964,"children":1967},{"href":1965,"rel":1966},"https://en.wikipedia.org/wiki/Stone_Soup",[197],[1968],{"type":37,"value":1969},"石头汤（Stone Soup）",{"type":37,"value":1962},{"type":18,"tag":193,"props":1972,"children":1975},{"href":1973,"rel":1974},"https://en.wikipedia.org/wiki/Boiling_frog",[197],[1976],{"type":37,"value":1977},"煮青蛙（Boiling Frog）",{"type":37,"value":1962},{"type":18,"tag":193,"props":1980,"children":1983},{"href":1981,"rel":1982},"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",[197],[1984],{"type":37,"value":1985},"不要重复自己（DRY：Don’t Repeat Yourself）",{"type":37,"value":1962},{"type":18,"tag":193,"props":1988,"children":1991},{"href":1989,"rel":1990},"https://en.wikipedia.org/wiki/Rubber_duck_debugging",[197],[1992],{"type":37,"value":1993},"橡皮鸭调试法（Rubber Duck Debugging）",{"type":37,"value":1995}," 这些故事在开发中的类比。",{"type":37,"value":1997},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":1999,"children":2000},{},[2001,2017],{"type":18,"tag":395,"props":2002,"children":2003},{},[2004],{"type":18,"tag":399,"props":2005,"children":2006},{},[2007,2012],{"type":18,"tag":403,"props":2008,"children":2009},{},[2010],{"type":37,"value":2011},"故事",{"type":18,"tag":403,"props":2013,"children":2014},{},[2015],{"type":37,"value":2016},"介绍",{"type":18,"tag":414,"props":2018,"children":2019},{},[2020,2038,2054,2072,2083,2096,2107,2120,2131,2144],{"type":18,"tag":399,"props":2021,"children":2022},{},[2023,2028],{"type":18,"tag":421,"props":2024,"children":2025},{},[2026],{"type":37,"value":2027},"破窗理论",{"type":18,"tag":421,"props":2029,"children":2030},{},[2031,2033,2036],{"type":37,"value":2032},"如果一个建筑有一扇窗被打破，而没有及时修复，那么很快其他的窗户也可能被破坏。",{"type":18,"tag":1504,"props":2034,"children":2035},{},[],{"type":37,"value":2037},"这个现象说明一个破损的小问题可能会导致更大的问题。",{"type":18,"tag":399,"props":2039,"children":2040},{},[2041,2044],{"type":18,"tag":421,"props":2042,"children":2043},{},[],{"type":18,"tag":421,"props":2045,"children":2046},{},[2047,2049,2052],{"type":37,"value":2048},"忽视代码中的小问题（如糟糕的命名、不规范的格式）可能会导致代码质量持续恶化，最终变得难以维护。",{"type":18,"tag":1504,"props":2050,"children":2051},{},[],{"type":37,"value":2053},"保持代码整洁可以防止项目走向失控。",{"type":18,"tag":399,"props":2055,"children":2056},{},[2057,2062],{"type":18,"tag":421,"props":2058,"children":2059},{},[2060],{"type":37,"value":2061},"石头汤",{"type":18,"tag":421,"props":2063,"children":2064},{},[2065,2067,2070],{"type":37,"value":2066},"几个旅人告诉村民他们可以用一块石头煮汤，但需要一些配料。",{"type":18,"tag":1504,"props":2068,"children":2069},{},[],{"type":37,"value":2071},"村民们好奇地贡献了蔬菜、肉类等材料，最终煮出了一锅美味的汤。",{"type":18,"tag":399,"props":2073,"children":2074},{},[2075,2078],{"type":18,"tag":421,"props":2076,"children":2077},{},[],{"type":18,"tag":421,"props":2079,"children":2080},{},[2081],{"type":37,"value":2082},"通过激发团队成员的贡献精神，即使从零开始也可以集体创造出伟大的成果。",{"type":18,"tag":399,"props":2084,"children":2085},{},[2086,2091],{"type":18,"tag":421,"props":2087,"children":2088},{},[2089],{"type":37,"value":2090},"煮青蛙",{"type":18,"tag":421,"props":2092,"children":2093},{},[2094],{"type":37,"value":2095},"如果把青蛙直接放入沸水中，它会立刻跳出；但如果放在温水中慢慢加热，它可能会因为没有注意到渐变的危险而被煮死。",{"type":18,"tag":399,"props":2097,"children":2098},{},[2099,2102],{"type":18,"tag":421,"props":2100,"children":2101},{},[],{"type":18,"tag":421,"props":2103,"children":2104},{},[2105],{"type":37,"value":2106},"开发团队可能会对项目中的缓慢恶化（如技术债累积或功能蔓延）视而不见，直到问题变得不可逆转。",{"type":18,"tag":399,"props":2108,"children":2109},{},[2110,2115],{"type":18,"tag":421,"props":2111,"children":2112},{},[2113],{"type":37,"value":2114},"不要重复自己",{"type":18,"tag":421,"props":2116,"children":2117},{},[2118],{"type":37,"value":2119},"一个知识或功能点在代码中应该只有一个唯一的表示。",{"type":18,"tag":399,"props":2121,"children":2122},{},[2123,2126],{"type":18,"tag":421,"props":2124,"children":2125},{},[],{"type":18,"tag":421,"props":2127,"children":2128},{},[2129],{"type":37,"value":2130},"减少冗余代码，提高维护性和可读性。",{"type":18,"tag":399,"props":2132,"children":2133},{},[2134,2139],{"type":18,"tag":421,"props":2135,"children":2136},{},[2137],{"type":37,"value":2138},"橡皮鸭调试法",{"type":18,"tag":421,"props":2140,"children":2141},{},[2142],{"type":37,"value":2143},"通过向一只橡皮鸭解释代码来发现问题。在讲解过程中，可能会自己发现逻辑上的错误。",{"type":18,"tag":399,"props":2145,"children":2146},{},[2147,2150],{"type":18,"tag":421,"props":2148,"children":2149},{},[],{"type":18,"tag":421,"props":2151,"children":2152},{},[2153],{"type":37,"value":2154},"通过向别人解释问题（甚至是向一只鸭子），你能够重新审视自己的思路，找到盲点。",{"type":18,"tag":40,"props":2156,"children":2157},{},[2158],{"type":37,"value":2159},"作者还阐述了一个非常直观的观点：",{"type":18,"tag":116,"props":2161,"children":2163},{"type":2162},"big",[2164],{"type":18,"tag":40,"props":2165,"children":2166},{},[2167],{"type":37,"value":2168},"编程范式每隔十年左右就会发生变化。",{"type":18,"tag":40,"props":2170,"children":2171},{},[2172],{"type":37,"value":2173},"作者从 Ruby 入手实验 Web 开发，在完成一些成功的项目后，将职业方向转向 Ruby 开发，并未后悔。\t•\t这一切源于基本的实验，逐步发展为更深入的探索。",{"type":18,"tag":1086,"props":2175,"children":2176},{},[2177],{"type":18,"tag":189,"props":2178,"children":2179},{},[2180],{"type":37,"value":2181},"范式转变的历史教训：",{"type":18,"tag":40,"props":2183,"children":2184},{},[2185],{"type":37,"value":2186},"很多人可能不记得编程范式上一次转变的时代。从结构化编程向面向对象编程的转变经历了几次波折。",{"type":18,"tag":1086,"props":2188,"children":2189},{},[2190,2195,2200,2205],{"type":18,"tag":189,"props":2191,"children":2192},{},[2193],{"type":37,"value":2194},"旧的范式（结构化编程）无法应对现代 Web 应用的复杂性。",{"type":18,"tag":189,"props":2196,"children":2197},{},[2198],{"type":37,"value":2199},"Java 的成功推动了 OOP 的流行，使其成为主流。",{"type":18,"tag":189,"props":2201,"children":2202},{},[2203],{"type":37,"value":2204},"然而，许多开发者不得不重新学习新工具和设计方法。",{"type":18,"tag":189,"props":2206,"children":2207},{},[2208],{"type":37,"value":2209},"当前趋势：",{"type":18,"tag":40,"props":2211,"children":2212},{},[2213],{"type":37,"value":2214},"我们可能正在经历另一场转变，这次由新型计算机设计驱动。本书的七种语言中，有五种提供了强大的并发模型（Ruby 和 Prolog 除外）。",{"type":18,"tag":185,"props":2216,"children":2217},{},[2218,2223,2228,2233,2238],{"type":18,"tag":189,"props":2219,"children":2220},{},[2221],{"type":37,"value":2222},"Io 的未来值实现",{"type":18,"tag":189,"props":2224,"children":2225},{},[2226],{"type":37,"value":2227},"Scala 的 actor 模型",{"type":18,"tag":189,"props":2229,"children":2230},{},[2231],{"type":37,"value":2232},"Erlang 的“崩溃即修复”哲学",{"type":18,"tag":189,"props":2234,"children":2235},{},[2236],{"type":37,"value":2237},"Haskell 对可变状态的彻底摒弃",{"type":18,"tag":189,"props":2239,"children":2240},{},[2241],{"type":37,"value":2242},"Clojure 用版本化解决复杂并发问题",{"type":18,"tag":40,"props":2244,"children":2245},{},[2246],{"type":37,"value":2247},"Erlang 的例子：Erlang 在云数据库（如 CouchDB）背后发挥了重要作用，其语言基础源于 Prolog。",{"type":18,"tag":71,"props":2249,"children":2250},{},[],{"type":18,"tag":32,"props":2252,"children":2254},{"id":2253},"基础-2",[2255],{"type":37,"value":2256},"基础 2",{"type":18,"tag":27,"props":2258,"children":2260},{":t":2259,":type":311},"面向对象",[],{"type":18,"tag":165,"props":2262,"children":2264},{"id":2263},"面向对象-1",[2265],{"type":37,"value":2266},"面向对象 1",{"type":18,"tag":40,"props":2268,"children":2269},{},[2270],{"type":37,"value":2271},"Ruby 是一种解释型、面向对象、动态类型的语言，属于所谓的脚本语言家族。因此我们需要了解，解释型、动态类型、面向对象到底是什么个概念，以及他们的具象化实现：",{"type":37,"value":2273},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":2275,"children":2276},{},[2277,2293],{"type":18,"tag":395,"props":2278,"children":2279},{},[2280],{"type":18,"tag":399,"props":2281,"children":2282},{},[2283,2288],{"type":18,"tag":403,"props":2284,"children":2285},{},[2286],{"type":37,"value":2287},"特点",{"type":18,"tag":403,"props":2289,"children":2290},{},[2291],{"type":37,"value":2292},"概念",{"type":18,"tag":414,"props":2294,"children":2295},{},[2296,2309,2322],{"type":18,"tag":399,"props":2297,"children":2298},{},[2299,2304],{"type":18,"tag":421,"props":2300,"children":2301},{},[2302],{"type":37,"value":2303},"解释型",{"type":18,"tag":421,"props":2305,"children":2306},{},[2307],{"type":37,"value":2308},"代码由解释器直接执行，而不是通过编译器先转换为机器码。",{"type":18,"tag":399,"props":2310,"children":2311},{},[2312,2317],{"type":18,"tag":421,"props":2313,"children":2314},{},[2315],{"type":37,"value":2316},"动态类型",{"type":18,"tag":421,"props":2318,"children":2319},{},[2320],{"type":37,"value":2321},"数据类型在运行时绑定，而不是在编译时。这种策略通常在灵活性与执行安全性之间权衡。",{"type":18,"tag":399,"props":2323,"children":2324},{},[2325,2329],{"type":18,"tag":421,"props":2326,"children":2327},{},[2328],{"type":37,"value":2259},{"type":18,"tag":421,"props":2330,"children":2331},{},[2332],{"type":37,"value":2333},"支持封装（将数据和行为打包在一起）、继承（通过类组织对象类型）、多态（对象可以以多种形式出现）。",{"type":18,"tag":40,"props":2335,"children":2336},{},[2337],{"type":37,"value":2338},"解释型和动态类型我们在致谢阶段就已经有了了解，那么面向对象几乎是一个家喻户晓的特性。要理解其对象，我们需要想象一个场景：",{"type":18,"tag":40,"props":2340,"children":2341},{},[2342],{"type":37,"value":2343},"你在开发一个“动物园管理系统”。这个系统需要记录动物的信息，比如名字(name)、种类(species)，以及它们会发出的声音。用面向对象的方法来设计系统。",{"type":18,"tag":263,"props":2345,"children":2350},{"code":2346,"language":2347,"meta":8,"className":2348},"# 定义一个类\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n\n    def speak(self):\n        print(f\"{self.name} makes a sound.\")\n\n# 创建对象\ndog = Animal(\"Buddy\", \"Dog\")  # 狗狗对象\ncat = Animal(\"Whiskers\", \"Cat\")  # 猫咪对象\n\ndog.speak()  # 输出: Buddy makes a sound.\ncat.speak()  # 输出: Whiskers makes a sound.\n","python",[2349],"language-python",[2351],{"type":18,"tag":268,"props":2352,"children":2353},{"__ignoreMap":8},[2354],{"type":37,"value":2346},{"type":18,"tag":40,"props":2356,"children":2357},{},[2358],{"type":37,"value":2359},"类（Class）",{"type":18,"tag":1086,"props":2361,"children":2362},{},[2363,2368],{"type":18,"tag":189,"props":2364,"children":2365},{},[2366],{"type":37,"value":2367},"类就像一张蓝图，定义了某一类东西的共同特性和行为。",{"type":18,"tag":189,"props":2369,"children":2370},{},[2371],{"type":37,"value":2372},"动物的蓝图：每只动物都有名字（name）和种类（species），而且都会发出声音。",{"type":18,"tag":40,"props":2374,"children":2375},{},[2376],{"type":37,"value":2377},"对象（Object）",{"type":18,"tag":1086,"props":2379,"children":2380},{},[2381,2386],{"type":18,"tag":189,"props":2382,"children":2383},{},[2384],{"type":37,"value":2385},"对象是具体的东西，是从类里“制造”出来的实例。",{"type":18,"tag":189,"props":2387,"children":2388},{},[2389],{"type":37,"value":2390},"动物类中的“狗狗”对象，名字是“Buddy”，种类是“狗”。",{"type":18,"tag":40,"props":2392,"children":2393},{},[2394],{"type":37,"value":2395},"方法 (Method）",{"type":18,"tag":1086,"props":2397,"children":2398},{},[2399,2404],{"type":18,"tag":189,"props":2400,"children":2401},{},[2402],{"type":37,"value":2403},"绑定到特定对象的行为",{"type":18,"tag":189,"props":2405,"children":2406},{},[2407,2409],{"type":37,"value":2408},"定义在类中的函数，必须通过对象调用，例如 ",{"type":18,"tag":268,"props":2410,"children":2412},{"className":2411},[],[2413],{"type":37,"value":2414},"speak",{"type":18,"tag":40,"props":2416,"children":2417},{},[2418],{"type":37,"value":2419},"如果没有面向对象，可复用性几乎为 0：",{"type":18,"tag":263,"props":2421,"children":2423},{"code":2422},"# 没有类，每只动物都要单独定义\ndog_name = \"Buddy\"\ndog_species = \"Dog\"\n\ncat_name = \"Whiskers\"\ncat_species = \"Cat\"\n\ndef dog_speak():\n    print(f\"{dog_name} makes a sound.\")\n\ndef cat_speak():\n    print(f\"{cat_name} makes a sound.\")\n\ndog_speak()\ncat_speak()\n",[2424],{"type":18,"tag":268,"props":2425,"children":2426},{"__ignoreMap":8},[2427],{"type":37,"value":2422},{"type":18,"tag":71,"props":2429,"children":2430},{},[],{"type":18,"tag":27,"props":2432,"children":2434},{":t":2433},"面向对象的四大特性",[],{"type":18,"tag":27,"props":2436,"children":2438},{":t":2437,":type":311},"封装",[],{"type":18,"tag":1086,"props":2440,"children":2441},{},[2442],{"type":18,"tag":189,"props":2443,"children":2444},{},[2445],{"type":37,"value":2446},"保护数据，隐藏细节",{"type":18,"tag":40,"props":2448,"children":2449},{},[2450],{"type":37,"value":2451},"想象你在操作一辆车,你不需要知道引擎如何运作，只需要按下启动按钮。程序中，类可以“隐藏”它内部的细节，外部只需要调用公开的方法。",{"type":18,"tag":263,"props":2453,"children":2455},{"code":2454},"class Car:\n    def __init__(self, brand):\n        self.__engine_on = False  # 私有变量，外部无法直接访问\n        self.brand = brand\n\n    def start_engine(self):  # 提供方法启动引擎\n        self.__engine_on = True\n        print(f\"{self.brand} engine started.\")\n\ncar = Car(\"Toyota\")\ncar.start_engine()  # 输出: Toyota engine started.\n",[2456],{"type":18,"tag":268,"props":2457,"children":2458},{"__ignoreMap":8},[2459],{"type":37,"value":2454},{"type":18,"tag":27,"props":2461,"children":2463},{":t":2462,":type":311},"继承",[],{"type":18,"tag":1086,"props":2465,"children":2466},{},[2467],{"type":18,"tag":189,"props":2468,"children":2469},{},[2470],{"type":37,"value":2471},"复用代码",{"type":18,"tag":40,"props":2473,"children":2474},{},[2475],{"type":37,"value":2476},"假如动物园里有很多动物，很多行为是相似的，比如“发出声音”。我们可以用“动物”作为父类，然后让“狗”和“猫”继承它，省去重复代码。",{"type":18,"tag":263,"props":2478,"children":2480},{"code":2479},"# 定义一个类\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n\nclass Dog(Animal):  # Dog 继承自 Animal\n    def speak(self):  # 重写 speak 方法\n        print(f\"{self.name} barks!\")\n\nclass Cat(Animal):  # Cat 继承自 Animal\n    def speak(self):\n        print(f\"{self.name} meows!\")\n\ndog = Dog(\"Buddy\", \"Dog\")\ncat = Cat(\"Whiskers\", \"Cat\")\n\ndog.speak()  # 输出: Buddy barks!\ncat.speak()  # 输出: Whiskers meows!\n",[2481],{"type":18,"tag":268,"props":2482,"children":2483},{"__ignoreMap":8},[2484],{"type":37,"value":2479},{"type":18,"tag":40,"props":2486,"children":2487},{},[2488],{"type":37,"value":2489},"Dog 和 Cat 类继承了 Animal 类：",{"type":18,"tag":1086,"props":2491,"children":2492},{},[2493],{"type":18,"tag":189,"props":2494,"children":2495},{},[2496,2498,2504,2506,2512],{"type":37,"value":2497},"Dog 和 Cat 类没有重新定义 ",{"type":18,"tag":268,"props":2499,"children":2501},{"className":2500},[],[2502],{"type":37,"value":2503},"__init__",{"type":37,"value":2505}," 方法，但它们可以直接用 Animal 类的",{"type":18,"tag":268,"props":2507,"children":2509},{"className":2508},[],[2510],{"type":37,"value":2511}," __init__",{"type":37,"value":2513}," 方法来初始化名字和种类。",{"type":18,"tag":40,"props":2515,"children":2516},{},[2517],{"type":37,"value":2518},"子类扩展父类",{"type":18,"tag":1086,"props":2520,"children":2521},{},[2522],{"type":18,"tag":189,"props":2523,"children":2524},{},[2525,2527,2533],{"type":37,"value":2526},"Dog 和 Cat 类在继承了 Animal 的基础上，增加了自己的特性（如 ",{"type":18,"tag":268,"props":2528,"children":2530},{"className":2529},[],[2531],{"type":37,"value":2532},"speak()",{"type":37,"value":2534}," 方法）。",{"type":18,"tag":1504,"props":2536,"children":2537},{},[],{"type":18,"tag":263,"props":2539,"children":2541},{"code":2540},"dog = Dog(\"Buddy\", \"Dog\")\n",[2542],{"type":18,"tag":268,"props":2543,"children":2544},{"__ignoreMap":8},[2545],{"type":37,"value":2540},{"type":18,"tag":40,"props":2547,"children":2548},{},[2549,2551,2556,2558,2563],{"type":37,"value":2550},"创建 dog 对象时，Dog 类没有自己的 ",{"type":18,"tag":268,"props":2552,"children":2554},{"className":2553},[],[2555],{"type":37,"value":2503},{"type":37,"value":2557}," 方法，所以调用了 Animal 类的 ",{"type":18,"tag":268,"props":2559,"children":2561},{"className":2560},[],[2562],{"type":37,"value":2503},{"type":37,"value":2564}," 方法。",{"type":18,"tag":40,"props":2566,"children":2567},{},[2568,2574,2576,2582],{"type":18,"tag":268,"props":2569,"children":2571},{"className":2570},[],[2572],{"type":37,"value":2573},"self.name",{"type":37,"value":2575}," 被赋值为 \"Buddy\"，",{"type":18,"tag":268,"props":2577,"children":2579},{"className":2578},[],[2580],{"type":37,"value":2581},"self.species",{"type":37,"value":2583}," 被赋值为 \"Dog\"。",{"type":18,"tag":27,"props":2585,"children":2587},{":t":2586,":type":311},"多态",[],{"type":18,"tag":40,"props":2589,"children":2590},{},[2591],{"type":37,"value":2592},"多态（Polymorphism）是面向对象编程中的一个重要概念，指的是同一个接口（方法），在不同对象上表现出不同的行为。",{"type":18,"tag":263,"props":2594,"children":2596},{"code":2595},"# 定义一个类\nclass Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n\nclass Dog(Animal):  # Dog 继承自 Animal\n    def speak(self):  # 重写 speak 方法\n        print(f\"{self.name} barks!\")\n\nclass Cat(Animal):  # Cat 继承自 Animal\n    def speak(self):\n        print(f\"{self.name} meows!\")\n\nanimals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\")]\n\nfor animal in animals:\n    animal.speak()  # Buddy barks! 和 Whiskers meows!\n",[2597],{"type":18,"tag":268,"props":2598,"children":2599},{"__ignoreMap":8},[2600],{"type":37,"value":2595},{"type":18,"tag":40,"props":2602,"children":2603},{},[2604],{"type":18,"tag":747,"props":2605,"children":2606},{},[2607],{"type":37,"value":2608},"“一个接口，不同表现”",{"type":18,"tag":1086,"props":2610,"children":2611},{},[2612],{"type":18,"tag":189,"props":2613,"children":2614},{},[2615,2617,2622],{"type":37,"value":2616},"这里的接口就是 ",{"type":18,"tag":268,"props":2618,"children":2620},{"className":2619},[],[2621],{"type":37,"value":2532},{"type":37,"value":2564},{"type":18,"tag":40,"props":2624,"children":2625},{},[2626,2628,2633],{"type":37,"value":2627},"Dog 和 Cat 类都实现了",{"type":18,"tag":268,"props":2629,"children":2631},{"className":2630},[],[2632],{"type":37,"value":2532},{"type":37,"value":2634}," 方法，但它们的表现不同",{"type":18,"tag":1086,"props":2636,"children":2637},{},[2638,2650],{"type":18,"tag":189,"props":2639,"children":2640},{},[2641,2643,2648],{"type":37,"value":2642},"Dog 的 ",{"type":18,"tag":268,"props":2644,"children":2646},{"className":2645},[],[2647],{"type":37,"value":2532},{"type":37,"value":2649}," 输出的是 \"Buddy barks!\"",{"type":18,"tag":189,"props":2651,"children":2652},{},[2653,2655,2660],{"type":37,"value":2654},"Cat 的 ",{"type":18,"tag":268,"props":2656,"children":2658},{"className":2657},[],[2659],{"type":37,"value":2532},{"type":37,"value":2661}," 输出的是 \"Whiskers meows!\"",{"type":18,"tag":40,"props":2663,"children":2664},{},[2665],{"type":18,"tag":747,"props":2666,"children":2667},{},[2668],{"type":37,"value":2669},"为什么这是多态？",{"type":18,"tag":263,"props":2671,"children":2673},{"code":2672},"animals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\")]\n\nfor animal in animals:\n    animal.speak()\n",[2674],{"type":18,"tag":268,"props":2675,"children":2676},{"__ignoreMap":8},[2677],{"type":37,"value":2672},{"type":18,"tag":40,"props":2679,"children":2680},{},[2681,2683,2689,2691,2697,2699,2705],{"type":37,"value":2682},"调用 ",{"type":18,"tag":268,"props":2684,"children":2686},{"className":2685},[],[2687],{"type":37,"value":2688},"animal.speak()",{"type":37,"value":2690}," 时，不关心 animal 是 Dog 还是 Cat，程序会自动根据 ",{"type":18,"tag":268,"props":2692,"children":2694},{"className":2693},[],[2695],{"type":37,"value":2696},"animal",{"type":37,"value":2698}," 的实际类型调用相应的 ",{"type":18,"tag":268,"props":2700,"children":2702},{"className":2701},[],[2703],{"type":37,"value":2704},"speak() ",{"type":37,"value":2564},{"type":18,"tag":40,"props":2707,"children":2708},{},[2709,2711,2716],{"type":37,"value":2710},"一个通用的方法（",{"type":18,"tag":268,"props":2712,"children":2714},{"className":2713},[],[2715],{"type":37,"value":2532},{"type":37,"value":2717},"），在不同对象上实现了不同的行为（狗叫或猫叫）。",{"type":18,"tag":40,"props":2719,"children":2720},{},[2721],{"type":18,"tag":747,"props":2722,"children":2723},{},[2724],{"type":37,"value":2725},"多态的特征",{"type":18,"tag":40,"props":2727,"children":2728},{},[2729],{"type":37,"value":2730},"父类引用可以指向子类对象",{"type":18,"tag":263,"props":2732,"children":2734},{"code":2733},"animals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\")]\n",[2735],{"type":18,"tag":268,"props":2736,"children":2737},{"__ignoreMap":8},[2738],{"type":37,"value":2733},{"type":18,"tag":40,"props":2740,"children":2741},{},[2742],{"type":37,"value":2743},"列表中的元素类型是 Animal（父类）的引用，但它们实际是 Dog 和 Cat 的对象（子类）。",{"type":18,"tag":40,"props":2745,"children":2746},{},[2747],{"type":37,"value":2748},"动态绑定（动态多态）",{"type":18,"tag":1086,"props":2750,"children":2751},{},[2752],{"type":18,"tag":189,"props":2753,"children":2754},{},[2755],{"type":37,"value":2756},"在运行时，根据对象的实际类型调用相应的方法，而不是编译时决定。例如：",{"type":18,"tag":263,"props":2758,"children":2760},{"code":2759},"for animal in animals:\n    animal.speak()\n",[2761],{"type":18,"tag":268,"props":2762,"children":2763},{"__ignoreMap":8},[2764],{"type":37,"value":2759},{"type":18,"tag":40,"props":2766,"children":2767},{},[2768],{"type":37,"value":2769},"每次调用 speak()，Python 会根据 animal 的实际类型（Dog 或 Cat），执行不同的 speak() 方法。",{"type":18,"tag":40,"props":2771,"children":2772},{},[2773],{"type":37,"value":2774},"意义在于增强了代码的灵活性和可扩展性。以下是两大好处：",{"type":18,"tag":1086,"props":2776,"children":2777},{},[2778,2783],{"type":18,"tag":189,"props":2779,"children":2780},{},[2781],{"type":37,"value":2782},"统一接口，简化代码",{"type":18,"tag":189,"props":2784,"children":2785},{},[2786],{"type":37,"value":2787},"方便扩展",{"type":18,"tag":40,"props":2789,"children":2790},{},[2791],{"type":37,"value":2792},"不需要为每种动物分别写逻辑，只需调用 speak() 方法即可：",{"type":18,"tag":263,"props":2794,"children":2795},{"code":2759},[2796],{"type":18,"tag":268,"props":2797,"children":2798},{"__ignoreMap":8},[2799],{"type":37,"value":2759},{"type":18,"tag":40,"props":2801,"children":2802},{},[2803],{"type":37,"value":2804},"无论是 Dog 还是 Cat，只要它们有 speak() 方法，就可以统一处理。",{"type":18,"tag":40,"props":2806,"children":2807},{},[2808],{"type":37,"value":2809},"如果以后新增一种动物，比如 Bird，只需定义它的类并实现 speak() 方法，无需修改已有代码：",{"type":18,"tag":263,"props":2811,"children":2813},{"code":2812},"class Bird(Animal):\n    def speak(self):\n        print(f\"{self.name} chirps!\")\n\nanimals = [Dog(\"Buddy\", \"Dog\"), Cat(\"Whiskers\", \"Cat\"), Bird(\"Tweety\", \"Bird\")]\n\nfor animal in animals:\n    animal.speak()\n",[2814],{"type":18,"tag":268,"props":2815,"children":2816},{"__ignoreMap":8},[2817],{"type":37,"value":2812},{"type":18,"tag":27,"props":2819,"children":2821},{":t":2820,"type":311},"抽象",[],{"type":18,"tag":40,"props":2823,"children":2824},{},[2825],{"type":37,"value":2826},"理解“抽象”是理解面向对象的一个关键点，我们从现实中的例子来解释为什么“抽象只关注核心功能”。",{"type":18,"tag":40,"props":2828,"children":2829},{},[2830],{"type":37,"value":2831},"在一个动物园管理系统中，管理员需要统计各种动物的叫声，但管理员不关心具体是哪种动物，只需要知道它们会“说话”即可。因此，我们用抽象类 Animal 定义了所有动物的共同特性，并让具体的动物（如狗和猫）实现各自的叫声。",{"type":18,"tag":263,"props":2833,"children":2835},{"code":2834},"from abc import ABC, abstractmethod\n\nclass Animal(ABC):  # 抽象类：定义动物的核心功能\n    @abstractmethod\n    def speak(self):\n        pass  # 动物都会叫，但具体怎么叫由子类决定\n\nclass Dog(Animal):  # 子类：具体实现\n    def speak(self):\n        return \"Bark!\"\n\nclass Cat(Animal):  # 子类：具体实现\n    def speak(self):\n        return \"Meow!\"\n\n# 使用抽象类\nanimals = [Dog(), Cat()]  # 动物园里有狗和猫\nfor animal in animals:  # 遍历动物，不关心具体是哪种\n    print(f\"The animal says: {animal.speak()}\")  # 统一调用接口获取叫声\n",[2836],{"type":18,"tag":268,"props":2837,"children":2838},{"__ignoreMap":8},[2839],{"type":37,"value":2834},{"type":18,"tag":40,"props":2841,"children":2842},{},[2843],{"type":18,"tag":747,"props":2844,"children":2845},{},[2846],{"type":37,"value":2847},"为什么抽象只关注核心功能？",{"type":18,"tag":185,"props":2849,"children":2850},{},[2851,2856],{"type":18,"tag":189,"props":2852,"children":2853},{},[2854],{"type":37,"value":2855},"Animal 只定义了 speak() 方法，说明每个动物都能“发声”，这是核心功能。",{"type":18,"tag":189,"props":2857,"children":2858},{},[2859],{"type":37,"value":2860},"子类（Dog 和 Cat）实现各自的细节，用户只需调用 speak()，不必关心内部逻辑。",{"type":18,"tag":40,"props":2862,"children":2863},{},[2864],{"type":37,"value":2865},"抽象简化了程序的逻辑，只暴露必要的功能，隐藏了实现的复杂性。",{"type":18,"tag":71,"props":2867,"children":2868},{},[],{"type":18,"tag":165,"props":2870,"children":2872},{"id":2871},"声明式语言-2",[2873],{"type":37,"value":2874},"声明式语言 2",{"type":18,"tag":27,"props":2876,"children":2878},{"t":2877},"声明式语言",[],{"type":18,"tag":40,"props":2880,"children":2881},{},[2882,2887,2889,2892,2894],{"type":18,"tag":747,"props":2883,"children":2884},{},[2885],{"type":37,"value":2886},"特点 1: 描述“做什么”，而非“怎么做”",{"type":37,"value":2888}," ",{"type":18,"tag":1504,"props":2890,"children":2891},{},[],{"type":37,"value":2893},"\n例如 SQL 的 ",{"type":18,"tag":268,"props":2895,"children":2897},{"className":2896},[],[2898],{"type":37,"value":2899},"SELECT name FROM students WHERE age > 18;",{"type":18,"tag":116,"props":2901,"children":2902},{},[2903],{"type":18,"tag":40,"props":2904,"children":2905},{},[2906],{"type":37,"value":2907},"描述性逻辑：查询所有名字，满足条件年龄大于 18。\n无需考虑数据库如何执行索引、扫描、排序等。",{"type":18,"tag":1504,"props":2909,"children":2910},{},[],{"type":18,"tag":40,"props":2912,"children":2913},{},[2914,2919,2920,2923,2925,2930],{"type":18,"tag":747,"props":2915,"children":2916},{},[2917],{"type":37,"value":2918},"特点 2: 高层次抽象",{"type":37,"value":2888},{"type":18,"tag":1504,"props":2921,"children":2922},{},[],{"type":37,"value":2924},"\n声明式语言提供了 ",{"type":18,"tag":747,"props":2926,"children":2927},{},[2928],{"type":37,"value":2929},"更高的抽象层次，屏蔽底层的实现细节",{"type":37,"value":2931},"。通过简单的规则、事实、函数等描述问题，降低开发者的认知负担。",{"type":18,"tag":1504,"props":2933,"children":2934},{},[],{"type":18,"tag":40,"props":2936,"children":2937},{},[2938,2943,2944,2947],{"type":18,"tag":747,"props":2939,"children":2940},{},[2941],{"type":37,"value":2942},"特点3: 更接近自然语言",{"type":37,"value":2888},{"type":18,"tag":1504,"props":2945,"children":2946},{},[],{"type":37,"value":2948},"\n声明式语言往往用更直观、逻辑性强的方式表达程序，接近人类思维方式。",{"type":18,"tag":263,"props":2950,"children":2952},{"code":2951},"range(1, 10).filter(even).sum()\n替代 sum = 0; for (i = 1; i \u003C= 10; i++) { if (even(i)) sum +=i; } return sum;\n\n---\n抽象程度高，屏蔽了低层次的逻辑，专注于问题的核心逻辑。\n",[2953],{"type":18,"tag":268,"props":2954,"children":2955},{"__ignoreMap":8},[2956],{"type":37,"value":2951},{"type":18,"tag":40,"props":2958,"children":2959},{},[2960,2965,2966,2969,2971],{"type":18,"tag":747,"props":2961,"children":2962},{},[2963],{"type":37,"value":2964},"特点 4: 自动推理与隐式实现",{"type":37,"value":2888},{"type":18,"tag":1504,"props":2967,"children":2968},{},[],{"type":37,"value":2970},"\n声明式语言将 ",{"type":18,"tag":747,"props":2972,"children":2973},{},[2974],{"type":37,"value":2975},"实现细节交给底层引擎处理，如推理、优化或并发处理。",{"type":18,"tag":1086,"props":2977,"children":2978},{},[2979,2984,2989],{"type":18,"tag":189,"props":2980,"children":2981},{},[2982],{"type":37,"value":2983},"Prolog：描述规则后，Prolog 会自动推断出答案，无需手动编写具体逻辑。",{"type":18,"tag":189,"props":2985,"children":2986},{},[2987],{"type":37,"value":2988},"SQL：数据库管理系统自动选择最优查询路径（如索引优化）。",{"type":18,"tag":189,"props":2990,"children":2991},{},[2992],{"type":37,"value":2993},"CSS: 你只管描述效果，接下来由浏览器引擎实现。",{"type":18,"tag":71,"props":2995,"children":2996},{},[],{"type":18,"tag":165,"props":2998,"children":3000},{"id":2999},"repl-2",[3001],{"type":37,"value":3002},"REPL 2",{"type":18,"tag":27,"props":3004,"children":3006},{"t":3005,"type":311},"REPL",[],{"type":18,"tag":40,"props":3008,"children":3009},{},[3010],{"type":37,"value":3011},"REPL(Read-Eval-Print Loop)，是一种交互式编程环境，可以一行一行地输入代码，立即看到结果，非常适合学习、测试和调试。每个单词都有其含义，很方便理解：",{"type":37,"value":3013},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":3015,"children":3016},{},[3017,3038],{"type":18,"tag":395,"props":3018,"children":3019},{},[3020],{"type":18,"tag":399,"props":3021,"children":3022},{},[3023,3028,3033],{"type":18,"tag":403,"props":3024,"children":3025},{},[3026],{"type":37,"value":3027},"Name",{"type":18,"tag":403,"props":3029,"children":3030},{},[3031],{"type":37,"value":3032},"Info",{"type":18,"tag":403,"props":3034,"children":3035},{},[3036],{"type":37,"value":3037},"Exp",{"type":18,"tag":414,"props":3039,"children":3040},{},[3041,3059,3077,3095],{"type":18,"tag":399,"props":3042,"children":3043},{},[3044,3049,3054],{"type":18,"tag":421,"props":3045,"children":3046},{},[3047],{"type":37,"value":3048},"Read",{"type":18,"tag":421,"props":3050,"children":3051},{},[3052],{"type":37,"value":3053},"读取输入的表达式",{"type":18,"tag":421,"props":3055,"children":3056},{},[3057],{"type":37,"value":3058},"你输入一行 Code",{"type":18,"tag":399,"props":3060,"children":3061},{},[3062,3067,3072],{"type":18,"tag":421,"props":3063,"children":3064},{},[3065],{"type":37,"value":3066},"Eval",{"type":18,"tag":421,"props":3068,"children":3069},{},[3070],{"type":37,"value":3071},"计算表达式的结果",{"type":18,"tag":421,"props":3073,"children":3074},{},[3075],{"type":37,"value":3076},"解释器执行这段 Code",{"type":18,"tag":399,"props":3078,"children":3079},{},[3080,3085,3090],{"type":18,"tag":421,"props":3081,"children":3082},{},[3083],{"type":37,"value":3084},"Print",{"type":18,"tag":421,"props":3086,"children":3087},{},[3088],{"type":37,"value":3089},"打印输出结果",{"type":18,"tag":421,"props":3091,"children":3092},{},[3093],{"type":37,"value":3094},"将计算结果显示在终端上",{"type":18,"tag":399,"props":3096,"children":3097},{},[3098,3103,3108],{"type":18,"tag":421,"props":3099,"children":3100},{},[3101],{"type":37,"value":3102},"Loop",{"type":18,"tag":421,"props":3104,"children":3105},{},[3106],{"type":37,"value":3107},"回到开头等待下一行输入",{"type":18,"tag":421,"props":3109,"children":3110},{},[3111],{"type":37,"value":3112},"循环执行下一条命令",{"type":18,"tag":40,"props":3114,"children":3115},{},[3116,3118,3124,3126,3131,3133,3140,3142,3149],{"type":37,"value":3117},"这个我们都很熟悉，比如你可以输入 ",{"type":18,"tag":268,"props":3119,"children":3121},{"className":3120},[],[3122],{"type":37,"value":3123},"node",{"type":37,"value":3125}," 进入 node.js 的 REPL，输入 ",{"type":18,"tag":268,"props":3127,"children":3129},{"className":3128},[],[3130],{"type":37,"value":2347},{"type":37,"value":3132}," 进入 python 的 REPL。当然我一般比较懒，在学习某个语言的时候，例如我不会用到的，例如 io lang、prolog 我会用在线的 REPL 环境，例如 ",{"type":18,"tag":193,"props":3134,"children":3137},{"href":3135,"rel":3136},"https://tio.run/#",[197],[3138],{"type":37,"value":3139},"TIO.RUN",{"type":37,"value":3141}," 以及 Lang community 提供的在线 REPL 环境，例如 Scala 的 ",{"type":18,"tag":193,"props":3143,"children":3146},{"href":3144,"rel":3145},"https://scastie.scala-lang.org/",[197],[3147],{"type":37,"value":3148},"scastie",{"type":37,"value":3150},"。",{"type":18,"tag":71,"props":3152,"children":3153},{},[],{"type":18,"tag":165,"props":3155,"children":3157},{"id":3156},"eda-2",[3158],{"type":37,"value":3159},"EDA 2",{"type":18,"tag":27,"props":3161,"children":3163},{"t":3162,"type":311},"事件驱动架构",[],{"type":18,"tag":40,"props":3165,"children":3166},{},[3167,3169,3175,3177,3182,3184,3189],{"type":37,"value":3168},"[事件驱动架构（EDA, Event-driven architecture)(",{"type":18,"tag":193,"props":3170,"children":3173},{"href":3171,"rel":3172},"https://en.wikipedia.org/wiki/Event-driven_architecture",[197],[3174],{"type":37,"value":3171},{"type":37,"value":3176},") 一句话概括就是以 ",{"type":18,"tag":747,"props":3178,"children":3179},{},[3180],{"type":37,"value":3181},"事件驱动的",{"type":37,"value":3183}," 。要理解 EDA 很简单的方式就是了解事件。其核心思想是 ",{"type":18,"tag":747,"props":3185,"children":3186},{},[3187],{"type":37,"value":3188},"系统中的行为由“事件”的发生来驱动",{"type":37,"value":3190},"，例如:",{"type":18,"tag":263,"props":3192,"children":3194},{"code":3193},"[User Clicks Button]\n      ↓\n[Event Producer: UI 层构造 ClickedEvent]\n      ↓\n[Event Channel: Kafka 传递事件]\n      ↓\n[Event Processor: Akka Actor 解析并调用服务]\n      ↓\n[Downstream: 更新订单系统，发送确认邮件]\n",[3195],{"type":18,"tag":268,"props":3196,"children":3197},{"__ignoreMap":8},[3198],{"type":37,"value":3193},{"type":18,"tag":40,"props":3200,"children":3201},{},[3202],{"type":37,"value":3203},"1.事件发布者(Event producer)",{"type":18,"tag":1086,"props":3205,"children":3206},{},[3207,3212,3217,3222],{"type":18,"tag":189,"props":3208,"children":3209},{},[3210],{"type":37,"value":3211},"用户点击了按钮（UI事件）",{"type":18,"tag":189,"props":3213,"children":3214},{},[3215],{"type":37,"value":3216},"文件上传成功（系统事件）",{"type":18,"tag":189,"props":3218,"children":3219},{},[3220],{"type":37,"value":3221},"新订单创建（业务事件）",{"type":18,"tag":189,"props":3223,"children":3224},{},[3225],{"type":37,"value":3226},"接收到一条消息（网络事件）",{"type":18,"tag":40,"props":3228,"children":3229},{},[3230],{"type":37,"value":3231},"2.事件通道(Event producer)",{"type":18,"tag":1086,"props":3233,"children":3234},{},[3235],{"type":18,"tag":189,"props":3236,"children":3237},{},[3238],{"type":37,"value":3239},"事件传递的媒介（如消息队列 Kafka、Akka EventStream）",{"type":18,"tag":40,"props":3241,"children":3242},{},[3243],{"type":37,"value":3244},"3.事件处理引擎（Event Processing Engine）",{"type":18,"tag":1086,"props":3246,"children":3247},{},[3248,3253,3258],{"type":18,"tag":189,"props":3249,"children":3250},{},[3251],{"type":37,"value":3252},"负责识别事件、执行业务逻辑，触发下游动作。",{"type":18,"tag":189,"props":3254,"children":3255},{},[3256],{"type":37,"value":3257},"业务反应：更新库存、发送通知、调用微服务",{"type":18,"tag":189,"props":3259,"children":3260},{},[3261],{"type":37,"value":3262},"规则判断：结合业务规则系统进行复杂事件处理（CEP）",{"type":18,"tag":40,"props":3264,"children":3265},{},[3266],{"type":37,"value":3267},"4.下游事件驱动行为（Downstream Event-Driven Activity）",{"type":18,"tag":1086,"props":3269,"children":3270},{},[3271,3276,3281,3286,3291],{"type":18,"tag":189,"props":3272,"children":3273},{},[3274],{"type":37,"value":3275},"事件处理结果带来的后续行为，可是自动的，也可能是通知型的。",{"type":18,"tag":189,"props":3277,"children":3278},{},[3279],{"type":37,"value":3280},"通知类操作：发送邮件、短信、推送消息",{"type":18,"tag":189,"props":3282,"children":3283},{},[3284],{"type":37,"value":3285},"状态更新：更新数据库、状态缓存",{"type":18,"tag":189,"props":3287,"children":3288},{},[3289],{"type":37,"value":3290},"触发新的事件：继续发出后续事件，形成事件链",{"type":18,"tag":189,"props":3292,"children":3293},{},[3294],{"type":37,"value":3295},"系统响应：响应用户 UI，改变页面内容",{"type":18,"tag":40,"props":3297,"children":3298},{},[3299],{"type":37,"value":3300},"这些“事件”被捕捉到之后，会通知相应的处理逻辑去做一些事。上面这四个逻辑叫 \"Event flow layers(事件流层)\":",{"type":37,"value":3013},{"type":18,"tag":391,"props":3303,"children":3304},{},[3305,3326],{"type":18,"tag":395,"props":3306,"children":3307},{},[3308],{"type":18,"tag":399,"props":3309,"children":3310},{},[3311,3316,3321],{"type":18,"tag":403,"props":3312,"children":3313},{},[3314],{"type":37,"value":3315},"层级",{"type":18,"tag":403,"props":3317,"children":3318},{},[3319],{"type":37,"value":3320},"名称",{"type":18,"tag":403,"props":3322,"children":3323},{},[3324],{"type":37,"value":3325},"功能描述",{"type":18,"tag":414,"props":3327,"children":3328},{},[3329,3350,3370,3391],{"type":18,"tag":399,"props":3330,"children":3331},{},[3332,3337,3345],{"type":18,"tag":421,"props":3333,"children":3334},{},[3335],{"type":37,"value":3336},"1",{"type":18,"tag":421,"props":3338,"children":3339},{},[3340],{"type":18,"tag":747,"props":3341,"children":3342},{},[3343],{"type":37,"value":3344},"Event Producer",{"type":18,"tag":421,"props":3346,"children":3347},{},[3348],{"type":37,"value":3349},"监听/感知事件，构造为事件结构。可为传感器、系统、服务。",{"type":18,"tag":399,"props":3351,"children":3352},{},[3353,3357,3365],{"type":18,"tag":421,"props":3354,"children":3355},{},[3356],{"type":37,"value":311},{"type":18,"tag":421,"props":3358,"children":3359},{},[3360],{"type":18,"tag":747,"props":3361,"children":3362},{},[3363],{"type":37,"value":3364},"Event Channel",{"type":18,"tag":421,"props":3366,"children":3367},{},[3368],{"type":37,"value":3369},"事件传递通道。负责把事件从生产者发送到处理者（消息队列、TCP、日志等）。",{"type":18,"tag":399,"props":3371,"children":3372},{},[3373,3378,3386],{"type":18,"tag":421,"props":3374,"children":3375},{},[3376],{"type":37,"value":3377},"3",{"type":18,"tag":421,"props":3379,"children":3380},{},[3381],{"type":18,"tag":747,"props":3382,"children":3383},{},[3384],{"type":37,"value":3385},"Event Processing Engine",{"type":18,"tag":421,"props":3387,"children":3388},{},[3389],{"type":37,"value":3390},"核心业务逻辑。判断事件类型，做出反应、触发动作。",{"type":18,"tag":399,"props":3392,"children":3393},{},[3394,3399,3407],{"type":18,"tag":421,"props":3395,"children":3396},{},[3397],{"type":37,"value":3398},"4",{"type":18,"tag":421,"props":3400,"children":3401},{},[3402],{"type":18,"tag":747,"props":3403,"children":3404},{},[3405],{"type":37,"value":3406},"Downstream Activity",{"type":18,"tag":421,"props":3408,"children":3409},{},[3410],{"type":37,"value":3411},"后续动作，如发送通知、更新数据库、触发下游服务等。",{"type":18,"tag":40,"props":3413,"children":3414},{},[3415],{"type":37,"value":3416},"预支相对应的还有很多类型的驱动，例如：",{"type":37,"value":3418},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":3420,"children":3421},{},[3422,3448],{"type":18,"tag":395,"props":3423,"children":3424},{},[3425],{"type":18,"tag":399,"props":3426,"children":3427},{},[3428,3433,3438,3443],{"type":18,"tag":403,"props":3429,"children":3430},{},[3431],{"type":37,"value":3432},"驱动方式",{"type":18,"tag":403,"props":3434,"children":3435},{},[3436],{"type":37,"value":3437},"核心触发点",{"type":18,"tag":403,"props":3439,"children":3440},{},[3441],{"type":37,"value":3442},"特点/用途",{"type":18,"tag":403,"props":3444,"children":3445},{},[3446],{"type":37,"value":3447},"示例或代表技术",{"type":18,"tag":414,"props":3449,"children":3450},{},[3451,3474,3497,3520,3543,3566,3589,3612],{"type":18,"tag":399,"props":3452,"children":3453},{},[3454,3459,3464,3469],{"type":18,"tag":421,"props":3455,"children":3456},{},[3457],{"type":37,"value":3458},"事件驱动",{"type":18,"tag":421,"props":3460,"children":3461},{},[3462],{"type":37,"value":3463},"系统中事件",{"type":18,"tag":421,"props":3465,"children":3466},{},[3467],{"type":37,"value":3468},"解耦、并发好",{"type":18,"tag":421,"props":3470,"children":3471},{},[3472],{"type":37,"value":3473},"Akka, Kafka, ZIO",{"type":18,"tag":399,"props":3475,"children":3476},{},[3477,3482,3487,3492],{"type":18,"tag":421,"props":3478,"children":3479},{},[3480],{"type":37,"value":3481},"请求/命令驱动",{"type":18,"tag":421,"props":3483,"children":3484},{},[3485],{"type":37,"value":3486},"明确调用",{"type":18,"tag":421,"props":3488,"children":3489},{},[3490],{"type":37,"value":3491},"同步逻辑、明确流向",{"type":18,"tag":421,"props":3493,"children":3494},{},[3495],{"type":37,"value":3496},"REST API, RPC, CQRS",{"type":18,"tag":399,"props":3498,"children":3499},{},[3500,3505,3510,3515],{"type":18,"tag":421,"props":3501,"children":3502},{},[3503],{"type":37,"value":3504},"数据驱动",{"type":18,"tag":421,"props":3506,"children":3507},{},[3508],{"type":37,"value":3509},"数据变化",{"type":18,"tag":421,"props":3511,"children":3512},{},[3513],{"type":37,"value":3514},"数据核心、处理流程灵活",{"type":18,"tag":421,"props":3516,"children":3517},{},[3518],{"type":37,"value":3519},"ETL, Pandas, SQL Trigger",{"type":18,"tag":399,"props":3521,"children":3522},{},[3523,3528,3533,3538],{"type":18,"tag":421,"props":3524,"children":3525},{},[3526],{"type":37,"value":3527},"配置驱动",{"type":18,"tag":421,"props":3529,"children":3530},{},[3531],{"type":37,"value":3532},"配置文件",{"type":18,"tag":421,"props":3534,"children":3535},{},[3536],{"type":37,"value":3537},"灵活部署、低代码",{"type":18,"tag":421,"props":3539,"children":3540},{},[3541],{"type":37,"value":3542},"Spring Boot, Kubernetes",{"type":18,"tag":399,"props":3544,"children":3545},{},[3546,3551,3556,3561],{"type":18,"tag":421,"props":3547,"children":3548},{},[3549],{"type":37,"value":3550},"时间驱动",{"type":18,"tag":421,"props":3552,"children":3553},{},[3554],{"type":37,"value":3555},"时间点",{"type":18,"tag":421,"props":3557,"children":3558},{},[3559],{"type":37,"value":3560},"定时任务、周期性处理",{"type":18,"tag":421,"props":3562,"children":3563},{},[3564],{"type":37,"value":3565},"Cron, Airflow, Spark",{"type":18,"tag":399,"props":3567,"children":3568},{},[3569,3574,3579,3584],{"type":18,"tag":421,"props":3570,"children":3571},{},[3572],{"type":37,"value":3573},"状态驱动",{"type":18,"tag":421,"props":3575,"children":3576},{},[3577],{"type":37,"value":3578},"状态转移",{"type":18,"tag":421,"props":3580,"children":3581},{},[3582],{"type":37,"value":3583},"有限流程系统、自动机控制",{"type":18,"tag":421,"props":3585,"children":3586},{},[3587],{"type":37,"value":3588},"FSM, 工作流引擎",{"type":18,"tag":399,"props":3590,"children":3591},{},[3592,3597,3602,3607],{"type":18,"tag":421,"props":3593,"children":3594},{},[3595],{"type":37,"value":3596},"用户驱动",{"type":18,"tag":421,"props":3598,"children":3599},{},[3600],{"type":37,"value":3601},"用户输入",{"type":18,"tag":421,"props":3603,"children":3604},{},[3605],{"type":37,"value":3606},"高交互性 UI 系统",{"type":18,"tag":421,"props":3608,"children":3609},{},[3610],{"type":37,"value":3611},"React, Android, Game",{"type":18,"tag":399,"props":3613,"children":3614},{},[3615,3620,3625,3630],{"type":18,"tag":421,"props":3616,"children":3617},{},[3618],{"type":37,"value":3619},"测试驱动开发",{"type":18,"tag":421,"props":3621,"children":3622},{},[3623],{"type":37,"value":3624},"单元测试",{"type":18,"tag":421,"props":3626,"children":3627},{},[3628],{"type":37,"value":3629},"代码质量好、文档即测试",{"type":18,"tag":421,"props":3631,"children":3632},{},[3633],{"type":37,"value":3634},"JUnit, ScalaTest",{"type":18,"tag":71,"props":3636,"children":3637},{},[],{"type":18,"tag":165,"props":3639,"children":3641},{"id":3640},"函数式核心-2",[3642],{"type":37,"value":3643},"函数式核心 2",{"type":18,"tag":27,"props":3645,"children":3647},{"t":3646},"函数式编程的核心",[],{"type":18,"tag":40,"props":3649,"children":3650},{},[3651,3653,3658,3659,3664],{"type":37,"value":3652},"函数式编程的核心就是 ",{"type":18,"tag":747,"props":3654,"children":3655},{},[3656],{"type":37,"value":3657},"高阶函数",{"type":37,"value":1033},{"type":18,"tag":747,"props":3660,"children":3661},{},[3662],{"type":37,"value":3663},"模式匹配",{"type":37,"value":3665},", 在此之前我只知道他们做什么，能实现出什么效果。而不知道它们叫什么（这就是没有系统性学习的弊端，上限低下限也低）：",{"type":18,"tag":1447,"props":3667,"children":3668},{"type":1449},[3669,3681,3683],{"type":18,"tag":40,"props":3670,"children":3671},{},[3672,3674,3679],{"type":37,"value":3673},"高阶函数是一个更高层的抽象，它的核心是 ",{"type":18,"tag":747,"props":3675,"children":3676},{},[3677],{"type":37,"value":3678},"把函数当作一种可传递、可组合的“工具”",{"type":37,"value":3680},"，而不是单纯的数据。能够接收函数作为参数，或者返回函数作为结果的函数”",{"type":37,"value":3682},"\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":3684,"children":3685},{},[3686,3702],{"type":18,"tag":395,"props":3687,"children":3688},{},[3689],{"type":18,"tag":399,"props":3690,"children":3691},{},[3692,3697],{"type":18,"tag":403,"props":3693,"children":3694},{},[3695],{"type":37,"value":3696},"高阶函数(HOF)",{"type":18,"tag":403,"props":3698,"children":3699},{},[3700],{"type":37,"value":3701},"普通函数",{"type":18,"tag":414,"props":3703,"children":3704},{},[3705],{"type":18,"tag":399,"props":3706,"children":3707},{},[3708,3713],{"type":18,"tag":421,"props":3709,"children":3710},{},[3711],{"type":37,"value":3712},"允许你自己换榨汁模块（输入橙子+榨苹果模块→输出苹果汁）",{"type":18,"tag":421,"props":3714,"children":3715},{},[3716],{"type":37,"value":3717},"固定做橙汁（输入橙子→输出果汁）",{"type":37,"value":3682},{"type":18,"tag":391,"props":3720,"children":3721},{},[3722,3738],{"type":18,"tag":395,"props":3723,"children":3724},{},[3725],{"type":18,"tag":399,"props":3726,"children":3727},{},[3728,3733],{"type":18,"tag":403,"props":3729,"children":3730},{},[3731],{"type":37,"value":3732},"NAME",{"type":18,"tag":403,"props":3734,"children":3735},{},[3736],{"type":37,"value":3737},"INFO",{"type":18,"tag":414,"props":3739,"children":3740},{},[3741],{"type":18,"tag":399,"props":3742,"children":3743},{},[3744,3754],{"type":18,"tag":421,"props":3745,"children":3746},{},[3747],{"type":18,"tag":193,"props":3748,"children":3751},{"href":3749,"rel":3750},"https://www.erlang.org/docs/23/man/lists#mapfoldl-3",[197],[3752],{"type":37,"value":3753},"lists:map/2",{"type":18,"tag":421,"props":3755,"children":3756},{},[3757],{"type":37,"value":3758},"对列表中的元素求和并同时对其进行双精度运算",{"type":18,"tag":40,"props":3760,"children":3761},{},[3762],{"type":37,"value":3763},"下面的 code 涵盖了高阶函数、匿名函数以及函数引用，类似于这样的效果：",{"type":18,"tag":263,"props":3765,"children":3767},{"code":3766},"+----------------------+             +----------------------+          +----------------------+\n|    (lists:map/2)     \u003C-----+       |   (fun(X) -> ...)    |          |   (fun Module:F/A)   |\n|         HOF          |     +-------|  anonymous function  |          |  function reference  |\n+----------------------+             +----------------------+          +----------------------+\n           ^                                     ^                                 ^           \nReceive the function                 Provisional |                      Point to an existing   \nas a parameter                       definition  |                      function               \n           |                                     |                                 |           \n           |                                     |                                 |           \n           |                                     |                                 |           \n           |                                     |                                 |           \n+----------------------+             +----------------------+          +----------------------+\n|     [1,2,3,4,5]      |             |     (X*2, X*X……)     |          |  (string:to_upper)   |\n|      data list       |             |  logical processing  |          | Reuse existing logic |\n+----------------------+             +----------------------+          +----------------------+\n\n-module(main).\n-export([start/0]).\n\nstart() ->\n    % 例子1: 将列表中的每个数字乘以2\n    Numbers = [1, 2, 3, 4, 5],\n    Doubled = lists:map(fun(X) -> X * 2 end, Numbers),\n    io:format(\"source: ~p~n\", [Numbers]),\n    io:format(\"1 Doubled: ~p~n\", [Doubled]),\n\n    % 例子2: 将字符串列表转换为大写\n    Words = [\"hello\", \"world\", \"erlang\"],\n    Uppercase = lists:map(fun string:to_upper/1, Words),\n    io:format(\"Source: ~p~n\", [Words]),\n    io:format(\"2 Uppercase: ~p~n\", [Uppercase]),\n\n    % 例子3: 计算每个数字的平方\n    Squares = lists:map(fun(X) -> X * X end, Numbers),\n    io:format(\"3 Squares: ~p~n\", [Squares]),\n\n    % 例子4: 使用自定义函数\n    ProcessedList = lists:map(fun process_element/1, Numbers),\n    io:format(\"4 ProcessedList: ~p~n\", [ProcessedList]),\n\n    % 例子5: 处理元组列表\n    People = [{tom, 25}, {alice, 30}, {bob, 35}],\n    Ages = lists:map(fun({_Name, Age}) -> Age end, People),\n    io:format(\"4 age: ~p~n\", [Ages]).\n\n% 模式匹配\nprocess_element(X) when X > 3 ->\n    {big, X};\nprocess_element(X) ->\n    {small, X}.\n",[3768],{"type":18,"tag":268,"props":3769,"children":3770},{"__ignoreMap":8},[3771],{"type":37,"value":3766},{"type":18,"tag":40,"props":3773,"children":3774},{},[3775,3777,3783],{"type":37,"value":3776},"erlang 是用函数式风格（无状态、纯函数、高阶函数）处理数据，不过也可以通过 ",{"type":18,"tag":268,"props":3778,"children":3780},{"className":3779},[],[3781],{"type":37,"value":3782},"Process",{"type":37,"value":3784}," 写成类似面向对象的风格。如果是 OOP 风格，那么就会有封装的感觉。",{"type":18,"tag":71,"props":3786,"children":3787},{},[],{"type":18,"tag":32,"props":3789,"children":3791},{"id":3790},"ruby-1",[3792],{"type":37,"value":3793},"Ruby 1",{"type":18,"tag":27,"props":3795,"children":3797},{":t":3796},"01 Ruby",[],{"type":18,"tag":40,"props":3799,"children":3800},{},[3801],{"type":37,"value":3802},"作者将 Ruby 列入本书的理由是：",{"type":18,"tag":116,"props":3804,"children":3805},{},[3806],{"type":18,"tag":40,"props":3807,"children":3808},{},[3809],{"type":37,"value":3810},"这是一种面向对象的语言，以易用性和可读性著称。我曾短暂考虑不包括任何面向对象语言，但后来发现将不同编程范式与 OOP（面向对象编程）比较是很有价值的，所以至少包括一种 OOP 语言很重要。\n在这本书中，我深入探讨了 Ruby 的元编程，展示了如何扩展其语法，我对最终的结果非常满意。",{"type":18,"tag":1504,"props":3812,"children":3813},{},[],{"type":18,"tag":116,"props":3815,"children":3816},{"type":2162},[3817],{"type":18,"tag":40,"props":3818,"children":3819},{},[3820],{"type":37,"value":3821},"每种语言都有他的特性和独特的点",{"type":18,"tag":40,"props":3823,"children":3824},{},[3825],{"type":37,"value":3826},"作者以 Java 和 Visual Basic 、Ruby 描述成一个性格：",{"type":37,"value":3828},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":3830,"children":3831},{},[3832,3848],{"type":18,"tag":395,"props":3833,"children":3834},{},[3835],{"type":18,"tag":399,"props":3836,"children":3837},{},[3838,3843],{"type":18,"tag":403,"props":3839,"children":3840},{},[3841],{"type":37,"value":3842},"语言",{"type":18,"tag":403,"props":3844,"children":3845},{},[3846],{"type":37,"value":3847},"性格",{"type":18,"tag":414,"props":3849,"children":3850},{},[3851,3864,3877,3889],{"type":18,"tag":399,"props":3852,"children":3853},{},[3854,3859],{"type":18,"tag":421,"props":3855,"children":3856},{},[3857],{"type":37,"value":3858},"java",{"type":18,"tag":421,"props":3860,"children":3861},{},[3862],{"type":37,"value":3863},"像一个富有的律师哥哥。年轻时很有趣，但现在成了一个 “黑洞”，吸走周围一切乐趣。",{"type":18,"tag":399,"props":3865,"children":3866},{},[3867,3872],{"type":18,"tag":421,"props":3868,"children":3869},{},[3870],{"type":37,"value":3871},"Visual Basic",{"type":18,"tag":421,"props":3873,"children":3874},{},[3875],{"type":37,"value":3876},"像一个染着漂白金发的美容师。她可能解决不了全球变暖，但总能给你理个好发型，而且与她聊天总是特别愉快。",{"type":18,"tag":399,"props":3878,"children":3879},{},[3880,3884],{"type":18,"tag":421,"props":3881,"children":3882},{},[3883],{"type":37,"value":438},{"type":18,"tag":421,"props":3885,"children":3886},{},[3887],{"type":37,"value":3888},"她有点古怪，总是优雅美丽，略显神秘，还充满魔力。",{"type":18,"tag":399,"props":3890,"children":3891},{},[3892,3897],{"type":18,"tag":421,"props":3893,"children":3894},{},[3895],{"type":37,"value":3896},"C 语言家族",{"type":18,"tag":421,"props":3898,"children":3899},{},[3900],{"type":37,"value":3901},"严苛高效但毫无乐趣，就像每天晚上要喝一口鱼肝油的日子。",{"type":18,"tag":40,"props":3903,"children":3904},{},[3905],{"type":37,"value":3906},"Ruby 虽然这个保姆也是要督促你喝鱼肝油，但她会加一颗糖奖励你。通过增添趣味和激励热情，让家庭更高效。 引出了 Ruby 的哲学：",{"type":18,"tag":1086,"props":3908,"children":3909},{},[3910,3915],{"type":18,"tag":189,"props":3911,"children":3912},{},[3913],{"type":37,"value":3914},"C 家族的目标是让机器运行得更高效，因此对底层细节的掌控更严格，但对程序员的友好度较低。",{"type":18,"tag":189,"props":3916,"children":3917},{},[3918],{"type":37,"value":3919},"Ruby 的目标是让开发者工作得更高效，它更注重开发体验和代码的可读性，使编程变得更愉快、更直观。",{"type":18,"tag":40,"props":3921,"children":3922},{},[3923],{"type":37,"value":3924},"当我们了解完面向对象的时候，反过头来再看 Ruby 的 Code",{"type":18,"tag":263,"props":3926,"children":3928},{"code":3927},"properties = ['object oriented', 'duck typed', 'productive', 'fun']\nproperties.each { |property| puts \"Ruby is #{property}.\" }\n\n---\n\nRuby is object oriented.\nRuby is duck typed.\nRuby is productive.\nRuby is fun.\n",[3929],{"type":18,"tag":268,"props":3930,"children":3931},{"__ignoreMap":8},[3932],{"type":37,"value":3927},{"type":18,"tag":40,"props":3934,"children":3935},{},[3936],{"type":37,"value":3937},"莫名的有些简洁，凸显了语法糖的魅力，确实让 Ruby 的语法糖让代码书写更加简洁优雅，减少冗余，提升可读性。例如代码块的使用使集合操作变得直观高效。",{"type":18,"tag":71,"props":3939,"children":3940},{},[],{"type":18,"tag":165,"props":3942,"children":3944},{"id":3943},"与-matz-的访谈-1",[3945],{"type":37,"value":3946},"与 Matz 的访谈 1",{"type":18,"tag":27,"props":3948,"children":3950},{":t":3949,"type":311},"采访 Yukihiro (Matz) Matsumoto",[],{"type":18,"tag":40,"props":3952,"children":3953},{},[3954],{"type":37,"value":3955},"作者来到了 Matz 的家乡采访到了 Matz（真的能在家乡碰到 Matz 吗？)",{"type":18,"tag":40,"props":3957,"children":3958},{},[3959],{"type":18,"tag":747,"props":3960,"children":3961},{},[3962],{"type":37,"value":3963},"为什么开发 Ruby？",{"type":18,"tag":40,"props":3965,"children":3966},{},[3967],{"type":37,"value":3968},"我从接触计算机开始就对编程语言产生了兴趣。它们不仅是编程的工具，还能拓展我们的思维方式。很长一段时间，我把研究编程语言当作一种爱好。我实现过几个玩具语言，但都不是真正的语言。",{"type":18,"tag":40,"props":3970,"children":3971},{},[3972],{"type":37,"value":3973},"到了 1993 年，我接触到 Perl，受到了启发。我觉得如果能将 Lisp、Smalltalk 和 Perl 的特点结合到一个面向对象的语言中，这会是一种极大提高生产力的工具。因此，我开始开发这种语言，并将其命名为 Ruby。",{"type":18,"tag":40,"props":3975,"children":3976},{},[3977],{"type":37,"value":3978},"最初这只是一个爱好，为了让自己开心。没想到其他程序员竟然也喜欢上这门语言以及背后的设计理念，结果它比我预期的受欢迎得多。",{"type":18,"tag":40,"props":3980,"children":3981},{},[3982],{"type":18,"tag":747,"props":3983,"children":3984},{},[3985],{"type":37,"value":3986},"最喜欢 Ruby 的哪一点？",{"type":18,"tag":40,"props":3988,"children":3989},{},[3990],{"type":37,"value":3991},"我喜欢它让编程变得愉快。就技术而言，我最喜欢的是 代码块（blocks）。它们是被驯化的高阶函数，打开了构建 DSL（领域特定语言）以及其他功能的可能性。",{"type":18,"tag":40,"props":3993,"children":3994},{},[3995],{"type":18,"tag":747,"props":3996,"children":3997},{},[3998],{"type":37,"value":3999},"如果能回到过去，有什么想改的？",{"type":18,"tag":40,"props":4001,"children":4002},{},[4003],{"type":37,"value":4004},"我会移除线程，加入更高级的并发模型，比如 actors（角色）或其他机制。",{"type":18,"tag":1086,"props":4006,"children":4007},{},[4008],{"type":18,"tag":189,"props":4009,"children":4010},{},[4011],{"type":37,"value":4012},"Ruby 的线程模型一直被批评为不够现代化。Matz 自己也提到，如果重新设计 Ruby，他会选择更先进的并发模型（如 Actor 模式），来应对并发编程的复杂性。",{"type":18,"tag":71,"props":4014,"children":4015},{},[],{"type":18,"tag":165,"props":4017,"children":4019},{"id":4018},"语言的基础概括-1",[4020],{"type":37,"value":4021},"语言的基础概括 1",{"type":18,"tag":27,"props":4023,"children":4025},{":t":4024},"语言的基础概括",[],{"type":18,"tag":40,"props":4027,"children":4028},{},[4029,4031,4036],{"type":37,"value":4030},"接触一个语言时，要了解该语言的 ",{"type":18,"tag":747,"props":4032,"children":4033},{},[4034],{"type":37,"value":4035},"核心编程模型、它如何处理数据类型？",{"type":37,"value":4037},"。也就将一个语言概括了两个问题，即：",{"type":18,"tag":185,"props":4039,"children":4040},{},[4041,4046],{"type":18,"tag":189,"props":4042,"children":4043},{},[4044],{"type":37,"value":4045},"这门语言的设计理念是什么？是面向对象、函数式还是其他编程范式？",{"type":18,"tag":189,"props":4047,"children":4048},{},[4049],{"type":37,"value":4050},"Ruby 是动态类型语言，它如何简化类型的使用？它怎么就高效了？",{"type":18,"tag":40,"props":4052,"children":4053},{},[4054],{"type":37,"value":4055},"但是 2025 年这个较为浮躁的环境，我可能还会加一个：",{"type":18,"tag":185,"props":4057,"children":4059},{"start":4058},3,[4060],{"type":18,"tag":189,"props":4061,"children":4062},{},[4063],{"type":37,"value":4064},"这个语言的生态系统怎么样？能否轻松的实现我想要的功能？有没有比较活跃的库、插件维护社区？",{"type":18,"tag":40,"props":4066,"children":4067},{},[4068],{"type":37,"value":4069},"但是对于一些第三点不足的来说，可能是一个机会，但还是要看运气。万一人家自己都放弃不维护了，那作为生态开发者，又该如何应对？有时候这种事情是相互成就的。使用该语言的人数越多，那么生态就越完善，生态维护者也能享受到一定的开源声誉。",{"type":18,"tag":4071,"props":4072,"children":4074},"h3",{"id":4073},"解释型与编译型-1",[4075],{"type":37,"value":4076},"解释型与编译型 1",{"type":18,"tag":27,"props":4078,"children":4080},{":t":4079,"type":311},"解释型与编译型语言的区别",[],{"type":18,"tag":40,"props":4082,"children":4083},{},[4084],{"type":37,"value":4085},"这里引出了两个概念，解释型语言和编译型语言的区别：",{"type":37,"value":1577},{"type":18,"tag":391,"props":4088,"children":4089},{},[4090,4111],{"type":18,"tag":395,"props":4091,"children":4092},{},[4093],{"type":18,"tag":399,"props":4094,"children":4095},{},[4096,4101,4106],{"type":18,"tag":403,"props":4097,"children":4098},{},[4099],{"type":37,"value":4100},"特性",{"type":18,"tag":403,"props":4102,"children":4103},{},[4104],{"type":37,"value":4105},"解释执行（Interpreted）",{"type":18,"tag":403,"props":4107,"children":4108},{},[4109],{"type":37,"value":4110},"编译执行（Compiled）",{"type":18,"tag":414,"props":4112,"children":4113},{},[4114,4132,4150,4168,4186],{"type":18,"tag":399,"props":4115,"children":4116},{},[4117,4122,4127],{"type":18,"tag":421,"props":4118,"children":4119},{},[4120],{"type":37,"value":4121},"源代码处理方式",{"type":18,"tag":421,"props":4123,"children":4124},{},[4125],{"type":37,"value":4126},"逐行解释，实时执行",{"type":18,"tag":421,"props":4128,"children":4129},{},[4130],{"type":37,"value":4131},"编译一次生成机器代码，后续执行直接运行",{"type":18,"tag":399,"props":4133,"children":4134},{},[4135,4140,4145],{"type":18,"tag":421,"props":4136,"children":4137},{},[4138],{"type":37,"value":4139},"执行速度",{"type":18,"tag":421,"props":4141,"children":4142},{},[4143],{"type":37,"value":4144},"较慢",{"type":18,"tag":421,"props":4146,"children":4147},{},[4148],{"type":37,"value":4149},"较快",{"type":18,"tag":399,"props":4151,"children":4152},{},[4153,4158,4163],{"type":18,"tag":421,"props":4154,"children":4155},{},[4156],{"type":37,"value":4157},"调试与修改",{"type":18,"tag":421,"props":4159,"children":4160},{},[4161],{"type":37,"value":4162},"简单，修改后可立即看到效果",{"type":18,"tag":421,"props":4164,"children":4165},{},[4166],{"type":37,"value":4167},"需要重新编译，调试较为复杂",{"type":18,"tag":399,"props":4169,"children":4170},{},[4171,4176,4181],{"type":18,"tag":421,"props":4172,"children":4173},{},[4174],{"type":37,"value":4175},"生成的文件",{"type":18,"tag":421,"props":4177,"children":4178},{},[4179],{"type":37,"value":4180},"无需生成可执行文件，直接运行源代码",{"type":18,"tag":421,"props":4182,"children":4183},{},[4184],{"type":37,"value":4185},"生成独立的可执行文件",{"type":18,"tag":399,"props":4187,"children":4188},{},[4189,4194,4199],{"type":18,"tag":421,"props":4190,"children":4191},{},[4192],{"type":37,"value":4193},"适用场景",{"type":18,"tag":421,"props":4195,"children":4196},{},[4197],{"type":37,"value":4198},"快速开发、脚本语言、教学和原型开发",{"type":18,"tag":421,"props":4200,"children":4201},{},[4202],{"type":37,"value":4203},"需要高性能的系统开发和大型应用开发",{"type":18,"tag":40,"props":4205,"children":4206},{},[4207],{"type":37,"value":4208},"看到这你可能就会问了，有没有一种语言支持解释型和编译型同时存在的？以下是比较有代表性的，同时支持解释执行和编译执行的语言：",{"type":37,"value":1577},{"type":18,"tag":391,"props":4211,"children":4212},{},[4213,4233],{"type":18,"tag":395,"props":4214,"children":4215},{},[4216],{"type":18,"tag":399,"props":4217,"children":4218},{},[4219,4223,4228],{"type":18,"tag":403,"props":4220,"children":4221},{},[4222],{"type":37,"value":3842},{"type":18,"tag":403,"props":4224,"children":4225},{},[4226],{"type":37,"value":4227},"编译执行",{"type":18,"tag":403,"props":4229,"children":4230},{},[4231],{"type":37,"value":4232},"解释执行",{"type":18,"tag":414,"props":4234,"children":4235},{},[4236,4253,4270,4287,4305],{"type":18,"tag":399,"props":4237,"children":4238},{},[4239,4243,4248],{"type":18,"tag":421,"props":4240,"children":4241},{},[4242],{"type":37,"value":443},{"type":18,"tag":421,"props":4244,"children":4245},{},[4246],{"type":37,"value":4247},"编译成字节码 (.class)，由 JVM 执行",{"type":18,"tag":421,"props":4249,"children":4250},{},[4251],{"type":37,"value":4252},"通过 JVM 解释字节码或 JIT 编译成机器码",{"type":18,"tag":399,"props":4254,"children":4255},{},[4256,4260,4265],{"type":18,"tag":421,"props":4257,"children":4258},{},[4259],{"type":37,"value":425},{"type":18,"tag":421,"props":4261,"children":4262},{},[4263],{"type":37,"value":4264},"编译成字节码 (.pyc)，通过 JIT 优化",{"type":18,"tag":421,"props":4266,"children":4267},{},[4268],{"type":37,"value":4269},"解释执行字节码，或通过 JIT 转换为机器码",{"type":18,"tag":399,"props":4271,"children":4272},{},[4273,4277,4282],{"type":18,"tag":421,"props":4274,"children":4275},{},[4276],{"type":37,"value":451},{"type":18,"tag":421,"props":4278,"children":4279},{},[4280],{"type":37,"value":4281},"编译成字节码，V8 引擎执行",{"type":18,"tag":421,"props":4283,"children":4284},{},[4285],{"type":37,"value":4286},"解释执行字节码，或 JIT 优化热代码",{"type":18,"tag":399,"props":4288,"children":4289},{},[4290,4295,4300],{"type":18,"tag":421,"props":4291,"children":4292},{},[4293],{"type":37,"value":4294},"C#",{"type":18,"tag":421,"props":4296,"children":4297},{},[4298],{"type":37,"value":4299},"编译成中间语言 (IL)，由 CLR 执行",{"type":18,"tag":421,"props":4301,"children":4302},{},[4303],{"type":37,"value":4304},"CLR 将 IL 转换为机器码并执行（JIT）",{"type":18,"tag":399,"props":4306,"children":4307},{},[4308,4312,4317],{"type":18,"tag":421,"props":4309,"children":4310},{},[4311],{"type":37,"value":438},{"type":18,"tag":421,"props":4313,"children":4314},{},[4315],{"type":37,"value":4316},"编译成字节码",{"type":18,"tag":421,"props":4318,"children":4319},{},[4320],{"type":37,"value":4321},"由解释器执行字节码，或通过 JIT 优化",{"type":18,"tag":4323,"props":4324,"children":4326},"h4",{"id":4325},"混合模式常见漏洞-2",[4327],{"type":37,"value":4328},"混合模式常见漏洞 2",{"type":18,"tag":27,"props":4330,"children":4332},{":t":4331,"type":311},"混合模式常见漏洞",[],{"type":18,"tag":40,"props":4334,"children":4335},{},[4336],{"type":37,"value":4337},"这种混合模式下也会存在一些缺点，比如性能、 安全性的问题。比如针对即时编译(JIT,Just-in-time compilation) 存在的几个具有代表性的 CVE 编号：",{"type":18,"tag":185,"props":4339,"children":4340},{},[4341,4382,4420,4458,4495],{"type":18,"tag":189,"props":4342,"children":4343},{},[4344,4349],{"type":18,"tag":747,"props":4345,"children":4346},{},[4347],{"type":37,"value":4348},"CVE-2019-5786 - V8 JIT 编译器漏洞",{"type":18,"tag":1086,"props":4350,"children":4351},{},[4352,4362,4372],{"type":18,"tag":189,"props":4353,"children":4354},{},[4355,4360],{"type":18,"tag":747,"props":4356,"children":4357},{},[4358],{"type":37,"value":4359},"影响",{"type":37,"value":4361},"：Google Chrome",{"type":18,"tag":189,"props":4363,"children":4364},{},[4365,4370],{"type":18,"tag":747,"props":4366,"children":4367},{},[4368],{"type":37,"value":4369},"描述",{"type":37,"value":4371},"：V8 引擎的 JIT 编译器漏洞，攻击者通过恶意 JavaScript 代码可能导致内存损坏，执行任意代码。",{"type":18,"tag":189,"props":4373,"children":4374},{},[4375,4380],{"type":18,"tag":747,"props":4376,"children":4377},{},[4378],{"type":37,"value":4379},"修复",{"type":37,"value":4381},"：Google 发布补丁更新 V8 引擎。",{"type":18,"tag":189,"props":4383,"children":4384},{},[4385,4390],{"type":18,"tag":747,"props":4386,"children":4387},{},[4388],{"type":37,"value":4389},"CVE-2020-11008 - JScript 和 VBScript 引擎漏洞",{"type":18,"tag":1086,"props":4391,"children":4392},{},[4393,4402,4411],{"type":18,"tag":189,"props":4394,"children":4395},{},[4396,4400],{"type":18,"tag":747,"props":4397,"children":4398},{},[4399],{"type":37,"value":4359},{"type":37,"value":4401},"：Microsoft Edge, Internet Explorer",{"type":18,"tag":189,"props":4403,"children":4404},{},[4405,4409],{"type":18,"tag":747,"props":4406,"children":4407},{},[4408],{"type":37,"value":4369},{"type":37,"value":4410},"：通过构造恶意网页，攻击者可触发 JIT 编译器内存损坏，执行任意代码。",{"type":18,"tag":189,"props":4412,"children":4413},{},[4414,4418],{"type":18,"tag":747,"props":4415,"children":4416},{},[4417],{"type":37,"value":4379},{"type":37,"value":4419},"：Microsoft 发布安全更新。",{"type":18,"tag":189,"props":4421,"children":4422},{},[4423,4428],{"type":18,"tag":747,"props":4424,"children":4425},{},[4426],{"type":37,"value":4427},"CVE-2018-5292 - Firefox JIT 编译器漏洞",{"type":18,"tag":1086,"props":4429,"children":4430},{},[4431,4440,4449],{"type":18,"tag":189,"props":4432,"children":4433},{},[4434,4438],{"type":18,"tag":747,"props":4435,"children":4436},{},[4437],{"type":37,"value":4359},{"type":37,"value":4439},"：Mozilla Firefox",{"type":18,"tag":189,"props":4441,"children":4442},{},[4443,4447],{"type":18,"tag":747,"props":4444,"children":4445},{},[4446],{"type":37,"value":4369},{"type":37,"value":4448},"：Firefox 的 JIT 编译器漏洞，允许攻击者通过恶意网页导致内存访问错误，执行恶意代码。",{"type":18,"tag":189,"props":4450,"children":4451},{},[4452,4456],{"type":18,"tag":747,"props":4453,"children":4454},{},[4455],{"type":37,"value":4379},{"type":37,"value":4457},"：Mozilla 发布修复补丁。",{"type":18,"tag":189,"props":4459,"children":4460},{},[4461,4466],{"type":18,"tag":747,"props":4462,"children":4463},{},[4464],{"type":37,"value":4465},"CVE-2017-0199 - Microsoft Office JIT 漏洞",{"type":18,"tag":1086,"props":4467,"children":4468},{},[4469,4478,4487],{"type":18,"tag":189,"props":4470,"children":4471},{},[4472,4476],{"type":18,"tag":747,"props":4473,"children":4474},{},[4475],{"type":37,"value":4359},{"type":37,"value":4477},"：Microsoft Office",{"type":18,"tag":189,"props":4479,"children":4480},{},[4481,4485],{"type":18,"tag":747,"props":4482,"children":4483},{},[4484],{"type":37,"value":4369},{"type":37,"value":4486},"：通过恶意 Office 文件，攻击者利用 JIT 漏洞执行任意代码。",{"type":18,"tag":189,"props":4488,"children":4489},{},[4490,4494],{"type":18,"tag":747,"props":4491,"children":4492},{},[4493],{"type":37,"value":4379},{"type":37,"value":4419},{"type":18,"tag":189,"props":4496,"children":4497},{},[4498,4503],{"type":18,"tag":747,"props":4499,"children":4500},{},[4501],{"type":37,"value":4502},"CVE-2015-5167 - JIT 编译中的整数溢出漏洞",{"type":18,"tag":1086,"props":4504,"children":4505},{},[4506,4515,4524],{"type":18,"tag":189,"props":4507,"children":4508},{},[4509,4513],{"type":18,"tag":747,"props":4510,"children":4511},{},[4512],{"type":37,"value":4359},{"type":37,"value":4514},"：Apple WebKit",{"type":18,"tag":189,"props":4516,"children":4517},{},[4518,4522],{"type":18,"tag":747,"props":4519,"children":4520},{},[4521],{"type":37,"value":4369},{"type":37,"value":4523},"：WebKit 的 JIT 编译器整数溢出漏洞，导致内存损坏，执行恶意代码。",{"type":18,"tag":189,"props":4525,"children":4526},{},[4527,4531],{"type":18,"tag":747,"props":4528,"children":4529},{},[4530],{"type":37,"value":4379},{"type":37,"value":4532},"：Apple 发布修复补丁。",{"type":18,"tag":40,"props":4534,"children":4535},{},[4536],{"type":37,"value":4537},"在 JIT 编译中，常见的攻击手法如 JIT spraying，俗称 JIT 喷射。攻击者通过利用 JIT 编译的特性，向堆中注入恶意数据，从而使堆内存变为可执行的。当攻击者能够控制堆的内容并将代码执行转移到堆内存中时，就可能会发生安全漏洞。通过这种方式，攻击者可以执行任意代码，从而威胁系统的安全性。",{"type":18,"tag":40,"props":4539,"children":4540},{},[4541],{"type":37,"value":4542},"JIT 的工作原理就是源代码或字节码转换为机器代码，并直接在内存中执行，而不是先写入磁盘再执行。虽然提高了工作效率，但由于现代的操作系统存在内存保护的机制，因此会将 JIT 进行标记然后执行，如果内存可 W^X（即可写/可执行内存），那就会从中找到攻击的点进行利用。",{"type":18,"tag":165,"props":4544,"children":4546},{"id":4545},"类型系统-1",[4547],{"type":37,"value":4548},"类型系统 1",{"type":18,"tag":27,"props":4550,"children":4551},{":t":1617,"type":311},[],{"type":18,"tag":40,"props":4553,"children":4554},{},[4555],{"type":37,"value":4556},"作者通过在这一章引出了类型系统的概念，Ruby 的设计哲学。强类型我们都知道，比如以下 code：",{"type":18,"tag":263,"props":4558,"children":4563},{"code":4559,"language":4560,"meta":8,"className":4561},"irb(main):002:0> x = 1 - 1\n=> 0\nirb(main):003:0> x = 1 - 'one'\nTraceback (most recent call last):\n        5: from /usr/bin/irb:23:in `\u003Cmain>'\n        4: from /usr/bin/irb:23:in `load'\n        3: from /Library/Ruby/Gems/2.6.0/gems/irb-1.0.0/exe/irb:11:in `\u003Ctop (required)>'\n        2: from (irb):3\n        1: from (irb):3:in `-'\nTypeError (String can't be coerced into Integer)\n","ruby",[4562],"language-ruby",[4564],{"type":18,"tag":268,"props":4565,"children":4566},{"__ignoreMap":8},[4567],{"type":37,"value":4559},{"type":18,"tag":40,"props":4569,"children":4570},{},[4571],{"type":37,"value":4572},"Ruby 是强类型的，这意味着当类型不匹配时你会得到一个错误。Ruby 会在运行时进行这些类型检查，而不是在编译时。",{"type":18,"tag":4071,"props":4574,"children":4576},{"id":4575},"鸭子类型-1",[4577],{"type":37,"value":4578},"鸭子类型 1",{"type":18,"tag":27,"props":4580,"children":4582},{":t":4581,"type":311},"鸭子类型",[],{"type":18,"tag":40,"props":4584,"children":4585},{},[4586],{"type":37,"value":4587},"鸭子类型的核心就是一个谚语：",{"type":18,"tag":116,"props":4589,"children":4590},{"type":2162},[4591],{"type":18,"tag":40,"props":4592,"children":4593},{},[4594,4599,4600,4603],{"type":18,"tag":747,"props":4595,"children":4596},{},[4597],{"type":37,"value":4598},"如果它看起来像鸭子，游泳像鸭子，叫起来像鸭子，那么它可能是一只鸭子。",{"type":37,"value":2888},{"type":18,"tag":1504,"props":4601,"children":4602},{},[],{"type":37,"value":4604},"\nIf it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.",{"type":18,"tag":40,"props":4606,"children":4607},{},[4608],{"type":37,"value":4609},"鸭子类型源自于溯因推理，也被称之为反向推理，它是开始于事实的集合，并推导出其最佳解释的推理过程。我们同样可以将那个谚语扩充以下到 WAF 中：",{"type":18,"tag":116,"props":4611,"children":4612},{},[4613],{"type":18,"tag":40,"props":4614,"children":4615},{},[4616],{"type":37,"value":4617},"如果这个用户的请求头看起来很神秘，操作也很凌乱，经常请求些隐秘数据，那么他一定不怀好意",{"type":18,"tag":263,"props":4619,"children":4622},{"code":4620,"language":4560,"meta":8,"className":4621},">> i = 0\n=> 0.0\n>> a = ['100', 100.0]\n=> ['100', 100.0]\n>> while i \u003C 2\n>> puts a[i].to_i\n>> i = i + 1\n>> end\n100\n100\n",[4562],[4623],{"type":18,"tag":268,"props":4624,"children":4625},{"__ignoreMap":8},[4626],{"type":37,"value":4620},{"type":18,"tag":40,"props":4628,"children":4629},{},[4630,4632,4638,4640,4646],{"type":37,"value":4631},"上面 code 中， ",{"type":18,"tag":268,"props":4633,"children":4635},{"className":4634},[],[4636],{"type":37,"value":4637},"'100'",{"type":37,"value":4639}," 是字符串，而 ",{"type":18,"tag":268,"props":4641,"children":4643},{"className":4642},[],[4644],{"type":37,"value":4645},"100.0",{"type":37,"value":4647}," 是浮点数，但在 ruby 运行时来看，100.0 是 100,‘100' 也是 100 所以这是鸭子类型的应用效果。",{"type":18,"tag":27,"props":4649,"children":4651},{"t":4650,"type":311},"猴子补丁",[],{"type":18,"tag":165,"props":4653,"children":4655},{"id":4654},"猴子补丁-1",[4656],{"type":37,"value":4657},"猴子补丁 1",{"type":18,"tag":40,"props":4659,"children":4660},{},[4661,4663,4670],{"type":37,"value":4662},"在 Ruby 中，开放类(Open classes) 被叫作",{"type":18,"tag":193,"props":4664,"children":4667},{"href":4665,"rel":4666},"https://en.wikipedia.org/wiki/Monkey_patch#:~:text=In%20computer%20programming%2C%20monkey%20patching,altering%20the%20original%20source%20code.",[197],[4668],{"type":37,"value":4669},"猴子补丁(Monkey Patch)",{"type":37,"value":4671},"。指的是通过动态修改现有的类或模块来增加、修改或替换它们的功能。这种做法使得原本不支持某些功能的类能够在运行时被修改，从而增加新的行为。",{"type":18,"tag":40,"props":4673,"children":4674},{},[4675,4677,4684],{"type":37,"value":4676},"虽然这种做法可以作为元编程的特性，但也有一些安全问题，演变成为了一种攻击手法。例如 ",{"type":18,"tag":193,"props":4678,"children":4681},{"href":4679,"rel":4680},"https://access.redhat.com/security/cve/CVE-2024-21896",[197],[4682],{"type":37,"value":4683},"CVE-2024-21896",{"type":37,"value":4685}," 通过猴子补丁修改 Buffer 内部实现，导致路径遍历漏洞的问题。",{"type":18,"tag":71,"props":4687,"children":4688},{},[],{"type":18,"tag":32,"props":4690,"children":4692},{"id":4691},"io-lang-1",[4693],{"type":37,"value":4694},"Io Lang 1",{"type":18,"tag":27,"props":4696,"children":4698},{":t":4697},"Io Lang",[],{"type":18,"tag":40,"props":4700,"children":4701},{},[4702],{"type":37,"value":4703},"第一次看到 IO 还有点意外，我联想到了 I/O、甚至是 CS 很火的信息学奥林匹克竞赛（英语：Olympiad in Informatics，简称：OI）后者让我有联想的是太多互联网很社会参加这个比赛了，看到初中高中的大放异彩很难不觉得自己是个废物的实事。这些大佬参加 IO 后还会去打 CTF，然后刷 hackthebox、以及各种靶场。当然像我这样的只能提交个签到题，虽然不知现在签到题难度如何。",{"type":18,"tag":40,"props":4705,"children":4706},{},[4707,4709,4716],{"type":37,"value":4708},"在我 15 岁的时候接触到了一点，做了个签到题没想到还会记录至今。",{"type":18,"tag":193,"props":4710,"children":4713},{"href":4711,"rel":4712},"https://ctftime.org/team/87624",[197],[4714],{"type":37,"value":4715},"Real World CTF 2019 Quals",{"type":37,"value":4717},"。没想到现在长亭已经给阿里收购了，不过长亭这个名字挺好听的，最近我还听到了一个名字叫「基调听云」也是很好听，一看就是注册资本没到 1000w 不给注册的那种存在。(有一说一长亭之前的官网有点 low，现在虽然慢慢变帅了，但是移动端有点小问题，不过不是我样的 loser 能评价的)",{"type":18,"tag":40,"props":4719,"children":4720},{},[4721],{"type":37,"value":4722},"我了解过 IO 的历史，根据维基百科的介绍：",{"type":18,"tag":116,"props":4724,"children":4725},{},[4726],{"type":18,"tag":40,"props":4727,"children":4728},{},[4729],{"type":37,"value":4730},"该语言由 Steve Dekorte 于 2002 年创建，当时他试图用他的语言 Cel 来帮助朋友 Dru Nelson。他发现自己确实不太了解语言的工作原理，并开始编写一种小型语言来更好地理解问题。",{"type":18,"tag":40,"props":4732,"children":4733},{},[4734,4736,4743],{"type":37,"value":4735},"看到这时我开始深深反思为什么我没有一个为了教会我语言而去编写一个语言的好朋友。如果要在线体验 Io lang 可以使用 ",{"type":18,"tag":193,"props":4737,"children":4740},{"href":4738,"rel":4739},"https://tio.run/",[197],[4741],{"type":37,"value":4742},"Tio.run",{"type":37,"value":4744}," （看 Io lang 的 Twitter 发现的好用工具）",{"type":18,"tag":71,"props":4746,"children":4747},{},[],{"type":18,"tag":165,"props":4749,"children":4751},{"id":4750},"对象原型和继承-2",[4752],{"type":37,"value":4753},"对象、原型和继承 2",{"type":18,"tag":27,"props":4755,"children":4757},{":t":4756},"对象、原型和继承",[],{"type":18,"tag":40,"props":4759,"children":4760},{},[4761],{"type":37,"value":4762},"Io lang 可以更好的理解对象、原型以及继承，因为他是基于原型的面向对象语言:",{"type":18,"tag":263,"props":4764,"children":4766},{"code":4765},"   +----------------+                                   \n   |                |                                   \n+->|     object     |                                   \n|  |                |                                   \n|  +----------------+                                   \n|                                                       \n|  +----------------+                                   \n|  |                |                                   \n+->|    Vehicle     |                                   \n|  |     +----------+----------------------------------+\n|  +-----+Prototype: Object                            |\n|        +---------------------------------------------+\n|        |Description: Something to take you far away  |\n|        +---------------------------------------------+\n|                                                       \n|  +----------------+                                   \n|  |                |                                   \n+->|      Car       |                                   \n|  |     +----------+----------------------------------+\n|  +-----+Prototype: Vehicle                           |\n|        +---------------------------------------------+\n|                                                       \n|  +----------------+                                   \n|  |                |                                   \n+--|    Ferrari     |                                   \n   |     +----------+----------------------------------+\n   +-----+Prototype: Car                               |\n         +---------------------------------------------+\n\n\n// 创建一个基础原型对象 Object\nObject := Object clone\n\n// 创建 Vehicle 原型，继承自 Object\nVehicle := Object clone\n\n// 给 Vehicle 添加一个描述属性\nVehicle description := \"Something to take you far away\"\n\n// 创建 Car 原型，继承自 Vehicle\nCar := Vehicle clone\n\n// 给 Car 添加属性\nCar description := \"A fast car\"\n\n// 创建 Ferrari 原型，继承自 Car\nFerrari := Car clone\n\n// 给 Ferrari 添加新的属性\nFerrari description := \"A Ferrari, a dream car\"\n\n// 测试创建的对象\n\n// 访问 Ferrari 的描述属性，应该返回 Ferrari 的描述\nFerrari description print  // 输出: A Ferrari, a dream car\n\n// 访问 Car 的描述属性，应该返回 Car 的描述\nCar description print      // 输出: A fast car\n\n// 访问 Vehicle 的描述属性，应该返回 Vehicle 的描述\nVehicle description print  // 输出: Something to take you far away\n",[4767],{"type":18,"tag":268,"props":4768,"children":4769},{"__ignoreMap":8},[4770],{"type":37,"value":4765},{"type":18,"tag":40,"props":4772,"children":4773},{},[4774],{"type":37,"value":4775},"这张图表示了对象的构成，描述一个对象，也就是面向对象（当然我是从书上偷的，因为我觉得这张图确实很简洁明了。）说实话我并不是很喜欢这个写法，太多继承了。",{"type":18,"tag":40,"props":4777,"children":4778},{},[4779,4781,4786],{"type":37,"value":4780},"如果是原型继承（Prototype Inheritance）的语言，他们的特性之一就是 ",{"type":18,"tag":747,"props":4782,"children":4783},{},[4784],{"type":37,"value":4785},"动态修改",{"type":37,"value":4787},":",{"type":18,"tag":263,"props":4789,"children":4791},{"code":4790},"io lang\n---\nduck := Object clone\nduck name := \"Duck\"\nduck speak := method(\"quack\" println)\n\n# 动态修改 slot\nduck walk := method(\"waddle\" println)\nduck speak  # 输出：quack\nduck walk   # 输出：waddle\n\njavascript\n---\n\n// 创建一个对象\nconst duck = {\n  name: \"Duck\",\n  speak: function () {\n    console.log(\"quack\");\n  }\n};\n\n// 动态添加或修改方法\nduck.walk = function () {\n  console.log(\"waddle\");\n};\n\n// 调用方法\nduck.speak(); // 输出：quack\nduck.walk();  // 输出：waddle\n",[4792],{"type":18,"tag":268,"props":4793,"children":4794},{"__ignoreMap":8},[4795],{"type":37,"value":4790},{"type":18,"tag":71,"props":4797,"children":4798},{},[],{"type":18,"tag":165,"props":4800,"children":4802},{"id":4801},"方法-1",[4803],{"type":37,"value":4804},"方法 1",{"type":18,"tag":27,"props":4806,"children":4808},{":t":4807},"方法和块",[],{"type":18,"tag":40,"props":4810,"children":4811},{},[4812],{"type":37,"value":4813},"在 Io lang 中，方法也是对象，不过给出了更符合的类型，即 Block：",{"type":18,"tag":263,"props":4815,"children":4817},{"code":4816},"method() type print\n==> Block\n",[4818],{"type":18,"tag":268,"props":4819,"children":4820},{"__ignoreMap":8},[4821],{"type":37,"value":4816},{"type":18,"tag":4071,"props":4823,"children":4825},{"id":4824},"函数-1",[4826],{"type":37,"value":4827},"函数 1",{"type":37,"value":4829},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":4831,"children":4832},{},[4833,4854],{"type":18,"tag":395,"props":4834,"children":4835},{},[4836],{"type":18,"tag":399,"props":4837,"children":4838},{},[4839,4844,4849],{"type":18,"tag":403,"props":4840,"children":4841},{},[4842],{"type":37,"value":4843},"编程语言",{"type":18,"tag":403,"props":4845,"children":4846},{},[4847],{"type":37,"value":4848},"方法是否为对象",{"type":18,"tag":403,"props":4850,"children":4851},{},[4852],{"type":37,"value":4853},"说明",{"type":18,"tag":414,"props":4855,"children":4856},{},[4857,4877,4896,4915,4935,4955],{"type":18,"tag":399,"props":4858,"children":4859},{},[4860,4867,4872],{"type":18,"tag":421,"props":4861,"children":4862},{},[4863],{"type":18,"tag":747,"props":4864,"children":4865},{},[4866],{"type":37,"value":490},{"type":18,"tag":421,"props":4868,"children":4869},{},[4870],{"type":37,"value":4871},"是",{"type":18,"tag":421,"props":4873,"children":4874},{},[4875],{"type":37,"value":4876},"在 Io 中，方法是对象，可以像其他对象一样操作、赋值、传递。",{"type":18,"tag":399,"props":4878,"children":4879},{},[4880,4887,4891],{"type":18,"tag":421,"props":4881,"children":4882},{},[4883],{"type":18,"tag":747,"props":4884,"children":4885},{},[4886],{"type":37,"value":451},{"type":18,"tag":421,"props":4888,"children":4889},{},[4890],{"type":37,"value":4871},{"type":18,"tag":421,"props":4892,"children":4893},{},[4894],{"type":37,"value":4895},"JavaScript 中的函数本质上是对象，可以作为参数传递、存储。",{"type":18,"tag":399,"props":4897,"children":4898},{},[4899,4906,4910],{"type":18,"tag":421,"props":4900,"children":4901},{},[4902],{"type":18,"tag":747,"props":4903,"children":4904},{},[4905],{"type":37,"value":425},{"type":18,"tag":421,"props":4907,"children":4908},{},[4909],{"type":37,"value":4871},{"type":18,"tag":421,"props":4911,"children":4912},{},[4913],{"type":37,"value":4914},"Python 中的函数是对象，可以像其他对象一样操作、传递。",{"type":18,"tag":399,"props":4916,"children":4917},{},[4918,4925,4930],{"type":18,"tag":421,"props":4919,"children":4920},{},[4921],{"type":18,"tag":747,"props":4922,"children":4923},{},[4924],{"type":37,"value":438},{"type":18,"tag":421,"props":4926,"children":4927},{},[4928],{"type":37,"value":4929},"否（但支持块作为对象）",{"type":18,"tag":421,"props":4931,"children":4932},{},[4933],{"type":37,"value":4934},"Ruby 中方法本身不是对象，但可以使用块（block）传递和调用。",{"type":18,"tag":399,"props":4936,"children":4937},{},[4938,4945,4950],{"type":18,"tag":421,"props":4939,"children":4940},{},[4941],{"type":18,"tag":747,"props":4942,"children":4943},{},[4944],{"type":37,"value":443},{"type":18,"tag":421,"props":4946,"children":4947},{},[4948],{"type":37,"value":4949},"否",{"type":18,"tag":421,"props":4951,"children":4952},{},[4953],{"type":37,"value":4954},"Java 中方法不是对象，方法是属于类的。可以使用 Lambda 表达式作为方法的引用，但这些并非对象。",{"type":18,"tag":399,"props":4956,"children":4957},{},[4958,4965,4970],{"type":18,"tag":421,"props":4959,"children":4960},{},[4961],{"type":18,"tag":747,"props":4962,"children":4963},{},[4964],{"type":37,"value":4294},{"type":18,"tag":421,"props":4966,"children":4967},{},[4968],{"type":37,"value":4969},"否（但支持委托作为对象）",{"type":18,"tag":421,"props":4971,"children":4972},{},[4973],{"type":37,"value":4974},"C# 中方法不是对象，但可以使用委托（Delegate）作为方法引用传递和存储。",{"type":18,"tag":40,"props":4976,"children":4977},{},[4978,4980,5112,5114,5120],{"type":37,"value":4979},"我相信看到这肯定会有疑问，函数和数学中的函数有那些共同的作用？比如数学中的函数 ",{"type":18,"tag":4981,"props":4982,"children":4986},"mjx-container",{"className":4983,"jax":4985},[4984],"MathJax","SVG",[4987],{"type":18,"tag":4988,"props":4989,"children":4997},"svg",{"style":4990,"xmlns":4991,"width":4992,"height":4993,"role":22,"focusable":4994,"viewBox":4995,"xmlnsXLink":4996},"vertical-align: -0.566ex;","http://www.w3.org/2000/svg","9.598ex","2.452ex","false","0 -833.9 4242.1 1083.9","http://www.w3.org/1999/xlink",[4998,5033],{"type":18,"tag":4999,"props":5000,"children":5001},"defs",{},[5002,5008,5013,5018,5023,5028],{"type":18,"tag":5003,"props":5004,"children":5007},"path",{"id":5005,"d":5006},"MJX-1-TEX-I-1D453","M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z",[],{"type":18,"tag":5003,"props":5009,"children":5012},{"id":5010,"d":5011},"MJX-1-TEX-N-28","M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",[],{"type":18,"tag":5003,"props":5014,"children":5017},{"id":5015,"d":5016},"MJX-1-TEX-I-1D465","M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",[],{"type":18,"tag":5003,"props":5019,"children":5022},{"id":5020,"d":5021},"MJX-1-TEX-N-29","M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",[],{"type":18,"tag":5003,"props":5024,"children":5027},{"id":5025,"d":5026},"MJX-1-TEX-N-3D","M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",[],{"type":18,"tag":5003,"props":5029,"children":5032},{"id":5030,"d":5031},"MJX-1-TEX-N-32","M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",[],{"type":18,"tag":5034,"props":5035,"children":5039},"g",{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},"currentColor","0","scale(1,-1)",[5040],{"type":18,"tag":5034,"props":5041,"children":5043},{"dataMmlNode":5042},"math",[5044,5054,5064,5073,5082,5091],{"type":18,"tag":5034,"props":5045,"children":5047},{"dataMmlNode":5046},"mi",[5048],{"type":18,"tag":5049,"props":5050,"children":5053},"use",{"dataC":5051,"xLinkHref":5052},"1D453","#MJX-1-TEX-I-1D453",[],{"type":18,"tag":5034,"props":5055,"children":5058},{"dataMmlNode":5056,"transform":5057},"mo","translate(550,0)",[5059],{"type":18,"tag":5049,"props":5060,"children":5063},{"dataC":5061,"xLinkHref":5062},"28","#MJX-1-TEX-N-28",[],{"type":18,"tag":5034,"props":5065,"children":5067},{"dataMmlNode":5046,"transform":5066},"translate(939,0)",[5068],{"type":18,"tag":5049,"props":5069,"children":5072},{"dataC":5070,"xLinkHref":5071},"1D465","#MJX-1-TEX-I-1D465",[],{"type":18,"tag":5034,"props":5074,"children":5076},{"dataMmlNode":5056,"transform":5075},"translate(1511,0)",[5077],{"type":18,"tag":5049,"props":5078,"children":5081},{"dataC":5079,"xLinkHref":5080},"29","#MJX-1-TEX-N-29",[],{"type":18,"tag":5034,"props":5083,"children":5085},{"dataMmlNode":5056,"transform":5084},"translate(2177.8,0)",[5086],{"type":18,"tag":5049,"props":5087,"children":5090},{"dataC":5088,"xLinkHref":5089},"3D","#MJX-1-TEX-N-3D",[],{"type":18,"tag":5034,"props":5092,"children":5095},{"dataMmlNode":5093,"transform":5094},"msup","translate(3233.6,0)",[5096,5102],{"type":18,"tag":5034,"props":5097,"children":5098},{"dataMmlNode":5046},[5099],{"type":18,"tag":5049,"props":5100,"children":5101},{"dataC":5070,"xLinkHref":5071},[],{"type":18,"tag":5034,"props":5103,"children":5106},{"dataMmlNode":5104,"transform":5105},"mn","translate(605,363) scale(0.707)",[5107],{"type":18,"tag":5049,"props":5108,"children":5111},{"dataC":5109,"xLinkHref":5110},"32","#MJX-1-TEX-N-32",[],{"type":37,"value":5113}," 这个函数我们可以通过 javascript 中的 ",{"type":18,"tag":268,"props":5115,"children":5117},{"className":5116},[],[5118],{"type":37,"value":5119},"function",{"type":37,"value":5121}," 即函数理解：",{"type":18,"tag":263,"props":5123,"children":5125},{"code":5124},"function add(x, y) {\n    return x + y;\n}\n\nlet result = add(2, 3);  // result = 5\n",[5126],{"type":18,"tag":268,"props":5127,"children":5128},{"__ignoreMap":8},[5129],{"type":37,"value":5124},{"type":18,"tag":40,"props":5131,"children":5132},{},[5133],{"type":37,"value":5134},"函数是一个特别重要的概念，特别是在数学领域。在普林斯顿微积分读本中，说明了函数在微积分的重要性：",{"type":18,"tag":116,"props":5136,"children":5137},{"type":2162},[5138],{"type":18,"tag":40,"props":5139,"children":5140},{},[5141,5143,5146],{"type":37,"value":5142},"不借助函数却想去做微积分，这无疑会是你所能做的最无意义的事。",{"type":18,"tag":1504,"props":5144,"children":5145},{},[],{"type":37,"value":5147},"\n如果说微积分也有营养成分表，那么函数肯定会排在最前面。",{"type":18,"tag":40,"props":5149,"children":5150},{},[5151],{"type":37,"value":5152},"有一说一我始终没有接触到应用到微积分的层次，但我会慢慢往这方面发展。",{"type":18,"tag":71,"props":5154,"children":5155},{},[],{"type":18,"tag":165,"props":5157,"children":5159},{"id":5158},"打破规则-2",[5160],{"type":37,"value":5161},"打破规则 2",{"type":18,"tag":27,"props":5163,"children":5165},{":t":5164},"打破规则",[],{"type":18,"tag":40,"props":5167,"children":5168},{},[5169,5171,5178],{"type":37,"value":5170},"在本章节，作者提到了一部电影 ",{"type":18,"tag":193,"props":5172,"children":5175},{"href":5173,"rel":5174},"https://zh.wikipedia.org/zh-cn/%E5%92%AA%E8%B5%B0%E5%A0%82",[197],[5176],{"type":37,"value":5177},"《春天不是读书天》（Ferris Bueller's Day Off)",{"type":37,"value":5179}," : 电影中，中产阶级的高中生费里斯·布勒（Ferris Bueller）假扮成芝加哥的“香肠之王”，用这一经典伪装成功进入了一家高档餐厅。他敢于打破规则，最终得到了一个绝佳的座位。",{"type":18,"tag":40,"props":5181,"children":5182},{},[5183,5185,5192,5194,5201],{"type":37,"value":5184},"这部电影的导演和编剧是 ",{"type":18,"tag":193,"props":5186,"children":5189},{"href":5187,"rel":5188},"https://en.wikipedia.org/wiki/John_Hughes_(filmmaker)",[197],[5190],{"type":37,"value":5191},"John Hughes",{"type":37,"value":5193}," 可能有些陌生。但他其实是 ",{"type":18,"tag":193,"props":5195,"children":5198},{"href":5196,"rel":5197},"https://en.wikipedia.org/wiki/Home_Alone",[197],[5199],{"type":37,"value":5200},"小鬼当家",{"type":37,"value":5202}," 的编剧。他作为《春天不是读书天》的编剧。表示这部电影是写给芝加哥的情书：“我真的想尽可能多地捕捉芝加哥。不仅仅是建筑和景观，而是精神。”",{"type":18,"tag":116,"props":5204,"children":5205},{},[5206,5211],{"type":18,"tag":40,"props":5207,"children":5208},{},[5209],{"type":37,"value":5210},"有一说一芝加哥、洛杉矶这些好像是非常自由的，经常有美剧在这里取景拍摄，例如芝加哥警署、无耻之徒。芝加哥的犯罪率是 66.11, 洛杉矶的是 53.77;",{"type":18,"tag":40,"props":5212,"children":5213},{},[5214,5216],{"type":37,"value":5215},"犯罪率查询: ",{"type":18,"tag":193,"props":5217,"children":5220},{"href":5218,"rel":5219},"https://www.numbeo.com/crime/compare_cities.jsp?country1=United+States&city1=Chicago%2C+IL&country2=United+States&city2=Los+Angeles%2C+CA",[197],[5221],{"type":37,"value":5222},"numbeo",{"type":18,"tag":40,"props":5224,"children":5225},{},[5226],{"type":37,"value":5227},"同时，作者根据这部电影主角的行为，来延伸给语言定义了性格：",{"type":37,"value":5229},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":5231,"children":5232},{},[5233,5271],{"type":18,"tag":395,"props":5234,"children":5235},{},[5236],{"type":18,"tag":399,"props":5237,"children":5238},{},[5239,5247,5255,5263],{"type":18,"tag":403,"props":5240,"children":5241},{},[5242],{"type":18,"tag":747,"props":5243,"children":5244},{},[5245],{"type":37,"value":5246},"背景",{"type":18,"tag":403,"props":5248,"children":5249},{},[5250],{"type":18,"tag":747,"props":5251,"children":5252},{},[5253],{"type":37,"value":5254},"习惯的编码风格",{"type":18,"tag":403,"props":5256,"children":5257},{},[5258],{"type":18,"tag":747,"props":5259,"children":5260},{},[5261],{"type":37,"value":5262},"对 Bueller 伪装的看法",{"type":18,"tag":403,"props":5264,"children":5265},{},[5266],{"type":18,"tag":747,"props":5267,"children":5268},{},[5269],{"type":37,"value":5270},"在 Io 中的建议",{"type":18,"tag":414,"props":5272,"children":5273},{},[5274,5299,5325],{"type":18,"tag":399,"props":5275,"children":5276},{},[5277,5284,5289,5294],{"type":18,"tag":421,"props":5278,"children":5279},{},[5280],{"type":18,"tag":747,"props":5281,"children":5282},{},[5283],{"type":37,"value":443},{"type":18,"tag":421,"props":5285,"children":5286},{},[5287],{"type":37,"value":5288},"严格规则，结构化",{"type":18,"tag":421,"props":5290,"children":5291},{},[5292],{"type":37,"value":5293},"可能认为自由过度，不合适，Bueller 应该被赶出去",{"type":18,"tag":421,"props":5295,"children":5296},{},[5297],{"type":37,"value":5298},"放松一点，利用 Io 的强大灵活性",{"type":18,"tag":399,"props":5300,"children":5301},{},[5302,5310,5315,5320],{"type":18,"tag":421,"props":5303,"children":5304},{},[5305],{"type":18,"tag":747,"props":5306,"children":5307},{},[5308],{"type":37,"value":5309},"Perl",{"type":18,"tag":421,"props":5311,"children":5312},{},[5313],{"type":37,"value":5314},"随意风格，注重结果",{"type":18,"tag":421,"props":5316,"children":5317},{},[5318],{"type":37,"value":5319},"可能喜欢 Bueller 的伪装，因为它成功了",{"type":18,"tag":421,"props":5321,"children":5322},{},[5323],{"type":37,"value":5324},"需要收敛一些，引入更多的纪律性",{"type":18,"tag":399,"props":5326,"children":5327},{},[5328,5335,5340,5345],{"type":18,"tag":421,"props":5329,"children":5330},{},[5331],{"type":18,"tag":747,"props":5332,"children":5333},{},[5334],{"type":37,"value":490},{"type":18,"tag":421,"props":5336,"children":5337},{},[5338],{"type":37,"value":5339},"采用 slot 和 message 机制",{"type":18,"tag":421,"props":5341,"children":5342},{},[5343],{"type":37,"value":5344},"更加自由，灵活性极高",{"type":18,"tag":421,"props":5346,"children":5347},{},[5348],{"type":37,"value":5349},"需要探索 slot（槽）和 message（消息），学习如何塑造核心行为",{"type":18,"tag":40,"props":5351,"children":5352},{},[5353],{"type":37,"value":5354},"看完这一段后我花了两个小时看了这部电影，讲述的是男主即将高中毕业升入大学。父母给男主买了个电脑，给妹妹买了个汽车。男主利用自己学到的计算机知识逃课了很多次还没有给发现。逃课的手法大多是社会工程学，例如变声、伪装、欺骗、通过弱点攻击系统篡改信息等。",{"type":18,"tag":4071,"props":5356,"children":5358},{"id":5357},"消息-1",[5359],{"type":37,"value":5360},"消息 1",{"type":18,"tag":27,"props":5362,"children":5364},{":t":5363,"type":311},"一切都是消息",[],{"type":18,"tag":40,"props":5366,"children":5367},{},[5368],{"type":37,"value":5369},"几乎一切都是消息，意味着在 Io lang 中可以拦截、修改甚至是重写，因为一切都是消息。这让我联想到了几乎一切都是函数的 javascript。",{"type":37,"value":5371},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":5373,"children":5374},{},[5375,5394],{"type":18,"tag":395,"props":5376,"children":5377},{},[5378],{"type":18,"tag":399,"props":5379,"children":5380},{},[5381,5385,5390],{"type":18,"tag":403,"props":5382,"children":5383},{},[5384],{"type":37,"value":2292},{"type":18,"tag":403,"props":5386,"children":5387},{},[5388],{"type":37,"value":5389},"代表语言",{"type":18,"tag":403,"props":5391,"children":5392},{},[5393],{"type":37,"value":2287},{"type":18,"tag":414,"props":5395,"children":5396},{},[5397,5417],{"type":18,"tag":399,"props":5398,"children":5399},{},[5400,5408,5412],{"type":18,"tag":421,"props":5401,"children":5402},{},[5403],{"type":18,"tag":747,"props":5404,"children":5405},{},[5406],{"type":37,"value":5407},"几乎一切都是消息",{"type":18,"tag":421,"props":5409,"children":5410},{},[5411],{"type":37,"value":490},{"type":18,"tag":421,"props":5413,"children":5414},{},[5415],{"type":37,"value":5416},"代码执行依赖对象之间的消息传递，方法调用、控制语句等都是发送消息",{"type":18,"tag":399,"props":5418,"children":5419},{},[5420,5428,5433],{"type":18,"tag":421,"props":5421,"children":5422},{},[5423],{"type":18,"tag":747,"props":5424,"children":5425},{},[5426],{"type":37,"value":5427},"几乎一切都是函数",{"type":18,"tag":421,"props":5429,"children":5430},{},[5431],{"type":37,"value":5432},"Haskell、JavaScript",{"type":18,"tag":421,"props":5434,"children":5435},{},[5436],{"type":37,"value":5437},"代码执行依赖函数，控制语句、计算等都是函数操作",{"type":18,"tag":71,"props":5439,"children":5440},{},[],{"type":18,"tag":4071,"props":5442,"children":5444},{"id":5443},"反射机制-2",[5445],{"type":37,"value":5446},"反射机制 2",{"type":18,"tag":27,"props":5448,"children":5450},{":t":5449},"反射机制",[],{"type":18,"tag":40,"props":5452,"children":5453},{},[5454,5456,5462,5464,5470,5472,5477],{"type":37,"value":5455},"我一开始看到 ",{"type":18,"tag":268,"props":5457,"children":5459},{"className":5458},[],[5460],{"type":37,"value":5461},"slot",{"type":37,"value":5463}," 还以为是 vue 中的 ",{"type":18,"tag":268,"props":5465,"children":5467},{"className":5466},[],[5468],{"type":37,"value":5469},"\u003Cslot>",{"type":37,"value":5471}," 但他们其实是两个概念。但都有一个共同的特点即 ",{"type":18,"tag":747,"props":5473,"children":5474},{},[5475],{"type":37,"value":5476},"灵活性、动态性、扩展性",{"type":37,"value":5478},",它们都体现了“灵活性”和“动态化设计”的编程哲学：",{"type":18,"tag":185,"props":5480,"children":5481},{},[5482,5487],{"type":18,"tag":189,"props":5483,"children":5484},{},[5485],{"type":37,"value":5486},"Io 中的 Slot 更适合描述为一个“动态对象的核心特性”，与属性、方法、反射、元编程相关。",{"type":18,"tag":189,"props":5488,"children":5489},{},[5490],{"type":37,"value":5491},"Vue 中的 Slot 则是一个“组件内容占位机制”，专注于解决组件复用和模板动态化的问题。",{"type":18,"tag":263,"props":5493,"children":5495},{"code":5494},"duck := Object clone\nduck name := \"Duck\"\nduck speak := method(\"quack\" println)\n\n# 动态修改 slot\nduck walk := method(\"waddle\" println)\nduck speak  # 输出：quack\nduck walk   # 输出：waddle\n",[5496],{"type":18,"tag":268,"props":5497,"children":5498},{"__ignoreMap":8},[5499],{"type":37,"value":5494},{"type":18,"tag":71,"props":5501,"children":5502},{},[],{"type":18,"tag":165,"props":5504,"children":5506},{"id":5505},"领域特定语言-dsl-2",[5507],{"type":37,"value":5508},"领域特定语言 (DSL) 2",{"type":18,"tag":27,"props":5510,"children":5512},{":t":5511},"时代的尘土",[],{"type":18,"tag":40,"props":5514,"children":5515},{},[5516],{"type":37,"value":5517},"我相信 IO Lang 在当时这些特性一定会受到很多人的喜爱（抛出那个作者和朋友之间的故事不谈）。但可惜是的 Io lang 目前貌似并不是特别的活跃，社区、生态都很小众。支持 IO Lang 特性的语言有很多，他们可能实现起来稍微或者说略微复杂，但他们的生态和社区可以弥补这一点。举个例子：",{"type":18,"tag":40,"props":5519,"children":5520},{},[5521,5523,5526],{"type":37,"value":5522},"如果你在面试的时候，说你熟练使用 Io lang，你的面试官可能并不知道 Io lang。",{"type":18,"tag":1504,"props":5524,"children":5525},{},[],{"type":37,"value":5527},"\n人家可能只知道 Java、PHP、C++、Python……这些主流的语言。",{"type":18,"tag":40,"props":5529,"children":5530},{},[5531],{"type":37,"value":5532},"目前。以我的知识储备来理解 DSL，更多的是处理特定格式的数据。以及多语言之间的配合，为某一个特定领域量身定制的语言，它的语法和功能紧密围绕该领域的需求。",{"type":18,"tag":263,"props":5534,"children":5536},{"code":5535},"iolang\n---\n\n# 创建一个新的对象 Builder，继承自 Object\nBuilder := Object clone\n\n# 为 Builder 添加一个 `forward` 方法，用于捕获未定义的消息\nBuilder forward := method(\n  # 打印开始标签，比如 `\u003Cul>` 或 `\u003Cli>`，基于收到的消息名称\n  writeln(\"\u003C\", call message name, \">\")\n\n  # 遍历消息的所有参数\n  call message arguments foreach(\n    arg,  # 当前遍历到的参数\n    # 对参数进行处理，将它解析为内容\n    content := self doMessage(arg);\n\n    # 如果参数类型是字符串（Sequence），直接打印内容\n    if(content type == \"Sequence\", writeln(content))\n  )\n\n  # 打印结束标签，比如 `\u003C/ul>` 或 `\u003C/li>`\n  writeln(\"\u003C/\", call message name, \">\")\n)\n\n# 使用 Builder 创建一个 HTML 结构\nBuilder ul(  # `\u003Cul>` 标签\n  li(\"Io\"),           # `\u003Cli>Io\u003C/li>`\n  li(\"Lua\"),          # `\u003Cli>Lua\u003C/li>`\n  li(\"JavaScript\")    # `\u003Cli>JavaScript\u003C/li>`\n)\n\npython\n---\n\nclass Builder:\n    # 动态捕获未定义的方法\n    def __getattr__(self, tag):\n        def handler(*args):\n            # 开始标签\n            html = [f\"\u003C{tag}>\"]\n            \n            # 遍历方法的参数\n            for arg in args:\n                if isinstance(arg, str):\n                    html.append(arg)  # 如果是字符串，直接添加内容\n                elif callable(arg):\n                    html.append(arg())  # 如果是嵌套标签，递归调用\n            \n            # 结束标签\n            html.append(f\"\u003C/{tag}>\")\n            return \"\".join(html)  # 返回完整 HTML\n        return handler\n\n\n# 创建 Builder 实例\nbuilder = Builder()\n\n# 使用 DSL 构建 HTML\nhtml = builder.ul(\n    builder.li(\"Io\"),\n    builder.li(\"Lua\"),\n    builder.li(\"JavaScript\")\n)\n\n# 打印生成的 HTML\nprint(html)\n",[5537],{"type":18,"tag":268,"props":5538,"children":5539},{"__ignoreMap":8},[5540],{"type":37,"value":5535},{"type":18,"tag":71,"props":5542,"children":5543},{},[],{"type":18,"tag":32,"props":5545,"children":5547},{"id":5546},"prolog-1",[5548],{"type":37,"value":5549},"Prolog 1",{"type":18,"tag":27,"props":5551,"children":5552},{"t":1817},[],{"type":18,"tag":40,"props":5554,"children":5555},{},[5556],{"type":37,"value":5557},"在本书刚开始的时候我就对 Prolog 和 io lang 拥有了兴趣。因为他们是我未曾看见过的（貌似比较冷门？），其中我在搜集 Prolog 相关的资料后发现，有一位大佬可以通过逻辑来和鲸鱼对话，这让我非常有兴趣了解这门语言，或许学完了可以和猫猫对话。",{"type":18,"tag":165,"props":5559,"children":5561},{"id":5560},"逻辑知识库-2",[5562],{"type":37,"value":5563},"逻辑知识库 2",{"type":18,"tag":27,"props":5565,"children":5567},{"t":5566},"逻辑知识库",[],{"type":18,"tag":40,"props":5569,"children":5570},{},[5571],{"type":37,"value":5572},"逻辑知识库是 Prolog 的核心，我将它理解为一些数据的存储，它由以下信息构成：",{"type":37,"value":2273},{"type":18,"tag":391,"props":5575,"children":5576},{},[5577,5593],{"type":18,"tag":395,"props":5578,"children":5579},{},[5580],{"type":18,"tag":399,"props":5581,"children":5582},{},[5583,5588],{"type":18,"tag":403,"props":5584,"children":5585},{},[5586],{"type":37,"value":5587},"构建块",{"type":18,"tag":403,"props":5589,"children":5590},{},[5591],{"type":37,"value":5592},"例子",{"type":18,"tag":414,"props":5594,"children":5595},{},[5596,5612,5628],{"type":18,"tag":399,"props":5597,"children":5598},{},[5599,5607],{"type":18,"tag":421,"props":5600,"children":5601},{},[5602],{"type":18,"tag":747,"props":5603,"children":5604},{},[5605],{"type":37,"value":5606},"事实（Facts）",{"type":18,"tag":421,"props":5608,"children":5609},{},[5610],{"type":37,"value":5611},"对某个世界的基本断言。（例如：“Babe 是一只猪”，“猪喜欢泥巴”。）",{"type":18,"tag":399,"props":5613,"children":5614},{},[5615,5623],{"type":18,"tag":421,"props":5616,"children":5617},{},[5618],{"type":18,"tag":747,"props":5619,"children":5620},{},[5621],{"type":37,"value":5622},"规则（Rules）",{"type":18,"tag":421,"props":5624,"children":5625},{},[5626],{"type":37,"value":5627},"关于这些事实的推论。（例如：“如果某动物是猪，那么它喜欢泥巴。”）",{"type":18,"tag":399,"props":5629,"children":5630},{},[5631,5639],{"type":18,"tag":421,"props":5632,"children":5633},{},[5634],{"type":18,"tag":747,"props":5635,"children":5636},{},[5637],{"type":37,"value":5638},"查询（Query）",{"type":18,"tag":421,"props":5640,"children":5641},{},[5642],{"type":37,"value":5643},"关于这个世界的提问。（例如：“Babe 喜欢泥巴吗？”）",{"type":18,"tag":40,"props":5645,"children":5646},{},[5647,5649,5656,5658,5663],{"type":37,"value":5648},"如果要运行、体验 Prolog，我更推荐 swi 的 ",{"type":18,"tag":193,"props":5650,"children":5653},{"href":5651,"rel":5652},"https://wasm.swi-prolog.org/wasm/tinker",[197],[5654],{"type":37,"value":5655},"wasm",{"type":37,"value":5657},"。目前，prolog 分别有 SWI 和 CIAO。他们都是 Prolog 的 ",{"type":18,"tag":747,"props":5659,"children":5660},{},[5661],{"type":37,"value":5662},"实现",{"type":37,"value":5664},"。不过我更喜欢 SWI，因为他提供了在线的 Prolog 编辑器？我有了解过他们两个实现的作者，发现他们都是老师，都为 prolog 坚持了很久。",{"type":18,"tag":40,"props":5666,"children":5667},{},[5668,5670,5675],{"type":37,"value":5669},"在 Prolog 中，",{"type":18,"tag":747,"props":5671,"children":5672},{},[5673],{"type":37,"value":5674},"在 Prolog 中，首字母大小写很重要",{"type":37,"value":5676},"：",{"type":18,"tag":185,"props":5678,"children":5679},{},[5680,5685],{"type":18,"tag":189,"props":5681,"children":5682},{},[5683],{"type":37,"value":5684},"小写字母开头的单词是原子（atom），表示固定的值（类似于 Ruby 的符号）。",{"type":18,"tag":189,"props":5686,"children":5687},{},[5688],{"type":37,"value":5689},"大写字母或下划线开头的单词是变量（variable），值可以改变。",{"type":18,"tag":40,"props":5691,"children":5692},{},[5693],{"type":37,"value":5694},"例如，一个简单的逻辑推理：",{"type":18,"tag":263,"props":5696,"children":5698},{"code":5697},"% 定义事实\nlikes(wallace, cheese).\nlikes(grommit, cheese).\nlikes(wendolene, sheep).\n\n% 定义规则：朋友关系\nfriend(X, Y) :- \\+(X = Y), likes(X, Z), likes(Y, Z).\n---\n如果 X 和 Y 是不同的人，并且他们都喜欢同一个 Z，那么 X 和 Y 是朋友。\n\n% 定义解释输出规则\nexplain_likes(Person, Item) :-\n    ( likes(Person, Item) ->\n        format('~w 喜欢 ~w。~n', [Person, Item])\n    ;   format('~w 不喜欢 ~w，因为没有相关事实支持。~n', [Person, Item])\n    ).\n\nexplain_friend(X, Y) :-\n    ( friend(X, Y) ->\n        format('~w 和 ~w 是朋友，因为他们都喜欢某个相同的事物。~n', [X, Y])\n    ;   format('~w 和 ~w 不是朋友，因为他们没有共同喜欢的事物。~n', [X, Y])\n    ).\n",[5699],{"type":18,"tag":268,"props":5700,"children":5701},{"__ignoreMap":8},[5702],{"type":37,"value":5697},{"type":18,"tag":40,"props":5704,"children":5705},{},[5706],{"type":37,"value":5707},"我们可以长时下输入来看看返回的结果：",{"type":18,"tag":40,"props":5709,"children":5710},{},[5711],{"type":18,"tag":747,"props":5712,"children":5713},{},[5714],{"type":37,"value":5715},"?-explain_friend(wallace, grommit).",{"type":18,"tag":1086,"props":5717,"children":5718},{},[5719],{"type":18,"tag":189,"props":5720,"children":5721},{},[5722,5724,5727],{"type":37,"value":5723},"wallace 和 grommit 是朋友，因为他们都喜欢某个相同的事物。",{"type":18,"tag":1504,"props":5725,"children":5726},{},[],{"type":37,"value":5728},"\ntrue.",{"type":18,"tag":40,"props":5730,"children":5731},{},[5732],{"type":18,"tag":747,"props":5733,"children":5734},{},[5735],{"type":37,"value":5736},"?-explain_friend(wallace, wendolene).",{"type":18,"tag":1086,"props":5738,"children":5739},{},[5740],{"type":18,"tag":189,"props":5741,"children":5742},{},[5743],{"type":37,"value":5744},"wallace 和 wendolene 不是朋友，因为他们没有共同喜欢的事物。\ntrue.",{"type":18,"tag":165,"props":5746,"children":5748},{"id":5747},"运算符-2",[5749],{"type":37,"value":5750},"运算符 2",{"type":18,"tag":27,"props":5752,"children":5754},{":t":5753,"type":311},"运算符",[],{"type":18,"tag":40,"props":5756,"children":5757},{},[5758,5760,5765],{"type":37,"value":5759},"在 prolog 中，这些符号都是 ",{"type":18,"tag":747,"props":5761,"children":5762},{},[5763],{"type":37,"value":5764},"语言符号体系",{"type":37,"value":5766}," 的一部分，而且还具有优先级。优先级决定了运算符的绑定顺序（类似括号的作用）。",{"type":37,"value":3828},{"type":18,"tag":391,"props":5769,"children":5770},{},[5771,5786],{"type":18,"tag":395,"props":5772,"children":5773},{},[5774],{"type":18,"tag":399,"props":5775,"children":5776},{},[5777,5782],{"type":18,"tag":403,"props":5778,"children":5779},{},[5780],{"type":37,"value":5781},"符号",{"type":18,"tag":403,"props":5783,"children":5784},{},[5785],{"type":37,"value":1601},{"type":18,"tag":414,"props":5787,"children":5788},{},[5789,5811,5833,5855],{"type":18,"tag":399,"props":5790,"children":5791},{},[5792,5801],{"type":18,"tag":421,"props":5793,"children":5794},{},[5795],{"type":18,"tag":268,"props":5796,"children":5798},{"className":5797},[],[5799],{"type":37,"value":5800},":-",{"type":18,"tag":421,"props":5802,"children":5803},{},[5804,5809],{"type":18,"tag":747,"props":5805,"children":5806},{},[5807],{"type":37,"value":5808},"如果",{"type":37,"value":5810},"。连接规则头和规则体，表示规则的定义。",{"type":18,"tag":399,"props":5812,"children":5813},{},[5814,5823],{"type":18,"tag":421,"props":5815,"children":5816},{},[5817],{"type":18,"tag":268,"props":5818,"children":5820},{"className":5819},[],[5821],{"type":37,"value":5822},"\\+",{"type":18,"tag":421,"props":5824,"children":5825},{},[5826,5831],{"type":18,"tag":747,"props":5827,"children":5828},{},[5829],{"type":37,"value":5830},"逻辑否定",{"type":37,"value":5832},"。表示“不成立”或“不能证明为真”（基于有限失败的逻辑）。",{"type":18,"tag":399,"props":5834,"children":5835},{},[5836,5845],{"type":18,"tag":421,"props":5837,"children":5838},{},[5839],{"type":18,"tag":268,"props":5840,"children":5842},{"className":5841},[],[5843],{"type":37,"value":5844},"=",{"type":18,"tag":421,"props":5846,"children":5847},{},[5848,5853],{"type":18,"tag":747,"props":5849,"children":5850},{},[5851],{"type":37,"value":5852},"等于",{"type":37,"value":5854},"。用于判断两个值是否相等。",{"type":18,"tag":399,"props":5856,"children":5857},{},[5858,5867],{"type":18,"tag":421,"props":5859,"children":5860},{},[5861],{"type":18,"tag":268,"props":5862,"children":5864},{"className":5863},[],[5865],{"type":37,"value":5866},",",{"type":18,"tag":421,"props":5868,"children":5869},{},[5870,5875],{"type":18,"tag":747,"props":5871,"children":5872},{},[5873],{"type":37,"value":5874},"逻辑与",{"type":37,"value":5876},"。多个条件必须同时成立规则才为真。",{"type":37,"value":2273},{"type":18,"tag":391,"props":5879,"children":5880},{},[5881,5896],{"type":18,"tag":395,"props":5882,"children":5883},{},[5884],{"type":18,"tag":399,"props":5885,"children":5886},{},[5887,5892],{"type":18,"tag":403,"props":5888,"children":5889},{},[5890],{"type":37,"value":5891},"条件",{"type":18,"tag":403,"props":5893,"children":5894},{},[5895],{"type":37,"value":1601},{"type":18,"tag":414,"props":5897,"children":5898},{},[5899,5916,5933],{"type":18,"tag":399,"props":5900,"children":5901},{},[5902,5911],{"type":18,"tag":421,"props":5903,"children":5904},{},[5905],{"type":18,"tag":268,"props":5906,"children":5908},{"className":5907},[],[5909],{"type":37,"value":5910},"\\+(X = Y)",{"type":18,"tag":421,"props":5912,"children":5913},{},[5914],{"type":37,"value":5915},"X 和 Y 必须不同。",{"type":18,"tag":399,"props":5917,"children":5918},{},[5919,5928],{"type":18,"tag":421,"props":5920,"children":5921},{},[5922],{"type":18,"tag":268,"props":5923,"children":5925},{"className":5924},[],[5926],{"type":37,"value":5927},"likes(X, Z)",{"type":18,"tag":421,"props":5929,"children":5930},{},[5931],{"type":37,"value":5932},"X 必须喜欢某个 Z。",{"type":18,"tag":399,"props":5934,"children":5935},{},[5936,5945],{"type":18,"tag":421,"props":5937,"children":5938},{},[5939],{"type":18,"tag":268,"props":5940,"children":5942},{"className":5941},[],[5943],{"type":37,"value":5944},"likes(Y, Z)",{"type":18,"tag":421,"props":5946,"children":5947},{},[5948],{"type":37,"value":5949},"Y 必须喜欢同一个 Z。",{"type":18,"tag":4071,"props":5951,"children":5953},{"id":5952},"否定为失败-1",[5954],{"type":37,"value":5955},"否定为失败 1",{"type":18,"tag":27,"props":5957,"children":5959},{":t":5958,"type":311},"否定为失败",[],{"type":18,"tag":40,"props":5961,"children":5962},{},[5963,5964,5969],{"type":37,"value":5669},{"type":18,"tag":268,"props":5965,"children":5967},{"className":5966},[],[5968],{"type":37,"value":5822},{"type":37,"value":5970}," 符号为逻辑否定。如果无法证明 X = Y 为真，则 +(X = Y) 为真。如果能够证明 X = Y 为真，则 +(X = Y) 为假。",{"type":18,"tag":263,"props":5972,"children":5974},{"code":5973},"?- \\+(1 = 2).\ntrue.   % 因为 1 不等于 2，无法证明 1 = 2，所以 \\+(1 = 2) 为真。\n\n?- \\+(1 = 1).\nfalse.  % 因为 1 = 1 可以被证明为真，所以 \\+(1 = 1) 为假。\n",[5975],{"type":18,"tag":268,"props":5976,"children":5977},{"__ignoreMap":8},[5978],{"type":37,"value":5973},{"type":18,"tag":40,"props":5980,"children":5981},{},[5982,5984,5989,5991,5997,5999,6004,6006,6011,6013,6018,6020,6026,6028],{"type":37,"value":5983},"一般来说我们认为的应该是 1 = 2 为 ",{"type":18,"tag":268,"props":5985,"children":5987},{"className":5986},[],[5988],{"type":37,"value":4994},{"type":37,"value":5990},"，而 1 = 1 则应该为 ",{"type":18,"tag":268,"props":5992,"children":5994},{"className":5993},[],[5995],{"type":37,"value":5996},"true",{"type":37,"value":5998},"，在这里是反着的。但因为我们加入了 ",{"type":18,"tag":268,"props":6000,"children":6002},{"className":6001},[],[6003],{"type":37,"value":5822},{"type":37,"value":6005},"，即逻辑否定来表示 ",{"type":18,"tag":747,"props":6007,"children":6008},{},[6009],{"type":37,"value":6010},"不成立",{"type":37,"value":6012},"，",{"type":18,"tag":747,"props":6014,"children":6015},{},[6016],{"type":37,"value":6017},"不能证明为真",{"type":37,"value":6019},"，所以 ",{"type":18,"tag":268,"props":6021,"children":6023},{"className":6022},[],[6024],{"type":37,"value":6025},"\\+(1 = 2)",{"type":37,"value":6027}," 无法被证明所以返回了 ",{"type":18,"tag":268,"props":6029,"children":6031},{"className":6030},[],[6032],{"type":37,"value":5996},{"type":18,"tag":165,"props":6034,"children":6036},{"id":6035},"推理-2",[6037],{"type":37,"value":6038},"推理 2",{"type":18,"tag":27,"props":6040,"children":6042},{":t":6041},"推理",[],{"type":18,"tag":40,"props":6044,"children":6045},{},[6046,6051],{"type":18,"tag":747,"props":6047,"children":6048},{},[6049],{"type":37,"value":6050},"规则与推理是 Prolog 的核心，允许通过简单的规则解决复杂问题。",{"type":37,"value":6052},"，虽然 Prolog 并不是很火，但隔壁的 mcp(Model Context Protocol) 也是推理的一种方式，不过它是根据上下文来进行推理。",{"type":37,"value":6054},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":6056,"children":6057},{},[6058,6087],{"type":18,"tag":395,"props":6059,"children":6060},{},[6061],{"type":18,"tag":399,"props":6062,"children":6063},{},[6064,6072,6079],{"type":18,"tag":403,"props":6065,"children":6066},{},[6067],{"type":18,"tag":747,"props":6068,"children":6069},{},[6070],{"type":37,"value":6071},"维度",{"type":18,"tag":403,"props":6073,"children":6074},{},[6075],{"type":18,"tag":747,"props":6076,"children":6077},{},[6078],{"type":37,"value":1817},{"type":18,"tag":403,"props":6080,"children":6081},{},[6082],{"type":18,"tag":747,"props":6083,"children":6084},{},[6085],{"type":37,"value":6086},"Model Context Protocol (MCP)",{"type":18,"tag":414,"props":6088,"children":6089},{},[6090,6111,6142,6163,6184,6204,6225,6246,6267],{"type":18,"tag":399,"props":6091,"children":6092},{},[6093,6101,6106],{"type":18,"tag":421,"props":6094,"children":6095},{},[6096],{"type":18,"tag":747,"props":6097,"children":6098},{},[6099],{"type":37,"value":6100},"核心目标",{"type":18,"tag":421,"props":6102,"children":6103},{},[6104],{"type":37,"value":6105},"专注于逻辑推理和知识表达",{"type":18,"tag":421,"props":6107,"children":6108},{},[6109],{"type":37,"value":6110},"专注于上下文感知和动态决策",{"type":18,"tag":399,"props":6112,"children":6113},{},[6114,6122,6132],{"type":18,"tag":421,"props":6115,"children":6116},{},[6117],{"type":18,"tag":747,"props":6118,"children":6119},{},[6120],{"type":37,"value":6121},"推理方式",{"type":18,"tag":421,"props":6123,"children":6124},{},[6125,6127],{"type":37,"value":6126},"基于逻辑规则的推导，通常采用",{"type":18,"tag":747,"props":6128,"children":6129},{},[6130],{"type":37,"value":6131},"反向链式推理（Backward Chaining）",{"type":18,"tag":421,"props":6133,"children":6134},{},[6135,6137],{"type":37,"value":6136},"基于规则动态检查，通常采用",{"type":18,"tag":747,"props":6138,"children":6139},{},[6140],{"type":37,"value":6141},"前向链式推理（Forward Chaining）",{"type":18,"tag":399,"props":6143,"children":6144},{},[6145,6153,6158],{"type":18,"tag":421,"props":6146,"children":6147},{},[6148],{"type":18,"tag":747,"props":6149,"children":6150},{},[6151],{"type":37,"value":6152},"规则与上下文",{"type":18,"tag":421,"props":6154,"children":6155},{},[6156],{"type":37,"value":6157},"静态知识库，规则基于固定的逻辑与事实",{"type":18,"tag":421,"props":6159,"children":6160},{},[6161],{"type":37,"value":6162},"动态数据驱动，规则依赖实时上下文和数据流",{"type":18,"tag":399,"props":6164,"children":6165},{},[6166,6174,6179],{"type":18,"tag":421,"props":6167,"children":6168},{},[6169],{"type":18,"tag":747,"props":6170,"children":6171},{},[6172],{"type":37,"value":6173},"表达方式",{"type":18,"tag":421,"props":6175,"children":6176},{},[6177],{"type":37,"value":6178},"接近自然语言的逻辑描述，强调“什么是正确”",{"type":18,"tag":421,"props":6180,"children":6181},{},[6182],{"type":37,"value":6183},"数据与规则分离，规则动态触发，强调“如何适应实时场景”",{"type":18,"tag":399,"props":6185,"children":6186},{},[6187,6194,6199],{"type":18,"tag":421,"props":6188,"children":6189},{},[6190],{"type":18,"tag":747,"props":6191,"children":6192},{},[6193],{"type":37,"value":4193},{"type":18,"tag":421,"props":6195,"children":6196},{},[6197],{"type":37,"value":6198},"知识推理、逻辑问题、专家系统（如关系推理、定理证明）",{"type":18,"tag":421,"props":6200,"children":6201},{},[6202],{"type":37,"value":6203},"动态场景（如物联网、实时决策支持系统、上下文驱动应用）",{"type":18,"tag":399,"props":6205,"children":6206},{},[6207,6215,6220],{"type":18,"tag":421,"props":6208,"children":6209},{},[6210],{"type":18,"tag":747,"props":6211,"children":6212},{},[6213],{"type":37,"value":6214},"推理透明性",{"type":18,"tag":421,"props":6216,"children":6217},{},[6218],{"type":37,"value":6219},"高度可解释性，直接展示推理过程",{"type":18,"tag":421,"props":6221,"children":6222},{},[6223],{"type":37,"value":6224},"推理过程嵌套在系统框架中，透明度较低",{"type":18,"tag":399,"props":6226,"children":6227},{},[6228,6236,6241],{"type":18,"tag":421,"props":6229,"children":6230},{},[6231],{"type":18,"tag":747,"props":6232,"children":6233},{},[6234],{"type":37,"value":6235},"灵活性",{"type":18,"tag":421,"props":6237,"children":6238},{},[6239],{"type":37,"value":6240},"规则明确但相对静态，适用于逻辑推导问题",{"type":18,"tag":421,"props":6242,"children":6243},{},[6244],{"type":37,"value":6245},"依赖实时上下文，动态调整规则，适合复杂系统的实时决策",{"type":18,"tag":399,"props":6247,"children":6248},{},[6249,6257,6262],{"type":18,"tag":421,"props":6250,"children":6251},{},[6252],{"type":18,"tag":747,"props":6253,"children":6254},{},[6255],{"type":37,"value":6256},"典型实现方式",{"type":18,"tag":421,"props":6258,"children":6259},{},[6260],{"type":37,"value":6261},"使用基于逻辑编程的语言（如 Prolog），定义规则和知识库",{"type":18,"tag":421,"props":6263,"children":6264},{},[6265],{"type":37,"value":6266},"作为动态系统架构的一部分，与上下文数据、事件和规则引擎结合",{"type":18,"tag":399,"props":6268,"children":6269},{},[6270,6278,6283],{"type":18,"tag":421,"props":6271,"children":6272},{},[6273],{"type":18,"tag":747,"props":6274,"children":6275},{},[6276],{"type":37,"value":6277},"推理复杂度",{"type":18,"tag":421,"props":6279,"children":6280},{},[6281],{"type":37,"value":6282},"强逻辑性，处理基于规则的严格逻辑推理",{"type":18,"tag":421,"props":6284,"children":6285},{},[6286],{"type":37,"value":6287},"更贴近实际应用，推理复杂度与上下文动态性直接相关",{"type":18,"tag":40,"props":6289,"children":6290},{},[6291],{"type":37,"value":6292},"我在这里思考了一个问题。假设通过 MCP 来进行推理，如果上下文、元数据都是错的，那么推理的结果也必然是错误的。那 Prolog 是否也会出现这样的错误呢？如果能自我纠错，那么这个能力绝对是非常厉害的特性。",{"type":37,"value":3013},{"type":18,"tag":391,"props":6295,"children":6296},{},[6297,6326],{"type":18,"tag":395,"props":6298,"children":6299},{},[6300],{"type":18,"tag":399,"props":6301,"children":6302},{},[6303,6311,6319],{"type":18,"tag":403,"props":6304,"children":6305},{},[6306],{"type":18,"tag":747,"props":6307,"children":6308},{},[6309],{"type":37,"value":6310},"情况",{"type":18,"tag":403,"props":6312,"children":6313},{},[6314],{"type":18,"tag":747,"props":6315,"children":6316},{},[6317],{"type":37,"value":6318},"MCP",{"type":18,"tag":403,"props":6320,"children":6321},{},[6322],{"type":18,"tag":747,"props":6323,"children":6324},{},[6325],{"type":37,"value":1817},{"type":18,"tag":414,"props":6327,"children":6328},{},[6329,6350,6383,6404],{"type":18,"tag":399,"props":6330,"children":6331},{},[6332,6340,6345],{"type":18,"tag":421,"props":6333,"children":6334},{},[6335],{"type":18,"tag":747,"props":6336,"children":6337},{},[6338],{"type":37,"value":6339},"输入数据正确",{"type":18,"tag":421,"props":6341,"children":6342},{},[6343],{"type":37,"value":6344},"能够做出动态决策，输出结果正确",{"type":18,"tag":421,"props":6346,"children":6347},{},[6348],{"type":37,"value":6349},"能够基于事实和规则做出推理，输出结果正确",{"type":18,"tag":399,"props":6351,"children":6352},{},[6353,6361,6371],{"type":18,"tag":421,"props":6354,"children":6355},{},[6356],{"type":18,"tag":747,"props":6357,"children":6358},{},[6359],{"type":37,"value":6360},"输入数据错误",{"type":18,"tag":421,"props":6362,"children":6363},{},[6364,6366],{"type":37,"value":6365},"会基于错误数据推导，",{"type":18,"tag":747,"props":6367,"children":6368},{},[6369],{"type":37,"value":6370},"结果错误",{"type":18,"tag":421,"props":6372,"children":6373},{},[6374,6376,6381],{"type":37,"value":6375},"逻辑规则不匹配时可能",{"type":18,"tag":747,"props":6377,"children":6378},{},[6379],{"type":37,"value":6380},"无法推理",{"type":37,"value":6382},"；如果推理完成，结果也可能错误",{"type":18,"tag":399,"props":6384,"children":6385},{},[6386,6394,6399],{"type":18,"tag":421,"props":6387,"children":6388},{},[6389],{"type":18,"tag":747,"props":6390,"children":6391},{},[6392],{"type":37,"value":6393},"推理灵活性",{"type":18,"tag":421,"props":6395,"children":6396},{},[6397],{"type":37,"value":6398},"高，实时适应动态场景",{"type":18,"tag":421,"props":6400,"children":6401},{},[6402],{"type":37,"value":6403},"低，更适合静态规则和逻辑推导",{"type":18,"tag":399,"props":6405,"children":6406},{},[6407,6415,6420],{"type":18,"tag":421,"props":6408,"children":6409},{},[6410],{"type":18,"tag":747,"props":6411,"children":6412},{},[6413],{"type":37,"value":6414},"错误的敏感性",{"type":18,"tag":421,"props":6416,"children":6417},{},[6418],{"type":37,"value":6419},"不敏感，直接使用错误数据作为基础，结果也随之错误",{"type":18,"tag":421,"props":6421,"children":6422},{},[6423],{"type":37,"value":6424},"更敏感，逻辑上无法匹配会导致推理终止",{"type":18,"tag":4071,"props":6426,"children":6428},{"id":6427},"推理引擎-3",[6429],{"type":37,"value":6430},"推理引擎 3",{"type":18,"tag":27,"props":6432,"children":6434},{":t":6433},"推理引擎",[],{"type":18,"tag":40,"props":6436,"children":6437},{},[6438,6440,6445],{"type":37,"value":6439},"推理引擎(Inference engine) 也叫 “推理机”（中文维基百科是这样叫的）。",{"type":18,"tag":747,"props":6441,"children":6442},{},[6443],{"type":37,"value":6444},"它将逻辑规则应用于知识库以推断出新信息",{"type":37,"value":6446},",推理引擎主要以两种模式之一工作：特殊规则或事实： 正向推理和反向推理 。",{"type":18,"tag":1086,"props":6448,"children":6449},{},[6450,6460],{"type":18,"tag":189,"props":6451,"children":6452},{},[6453,6458],{"type":18,"tag":747,"props":6454,"children":6455},{},[6456],{"type":37,"value":6457},"正向推理",{"type":37,"value":6459},": 从“今天下雨了”，想到“可能会堵车”，“需要带伞”，“地铁可能会拥挤”……从一个已知事实出发，推导出一系列可能的结论。",{"type":18,"tag":189,"props":6461,"children":6462},{},[6463,6468],{"type":18,"tag":747,"props":6464,"children":6465},{},[6466],{"type":37,"value":6467},"反向推理",{"type":37,"value":6469},":从“我要准时到达公司”开始，想“我要避开堵车”，“那我需要提前出发”，“所以我需要了解天气情况”。从目标出发，倒推出一系列必要条件。",{"type":18,"tag":27,"props":6471,"children":6472},{":t":6457,"type":311},[],{"type":18,"tag":40,"props":6474,"children":6475},{},[6476,6478,6483,6485],{"type":37,"value":6477},"正向推理是一种数据驱动（data-driven）的推理方式。",{"type":18,"tag":747,"props":6479,"children":6480},{},[6481],{"type":37,"value":6482},"从已知的事实出发",{"type":37,"value":6484},"，应用规则逐步推出新的事实，",{"type":18,"tag":747,"props":6486,"children":6487},{},[6488],{"type":37,"value":6489},"直到找到目标答案或不能再推出新事实为止。",{"type":18,"tag":40,"props":6491,"children":6492},{},[6493],{"type":37,"value":6494},"假设有一位侦探正在调查一桩案件：某人（嫌疑人）在某个时间段内是否参与了一起犯罪活动。",{"type":18,"tag":40,"props":6496,"children":6497},{},[6498],{"type":37,"value":6499},"侦探采取 “从已知线索出发，看能推断出什么” 的方法。(这是一种 数据驱动 的逻辑推理过程。)",{"type":18,"tag":40,"props":6501,"children":6502},{},[6503],{"type":37,"value":6504},"目标：要证明嫌疑人A是否在案发时间段内去了案发现场。",{"type":18,"tag":40,"props":6506,"children":6507},{},[6508,6513,6514],{"type":18,"tag":747,"props":6509,"children":6510},{},[6511],{"type":37,"value":6512},"(1) 侦探掌握的线索:",{"type":37,"value":2888},{"type":18,"tag":1504,"props":6515,"children":6516},{},[],{"type":18,"tag":185,"props":6518,"children":6519},{},[6520,6525,6530,6535],{"type":18,"tag":189,"props":6521,"children":6522},{},[6523],{"type":37,"value":6524},"嫌疑人A的鞋底有泥土。",{"type":18,"tag":189,"props":6526,"children":6527},{},[6528],{"type":37,"value":6529},"案发现场附近的地上有相同类型的泥土。",{"type":18,"tag":189,"props":6531,"children":6532},{},[6533],{"type":37,"value":6534},"嫌疑人A的手机定位显示，他曾在案发时间段靠近案发现场。",{"type":18,"tag":189,"props":6536,"children":6537},{},[6538],{"type":37,"value":6539},"有人看见嫌疑人A在案发现场附近出现。",{"type":18,"tag":40,"props":6541,"children":6542},{},[6543,6548,6549],{"type":18,"tag":747,"props":6544,"children":6545},{},[6546],{"type":37,"value":6547},"(2) 推理过程：",{"type":37,"value":2888},{"type":18,"tag":1504,"props":6550,"children":6551},{},[],{"type":18,"tag":185,"props":6553,"children":6554},{},[6555,6560,6565],{"type":18,"tag":189,"props":6556,"children":6557},{},[6558],{"type":37,"value":6559},"嫌疑人鞋底有泥土，说明他可能去过案发现场附近。",{"type":18,"tag":189,"props":6561,"children":6562},{},[6563],{"type":37,"value":6564},"手机定位也确认了嫌疑人确实在案发时间段靠近案发现场。",{"type":18,"tag":189,"props":6566,"children":6567},{},[6568],{"type":37,"value":6569},"目击者证词进一步确认了嫌疑人在附近出现。",{"type":18,"tag":40,"props":6571,"children":6572},{},[6573,6578,6580,6585],{"type":18,"tag":747,"props":6574,"children":6575},{},[6576],{"type":37,"value":6577},"(3) 得出结论",{"type":37,"value":6579},"\n通过所有线索一步步推导，侦探得出 ",{"type":18,"tag":747,"props":6581,"children":6582},{},[6583],{"type":37,"value":6584},"“嫌疑人A极有可能在案发时间段出现在案发现场”",{"type":37,"value":6586}," 的结论。",{"type":18,"tag":4071,"props":6588,"children":6590},{"id":6589},"反向推理-3",[6591],{"type":37,"value":6592},"反向推理 3",{"type":18,"tag":27,"props":6594,"children":6595},{":t":6467,"type":311},[],{"type":18,"tag":40,"props":6597,"children":6598},{},[6599,6601,6606],{"type":37,"value":6600},"反向推理是一种目标驱动（goal-driven）的推理方式。",{"type":18,"tag":747,"props":6602,"children":6603},{},[6604],{"type":37,"value":6605},"从目标出发",{"type":37,"value":6607},"，寻找满足目标的前提条件，逐步回溯到已知的事实。",{"type":18,"tag":40,"props":6609,"children":6610},{},[6611,6613,6618],{"type":37,"value":6612},"这一次，侦探采取的是 ",{"type":18,"tag":747,"props":6614,"children":6615},{},[6616],{"type":37,"value":6617},"“从目标出发，验证其成立条件”",{"type":37,"value":6619}," 的方法。这是一种 目标驱动 的推理过程。",{"type":18,"tag":40,"props":6621,"children":6622},{},[6623],{"type":37,"value":6504},{"type":18,"tag":40,"props":6625,"children":6626},{},[6627],{"type":18,"tag":747,"props":6628,"children":6629},{},[6630],{"type":37,"value":6631},"(1) 如果嫌疑人去了案发现场，那么",{"type":18,"tag":185,"props":6633,"children":6634},{},[6635,6640,6645],{"type":18,"tag":189,"props":6636,"children":6637},{},[6638],{"type":37,"value":6639},"嫌疑人应该留下某种可以证明的痕迹，比如脚印或其他物证。",{"type":18,"tag":189,"props":6641,"children":6642},{},[6643],{"type":37,"value":6644},"嫌疑人的手机定位应该能显示他靠近案发现场。",{"type":18,"tag":189,"props":6646,"children":6647},{},[6648],{"type":37,"value":6649},"或者，有目击者看见他出现在案发现场。",{"type":18,"tag":40,"props":6651,"children":6652},{},[6653],{"type":18,"tag":747,"props":6654,"children":6655},{},[6656],{"type":37,"value":6657},"(2) 验证条件",{"type":18,"tag":185,"props":6659,"children":6660},{},[6661,6671,6681],{"type":18,"tag":189,"props":6662,"children":6663},{},[6664,6669],{"type":18,"tag":747,"props":6665,"children":6666},{},[6667],{"type":37,"value":6668},"验证1",{"type":37,"value":6670},"：侦探检查嫌疑人鞋底，发现有与案发现场泥土一致的痕迹（成立）。",{"type":18,"tag":189,"props":6672,"children":6673},{},[6674,6679],{"type":18,"tag":747,"props":6675,"children":6676},{},[6677],{"type":37,"value":6678},"验证2",{"type":37,"value":6680},"：侦探调取手机定位记录，发现嫌疑人在案发时间靠近案发现场（成立）。",{"type":18,"tag":189,"props":6682,"children":6683},{},[6684,6689],{"type":18,"tag":747,"props":6685,"children":6686},{},[6687],{"type":37,"value":6688},"验证3",{"type":37,"value":6690},"：侦探问询目击者，确认有人看到嫌疑人靠近案发现场（成立）。",{"type":18,"tag":40,"props":6692,"children":6693},{},[6694,6698,6700,6705],{"type":18,"tag":747,"props":6695,"children":6696},{},[6697],{"type":37,"value":6577},{"type":37,"value":6699},"\n所有条件都得到满足，侦探得出结论：",{"type":18,"tag":747,"props":6701,"children":6702},{},[6703],{"type":37,"value":6704},"“嫌疑人A确实出现在案发现场”",{"type":37,"value":3150},{"type":18,"tag":40,"props":6707,"children":6708},{},[6709,6711,6717],{"type":37,"value":6710},"书中给了一个反向推理那些食物是咸的例子，",{"type":18,"tag":268,"props":6712,"children":6714},{"className":6713},[],[6715],{"type":37,"value":6716},"food_flavor(X, Y) 推导出满足 Y = savory 的 X",{"type":37,"value":5676},{"type":18,"tag":263,"props":6719,"children":6721},{"code":6720},"food_type(velveeta, cheese).\nfood_type(ritz, cracker).\nfood_type(spam, meat).\nfood_type(sausage, meat).\nfood_type(jolt, soda).\nfood_type(twinkie, dessert).\n\nflavor(sweet, dessert).\nflavor(savory, meat).\nflavor(savory, cheese).\nflavor(sweet, soda).\n\nfood_flavor(X, Y) :- food_type(X, Z), flavor(Y, Z).\n\n---\n找到所有满足 food_type(X, Z) 的 X 和 Z。\n找到满足 flavor(savory, Z) 的 Z。\n两个条件的 Z 相交时，得出最终的 X。\n\n---\n\nfood_flavor(What, savory).\n\n---\n哪些食物（What）的味道是咸的（savory）？\n\nWhat = spam ;\nWhat = sausage ;\nfalse.\n",[6722],{"type":18,"tag":268,"props":6723,"children":6724},{"__ignoreMap":8},[6725],{"type":37,"value":6720},{"type":18,"tag":71,"props":6727,"children":6728},{},[],{"type":18,"tag":165,"props":6730,"children":6732},{"id":6731},"递归-1",[6733],{"type":37,"value":6734},"递归 1",{"type":18,"tag":27,"props":6736,"children":6738},{":t":6737},"递归",[],{"type":18,"tag":40,"props":6740,"children":6741},{},[6742,6744,6749,6751,6756],{"type":37,"value":6743},"一看到「递归」，那么自然离不开 ",{"type":18,"tag":747,"props":6745,"children":6746},{},[6747],{"type":37,"value":6748},"数组、列表、遍历、字典、元组",{"type":37,"value":6750}," 这几个关键词。递归很擅长解决 ",{"type":18,"tag":747,"props":6752,"children":6753},{},[6754],{"type":37,"value":6755},"重复模式",{"type":37,"value":6757}," 的问题，使得递归在算法等相关方面成为了必备的方法。比如可以使用递归来完成一个乘积计算：",{"type":18,"tag":263,"props":6759,"children":6761},{"code":6760},"factorial(0, 1). % 基准情况：0! = 1\nfactorial(N, Result) :- \n    N > 0, \n    N1 is N - 1, \n    factorial(N1, SubResult), \n    Result is N * SubResult. % 递归步骤\n\n---\nfactorial(5, Result).\n5! = 5 × 4 × 3 × 2 × 1 = 120\n",[6762],{"type":18,"tag":268,"props":6763,"children":6764},{"__ignoreMap":8},[6765],{"type":37,"value":6760},{"type":18,"tag":1504,"props":6767,"children":6768},{},[],{"type":18,"tag":116,"props":6770,"children":6771},{},[6772],{"type":18,"tag":40,"props":6773,"children":6774},{},[6775,6777,6780],{"type":37,"value":6776},"在数学中，! 表示阶乘（Factorial）。一个正整数 n 的阶乘记为 n!，表示从 1 到 n 所有正整数的乘积 ",{"type":18,"tag":1504,"props":6778,"children":6779},{},[],{"type":18,"tag":4981,"props":6781,"children":6783},{"className":6782,"jax":4985},[4984],[6784],{"type":18,"tag":4988,"props":6785,"children":6789},{"style":4990,"xmlns":4991,"width":6786,"height":6787,"role":22,"focusable":4994,"viewBox":6788,"xmlnsXLink":4996},"35.236ex","2.262ex","0 -750 15574.2 1000",[6790,6839],{"type":18,"tag":4999,"props":6791,"children":6792},{},[6793,6798,6803,6807,6812,6816,6821,6826,6830,6834],{"type":18,"tag":5003,"props":6794,"children":6797},{"id":6795,"d":6796},"MJX-2-TEX-I-1D45B","M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",[],{"type":18,"tag":5003,"props":6799,"children":6802},{"id":6800,"d":6801},"MJX-2-TEX-N-21","M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z",[],{"type":18,"tag":5003,"props":6804,"children":6806},{"id":6805,"d":5026},"MJX-2-TEX-N-3D",[],{"type":18,"tag":5003,"props":6808,"children":6811},{"id":6809,"d":6810},"MJX-2-TEX-N-D7","M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",[],{"type":18,"tag":5003,"props":6813,"children":6815},{"id":6814,"d":5011},"MJX-2-TEX-N-28",[],{"type":18,"tag":5003,"props":6817,"children":6820},{"id":6818,"d":6819},"MJX-2-TEX-N-2212","M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z",[],{"type":18,"tag":5003,"props":6822,"children":6825},{"id":6823,"d":6824},"MJX-2-TEX-N-31","M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",[],{"type":18,"tag":5003,"props":6827,"children":6829},{"id":6828,"d":5021},"MJX-2-TEX-N-29",[],{"type":18,"tag":5003,"props":6831,"children":6833},{"id":6832,"d":5031},"MJX-2-TEX-N-32",[],{"type":18,"tag":5003,"props":6835,"children":6838},{"id":6836,"d":6837},"MJX-2-TEX-N-22EF","M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z",[],{"type":18,"tag":5034,"props":6840,"children":6841},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[6842],{"type":18,"tag":5034,"props":6843,"children":6844},{"dataMmlNode":5042},[6845,6853,6862,6870,6877,6886,6894,6901,6910,6919,6927,6934,6941,6948,6955,6963,6970,6977,6986,6993],{"type":18,"tag":5034,"props":6846,"children":6847},{"dataMmlNode":5046},[6848],{"type":18,"tag":5049,"props":6849,"children":6852},{"dataC":6850,"xLinkHref":6851},"1D45B","#MJX-2-TEX-I-1D45B",[],{"type":18,"tag":5034,"props":6854,"children":6856},{"dataMmlNode":5056,"transform":6855},"translate(600,0)",[6857],{"type":18,"tag":5049,"props":6858,"children":6861},{"dataC":6859,"xLinkHref":6860},"21","#MJX-2-TEX-N-21",[],{"type":18,"tag":5034,"props":6863,"children":6865},{"dataMmlNode":5056,"transform":6864},"translate(1155.8,0)",[6866],{"type":18,"tag":5049,"props":6867,"children":6869},{"dataC":5088,"xLinkHref":6868},"#MJX-2-TEX-N-3D",[],{"type":18,"tag":5034,"props":6871,"children":6873},{"dataMmlNode":5046,"transform":6872},"translate(2211.6,0)",[6874],{"type":18,"tag":5049,"props":6875,"children":6876},{"dataC":6850,"xLinkHref":6851},[],{"type":18,"tag":5034,"props":6878,"children":6880},{"dataMmlNode":5056,"transform":6879},"translate(3033.8,0)",[6881],{"type":18,"tag":5049,"props":6882,"children":6885},{"dataC":6883,"xLinkHref":6884},"D7","#MJX-2-TEX-N-D7",[],{"type":18,"tag":5034,"props":6887,"children":6889},{"dataMmlNode":5056,"transform":6888},"translate(4034,0)",[6890],{"type":18,"tag":5049,"props":6891,"children":6893},{"dataC":5061,"xLinkHref":6892},"#MJX-2-TEX-N-28",[],{"type":18,"tag":5034,"props":6895,"children":6897},{"dataMmlNode":5046,"transform":6896},"translate(4423,0)",[6898],{"type":18,"tag":5049,"props":6899,"children":6900},{"dataC":6850,"xLinkHref":6851},[],{"type":18,"tag":5034,"props":6902,"children":6904},{"dataMmlNode":5056,"transform":6903},"translate(5245.2,0)",[6905],{"type":18,"tag":5049,"props":6906,"children":6909},{"dataC":6907,"xLinkHref":6908},"2212","#MJX-2-TEX-N-2212",[],{"type":18,"tag":5034,"props":6911,"children":6913},{"dataMmlNode":5104,"transform":6912},"translate(6245.4,0)",[6914],{"type":18,"tag":5049,"props":6915,"children":6918},{"dataC":6916,"xLinkHref":6917},"31","#MJX-2-TEX-N-31",[],{"type":18,"tag":5034,"props":6920,"children":6922},{"dataMmlNode":5056,"transform":6921},"translate(6745.4,0)",[6923],{"type":18,"tag":5049,"props":6924,"children":6926},{"dataC":5079,"xLinkHref":6925},"#MJX-2-TEX-N-29",[],{"type":18,"tag":5034,"props":6928,"children":6930},{"dataMmlNode":5056,"transform":6929},"translate(7356.7,0)",[6931],{"type":18,"tag":5049,"props":6932,"children":6933},{"dataC":6883,"xLinkHref":6884},[],{"type":18,"tag":5034,"props":6935,"children":6937},{"dataMmlNode":5056,"transform":6936},"translate(8356.9,0)",[6938],{"type":18,"tag":5049,"props":6939,"children":6940},{"dataC":5061,"xLinkHref":6892},[],{"type":18,"tag":5034,"props":6942,"children":6944},{"dataMmlNode":5046,"transform":6943},"translate(8745.9,0)",[6945],{"type":18,"tag":5049,"props":6946,"children":6947},{"dataC":6850,"xLinkHref":6851},[],{"type":18,"tag":5034,"props":6949,"children":6951},{"dataMmlNode":5056,"transform":6950},"translate(9568.1,0)",[6952],{"type":18,"tag":5049,"props":6953,"children":6954},{"dataC":6907,"xLinkHref":6908},[],{"type":18,"tag":5034,"props":6956,"children":6958},{"dataMmlNode":5104,"transform":6957},"translate(10568.3,0)",[6959],{"type":18,"tag":5049,"props":6960,"children":6962},{"dataC":5109,"xLinkHref":6961},"#MJX-2-TEX-N-32",[],{"type":18,"tag":5034,"props":6964,"children":6966},{"dataMmlNode":5056,"transform":6965},"translate(11068.3,0)",[6967],{"type":18,"tag":5049,"props":6968,"children":6969},{"dataC":5079,"xLinkHref":6925},[],{"type":18,"tag":5034,"props":6971,"children":6973},{"dataMmlNode":5056,"transform":6972},"translate(11679.6,0)",[6974],{"type":18,"tag":5049,"props":6975,"children":6976},{"dataC":6883,"xLinkHref":6884},[],{"type":18,"tag":5034,"props":6978,"children":6980},{"dataMmlNode":5056,"transform":6979},"translate(12679.8,0)",[6981],{"type":18,"tag":5049,"props":6982,"children":6985},{"dataC":6983,"xLinkHref":6984},"22EF","#MJX-2-TEX-N-22EF",[],{"type":18,"tag":5034,"props":6987,"children":6989},{"dataMmlNode":5056,"transform":6988},"translate(14074,0)",[6990],{"type":18,"tag":5049,"props":6991,"children":6992},{"dataC":6883,"xLinkHref":6884},[],{"type":18,"tag":5034,"props":6994,"children":6996},{"dataMmlNode":5104,"transform":6995},"translate(15074.2,0)",[6997],{"type":18,"tag":5049,"props":6998,"children":6999},{"dataC":6916,"xLinkHref":6917},[],{"type":18,"tag":40,"props":7001,"children":7002},{},[7003,7005,7010,7011,7016],{"type":37,"value":7004},"在这个过程中，递归分为了 ",{"type":18,"tag":747,"props":7006,"children":7007},{},[7008],{"type":37,"value":7009},"向下递",{"type":37,"value":1033},{"type":18,"tag":747,"props":7012,"children":7013},{},[7014],{"type":37,"value":7015},"向上归",{"type":37,"value":7017}," 的两个阶段。",{"type":18,"tag":4981,"props":7019,"children":7021},{"className":7020,"jax":4985},[4984],[7022],{"type":18,"tag":4988,"props":7023,"children":7028},{"style":7024,"xmlns":4991,"width":7025,"height":7026,"role":22,"focusable":4994,"viewBox":7027,"xmlnsXLink":4996},"vertical-align: -2.148ex;","43.724ex","5.428ex","0 -1449.5 19326 2399",[7029,7120],{"type":18,"tag":4999,"props":7030,"children":7031},{},[7032,7037,7042,7047,7052,7057,7062,7067,7072,7076,7080,7084,7088,7093,7097,7101,7106,7111,7115],{"type":18,"tag":5003,"props":7033,"children":7036},{"id":7034,"d":7035},"MJX-3-TEX-N-66","M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z",[],{"type":18,"tag":5003,"props":7038,"children":7041},{"id":7039,"d":7040},"MJX-3-TEX-N-61","M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z",[],{"type":18,"tag":5003,"props":7043,"children":7046},{"id":7044,"d":7045},"MJX-3-TEX-N-63","M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z",[],{"type":18,"tag":5003,"props":7048,"children":7051},{"id":7049,"d":7050},"MJX-3-TEX-N-74","M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z",[],{"type":18,"tag":5003,"props":7053,"children":7056},{"id":7054,"d":7055},"MJX-3-TEX-N-6F","M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z",[],{"type":18,"tag":5003,"props":7058,"children":7061},{"id":7059,"d":7060},"MJX-3-TEX-N-72","M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z",[],{"type":18,"tag":5003,"props":7063,"children":7066},{"id":7064,"d":7065},"MJX-3-TEX-N-69","M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z",[],{"type":18,"tag":5003,"props":7068,"children":7071},{"id":7069,"d":7070},"MJX-3-TEX-N-6C","M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z",[],{"type":18,"tag":5003,"props":7073,"children":7075},{"id":7074,"d":5011},"MJX-3-TEX-N-28",[],{"type":18,"tag":5003,"props":7077,"children":7079},{"id":7078,"d":6796},"MJX-3-TEX-I-1D45B",[],{"type":18,"tag":5003,"props":7081,"children":7083},{"id":7082,"d":5021},"MJX-3-TEX-N-29",[],{"type":18,"tag":5003,"props":7085,"children":7087},{"id":7086,"d":5026},"MJX-3-TEX-N-3D",[],{"type":18,"tag":5003,"props":7089,"children":7092},{"id":7090,"d":7091},"MJX-3-TEX-S3-7B","M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z",[],{"type":18,"tag":5003,"props":7094,"children":7096},{"id":7095,"d":6824},"MJX-3-TEX-N-31",[],{"type":18,"tag":5003,"props":7098,"children":7100},{"id":7099,"d":8},"MJX-3-TEX-N-A0",[],{"type":18,"tag":5003,"props":7102,"children":7105},{"id":7103,"d":7104},"MJX-3-TEX-N-30","M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z",[],{"type":18,"tag":5003,"props":7107,"children":7110},{"id":7108,"d":7109},"MJX-3-TEX-N-22C5","M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z",[],{"type":18,"tag":5003,"props":7112,"children":7114},{"id":7113,"d":6819},"MJX-3-TEX-N-2212",[],{"type":18,"tag":5003,"props":7116,"children":7119},{"id":7117,"d":7118},"MJX-3-TEX-N-3E","M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z",[],{"type":18,"tag":5034,"props":7121,"children":7122},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[7123],{"type":18,"tag":5034,"props":7124,"children":7125},{"dataMmlNode":5042},[7126,7181,7189,7197,7205,7213],{"type":18,"tag":5034,"props":7127,"children":7129},{"dataMmlNode":7128},"mtext",[7130,7135,7141,7147,7153,7159,7165,7171,7175],{"type":18,"tag":5049,"props":7131,"children":7134},{"dataC":7132,"xLinkHref":7133},"66","#MJX-3-TEX-N-66",[],{"type":18,"tag":5049,"props":7136,"children":7140},{"dataC":7137,"xLinkHref":7138,"transform":7139},"61","#MJX-3-TEX-N-61","translate(306,0)",[],{"type":18,"tag":5049,"props":7142,"children":7146},{"dataC":7143,"xLinkHref":7144,"transform":7145},"63","#MJX-3-TEX-N-63","translate(806,0)",[],{"type":18,"tag":5049,"props":7148,"children":7152},{"dataC":7149,"xLinkHref":7150,"transform":7151},"74","#MJX-3-TEX-N-74","translate(1250,0)",[],{"type":18,"tag":5049,"props":7154,"children":7158},{"dataC":7155,"xLinkHref":7156,"transform":7157},"6F","#MJX-3-TEX-N-6F","translate(1639,0)",[],{"type":18,"tag":5049,"props":7160,"children":7164},{"dataC":7161,"xLinkHref":7162,"transform":7163},"72","#MJX-3-TEX-N-72","translate(2139,0)",[],{"type":18,"tag":5049,"props":7166,"children":7170},{"dataC":7167,"xLinkHref":7168,"transform":7169},"69","#MJX-3-TEX-N-69","translate(2531,0)",[],{"type":18,"tag":5049,"props":7172,"children":7174},{"dataC":7137,"xLinkHref":7138,"transform":7173},"translate(2809,0)",[],{"type":18,"tag":5049,"props":7176,"children":7180},{"dataC":7177,"xLinkHref":7178,"transform":7179},"6C","#MJX-3-TEX-N-6C","translate(3309,0)",[],{"type":18,"tag":5034,"props":7182,"children":7184},{"dataMmlNode":5056,"transform":7183},"translate(3587,0)",[7185],{"type":18,"tag":5049,"props":7186,"children":7188},{"dataC":5061,"xLinkHref":7187},"#MJX-3-TEX-N-28",[],{"type":18,"tag":5034,"props":7190,"children":7192},{"dataMmlNode":5046,"transform":7191},"translate(3976,0)",[7193],{"type":18,"tag":5049,"props":7194,"children":7196},{"dataC":6850,"xLinkHref":7195},"#MJX-3-TEX-I-1D45B",[],{"type":18,"tag":5034,"props":7198,"children":7200},{"dataMmlNode":5056,"transform":7199},"translate(4576,0)",[7201],{"type":18,"tag":5049,"props":7202,"children":7204},{"dataC":5079,"xLinkHref":7203},"#MJX-3-TEX-N-29",[],{"type":18,"tag":5034,"props":7206,"children":7208},{"dataMmlNode":5056,"transform":7207},"translate(5242.8,0)",[7209],{"type":18,"tag":5049,"props":7210,"children":7212},{"dataC":5088,"xLinkHref":7211},"#MJX-3-TEX-N-3D",[],{"type":18,"tag":5034,"props":7214,"children":7217},{"dataMmlNode":7215,"transform":7216},"mrow","translate(6298.6,0)",[7218,7227,7415],{"type":18,"tag":5034,"props":7219,"children":7221},{"dataMmlNode":5056,"transform":7220},"translate(0 -0.5)",[7222],{"type":18,"tag":5049,"props":7223,"children":7226},{"dataC":7224,"xLinkHref":7225},"7B","#MJX-3-TEX-S3-7B",[],{"type":18,"tag":5034,"props":7228,"children":7231},{"dataMmlNode":7229,"transform":7230},"mtable","translate(750,0)",[7232,7291],{"type":18,"tag":5034,"props":7233,"children":7236},{"dataMmlNode":7234,"transform":7235},"mtr","translate(0,600)",[7237,7248],{"type":18,"tag":5034,"props":7238,"children":7240},{"dataMmlNode":7239},"mtd",[7241],{"type":18,"tag":5034,"props":7242,"children":7243},{"dataMmlNode":5104},[7244],{"type":18,"tag":5049,"props":7245,"children":7247},{"dataC":6916,"xLinkHref":7246},"#MJX-3-TEX-N-31",[],{"type":18,"tag":5034,"props":7249,"children":7251},{"dataMmlNode":7239,"transform":7250},"translate(9009.9,0)",[7252,7268,7275,7282],{"type":18,"tag":5034,"props":7253,"children":7254},{"dataMmlNode":7128},[7255,7258,7262],{"type":18,"tag":5049,"props":7256,"children":7257},{"dataC":7167,"xLinkHref":7168},[],{"type":18,"tag":5049,"props":7259,"children":7261},{"dataC":7132,"xLinkHref":7133,"transform":7260},"translate(278,0)",[],{"type":18,"tag":5049,"props":7263,"children":7267},{"dataC":7264,"xLinkHref":7265,"transform":7266},"A0","#MJX-3-TEX-N-A0","translate(584,0)",[],{"type":18,"tag":5034,"props":7269,"children":7271},{"dataMmlNode":5046,"transform":7270},"translate(834,0)",[7272],{"type":18,"tag":5049,"props":7273,"children":7274},{"dataC":6850,"xLinkHref":7195},[],{"type":18,"tag":5034,"props":7276,"children":7278},{"dataMmlNode":5056,"transform":7277},"translate(1711.8,0)",[7279],{"type":18,"tag":5049,"props":7280,"children":7281},{"dataC":5088,"xLinkHref":7211},[],{"type":18,"tag":5034,"props":7283,"children":7285},{"dataMmlNode":5104,"transform":7284},"translate(2767.6,0)",[7286],{"type":18,"tag":5049,"props":7287,"children":7290},{"dataC":7288,"xLinkHref":7289},"30","#MJX-3-TEX-N-30",[],{"type":18,"tag":5034,"props":7292,"children":7294},{"dataMmlNode":7234,"transform":7293},"translate(0,-600)",[7295,7380],{"type":18,"tag":5034,"props":7296,"children":7297},{"dataMmlNode":7239},[7298,7304,7313,7344,7351,7358,7366,7373],{"type":18,"tag":5034,"props":7299,"children":7300},{"dataMmlNode":5046},[7301],{"type":18,"tag":5049,"props":7302,"children":7303},{"dataC":6850,"xLinkHref":7195},[],{"type":18,"tag":5034,"props":7305,"children":7307},{"dataMmlNode":5056,"transform":7306},"translate(822.2,0)",[7308],{"type":18,"tag":5049,"props":7309,"children":7312},{"dataC":7310,"xLinkHref":7311},"22C5","#MJX-3-TEX-N-22C5",[],{"type":18,"tag":5034,"props":7314,"children":7316},{"dataMmlNode":7128,"transform":7315},"translate(1322.4,0)",[7317,7320,7323,7326,7329,7332,7335,7338,7341],{"type":18,"tag":5049,"props":7318,"children":7319},{"dataC":7132,"xLinkHref":7133},[],{"type":18,"tag":5049,"props":7321,"children":7322},{"dataC":7137,"xLinkHref":7138,"transform":7139},[],{"type":18,"tag":5049,"props":7324,"children":7325},{"dataC":7143,"xLinkHref":7144,"transform":7145},[],{"type":18,"tag":5049,"props":7327,"children":7328},{"dataC":7149,"xLinkHref":7150,"transform":7151},[],{"type":18,"tag":5049,"props":7330,"children":7331},{"dataC":7155,"xLinkHref":7156,"transform":7157},[],{"type":18,"tag":5049,"props":7333,"children":7334},{"dataC":7161,"xLinkHref":7162,"transform":7163},[],{"type":18,"tag":5049,"props":7336,"children":7337},{"dataC":7167,"xLinkHref":7168,"transform":7169},[],{"type":18,"tag":5049,"props":7339,"children":7340},{"dataC":7137,"xLinkHref":7138,"transform":7173},[],{"type":18,"tag":5049,"props":7342,"children":7343},{"dataC":7177,"xLinkHref":7178,"transform":7179},[],{"type":18,"tag":5034,"props":7345,"children":7347},{"dataMmlNode":5056,"transform":7346},"translate(4909.4,0)",[7348],{"type":18,"tag":5049,"props":7349,"children":7350},{"dataC":5061,"xLinkHref":7187},[],{"type":18,"tag":5034,"props":7352,"children":7354},{"dataMmlNode":5046,"transform":7353},"translate(5298.4,0)",[7355],{"type":18,"tag":5049,"props":7356,"children":7357},{"dataC":6850,"xLinkHref":7195},[],{"type":18,"tag":5034,"props":7359,"children":7361},{"dataMmlNode":5056,"transform":7360},"translate(6120.7,0)",[7362],{"type":18,"tag":5049,"props":7363,"children":7365},{"dataC":6907,"xLinkHref":7364},"#MJX-3-TEX-N-2212",[],{"type":18,"tag":5034,"props":7367,"children":7369},{"dataMmlNode":5104,"transform":7368},"translate(7120.9,0)",[7370],{"type":18,"tag":5049,"props":7371,"children":7372},{"dataC":6916,"xLinkHref":7246},[],{"type":18,"tag":5034,"props":7374,"children":7376},{"dataMmlNode":5056,"transform":7375},"translate(7620.9,0)",[7377],{"type":18,"tag":5049,"props":7378,"children":7379},{"dataC":5079,"xLinkHref":7203},[],{"type":18,"tag":5034,"props":7381,"children":7382},{"dataMmlNode":7239,"transform":7250},[7383,7395,7401,7409],{"type":18,"tag":5034,"props":7384,"children":7385},{"dataMmlNode":7128},[7386,7389,7392],{"type":18,"tag":5049,"props":7387,"children":7388},{"dataC":7167,"xLinkHref":7168},[],{"type":18,"tag":5049,"props":7390,"children":7391},{"dataC":7132,"xLinkHref":7133,"transform":7260},[],{"type":18,"tag":5049,"props":7393,"children":7394},{"dataC":7264,"xLinkHref":7265,"transform":7266},[],{"type":18,"tag":5034,"props":7396,"children":7397},{"dataMmlNode":5046,"transform":7270},[7398],{"type":18,"tag":5049,"props":7399,"children":7400},{"dataC":6850,"xLinkHref":7195},[],{"type":18,"tag":5034,"props":7402,"children":7403},{"dataMmlNode":5056,"transform":7277},[7404],{"type":18,"tag":5049,"props":7405,"children":7408},{"dataC":7406,"xLinkHref":7407},"3E","#MJX-3-TEX-N-3E",[],{"type":18,"tag":5034,"props":7410,"children":7411},{"dataMmlNode":5104,"transform":7284},[7412],{"type":18,"tag":5049,"props":7413,"children":7414},{"dataC":7288,"xLinkHref":7289},[],{"type":18,"tag":5034,"props":7416,"children":7418},{"dataMmlNode":5056,"transform":7417},"translate(13027.4,0) translate(0 250)",[],{"type":18,"tag":40,"props":7420,"children":7421},{},[7422,7424,7699,7701,7706,7708,7714,7716,7721,7723],{"type":37,"value":7423},"这是函数逐步调用的展开过程, 最后通过 ",{"type":18,"tag":4981,"props":7425,"children":7427},{"className":7426,"jax":4985},[4984],[7428],{"type":18,"tag":4988,"props":7429,"children":7432},{"style":4990,"xmlns":4991,"width":7430,"height":6787,"role":22,"focusable":4994,"viewBox":7431,"xmlnsXLink":4996},"39.958ex","0 -750 17661.2 1000",[7433,7504],{"type":18,"tag":4999,"props":7434,"children":7435},{},[7436,7440,7444,7448,7452,7456,7460,7464,7468,7472,7476,7480,7484,7488,7492,7496,7500],{"type":18,"tag":5003,"props":7437,"children":7439},{"id":7438,"d":7035},"MJX-4-TEX-N-66",[],{"type":18,"tag":5003,"props":7441,"children":7443},{"id":7442,"d":7040},"MJX-4-TEX-N-61",[],{"type":18,"tag":5003,"props":7445,"children":7447},{"id":7446,"d":7045},"MJX-4-TEX-N-63",[],{"type":18,"tag":5003,"props":7449,"children":7451},{"id":7450,"d":7050},"MJX-4-TEX-N-74",[],{"type":18,"tag":5003,"props":7453,"children":7455},{"id":7454,"d":7055},"MJX-4-TEX-N-6F",[],{"type":18,"tag":5003,"props":7457,"children":7459},{"id":7458,"d":7060},"MJX-4-TEX-N-72",[],{"type":18,"tag":5003,"props":7461,"children":7463},{"id":7462,"d":7065},"MJX-4-TEX-N-69",[],{"type":18,"tag":5003,"props":7465,"children":7467},{"id":7466,"d":7070},"MJX-4-TEX-N-6C",[],{"type":18,"tag":5003,"props":7469,"children":7471},{"id":7470,"d":5011},"MJX-4-TEX-N-28",[],{"type":18,"tag":5003,"props":7473,"children":7475},{"id":7474,"d":6796},"MJX-4-TEX-I-1D45B",[],{"type":18,"tag":5003,"props":7477,"children":7479},{"id":7478,"d":5021},"MJX-4-TEX-N-29",[],{"type":18,"tag":5003,"props":7481,"children":7483},{"id":7482,"d":5026},"MJX-4-TEX-N-3D",[],{"type":18,"tag":5003,"props":7485,"children":7487},{"id":7486,"d":7109},"MJX-4-TEX-N-22C5",[],{"type":18,"tag":5003,"props":7489,"children":7491},{"id":7490,"d":6819},"MJX-4-TEX-N-2212",[],{"type":18,"tag":5003,"props":7493,"children":7495},{"id":7494,"d":6824},"MJX-4-TEX-N-31",[],{"type":18,"tag":5003,"props":7497,"children":7499},{"id":7498,"d":5031},"MJX-4-TEX-N-32",[],{"type":18,"tag":5003,"props":7501,"children":7503},{"id":7502,"d":6837},"MJX-4-TEX-N-22EF",[],{"type":18,"tag":5034,"props":7505,"children":7506},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[7507],{"type":18,"tag":5034,"props":7508,"children":7509},{"dataMmlNode":5042},[7510,7548,7555,7562,7569,7576,7582,7590,7597,7604,7612,7620,7627,7634,7641,7648,7655,7663,7670,7677,7685,7692],{"type":18,"tag":5034,"props":7511,"children":7512},{"dataMmlNode":7128},[7513,7517,7521,7525,7529,7533,7537,7541,7544],{"type":18,"tag":5049,"props":7514,"children":7516},{"dataC":7132,"xLinkHref":7515},"#MJX-4-TEX-N-66",[],{"type":18,"tag":5049,"props":7518,"children":7520},{"dataC":7137,"xLinkHref":7519,"transform":7139},"#MJX-4-TEX-N-61",[],{"type":18,"tag":5049,"props":7522,"children":7524},{"dataC":7143,"xLinkHref":7523,"transform":7145},"#MJX-4-TEX-N-63",[],{"type":18,"tag":5049,"props":7526,"children":7528},{"dataC":7149,"xLinkHref":7527,"transform":7151},"#MJX-4-TEX-N-74",[],{"type":18,"tag":5049,"props":7530,"children":7532},{"dataC":7155,"xLinkHref":7531,"transform":7157},"#MJX-4-TEX-N-6F",[],{"type":18,"tag":5049,"props":7534,"children":7536},{"dataC":7161,"xLinkHref":7535,"transform":7163},"#MJX-4-TEX-N-72",[],{"type":18,"tag":5049,"props":7538,"children":7540},{"dataC":7167,"xLinkHref":7539,"transform":7169},"#MJX-4-TEX-N-69",[],{"type":18,"tag":5049,"props":7542,"children":7543},{"dataC":7137,"xLinkHref":7519,"transform":7173},[],{"type":18,"tag":5049,"props":7545,"children":7547},{"dataC":7177,"xLinkHref":7546,"transform":7179},"#MJX-4-TEX-N-6C",[],{"type":18,"tag":5034,"props":7549,"children":7550},{"dataMmlNode":5056,"transform":7183},[7551],{"type":18,"tag":5049,"props":7552,"children":7554},{"dataC":5061,"xLinkHref":7553},"#MJX-4-TEX-N-28",[],{"type":18,"tag":5034,"props":7556,"children":7557},{"dataMmlNode":5046,"transform":7191},[7558],{"type":18,"tag":5049,"props":7559,"children":7561},{"dataC":6850,"xLinkHref":7560},"#MJX-4-TEX-I-1D45B",[],{"type":18,"tag":5034,"props":7563,"children":7564},{"dataMmlNode":5056,"transform":7199},[7565],{"type":18,"tag":5049,"props":7566,"children":7568},{"dataC":5079,"xLinkHref":7567},"#MJX-4-TEX-N-29",[],{"type":18,"tag":5034,"props":7570,"children":7571},{"dataMmlNode":5056,"transform":7207},[7572],{"type":18,"tag":5049,"props":7573,"children":7575},{"dataC":5088,"xLinkHref":7574},"#MJX-4-TEX-N-3D",[],{"type":18,"tag":5034,"props":7577,"children":7578},{"dataMmlNode":5046,"transform":7216},[7579],{"type":18,"tag":5049,"props":7580,"children":7581},{"dataC":6850,"xLinkHref":7560},[],{"type":18,"tag":5034,"props":7583,"children":7585},{"dataMmlNode":5056,"transform":7584},"translate(7120.8,0)",[7586],{"type":18,"tag":5049,"props":7587,"children":7589},{"dataC":7310,"xLinkHref":7588},"#MJX-4-TEX-N-22C5",[],{"type":18,"tag":5034,"props":7591,"children":7593},{"dataMmlNode":5056,"transform":7592},"translate(7621,0)",[7594],{"type":18,"tag":5049,"props":7595,"children":7596},{"dataC":5061,"xLinkHref":7553},[],{"type":18,"tag":5034,"props":7598,"children":7600},{"dataMmlNode":5046,"transform":7599},"translate(8010,0)",[7601],{"type":18,"tag":5049,"props":7602,"children":7603},{"dataC":6850,"xLinkHref":7560},[],{"type":18,"tag":5034,"props":7605,"children":7607},{"dataMmlNode":5056,"transform":7606},"translate(8832.2,0)",[7608],{"type":18,"tag":5049,"props":7609,"children":7611},{"dataC":6907,"xLinkHref":7610},"#MJX-4-TEX-N-2212",[],{"type":18,"tag":5034,"props":7613,"children":7615},{"dataMmlNode":5104,"transform":7614},"translate(9832.4,0)",[7616],{"type":18,"tag":5049,"props":7617,"children":7619},{"dataC":6916,"xLinkHref":7618},"#MJX-4-TEX-N-31",[],{"type":18,"tag":5034,"props":7621,"children":7623},{"dataMmlNode":5056,"transform":7622},"translate(10332.4,0)",[7624],{"type":18,"tag":5049,"props":7625,"children":7626},{"dataC":5079,"xLinkHref":7567},[],{"type":18,"tag":5034,"props":7628,"children":7630},{"dataMmlNode":5056,"transform":7629},"translate(10943.7,0)",[7631],{"type":18,"tag":5049,"props":7632,"children":7633},{"dataC":7310,"xLinkHref":7588},[],{"type":18,"tag":5034,"props":7635,"children":7637},{"dataMmlNode":5056,"transform":7636},"translate(11443.9,0)",[7638],{"type":18,"tag":5049,"props":7639,"children":7640},{"dataC":5061,"xLinkHref":7553},[],{"type":18,"tag":5034,"props":7642,"children":7644},{"dataMmlNode":5046,"transform":7643},"translate(11832.9,0)",[7645],{"type":18,"tag":5049,"props":7646,"children":7647},{"dataC":6850,"xLinkHref":7560},[],{"type":18,"tag":5034,"props":7649,"children":7651},{"dataMmlNode":5056,"transform":7650},"translate(12655.1,0)",[7652],{"type":18,"tag":5049,"props":7653,"children":7654},{"dataC":6907,"xLinkHref":7610},[],{"type":18,"tag":5034,"props":7656,"children":7658},{"dataMmlNode":5104,"transform":7657},"translate(13655.3,0)",[7659],{"type":18,"tag":5049,"props":7660,"children":7662},{"dataC":5109,"xLinkHref":7661},"#MJX-4-TEX-N-32",[],{"type":18,"tag":5034,"props":7664,"children":7666},{"dataMmlNode":5056,"transform":7665},"translate(14155.3,0)",[7667],{"type":18,"tag":5049,"props":7668,"children":7669},{"dataC":5079,"xLinkHref":7567},[],{"type":18,"tag":5034,"props":7671,"children":7673},{"dataMmlNode":5056,"transform":7672},"translate(14766.6,0)",[7674],{"type":18,"tag":5049,"props":7675,"children":7676},{"dataC":7310,"xLinkHref":7588},[],{"type":18,"tag":5034,"props":7678,"children":7680},{"dataMmlNode":5056,"transform":7679},"translate(15266.8,0)",[7681],{"type":18,"tag":5049,"props":7682,"children":7684},{"dataC":6983,"xLinkHref":7683},"#MJX-4-TEX-N-22EF",[],{"type":18,"tag":5034,"props":7686,"children":7688},{"dataMmlNode":5056,"transform":7687},"translate(16661,0)",[7689],{"type":18,"tag":5049,"props":7690,"children":7691},{"dataC":7310,"xLinkHref":7588},[],{"type":18,"tag":5034,"props":7693,"children":7695},{"dataMmlNode":5104,"transform":7694},"translate(17161.2,0)",[7696],{"type":18,"tag":5049,"props":7697,"children":7698},{"dataC":6916,"xLinkHref":7618},[],{"type":37,"value":7700}," 从基准情况开始 ",{"type":18,"tag":747,"props":7702,"children":7703},{},[7704],{"type":37,"value":7705},"逐步向上计算结果，将子问题的解组合成最终解。",{"type":37,"value":7707}," 他对应了 ",{"type":18,"tag":268,"props":7709,"children":7711},{"className":7710},[],[7712],{"type":37,"value":7713},"Result is N * SubResult.",{"type":37,"value":7715}," 这一部分，在 ",{"type":18,"tag":747,"props":7717,"children":7718},{},[7719],{"type":37,"value":7720},"结果返回时",{"type":37,"value":7722}," 调用。",{"type":18,"tag":747,"props":7724,"children":7725},{},[7726],{"type":37,"value":7727},"将子问题的结果（SubResult）与当前层的值（N）相乘，逐层合并结果。",{"type":18,"tag":40,"props":7729,"children":7730},{},[7731,7733,7738,7740,7745],{"type":37,"value":7732},"之后，更多的是数据结构的范畴。通过递归和不同数据结构的搭配，以解决复杂的问题。这个过程称之为 ",{"type":18,"tag":747,"props":7734,"children":7735},{},[7736],{"type":37,"value":7737},"算法",{"type":37,"value":7739},"，而数据结构的魅力在于，",{"type":18,"tag":747,"props":7741,"children":7742},{},[7743],{"type":37,"value":7744},"组织和管理数据",{"type":37,"value":3150},{"type":18,"tag":40,"props":7747,"children":7748},{},[7749,7751,7756],{"type":37,"value":7750},"我打算看完这本书后，会看一些数据结构类的书籍。之前我认为数据结构就是存储、组织数据的方式。现在我觉得数据结构是语言的基础，和功能、性能息息相关，语言操控着数据如何利用，例如 ",{"type":18,"tag":747,"props":7752,"children":7753},{},[7754],{"type":37,"value":7755},"存储、修改、遍历、删除",{"type":37,"value":7757},"，以实现各类效果和功能。",{"type":18,"tag":4071,"props":7759,"children":7761},{"id":7760},"不仅是连接-2",[7762],{"type":37,"value":7763},"不仅是连接 2",{"type":18,"tag":27,"props":7765,"children":7767},{":t":7766,"type":311},"不仅是连接",[],{"type":18,"tag":40,"props":7769,"children":7770},{},[7771,7773,7779],{"type":37,"value":7772},"在我了解 ",{"type":18,"tag":268,"props":7774,"children":7776},{"className":7775},[],[7777],{"type":37,"value":7778},"append",{"type":37,"value":7780}," 的时候。我只是单纯的认为他就是普通的连接数据，比如连接数组之类的，然后连接起来输出、还可以拆分。感觉没什么特别重要的，很不解为什么作者将它加入到本章节中。",{"type":18,"tag":263,"props":7782,"children":7784},{"code":7783},"?-append([1, 2], [3, 4], What).\n---\nWhat = [1, 2, 3, 4].\n\n?-append(Part1, Part2, [1, 2, 3, 4]).\n---\nPart1 = [],\nPart2 = [1, 2, 3, 4] ;\nPart1 = [1],\nPart2 = [2, 3, 4] ;\nPart1 = [1, 2],\nPart2 = [3, 4] ;\n",[7785],{"type":18,"tag":268,"props":7786,"children":7787},{"__ignoreMap":8},[7788],{"type":37,"value":7783},{"type":18,"tag":40,"props":7790,"children":7791},{},[7792,7794,7799],{"type":37,"value":7793},"后来，我可能觉得这是递归的经典应用之一。它展示了通过简单规则，递归地",{"type":18,"tag":747,"props":7795,"children":7796},{},[7797],{"type":37,"value":7798},"将复杂问题分解成小问题的过程",{"type":37,"value":7800},", 例如可以应用于：",{"type":18,"tag":1086,"props":7802,"children":7803},{},[7804,7809],{"type":18,"tag":189,"props":7805,"children":7806},{},[7807],{"type":37,"value":7808},"分治法：将一个大问题拆分成多个小问题（例如合并排序）",{"type":18,"tag":189,"props":7810,"children":7811},{},[7812],{"type":37,"value":7813},"树和图的遍历：通过递归规则遍历复杂数据结构。",{"type":18,"tag":4071,"props":7815,"children":7817},{"id":7816},"数据结构不仅是结构-1",[7818],{"type":37,"value":7819},"数据结构不仅是结构 1",{"type":18,"tag":27,"props":7821,"children":7823},{":t":7822,"type":311},"数据结构不仅是数据结构",[],{"type":18,"tag":40,"props":7825,"children":7826},{},[7827,7829,7836,7838,7843,7845,7850],{"type":37,"value":7828},"在此之前，我一直认为数据结构仅仅是存储数据的一种方法。但之后和 ",{"type":18,"tag":193,"props":7830,"children":7833},{"href":7831,"rel":7832},"https://dragove.site/",[197],[7834],{"type":37,"value":7835},"dragove",{"type":37,"value":7837}," 聊天后才意识到，数据的结构决定了如何 ",{"type":18,"tag":747,"props":7839,"children":7840},{},[7841],{"type":37,"value":7842},"操作数据",{"type":37,"value":7844}," 以及 ",{"type":18,"tag":747,"props":7846,"children":7847},{},[7848],{"type":37,"value":7849},"使用数据的方式",{"type":37,"value":7851},"，以及用什么样的写法，才能方便的操纵、使用这些数据。",{"type":18,"tag":263,"props":7853,"children":7855},{"code":7854},"class Cons {\n  constructor(h, t) {\n    this.h = h\n    this.t = t\n  }\n  toString() {\n    function iter(that) {\n      if (that.t == null) return that.h\n      return that.h + \", \" + iter(that.t)\n    }\n    return \"[\" + iter(this) + \"]\"\n  }\n\n  // 通过递归的方式遍历链表，并将一个函数 f 应用到每一个元素上，生成一个新的链表。\n  map(f) {\n    if (this.t == null) return new Cons(f(this.h), null)\n    return new Cons(f(this.h), this.t.map(f))\n  }\n\n  //  通过循环遍历整个链表，直接修改每个元素。\n  // 展示了操作数据的不同策略：递归与迭代。\n  map2(f) {\n    let it = this\n    while (it != null) {\n      it.h = f(it.h)\n      it = it.t\n    }\n  }\n}\n\nconst cons = (h, t) => new Cons(h, t)\nconst list = (...args) => {\n  if (args.length == 0) return null\n  return cons(args[0], list(...args.slice(1)))\n}\n\nconst c = list(2, 3, 4, 5, 6)\nconsole.log(list(2, 5, 8).map(x => x * 2).toString())\nc.map2(x => x + 8)\nconsole.log(c.toString())\n",[7856],{"type":18,"tag":268,"props":7857,"children":7858},{"__ignoreMap":8},[7859],{"type":37,"value":7854},{"type":18,"tag":40,"props":7861,"children":7862},{},[7863,7865,7870,7872,7878,7879,7885],{"type":37,"value":7864},"在这几十行 code 中，不仅实现了 ",{"type":18,"tag":747,"props":7866,"children":7867},{},[7868],{"type":37,"value":7869},"链表",{"type":37,"value":7871}," 结构，同时还定义了 ",{"type":18,"tag":268,"props":7873,"children":7875},{"className":7874},[],[7876],{"type":37,"value":7877},"map",{"type":37,"value":1033},{"type":18,"tag":268,"props":7880,"children":7882},{"className":7881},[],[7883],{"type":37,"value":7884},"map2",{"type":37,"value":7886}," 方法来操控这些数据。",{"type":18,"tag":71,"props":7888,"children":7889},{},[],{"type":18,"tag":165,"props":7891,"children":7893},{"id":7892},"逻辑谜题-3",[7894],{"type":37,"value":7895},"逻辑谜题 3",{"type":18,"tag":27,"props":7897,"children":7899},{":t":7898},"逻辑谜题",[],{"type":18,"tag":1504,"props":7901,"children":7902},{},[],{"type":18,"tag":116,"props":7904,"children":7905},{":type":2162},[7906],{"type":18,"tag":40,"props":7907,"children":7908},{},[7909],{"type":37,"value":7910},"不写“怎么做”，要写“什么是对的”。",{"type":18,"tag":40,"props":7912,"children":7913},{},[7914,7921,7922,7929,7931,7936],{"type":18,"tag":193,"props":7915,"children":7918},{"href":7916,"rel":7917},"https://en.wikipedia.org/wiki/Sudoku",[197],[7919],{"type":37,"value":7920},"数独（Sudoku）",{"type":37,"value":1033},{"type":18,"tag":193,"props":7923,"children":7926},{"href":7924,"rel":7925},"https://en.wikipedia.org/wiki/Eight_queens_puzzle",[197],[7927],{"type":37,"value":7928},"八皇后问题（Eight Queens）",{"type":37,"value":7930}," 是一个经典的逻辑谜题。前者貌似有很多在初中阶段的培训班拿出来讲，后者就不知道了。但有一个共同点就是 ",{"type":18,"tag":747,"props":7932,"children":7933},{},[7934],{"type":37,"value":7935},"他们都是数学计算能解出的谜题",{"type":37,"value":7937},"。我之前没有接触到这方面的，貌似只有那些大佬会喜欢然后经常去做这种类似的问题(可以有机会玩大佬玩过的小游戏了)：",{"type":18,"tag":4071,"props":7939,"children":7941},{"id":7940},"数独-1",[7942],{"type":37,"value":7943},"数独 1",{"type":18,"tag":27,"props":7945,"children":7947},{":t":7946,"type":311},"数独",[],{"type":18,"tag":1504,"props":7949,"children":7950},{},[],{"type":18,"tag":40,"props":7952,"children":7953},{},[7954],{"type":18,"tag":747,"props":7955,"children":7956},{},[7957],{"type":37,"value":7958},"规则：",{"type":18,"tag":185,"props":7960,"children":7961},{},[7962,7967],{"type":18,"tag":189,"props":7963,"children":7964},{},[7965],{"type":37,"value":7966},"每行、每列、每个小方格（2x2）（在4x4的情况下为4个2x2的方块）都必须包含 1~4 的数字",{"type":18,"tag":189,"props":7968,"children":7969},{},[7970],{"type":37,"value":7971},"不允许有重复数字（我觉得数独的中文翻译就体现出了这个意思）",{"type":18,"tag":263,"props":7973,"children":7975},{"code":7974},"+---+---+---+---+\n|   | 2 |   | 4 |\n+---+---+---+---+\n|   |   | 1 |   |\n+---+---+---+---+\n| 4 |   |   |   |\n+---+---+---+---+\n| 2 |   |   | 1 |\n+---+---+---+---+\n",[7976],{"type":18,"tag":268,"props":7977,"children":7978},{"__ignoreMap":8},[7979],{"type":37,"value":7974},{"type":18,"tag":40,"props":7981,"children":7982},{},[7983,7985,7990],{"type":37,"value":7984},"数独矩阵的维度为 4 行 4 列，它被分成 4 个 2x2 的小方格。我们要做的就是将数字填上去，但有需要符合规则，即 ",{"type":18,"tag":747,"props":7986,"children":7987},{},[7988],{"type":37,"value":7989},"每行不允许有重复数字",{"type":37,"value":4787},{"type":18,"tag":263,"props":7992,"children":7994},{"code":7993},":- use_module(library(clpfd)).\n\nsudoku4x4(Puzzle) :-\n    Puzzle = [A1, A2, A3, A4,\n              B1, B2, B3, B4,\n              C1, C2, C3, C4,\n              D1, D2, D3, D4],\n    \n    Puzzle ins 1..4,\n\n    % 每行不重复\n    all_different([A1, A2, A3, A4]),\n    all_different([B1, B2, B3, B4]),\n    all_different([C1, C2, C3, C4]),\n    all_different([D1, D2, D3, D4]),\n\n    % 每列不重复\n    all_different([A1, B1, C1, D1]),\n    all_different([A2, B2, C2, D2]),\n    all_different([A3, B3, C3, D3]),\n    all_different([A4, B4, C4, D4]),\n\n    % 每个 2x2 小格子不重复\n    all_different([A1, A2, B1, B2]),\n    all_different([A3, A4, B3, B4]),\n    all_different([C1, C2, D1, D2]),\n    all_different([C3, C4, D3, D4]),\n\n    labeling([], Puzzle),\n    print_sudoku([A1, A2, A3, A4,\n                  B1, B2, B3, B4,\n                  C1, C2, C3, C4,\n                  D1, D2, D3, D4]).\n\nprint_sudoku([]).\nprint_sudoku([A, B, C, D | Rest]) :-\n    format('+---+---+---+---+\\n'),\n    format('| ~w | ~w | ~w | ~w |\\n', [A, B, C, D]),\n    print_sudoku(Rest).\n\n\n---\n\n?-sudoku4x4(P).\n\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n| 3 | 4 | 1 | 2 |\n+---+---+---+---+\n| 2 | 1 | 4 | 3 |\n+---+---+---+---+\n| 4 | 3 | 2 | 1 |\n",[7995],{"type":18,"tag":268,"props":7996,"children":7997},{"__ignoreMap":8},[7998],{"type":37,"value":7993},{"type":18,"tag":4071,"props":8000,"children":8002},{"id":8001},"八皇后谜题-1",[8003],{"type":37,"value":8004},"八皇后谜题 1",{"type":18,"tag":27,"props":8006,"children":8008},{":t":8007,"type":311},"八皇后问题",[],{"type":18,"tag":40,"props":8010,"children":8011},{},[8012],{"type":37,"value":8013},"要理解八皇后谜题，首先需要了解国际象棋的基本规则和玩法。（不知道为什么 Windows 和 macOS 基本上都会自带一个国际象棋游戏，有些 Linux 也会预装，好像在国外国际象棋就跟斗地主一样人人都会吧），首先，国际象棋一般是这样的：",{"type":18,"tag":263,"props":8015,"children":8017},{"code":8016},"   a b c d e f g h           \n  +-+-+-+-+-+-+-+-+          \n8 |♜|♞|♝|♛|♚|♝|♞|♜| ← Black  \n7 |♟|♟|♟|♟|♟|♟|♟|♟|          \n6 | | | | | | | | |          \n5 | | | | | | | | |          \n4 | | | | | | | | |          \n3 | | | | | | | | |          \n2 |♙|♙|♙|♙|♙|♙|♙|♙|          \n1 |♖|♘|♗|♕|♔|♗|♘|♖|  ← White \n  +-+-+-+-+-+-+-+-+          \n   a b c d e f g h           \n\n---\n\n皇后长这样：♕ ♛\n\n♔   王   King    ♚\n♕   后   Queen   ♛\n♖   车   Rook    ♜\n♗   象   Bishop  ♝\n♘   马   Knight  ♞\n♙   兵   Pawn    ♟\n\n*建议放大看\n",[8018],{"type":18,"tag":268,"props":8019,"children":8020},{"__ignoreMap":8},[8021],{"type":37,"value":8016},{"type":18,"tag":1504,"props":8023,"children":8024},{},[],{"type":18,"tag":116,"props":8026,"children":8027},{},[8028],{"type":18,"tag":40,"props":8029,"children":8030},{},[8031,8033,8036],{"type":37,"value":8032},"八皇后问题的核心就是:",{"type":18,"tag":1504,"props":8034,"children":8035},{},[],{"type":37,"value":8037},"\n在 8×8 的棋盘上，放置 8 个皇后，使得 任何两个皇后都不会互相攻击。",{"type":18,"tag":40,"props":8039,"children":8040},{},[8041,8046],{"type":18,"tag":747,"props":8042,"children":8043},{},[8044],{"type":37,"value":8045},"皇后的规则：",{"type":37,"value":8047},"\n皇后是棋盘上 最强的棋子，她的移动规则是：",{"type":18,"tag":185,"props":8049,"children":8050},{},[8051,8056],{"type":18,"tag":189,"props":8052,"children":8053},{},[8054],{"type":37,"value":8055},"可以横向、纵向、斜向任意距离走",{"type":18,"tag":189,"props":8057,"children":8058},{},[8059],{"type":37,"value":8060},"不能跳过其他棋子",{"type":18,"tag":40,"props":8062,"children":8063},{},[8064,8069],{"type":18,"tag":747,"props":8065,"children":8066},{},[8067],{"type":37,"value":8068},"皇后可以攻击",{"type":37,"value":4787},{"type":18,"tag":185,"props":8071,"children":8072},{},[8073,8078,8083],{"type":18,"tag":189,"props":8074,"children":8075},{},[8076],{"type":37,"value":8077},"同一行",{"type":18,"tag":189,"props":8079,"children":8080},{},[8081],{"type":37,"value":8082},"同一列",{"type":18,"tag":189,"props":8084,"children":8085},{},[8086],{"type":37,"value":8087},"所有对角线",{"type":18,"tag":40,"props":8089,"children":8090},{},[8091],{"type":18,"tag":747,"props":8092,"children":8093},{},[8094],{"type":37,"value":8095},"所以我们要确保：",{"type":37,"value":2273},{"type":18,"tag":391,"props":8098,"children":8099},{},[8100,8116],{"type":18,"tag":395,"props":8101,"children":8102},{},[8103],{"type":18,"tag":399,"props":8104,"children":8105},{},[8106,8111],{"type":18,"tag":403,"props":8107,"children":8108},{},[8109],{"type":37,"value":8110},"不同皇后之间",{"type":18,"tag":403,"props":8112,"children":8113},{},[8114],{"type":37,"value":8115},"意义",{"type":18,"tag":414,"props":8117,"children":8118},{},[8119,8132,8145],{"type":18,"tag":399,"props":8120,"children":8121},{},[8122,8127],{"type":18,"tag":421,"props":8123,"children":8124},{},[8125],{"type":37,"value":8126},"不在同一行",{"type":18,"tag":421,"props":8128,"children":8129},{},[8130],{"type":37,"value":8131},"每一行只放一个皇后（数组表示）",{"type":18,"tag":399,"props":8133,"children":8134},{},[8135,8140],{"type":18,"tag":421,"props":8136,"children":8137},{},[8138],{"type":37,"value":8139},"不在同一列",{"type":18,"tag":421,"props":8141,"children":8142},{},[8143],{"type":37,"value":8144},"所有列数字不重复（all_different）",{"type":18,"tag":399,"props":8146,"children":8147},{},[8148,8153],{"type":18,"tag":421,"props":8149,"children":8150},{},[8151],{"type":37,"value":8152},"不在同一对角线",{"type":18,"tag":421,"props":8154,"children":8155},{},[8156],{"type":37,"value":8157},"行差 ≠ 列差",{"type":18,"tag":40,"props":8159,"children":8160},{},[8161],{"type":37,"value":8162},"在这个过程中需要保证:",{"type":18,"tag":185,"props":8164,"children":8165},{},[8166,8171],{"type":18,"tag":189,"props":8167,"children":8168},{},[8169],{"type":37,"value":8170},"保证列表中的数互不相同（列不同）",{"type":18,"tag":189,"props":8172,"children":8173},{},[8174,8176],{"type":37,"value":8175},"保证没有两个数的对角线关系成立：",{"type":18,"tag":4981,"props":8177,"children":8179},{"className":8178,"jax":4985},[4984],[8180],{"type":18,"tag":4988,"props":8181,"children":8184},{"style":4990,"xmlns":4991,"width":8182,"height":6787,"role":22,"focusable":4994,"viewBox":8183,"xmlnsXLink":4996},"25.53ex","0 -750 11284.4 1000",[8185,8235],{"type":18,"tag":4999,"props":8186,"children":8187},{},[8188,8193,8198,8203,8207,8212,8217,8221,8226,8230],{"type":18,"tag":5003,"props":8189,"children":8192},{"id":8190,"d":8191},"MJX-5-TEX-I-1D44E","M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z",[],{"type":18,"tag":5003,"props":8194,"children":8197},{"id":8195,"d":8196},"MJX-5-TEX-I-1D44F","M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z",[],{"type":18,"tag":5003,"props":8199,"children":8202},{"id":8200,"d":8201},"MJX-5-TEX-I-1D460","M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z",[],{"type":18,"tag":5003,"props":8204,"children":8206},{"id":8205,"d":5011},"MJX-5-TEX-N-28",[],{"type":18,"tag":5003,"props":8208,"children":8211},{"id":8209,"d":8210},"MJX-5-TEX-I-1D444","M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z",[],{"type":18,"tag":5003,"props":8213,"children":8216},{"id":8214,"d":8215},"MJX-5-TEX-I-1D456","M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z",[],{"type":18,"tag":5003,"props":8218,"children":8220},{"id":8219,"d":6819},"MJX-5-TEX-N-2212",[],{"type":18,"tag":5003,"props":8222,"children":8225},{"id":8223,"d":8224},"MJX-5-TEX-I-1D457","M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z",[],{"type":18,"tag":5003,"props":8227,"children":8229},{"id":8228,"d":5021},"MJX-5-TEX-N-29",[],{"type":18,"tag":5003,"props":8231,"children":8234},{"id":8232,"d":8233},"MJX-5-TEX-N-2260","M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z",[],{"type":18,"tag":5034,"props":8236,"children":8237},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[8238],{"type":18,"tag":5034,"props":8239,"children":8240},{"dataMmlNode":5042},[8241,8249,8258,8267,8275,8284,8293,8301,8308,8317,8325,8334,8341,8348,8355,8362,8369,8376,8383],{"type":18,"tag":5034,"props":8242,"children":8243},{"dataMmlNode":5046},[8244],{"type":18,"tag":5049,"props":8245,"children":8248},{"dataC":8246,"xLinkHref":8247},"1D44E","#MJX-5-TEX-I-1D44E",[],{"type":18,"tag":5034,"props":8250,"children":8252},{"dataMmlNode":5046,"transform":8251},"translate(529,0)",[8253],{"type":18,"tag":5049,"props":8254,"children":8257},{"dataC":8255,"xLinkHref":8256},"1D44F","#MJX-5-TEX-I-1D44F",[],{"type":18,"tag":5034,"props":8259,"children":8261},{"dataMmlNode":5046,"transform":8260},"translate(958,0)",[8262],{"type":18,"tag":5049,"props":8263,"children":8266},{"dataC":8264,"xLinkHref":8265},"1D460","#MJX-5-TEX-I-1D460",[],{"type":18,"tag":5034,"props":8268,"children":8270},{"dataMmlNode":5056,"transform":8269},"translate(1427,0)",[8271],{"type":18,"tag":5049,"props":8272,"children":8274},{"dataC":5061,"xLinkHref":8273},"#MJX-5-TEX-N-28",[],{"type":18,"tag":5034,"props":8276,"children":8278},{"dataMmlNode":5046,"transform":8277},"translate(1816,0)",[8279],{"type":18,"tag":5049,"props":8280,"children":8283},{"dataC":8281,"xLinkHref":8282},"1D444","#MJX-5-TEX-I-1D444",[],{"type":18,"tag":5034,"props":8285,"children":8287},{"dataMmlNode":5046,"transform":8286},"translate(2607,0)",[8288],{"type":18,"tag":5049,"props":8289,"children":8292},{"dataC":8290,"xLinkHref":8291},"1D456","#MJX-5-TEX-I-1D456",[],{"type":18,"tag":5034,"props":8294,"children":8296},{"dataMmlNode":5056,"transform":8295},"translate(3174.2,0)",[8297],{"type":18,"tag":5049,"props":8298,"children":8300},{"dataC":6907,"xLinkHref":8299},"#MJX-5-TEX-N-2212",[],{"type":18,"tag":5034,"props":8302,"children":8304},{"dataMmlNode":5046,"transform":8303},"translate(4174.4,0)",[8305],{"type":18,"tag":5049,"props":8306,"children":8307},{"dataC":8281,"xLinkHref":8282},[],{"type":18,"tag":5034,"props":8309,"children":8311},{"dataMmlNode":5046,"transform":8310},"translate(4965.4,0)",[8312],{"type":18,"tag":5049,"props":8313,"children":8316},{"dataC":8314,"xLinkHref":8315},"1D457","#MJX-5-TEX-I-1D457",[],{"type":18,"tag":5034,"props":8318,"children":8320},{"dataMmlNode":5056,"transform":8319},"translate(5377.4,0)",[8321],{"type":18,"tag":5049,"props":8322,"children":8324},{"dataC":5079,"xLinkHref":8323},"#MJX-5-TEX-N-29",[],{"type":18,"tag":5034,"props":8326,"children":8328},{"dataMmlNode":5056,"transform":8327},"translate(6044.2,0)",[8329],{"type":18,"tag":5049,"props":8330,"children":8333},{"dataC":8331,"xLinkHref":8332},"2260","#MJX-5-TEX-N-2260",[],{"type":18,"tag":5034,"props":8335,"children":8337},{"dataMmlNode":5046,"transform":8336},"translate(7100,0)",[8338],{"type":18,"tag":5049,"props":8339,"children":8340},{"dataC":8246,"xLinkHref":8247},[],{"type":18,"tag":5034,"props":8342,"children":8344},{"dataMmlNode":5046,"transform":8343},"translate(7629,0)",[8345],{"type":18,"tag":5049,"props":8346,"children":8347},{"dataC":8255,"xLinkHref":8256},[],{"type":18,"tag":5034,"props":8349,"children":8351},{"dataMmlNode":5046,"transform":8350},"translate(8058,0)",[8352],{"type":18,"tag":5049,"props":8353,"children":8354},{"dataC":8264,"xLinkHref":8265},[],{"type":18,"tag":5034,"props":8356,"children":8358},{"dataMmlNode":5056,"transform":8357},"translate(8527,0)",[8359],{"type":18,"tag":5049,"props":8360,"children":8361},{"dataC":5061,"xLinkHref":8273},[],{"type":18,"tag":5034,"props":8363,"children":8365},{"dataMmlNode":5046,"transform":8364},"translate(8916,0)",[8366],{"type":18,"tag":5049,"props":8367,"children":8368},{"dataC":8290,"xLinkHref":8291},[],{"type":18,"tag":5034,"props":8370,"children":8372},{"dataMmlNode":5056,"transform":8371},"translate(9483.2,0)",[8373],{"type":18,"tag":5049,"props":8374,"children":8375},{"dataC":6907,"xLinkHref":8299},[],{"type":18,"tag":5034,"props":8377,"children":8379},{"dataMmlNode":5046,"transform":8378},"translate(10483.4,0)",[8380],{"type":18,"tag":5049,"props":8381,"children":8382},{"dataC":8314,"xLinkHref":8315},[],{"type":18,"tag":5034,"props":8384,"children":8386},{"dataMmlNode":5056,"transform":8385},"translate(10895.4,0)",[8387],{"type":18,"tag":5049,"props":8388,"children":8389},{"dataC":5079,"xLinkHref":8323},[],{"type":18,"tag":263,"props":8391,"children":8393},{"code":8392},"% 引入约束逻辑编程库 clpfd（Constraint Logic Programming over Finite Domains）\n:- use_module(library(clpfd)).\n\n% 主谓词：寻找一个满足八皇后条件的解，并打印棋盘\neight_queens(Qs) :-\n    % Qs 是一个列表，表示每一行皇后所在的列位置（索引是行，值是列）\n    Qs = [Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8],\n\n    % 每个皇后只能放在第 1 到 8 列之间\n    Qs ins 1..8,\n\n    % 所有列都必须不同（确保没有皇后在同一列）\n    all_different(Qs),\n\n    % 检查所有皇后是否安全（不互相攻击）\n    safe_queens(Qs),\n\n    % 求出一个满足所有条件的解（进行求值）\n    labeling([], Qs),\n\n    % 打印最终的棋盘结果\n    print_board(Qs, 1).\n\n% 空列表是安全的（递归终止条件）\nsafe_queens([]).\n\n% 递归检查当前皇后与后续皇后是否安全\nsafe_queens([Q|Qs]) :-\n    % 先递归检查后面的皇后是否安全\n    safe_queens(Qs),\n    % 再检查当前皇后 Q 是否与后续的每个皇后构成攻击\n    no_attack(Q, Qs, 1).\n\n% 当前皇后 Q 和空列表当然不会攻击（递归终止）\nno_attack(_, [], _).\n\n% 判断当前皇后 Q 是否不攻击 Q1（行距为 D），然后递归检查其余\nno_attack(Q, [Q1|Qs], D) :-\n    % Q 不能与 Q1 在同一列\n    Q #\\= Q1,\n    % Q 不能与 Q1 在同一对角线（行距 = 列距）\n    abs(Q - Q1) #\\= D,\n    % 增加行距后递归继续检查\n    D1 #= D + 1,\n    no_attack(Q, Qs, D1).\n\n% ========== 打印棋盘部分 ==========\n\n% 打印完成，空列表停止递归\nprint_board([], _).\n\n% 打印每一行（即每个皇后）\nprint_board([Q|Rest], _) :-\n    % 打印当前行，Q 表示皇后在第几列\n    print_row(Q, 1),\n    nl,  % 换行\n    % 递归打印下一行\n    print_board(Rest, _).\n\n% 超过8列就停止打印该行\nprint_row(_, 9) :- !.\n\n% 打印棋盘一行：如果当前位置是皇后所在列，就打印 \"Q\"，否则打印 \".\"\nprint_row(Q, Col) :-\n    (Q =:= Col -> write(' Q ') ; write(' . ')),\n    Col1 is Col + 1,\n    print_row(Q, Col1).\n\n\n---\n?-eight_queens(Qs).\n\n Q  .  .  .  .  .  .  . \n .  .  .  .  Q  .  .  . \n .  .  .  .  .  .  .  Q \n .  .  .  .  .  Q  .  . \n .  .  Q  .  .  .  .  . \n .  .  .  .  .  .  Q  . \n .  Q  .  .  .  .  .  . \n .  .  .  Q  .  .  .  . \nQs = [1, 5, 8, 6, 3, 7, 2, 4]\n",[8394],{"type":18,"tag":268,"props":8395,"children":8396},{"__ignoreMap":8},[8397],{"type":37,"value":8392},{"type":18,"tag":40,"props":8399,"children":8400},{},[8401,8403,8408,8410,8417],{"type":37,"value":8402},"最后得出了这个结果。你会发现一个规律即 ",{"type":18,"tag":747,"props":8404,"children":8405},{},[8406],{"type":37,"value":8407},"每个行的皇后最后放在一起都不会重叠",{"type":37,"value":8409},"，严谨点的来说是 ",{"type":18,"tag":193,"props":8411,"children":8414},{"href":8412,"rel":8413},"https://en.wikipedia.org/wiki/No-three-in-line_problem",[197],[8415],{"type":37,"value":8416},"无三共线点",{"type":37,"value":8418}," 翻译的可能不是那么准确，但详细了解后得知：",{"type":18,"tag":4071,"props":8420,"children":8422},{"id":8421},"无三线共点-3",[8423],{"type":37,"value":8424},"无三线共点 3",{"type":18,"tag":27,"props":8426,"children":8428},{"t":8427,"type":311},"无三线共点",[],{"type":18,"tag":40,"props":8430,"children":8431},{},[8432,8434,8441],{"type":37,"value":8433},"这是问题是我在八皇后谜题了解到的，同时还涉及到一个 ",{"type":18,"tag":193,"props":8435,"children":8438},{"href":8436,"rel":8437},"https://en.wikipedia.org/wiki/List_of_unsolved_problems_in_mathematics",[197],[8439],{"type":37,"value":8440},"数学中未解决的问题",{"type":37,"value":8442},"，即",{"type":18,"tag":116,"props":8444,"children":8445},{"type":2162},[8446],{"type":18,"tag":40,"props":8447,"children":8448},{},[8449],{"type":37,"value":8450},"在 n × n 的网格中可以放置多少个点，使得其中任何三个点都不位于一条线上？",{"type":18,"tag":40,"props":8452,"children":8453},{},[8454,8456],{"type":37,"value":8455},"在此之前，需要了解 ",{"type":18,"tag":747,"props":8457,"children":8458},{},[8459],{"type":37,"value":8460},"不共线、三个点共线",{"type":18,"tag":263,"props":8462,"children":8464},{"code":8463},"无三点共线\n    C\n   / \\\n  /   \\\n A-----B\n\n三点共线\nA---B---C\n",[8465],{"type":18,"tag":268,"props":8466,"children":8467},{"__ignoreMap":8},[8468],{"type":37,"value":8463},{"type":18,"tag":40,"props":8470,"children":8471},{},[8472,8474,8478],{"type":37,"value":8473},"那么很明显，八皇后问题最后的计算答案是 ",{"type":18,"tag":747,"props":8475,"children":8476},{},[8477],{"type":37,"value":8427},{"type":37,"value":8479}," 的。因此维基百科才会在更多解法中列举了这个.",{"type":18,"tag":263,"props":8481,"children":8486},{"code":8482,"language":3336,"meta":8483,"className":8484},". Q . .     列: 2        1 . Q . .   ← Q1 在第1行第2列\n. . . Q     列: 4        2 . . . Q   ← Q2 在第2行第4列\nQ . . .     列: 1        3 Q . . .   ← Q3 在第3行第1列\n. . Q .     列: 3        4 . . Q .   ← Q4 在第4行第3列\n","2 3 4",[8485],"language-1",[8487],{"type":18,"tag":268,"props":8488,"children":8489},{"__ignoreMap":8},[8490],{"type":37,"value":8482},{"type":18,"tag":71,"props":8492,"children":8493},{},[],{"type":18,"tag":32,"props":8495,"children":8497},{"id":8496},"scala-1",[8498],{"type":37,"value":8499},"Scala 1",{"type":18,"tag":27,"props":8501,"children":8502},{"t":1830},[],{"type":18,"tag":40,"props":8504,"children":8505},{},[8506,8508,8515,8517,8524],{"type":37,"value":8507},"对 Scala 印象比较深的就是 Scala 社区主要的维护者",{"type":18,"tag":193,"props":8509,"children":8512},{"href":8510,"rel":8511},"https://github.com/lihaoyi",[197],[8513],{"type":37,"value":8514},"李浩毅",{"type":37,"value":8516},",竟然是新加坡前总理李显龙的次子。还是 ",{"type":18,"tag":193,"props":8518,"children":8521},{"href":8519,"rel":8520},"https://www.handsonscala.com/",[197],[8522],{"type":37,"value":8523},"Hands-on Scala Programming",{"type":37,"value":8525}," 一书的作者（这本书还免费观看章节部分的内容，对引导学习 scala 很有帮助）。我第一次看到 Scala 这个名字，还以为是某个数据库，毕竟 LOGO 不太像是一个 lang。",{"type":18,"tag":165,"props":8527,"children":8529},{"id":8528},"编程范式-3",[8530],{"type":37,"value":8531},"编程范式 3",{"type":18,"tag":27,"props":8533,"children":8534},{"t":1635,"type":311},[],{"type":18,"tag":40,"props":8536,"children":8537},{},[8538,8540,8545],{"type":37,"value":8539},"在此之前，作者通过 Ruby, IO lang, Prolog 介绍了 起码三种编程范式，每一种编程范式都会掀起一场腥风血雨。而 Scala 是函数式和面向对象的一种桥梁，本书作者称之为 “混合语言”。目的是 ",{"type":18,"tag":747,"props":8541,"children":8542},{},[8543],{"type":37,"value":8544},"架起 Java 和 Haskell",{"type":37,"value":8546}," 之间的鸿沟连接起来",{"type":18,"tag":1447,"props":8548,"children":8549},{"type":1449},[8550,8560,8563],{"type":18,"tag":40,"props":8551,"children":8552},{},[8553,8555,8558],{"type":37,"value":8554},"2009: 作者的总结",{"type":18,"tag":1504,"props":8556,"children":8557},{},[],{"type":37,"value":8559},"\n随着程序需求的增加，编程语言也在不断进化。每二十年左右，旧的编程范式无法满足新的需求，新的范式必须出现。每个新的范式都会诞生一批编程语言，最初可能效率高但不实用（如 Smalltalk 和 Lisp）。最终，某些混合语言（如 C++）成为“桥梁”，然后是商业化语言（如 Java 或 C#），最终成熟的语言会实现新的范式。",{"type":18,"tag":1504,"props":8561,"children":8562},{},[],{"type":18,"tag":40,"props":8564,"children":8565},{},[8566],{"type":37,"value":8567},"2025: 说的太对了",{"type":18,"tag":40,"props":8569,"children":8570},{},[8571],{"type":37,"value":8572},"例如 Scala 是 OOP × FP 混合的编程范式，所以有面向对象和函数式范式的应用:",{"type":18,"tag":263,"props":8574,"children":8576},{"code":8575},"case class 咖啡机(品牌: String) {\n  // OOP\n  def 制作咖啡(类型: String): String = \n    // FP\n    val 配方 = 类型 match {\n      case \"拿铁\" => (咖啡量: Int) => s\"${咖啡量}ml咖啡+200ml奶\"\n      case _ => (咖啡量: Int) => s\"${咖啡量}ml纯咖啡\"\n    }\n    配方(30)\n}\n\nval 我的机器 = 咖啡机(\"Nespresso\")\nprintln(我的机器.制作咖啡(\"拿铁\")) // 30ml咖啡+200ml奶\n",[8577],{"type":18,"tag":268,"props":8578,"children":8579},{"__ignoreMap":8},[8580],{"type":37,"value":8575},{"type":18,"tag":116,"props":8582,"children":8583},{},[8584],{"type":18,"tag":40,"props":8585,"children":8586},{},[8587],{"type":37,"value":8588},"没想到用中文定义的对象和函数竟然可以输出",{"type":18,"tag":40,"props":8590,"children":8591},{},[8592],{"type":37,"value":8593},"你可以理解为面向对象是将一个东西描述成对象，然后函数是具体的行为，例如：",{"type":37,"value":3682},{"type":18,"tag":391,"props":8596,"children":8597},{},[8598,8614],{"type":18,"tag":395,"props":8599,"children":8600},{},[8601],{"type":18,"tag":399,"props":8602,"children":8603},{},[8604,8609],{"type":18,"tag":403,"props":8605,"children":8606},{},[8607],{"type":37,"value":8608},"OOP",{"type":18,"tag":403,"props":8610,"children":8611},{},[8612],{"type":37,"value":8613},"FP",{"type":18,"tag":414,"props":8615,"children":8616},{},[8617],{"type":18,"tag":399,"props":8618,"children":8619},{},[8620,8625],{"type":18,"tag":421,"props":8621,"children":8622},{},[8623],{"type":37,"value":8624},"杯子(300, \"玻璃\")",{"type":18,"tag":421,"props":8626,"children":8627},{},[8628],{"type":37,"value":8629},"水量 => 水量 * 2",{"type":18,"tag":40,"props":8631,"children":8632},{},[8633,8635,8641],{"type":37,"value":8634},"不过由于我看这本书是总结语言的学习思路，所以我不会再本机装 lang，基本上用在线环境来运行。这里我推荐使用 Scala 提供的在线环境 ",{"type":18,"tag":193,"props":8636,"children":8638},{"href":3144,"rel":8637},[197],[8639],{"type":37,"value":8640},"Scastie",{"type":37,"value":8642}," 对于 Scala 给我的直接映像就是输出 Hello 有很多种方法，比如：",{"type":18,"tag":263,"props":8644,"children":8646},{"code":8645},"object Main extends App{print(\"Hello, World!\")}\n\n@main\ndef hello(): Unit =\n  println(\"Hello, World!\")\n\nprintln(\"Hello, World\")\n",[8647],{"type":18,"tag":268,"props":8648,"children":8649},{"__ignoreMap":8},[8650],{"type":37,"value":8645},{"type":18,"tag":40,"props":8652,"children":8653},{},[8654,8656,8662],{"type":37,"value":8655},"如你所见起码有三种方式可以输出 ",{"type":18,"tag":268,"props":8657,"children":8659},{"className":8658},[],[8660],{"type":37,"value":8661},"Hello, World",{"type":37,"value":8663},"， 这三种方式体现了 Scala 灵活性：",{"type":18,"tag":185,"props":8665,"children":8666},{},[8667,8672,8677],{"type":18,"tag":189,"props":8668,"children":8669},{},[8670],{"type":37,"value":8671},"使用 object 和 App，继承 App trait，简化主程序结构",{"type":18,"tag":189,"props":8673,"children":8674},{},[8675],{"type":37,"value":8676},"Scala 3 的 @main 注解,不需要显式声明类和方法。",{"type":18,"tag":189,"props":8678,"children":8679},{},[8680],{"type":37,"value":8681},"不依赖类或对象结构",{"type":18,"tag":40,"props":8683,"children":8684},{},[8685],{"type":37,"value":8686},"不过和 Java 相比，那也是非常的直观明了的：",{"type":18,"tag":263,"props":8688,"children":8690},{"code":8689},"public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n",[8691],{"type":18,"tag":268,"props":8692,"children":8693},{"__ignoreMap":8},[8694],{"type":37,"value":8689},{"type":37,"value":2273},{"type":18,"tag":391,"props":8697,"children":8698},{},[8699,8715],{"type":18,"tag":395,"props":8700,"children":8701},{},[8702],{"type":18,"tag":399,"props":8703,"children":8704},{},[8705,8710],{"type":18,"tag":403,"props":8706,"children":8707},{},[8708],{"type":37,"value":8709},"LANG",{"type":18,"tag":403,"props":8711,"children":8712},{},[8713],{"type":37,"value":8714},"TYPE",{"type":18,"tag":414,"props":8716,"children":8717},{},[8718,8729,8742],{"type":18,"tag":399,"props":8719,"children":8720},{},[8721,8725],{"type":18,"tag":421,"props":8722,"children":8723},{},[8724],{"type":37,"value":438},{"type":18,"tag":421,"props":8726,"children":8727},{},[8728],{"type":37,"value":2259},{"type":18,"tag":399,"props":8730,"children":8731},{},[8732,8737],{"type":18,"tag":421,"props":8733,"children":8734},{},[8735],{"type":37,"value":8736},"IO",{"type":18,"tag":421,"props":8738,"children":8739},{},[8740],{"type":37,"value":8741},"原型式编程",{"type":18,"tag":399,"props":8743,"children":8744},{},[8745,8749],{"type":18,"tag":421,"props":8746,"children":8747},{},[8748],{"type":37,"value":1817},{"type":18,"tag":421,"props":8750,"children":8751},{},[8752],{"type":37,"value":8753},"声明式编程",{"type":18,"tag":165,"props":8755,"children":8757},{"id":8756},"类型-1",[8758],{"type":37,"value":8759},"类型 1",{"type":18,"tag":27,"props":8761,"children":8762},{"t":1596,"type":311},[],{"type":18,"tag":40,"props":8764,"children":8765},{},[8766,8768,8774,8776,8782],{"type":37,"value":8767},"Scala 是可以推断出类型的，比如 ",{"type":18,"tag":268,"props":8769,"children":8771},{"className":8770},[],[8772],{"type":37,"value":8773},"1 + 1",{"type":37,"value":8775},"，IDE 会在旁边显示 ",{"type":18,"tag":268,"props":8777,"children":8779},{"className":8778},[],[8780],{"type":37,"value":8781},"2: scala.Int",{"type":37,"value":8783},", 例如下面的类型转换（String 真方便啊）",{"type":18,"tag":1447,"props":8785,"children":8786},{"type":1449},[8787],{"type":18,"tag":40,"props":8788,"children":8789},{},[8790,8792,8797,8799,8805,8807,8813,8815],{"type":37,"value":8791},"在 Scala 2 的某个小版本中，Int + String 之类的 ",{"type":18,"tag":747,"props":8793,"children":8794},{},[8795],{"type":37,"value":8796},"插值",{"type":37,"value":8798}," 被废弃掉了，需要使用 ",{"type":18,"tag":268,"props":8800,"children":8802},{"className":8801},[],[8803],{"type":37,"value":8804},"$",{"type":37,"value":8806}," 进行插值，反正最后都会被归类到 ",{"type":18,"tag":268,"props":8808,"children":8810},{"className":8809},[],[8811],{"type":37,"value":8812},"String",{"type":37,"value":8814}," type。（String 和 Json 以及 Object 是我最喜欢的类型）:\n",{"type":18,"tag":268,"props":8816,"children":8818},{"className":8817},[],[8819],{"type":37,"value":8820},"val pi = 3.14159; println(f\"Pi is approximately $pi%1.2f\")",{"type":18,"tag":263,"props":8822,"children":8824},{"code":8823},"val x = 4 + \"abc\"\nprintln(x.getClass) \n\nval s = \"abc\" + 4\nprintln(s.getClass) // class java.lang.String\n",[8825],{"type":18,"tag":268,"props":8826,"children":8827},{"__ignoreMap":8},[8828],{"type":37,"value":8823},{"type":18,"tag":40,"props":8830,"children":8831},{},[8832],{"type":37,"value":8833},"Scala 2 和 3 version 的语法可能略有不同。所以这就是我读本书的理由，语言和语法结构是会变的。无论多么熟悉，过个两三年和四五年就会改变很多，但如果根据语言的基础来学，则很快就能上手。",{"type":18,"tag":4071,"props":8835,"children":8837},{"id":8836},"ast-2",[8838],{"type":37,"value":8839},"AST 2",{"type":18,"tag":27,"props":8841,"children":8843},{"t":8842,"type":311},"AST",[],{"type":18,"tag":40,"props":8845,"children":8846},{},[8847,8849,8854],{"type":37,"value":8848},"AST 是抽象语法树（AST, Abstract Syntax Tree）的简称。当你写一段 Scala 代码时，Scala 编译器会将其转换为抽象语法树（AST），然后再进行后续的编译阶段（如类型检查、优化、字节码生成）。可以 ",{"type":18,"tag":747,"props":8850,"children":8851},{},[8852],{"type":37,"value":8853},"查看该代码在编译阶段形成的 AST 结构:",{"type":37,"value":3150},{"type":18,"tag":40,"props":8856,"children":8857},{},[8858,8860,8867,8869,8874],{"type":37,"value":8859},"在 Scala 中，可以使用 ",{"type":18,"tag":193,"props":8861,"children":8864},{"href":8862,"rel":8863},"https://scalameta.org/ast-explorer/#",[197],[8865],{"type":37,"value":8866},"Scala AST explorer",{"type":37,"value":8868}," 来进行查看。例如上面我说 ",{"type":18,"tag":747,"props":8870,"children":8871},{},[8872],{"type":37,"value":8873},"反正最后都要归类到 String",{"type":37,"value":8875}," 其实很不严谨，可以将 Copy 放进去查看在编译的时候都做了什么：",{"type":18,"tag":263,"props":8877,"children":8879},{"code":8878},"val x = 4 + \"abc\"\nprintln(x.getClass) \n\n---\n\nSource [0;38]\n├── Defn.Val [0;17]\n│   ├── Pat.Var [4;5]\n│   │   └── Term.Name [4;5]   // x\n│   └── Term.ApplyInfix [8;17]\n│       ├── Lit.Int [8;9]     // 4\n│       ├── Term.Name [10;11] // +\n│       ├── Type.ArgClause [12;12]\n│       └── Term.ArgClause [12;17]\n│           └── Lit.String [12;17] // \"abc\"\n└── Term.Apply [18;37]\n    ├── Term.Name [18;25]     // println\n    └── Term.ArgClause [25;37]\n        └── Term.Select [26;36]\n            ├── Term.Name [26;27]   // x\n            └── Term.Name [28;36]   // getClass\n",[8880],{"type":18,"tag":268,"props":8881,"children":8882},{"__ignoreMap":8},[8883],{"type":37,"value":8878},{"type":18,"tag":40,"props":8885,"children":8886},{},[8887,8889,8894,8896,8902,8904,8910,8912,8917,8919,8925,8927,8932],{"type":37,"value":8888},"也就是说 ",{"type":18,"tag":268,"props":8890,"children":8892},{"className":8891},[],[8893],{"type":37,"value":3398},{"type":37,"value":8895}," 是被编译器推理到了是 ",{"type":18,"tag":268,"props":8897,"children":8899},{"className":8898},[],[8900],{"type":37,"value":8901},"Int",{"type":37,"value":8903}," 类型的，",{"type":18,"tag":268,"props":8905,"children":8907},{"className":8906},[],[8908],{"type":37,"value":8909},"abc",{"type":37,"value":8911}," 是 ",{"type":18,"tag":268,"props":8913,"children":8915},{"className":8914},[],[8916],{"type":37,"value":8812},{"type":37,"value":8918}," 虽然最后组合成了 ",{"type":18,"tag":268,"props":8920,"children":8922},{"className":8921},[],[8923],{"type":37,"value":8924},"4abc",{"type":37,"value":8926}," 也还是 ",{"type":18,"tag":268,"props":8928,"children":8930},{"className":8929},[],[8931],{"type":37,"value":8812},{"type":37,"value":8933}," 但你不觉得看到了编译过程不还是很酷的吗？",{"type":18,"tag":71,"props":8935,"children":8936},{},[],{"type":18,"tag":4071,"props":8938,"children":8940},{"id":8939},"泛型-1",[8941],{"type":37,"value":8942},"泛型 1",{"type":18,"tag":27,"props":8944,"children":8946},{"t":8945},"泛型",[],{"type":18,"tag":40,"props":8948,"children":8949},{},[8950,8952,8957],{"type":37,"value":8951},"泛型（Generics）类型是一个 ",{"type":18,"tag":747,"props":8953,"children":8954},{},[8955],{"type":37,"value":8956},"在程序设计中用于定义可以处理不同类型的类、特质或函数",{"type":37,"value":8958}," 方式。泛型类型的基本概念：",{"type":18,"tag":185,"props":8960,"children":8961},{},[8962,8967],{"type":18,"tag":189,"props":8963,"children":8964},{},[8965],{"type":37,"value":8966},"类型参数：可以为类、特质或函数提供一个占位符类型，这个类型在使用时会被实际的类型所替代。",{"type":18,"tag":189,"props":8968,"children":8969},{},[8970],{"type":37,"value":8971},"类型推断：Scala 会根据您传递的具体类型自动推断出类型参数。",{"type":18,"tag":40,"props":8973,"children":8974},{},[8975,8977,8982],{"type":37,"value":8976},"简单点来说，其作用在于 ",{"type":18,"tag":747,"props":8978,"children":8979},{},[8980],{"type":37,"value":8981},"在定义类、特质、或方法时，使用类型参数来使其可以处理不同类型的数据",{"type":37,"value":8983},"。让方法或类处理不同类型的数据，而不需要为每种类型都写一个单独的实现。",{"type":18,"tag":263,"props":8985,"children":8987},{"code":8986},"// 定义一个泛型类 Box\nclass Box[A](val value: A) {\n  def getValue: A = value\n}\n\nval intBox = new Box(10)       // A 被推断为 Int\nval stringBox = new Box(\"Hello\") // A 被推断为 String\n\nprintln(intBox.getValue)    // 输出: 10\nprintln(stringBox.getValue) // 输出: Hello\n",[8988],{"type":18,"tag":268,"props":8989,"children":8990},{"__ignoreMap":8},[8991],{"type":37,"value":8986},{"type":18,"tag":40,"props":8993,"children":8994},{},[8995,8997,9003],{"type":37,"value":8996},"泛型很像 TypeScript 中 ",{"type":18,"tag":268,"props":8998,"children":9000},{"className":8999},[],[9001],{"type":37,"value":9002},"Interface",{"type":37,"value":9004},", ：",{"type":18,"tag":263,"props":9006,"children":9008},{"code":9007},"// 定义一个泛型接口\ninterface Box\u003CT> {\n  value: T;\n  getValue(): T;\n}\n\n// 实现泛型接口\nclass NumberBox implements Box\u003Cnumber> {\n  constructor(public value: number) {}\n  getValue(): number {\n    return this.value;\n  }\n}\n\nclass StringBox implements Box\u003Cstring> {\n  constructor(public value: string) {}\n  getValue(): string {\n    return this.value;\n  }\n}\n\nconst numBox = new NumberBox(42);\nconsole.log(numBox.getValue()); // 输出: 42\n\nconst strBox = new StringBox(\"Hello\");\nconsole.log(strBox.getValue()); // 输出: Hello\n",[9009],{"type":18,"tag":268,"props":9010,"children":9011},{"__ignoreMap":8},[9012],{"type":37,"value":9007},{"type":18,"tag":71,"props":9014,"children":9015},{},[],{"type":18,"tag":4323,"props":9017,"children":9019},{"id":9018},"eventbus-2",[9020],{"type":37,"value":9021},"EventBus 2",{"type":18,"tag":27,"props":9023,"children":9025},{"t":9024},"EventBus",[],{"type":18,"tag":40,"props":9027,"children":9028},{},[9029,9031,9038,9040,9045],{"type":37,"value":9030},"EventBus 是一个类型安全的概念，有点像是 Vue 中的 ",{"type":18,"tag":193,"props":9032,"children":9035},{"href":9033,"rel":9034},"https://v3-migration.vuejs.org/zh/breaking-changes/events-api.html",[197],[9036],{"type":37,"value":9037},"Events",{"type":37,"value":9039},"。不过类型安全好像远没有 ",{"type":18,"tag":747,"props":9041,"children":9042},{},[9043],{"type":37,"value":9044},"内存安全",{"type":37,"value":9046}," 那么让人感到欣喜，仿佛是必须的？",{"type":18,"tag":1447,"props":9048,"children":9049},{"type":1449},[9050],{"type":18,"tag":40,"props":9051,"children":9052},{},[9053],{"type":37,"value":9054},"一个类型安全的“事件通道”——你可以向里面发送（emit）事件，其他组件可以监听（subscribe）这些事件并作出反应。",{"type":18,"tag":263,"props":9056,"children":9058},{"code":9057},"enum CopyEvent:\n  case CopyWholeTree\n  case CopyNode(id: Int)\n\n... \nval copyEvents = EventBus[CopyEvent]()\n...\nonClick.mapToStrict(CopyEvent.CopyWholeTree) --> copyEvents\n...\n// in app scope: div(\ncopyEvents --> { \n  case CopyEvent.CopyWholeTree =>  ...\n  case CopyEvent.CopyNode(id) => ...\n}\n// ...)\n",[9059],{"type":18,"tag":268,"props":9060,"children":9061},{"__ignoreMap":8},[9062],{"type":37,"value":9057},{"type":18,"tag":9064,"props":9065,"children":9067},"h5",{"id":9066},"adt-3",[9068],{"type":37,"value":9069},"ADT 3",{"type":18,"tag":27,"props":9071,"children":9073},{"t":9072,"type":311},"代数数据类型",[],{"type":18,"tag":40,"props":9075,"children":9076},{},[9077],{"type":37,"value":9078},"密封的代数数据类型（Algebraic Data Types, ADTs）是函数式编程核心的类型系统之一，通常包括了：",{"type":18,"tag":185,"props":9080,"children":9081},{},[9082,9087],{"type":18,"tag":189,"props":9083,"children":9084},{},[9085],{"type":37,"value":9086},"积类型（Product Type） = A 和 B 一起出现（“组合”数据）",{"type":18,"tag":189,"props":9088,"children":9089},{},[9090],{"type":37,"value":9091},"和类型（Sum Type） = A 或 B 之一出现（“选择”数据）",{"type":18,"tag":40,"props":9093,"children":9094},{},[9095,9097,9103],{"type":37,"value":9096},"例如上面的 Code 就用到了 ADT 中的 ",{"type":18,"tag":268,"props":9098,"children":9100},{"className":9099},[],[9101],{"type":37,"value":9102},"Sum Types",{"type":37,"value":9104}," :",{"type":18,"tag":263,"props":9106,"children":9108},{"code":9107},"enum PaymentMethod:\n  case CreditCard(number: String)\n  case Cash\n  case PayPal(email: String)\n// 这表示付款方式只能是三种之一 —— 你不能“同时”用信用卡 + PayPal。\n",[9109],{"type":18,"tag":268,"props":9110,"children":9111},{"__ignoreMap":8},[9112],{"type":37,"value":9107},{"type":18,"tag":40,"props":9114,"children":9115},{},[9116],{"type":37,"value":9117},"如果是 Product type，那就是：",{"type":18,"tag":263,"props":9119,"children":9121},{"code":9120},"case class Person(name: String, age: Int)\n// Person 拥有 name 和 age，你无法只给其中一个，必须两个都有 —— 这就是积类型。\n",[9122],{"type":18,"tag":268,"props":9123,"children":9124},{"__ignoreMap":8},[9125],{"type":37,"value":9120},{"type":18,"tag":71,"props":9127,"children":9128},{},[],{"type":18,"tag":4071,"props":9130,"children":9132},{"id":9131},"trait-2",[9133],{"type":37,"value":9134},"trait 2",{"type":18,"tag":27,"props":9136,"children":9138},{"t":9137},"trait",[],{"type":18,"tag":40,"props":9140,"children":9141},{},[9142],{"type":37,"value":9143},"Trait (特质)，trait 和泛型几乎同时出没，所以要理解 trait 之前需要理解泛型。Trait 和接口很像，我觉得中文翻译成“特质”不太理解，“特征、特点”倒是很符合 Trait 实现的逻辑：",{"type":18,"tag":1447,"props":9145,"children":9146},{"type":1449},[9147,9166],{"type":18,"tag":40,"props":9148,"children":9149},{},[9150,9152,9159,9160,9165],{"type":37,"value":9151},"我觉得这里可以参考下 Rust 的文档 ",{"type":18,"tag":193,"props":9153,"children":9156},{"href":9154,"rel":9155},"https://doc.rust-lang.org/book/ch10-02-traits.html",[197],[9157],{"type":37,"value":9158},"Traits",{"type":37,"value":214},{"type":18,"tag":747,"props":9161,"children":9162},{},[9163],{"type":37,"value":9164},"Trait:定义共同行为",{"type":37,"value":3150},{"type":18,"tag":40,"props":9167,"children":9168},{},[9169,9171,9178],{"type":37,"value":9170},"Trait 在心理学中是一个理论，即 ",{"type":18,"tag":193,"props":9172,"children":9175},{"href":9173,"rel":9174},"https://en.wikipedia.org/wiki/Trait_theory",[197],[9176],{"type":37,"value":9177},"特质理论",{"type":37,"value":9179},"。是研究人类个性的一种方法，所以 Rust 的文档更符合 Trait 的意思。",{"type":18,"tag":40,"props":9181,"children":9182},{},[9183,9185,9191,9193,9199,9201],{"type":37,"value":9184},"比如下面 Code 就实现了一个 ",{"type":18,"tag":268,"props":9186,"children":9188},{"className":9187},[],[9189],{"type":37,"value":9190},"动物(Animal)",{"type":37,"value":9192}," 的 ",{"type":18,"tag":268,"props":9194,"children":9196},{"className":9195},[],[9197],{"type":37,"value":9198},"Trait",{"type":37,"value":9200}," 即它们都会 ",{"type":18,"tag":268,"props":9202,"children":9204},{"className":9203},[],[9205],{"type":37,"value":2414},{"type":18,"tag":263,"props":9207,"children":9209},{"code":9208},"// 定义 trait\ntrait Animal:\n  def speak(): String\n\n// 定义实现 trait 的类\nclass Dog extends Animal:\n  def speak(): String = \"Woof!\"\n\nclass Cat extends Animal:\n  def speak(): String = \"Meow!\"\n\n// 创建实例\nval dog = new Dog()\nval cat = new Cat()\n\n// 调用方法\nprintln(dog.speak()) // 输出: Woof!\nprintln(cat.speak()) // 输出: Meow!\n",[9210],{"type":18,"tag":268,"props":9211,"children":9212},{"__ignoreMap":8},[9213],{"type":37,"value":9208},{"type":18,"tag":40,"props":9215,"children":9216},{},[9217,9219,9225],{"type":37,"value":9218},"如果用 ",{"type":18,"tag":268,"props":9220,"children":9222},{"className":9221},[],[9223],{"type":37,"value":9224},"interface",{"type":37,"value":9226}," 的话，比如 Java:",{"type":18,"tag":263,"props":9228,"children":9230},{"code":9229},"interface Animal {\n    String speak();\n}\n\nclass Dog implements Animal {\n    public String speak() {\n        return \"Woof!\";\n    }\n}\n\nclass Cat implements Animal {\n    public String speak() {\n        return \"Meow!\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal dog = new Dog();\n        Animal cat = new Cat();\n        System.out.println(dog.speak());  // Woof!\n        System.out.println(cat.speak());  // Meow!\n    }\n}\n",[9231],{"type":18,"tag":268,"props":9232,"children":9233},{"__ignoreMap":8},[9234],{"type":37,"value":9229},{"type":18,"tag":71,"props":9236,"children":9237},{},[],{"type":18,"tag":4071,"props":9239,"children":9241},{"id":9240},"隐式类型-3",[9242],{"type":37,"value":9243},"隐式类型 3",{"type":18,"tag":27,"props":9245,"children":9247},{"t":9246},"隐式类型",[],{"type":37,"value":5229},{"type":18,"tag":391,"props":9250,"children":9251},{},[9252,9278],{"type":18,"tag":395,"props":9253,"children":9254},{},[9255],{"type":18,"tag":399,"props":9256,"children":9257},{},[9258,9263,9268,9273],{"type":18,"tag":403,"props":9259,"children":9260},{},[9261],{"type":37,"value":9262},"机制类型",{"type":18,"tag":403,"props":9264,"children":9265},{},[9266],{"type":37,"value":9267},"英文名",{"type":18,"tag":403,"props":9269,"children":9270},{},[9271],{"type":37,"value":9272},"主要作用",{"type":18,"tag":403,"props":9274,"children":9275},{},[9276],{"type":37,"value":9277},"示例作用",{"type":18,"tag":414,"props":9279,"children":9280},{},[9281,9304,9327],{"type":18,"tag":399,"props":9282,"children":9283},{},[9284,9289,9294,9299],{"type":18,"tag":421,"props":9285,"children":9286},{},[9287],{"type":37,"value":9288},"隐式转换",{"type":18,"tag":421,"props":9290,"children":9291},{},[9292],{"type":37,"value":9293},"Implicit Conversion",{"type":18,"tag":421,"props":9295,"children":9296},{},[9297],{"type":37,"value":9298},"当类型不匹配时，自动将一个类型转换为另一个类型",{"type":18,"tag":421,"props":9300,"children":9301},{},[9302],{"type":37,"value":9303},"Int → String / 自定义类型转化",{"type":18,"tag":399,"props":9305,"children":9306},{},[9307,9312,9317,9322],{"type":18,"tag":421,"props":9308,"children":9309},{},[9310],{"type":37,"value":9311},"隐式参数",{"type":18,"tag":421,"props":9313,"children":9314},{},[9315],{"type":37,"value":9316},"Implicit Parameter",{"type":18,"tag":421,"props":9318,"children":9319},{},[9320],{"type":37,"value":9321},"自动填入函数所需的上下文参数",{"type":18,"tag":421,"props":9323,"children":9324},{},[9325],{"type":37,"value":9326},"注入默认值、依赖注入、上下文控制",{"type":18,"tag":399,"props":9328,"children":9329},{},[9330,9335,9340,9345],{"type":18,"tag":421,"props":9331,"children":9332},{},[9333],{"type":37,"value":9334},"隐式类",{"type":18,"tag":421,"props":9336,"children":9337},{},[9338],{"type":37,"value":9339},"Implicit Class",{"type":18,"tag":421,"props":9341,"children":9342},{},[9343],{"type":37,"value":9344},"为已有类型添加新方法（类似扩展方法）",{"type":18,"tag":421,"props":9346,"children":9347},{},[9348,9350,9356],{"type":37,"value":9349},"给 Int 添加 ",{"type":18,"tag":268,"props":9351,"children":9353},{"className":9352},[],[9354],{"type":37,"value":9355},"squared",{"type":37,"value":9357}," 方法",{"type":18,"tag":4323,"props":9359,"children":9361},{"id":9360},"隐式类型转换-2",[9362],{"type":37,"value":9363},"隐式类型转换 2",{"type":18,"tag":27,"props":9365,"children":9367},{"t":9366,"type":311},"隐式类型转换",[],{"type":18,"tag":40,"props":9369,"children":9370},{},[9371,9373,9379,9380,9387,9389],{"type":37,"value":9372},"如果要学习一个语言，那么类型系统无非是重要的。在 Scala 中是支持类型推断的，也就是不像静态语言那样需要自己指定类型 ",{"type":18,"tag":268,"props":9374,"children":9376},{"className":9375},[],[9377],{"type":37,"value":9378},"let x: number = 42;",{"type":37,"value":3150},{"type":18,"tag":193,"props":9381,"children":9384},{"href":9382,"rel":9383},"https://en.wikipedia.org/wiki/Type_conversion#Implicit_type_conversion",[197],[9385],{"type":37,"value":9386},"隐式类型(Implicit type conversion)",{"type":37,"value":9388},"转换, ",{"type":18,"tag":747,"props":9390,"children":9391},{},[9392],{"type":37,"value":9393},"是由编译器自动执行的类型转换。",{"type":18,"tag":40,"props":9395,"children":9396},{},[9397,9399,9405,9407,9412],{"type":37,"value":9398},"也就是说，当一个类型不符合预期时，编译器会尝试通过一个标记为 ",{"type":18,"tag":268,"props":9400,"children":9402},{"className":9401},[],[9403],{"type":37,"value":9404},"implicit",{"type":37,"value":9406}," 的函数将其自动转换为所需的类型。如果你将之前的插值放到 AST 里面，就会看到 ",{"type":18,"tag":268,"props":9408,"children":9410},{"className":9409},[],[9411],{"type":37,"value":9404},{"type":37,"value":4787},{"type":18,"tag":263,"props":9414,"children":9416},{"code":9415},"val pi = 3.14159\nprintln(f\"Pi is approximately $pi%1.2f\")\n\n---\n\nSource [0;57]\n├── Defn.Val [0;16]\n│   ├── Pat.Var [4;6]\n│   │   └── Term.Name [4;6]         // pi\n│   └── Lit.Double [9;16]           // 3.14159\n└── Term.Apply [17;57]\n    ├── Term.Name [17;24]           // println\n    └── Term.ArgClause [24;57]\n        └── Term.Interpolate [25;56]\n            ├── Term.Name [25;26]       // f (interpolator)\n            ├── Lit.String [27;47]      // \"Pi is approximately \"\n            ├── Term.Name [48;50]       // pi (in interpolation)\n            └── Lit.String [50;55]      // \"%1.2f\"\n",[9417],{"type":18,"tag":268,"props":9418,"children":9419},{"__ignoreMap":8},[9420],{"type":37,"value":9415},{"type":18,"tag":4323,"props":9422,"children":9424},{"id":9423},"隐式类型参数-1",[9425],{"type":37,"value":9426},"隐式类型参数 1",{"type":18,"tag":27,"props":9428,"children":9430},{"t":9429,"type":311},"隐式类型参数",[],{"type":18,"tag":40,"props":9432,"children":9433},{},[9434,9436,9440],{"type":37,"value":9435},"隐式类型参数我的理解就是一种 ",{"type":18,"tag":747,"props":9437,"children":9438},{},[9439],{"type":37,"value":1596},{"type":37,"value":9441}," 安全的注入机制，例如：",{"type":18,"tag":263,"props":9443,"children":9445},{"code":9444},"implicit val defaultGreeting: String = \"Hello\"\n\ndef greet(name: String)(implicit greeting: String) = println(s\"$greeting, $name\")\n\ngreet(\"Alice\") // Alice, Hello \n",[9446],{"type":18,"tag":268,"props":9447,"children":9448},{"__ignoreMap":8},[9449],{"type":37,"value":9444},{"type":18,"tag":40,"props":9451,"children":9452},{},[9453,9455,9460,9462,9468,9470,9476],{"type":37,"value":9454},"通过 ",{"type":18,"tag":193,"props":9456,"children":9458},{"href":8862,"rel":9457},[197],[9459],{"type":37,"value":8866},{"type":37,"value":9461}," 可以看到，",{"type":18,"tag":268,"props":9463,"children":9465},{"className":9464},[],[9466],{"type":37,"value":9467},"$greeting",{"type":37,"value":9469}," 在编译的时候，是会被 ",{"type":18,"tag":268,"props":9471,"children":9473},{"className":9472},[],[9474],{"type":37,"value":9475},"Interpolate",{"type":37,"value":9477}," 占位的：",{"type":18,"tag":263,"props":9479,"children":9481},{"code":9480},"- Term.Interpolate [109;128]\n    Term.Name [109;110]\n    Lit.String [111;111]\n    Lit.String [120;122]\n    Lit.String [127;127]\n    Term.Name [112;120]\n    Term.Name [123;127]\n",[9482],{"type":18,"tag":268,"props":9483,"children":9484},{"__ignoreMap":8},[9485],{"type":37,"value":9480},{"type":18,"tag":40,"props":9487,"children":9488},{},[9489],{"type":37,"value":9490},"如果不依赖隐式类型参数来写，那么就会是这样的：",{"type":18,"tag":263,"props":9492,"children":9494},{"code":9493},"def greet(name: String, greeting: String) = println(s\"$greeting, $name\")\n\nval defaultGreeting = \"Hello\"\n\ngreet(\"Alice\", defaultGreeting) // Hello, Alice\n",[9495],{"type":18,"tag":268,"props":9496,"children":9497},{"__ignoreMap":8},[9498],{"type":37,"value":9493},{"type":18,"tag":4323,"props":9500,"children":9502},{"id":9501},"隐式类-1",[9503],{"type":37,"value":9504},"隐式类 1",{"type":18,"tag":27,"props":9506,"children":9507},{"t":9334,"type":311},[],{"type":18,"tag":40,"props":9509,"children":9510},{},[9511,9513,9519],{"type":37,"value":9512},"隐式类非常好理解，很像 JavaScript 中的 ",{"type":18,"tag":268,"props":9514,"children":9516},{"className":9515},[],[9517],{"type":37,"value":9518},"prototype",{"type":37,"value":9520}," 例如：",{"type":18,"tag":263,"props":9522,"children":9524},{"code":9523},"implicit class RichInt(val x: Int) {\n  def squared: Int = x * x\n}\n\nprintln(4.squared)  // 16\n",[9525],{"type":18,"tag":268,"props":9526,"children":9527},{"__ignoreMap":8},[9528],{"type":37,"value":9523},{"type":18,"tag":40,"props":9530,"children":9531},{},[9532],{"type":37,"value":9533},"在 Javascript 中就是：",{"type":18,"tag":263,"props":9535,"children":9537},{"code":9536},"Number.prototype.square = function() {\n  return this * this;\n};\n\nconsole.log((5).square()); // 25\n",[9538],{"type":18,"tag":268,"props":9539,"children":9540},{"__ignoreMap":8},[9541],{"type":37,"value":9536},{"type":18,"tag":71,"props":9543,"children":9544},{},[],{"type":18,"tag":165,"props":9546,"children":9548},{"id":9547},"不可变性-2",[9549],{"type":37,"value":9550},"不可变性 2",{"type":18,"tag":27,"props":9552,"children":9554},{"t":9553},"不可变性",[],{"type":18,"tag":40,"props":9556,"children":9557},{},[9558,9560,9567,9569,9575,9577,9582],{"type":37,"value":9559},"感觉这本书上讲的一些 Scala 特性，在 2025 年的现在好像都是现代语言的必需品了(可能当时确实是比较新颖的)。对于不可变性好像函数式语言都支持？起码 JavaScript 是这样的。在 English 中，",{"type":18,"tag":193,"props":9561,"children":9564},{"href":9562,"rel":9563},"https://en.wikipedia.org/wiki/Immutable_object",[197],[9565],{"type":37,"value":9566},"不可变性（Immutability）",{"type":37,"value":9568}," 通常会在后面加一个 ",{"type":18,"tag":268,"props":9570,"children":9572},{"className":9571},[],[9573],{"type":37,"value":9574},"object",{"type":37,"value":9576},"，组合起来就是 ",{"type":18,"tag":747,"props":9578,"children":9579},{},[9580],{"type":37,"value":9581},"不可变对象",{"type":37,"value":3150},{"type":18,"tag":40,"props":9584,"children":9585},{},[9586,9588,9592,9593,9598,9600,9606,9608,9614],{"type":37,"value":9587},"所以不可变性包含了 ",{"type":18,"tag":747,"props":9589,"children":9590},{},[9591],{"type":37,"value":9581},{"type":37,"value":1033},{"type":18,"tag":747,"props":9594,"children":9595},{},[9596],{"type":37,"value":9597},"不可变函数/变量",{"type":37,"value":9599},", 比如在 scala 中，",{"type":18,"tag":268,"props":9601,"children":9603},{"className":9602},[],[9604],{"type":37,"value":9605},"var",{"type":37,"value":9607}," 是可变的，",{"type":18,"tag":268,"props":9609,"children":9611},{"className":9610},[],[9612],{"type":37,"value":9613},"val",{"type":37,"value":9615}," 就不可变:",{"type":18,"tag":263,"props":9617,"children":9619},{"code":9618},"var a = \"mutable\"\na = \"changed\"   // OK\n\nval b = \"immutable\"\nb = \"change\"     // 编译错误\n",[9620],{"type":18,"tag":268,"props":9621,"children":9622},{"__ignoreMap":8},[9623],{"type":37,"value":9618},{"type":18,"tag":40,"props":9625,"children":9626},{},[9627,9629,9636,9638,9643],{"type":37,"value":9628},"Scala 明确区分了可变（mutable）对象和不可变（immutable）类，具体可以参考 ",{"type":18,"tag":193,"props":9630,"children":9633},{"href":9631,"rel":9632},"https://docs.scala-lang.org/overviews/collections-2.13/concrete-mutable-collection-classes.html",[197],[9634],{"type":37,"value":9635},"Concrete Mutable Collection Classes",{"type":37,"value":9637},", ",{"type":18,"tag":747,"props":9639,"children":9640},{},[9641],{"type":37,"value":9642},"也就是将可变的和不可变的都弄了个类型",{"type":37,"value":5676},{"type":37,"value":9645},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":9647,"children":9648},{},[9649,9675],{"type":18,"tag":395,"props":9650,"children":9651},{},[9652],{"type":18,"tag":399,"props":9653,"children":9654},{},[9655,9660,9665,9670],{"type":18,"tag":403,"props":9656,"children":9657},{},[9658],{"type":37,"value":9659},"集合类型",{"type":18,"tag":403,"props":9661,"children":9662},{},[9663],{"type":37,"value":9664},"不可变版本（immutable）",{"type":18,"tag":403,"props":9666,"children":9667},{},[9668],{"type":37,"value":9669},"可变版本（mutable）",{"type":18,"tag":403,"props":9671,"children":9672},{},[9673],{"type":37,"value":9674},"特点说明",{"type":18,"tag":414,"props":9676,"children":9677},{},[9678,9730,9768,9813,9851,9886],{"type":18,"tag":399,"props":9679,"children":9680},{},[9681,9686,9702,9725],{"type":18,"tag":421,"props":9682,"children":9683},{},[9684],{"type":37,"value":9685},"序列（seq）",{"type":18,"tag":421,"props":9687,"children":9688},{},[9689,9695,9696],{"type":18,"tag":268,"props":9690,"children":9692},{"className":9691},[],[9693],{"type":37,"value":9694},"list",{"type":37,"value":9637},{"type":18,"tag":268,"props":9697,"children":9699},{"className":9698},[],[9700],{"type":37,"value":9701},"vector",{"type":18,"tag":421,"props":9703,"children":9704},{},[9705,9711,9712,9718,9719],{"type":18,"tag":268,"props":9706,"children":9708},{"className":9707},[],[9709],{"type":37,"value":9710},"arraybuffer",{"type":37,"value":9637},{"type":18,"tag":268,"props":9713,"children":9715},{"className":9714},[],[9716],{"type":37,"value":9717},"listbuffer",{"type":37,"value":9637},{"type":18,"tag":268,"props":9720,"children":9722},{"className":9721},[],[9723],{"type":37,"value":9724},"queue",{"type":18,"tag":421,"props":9726,"children":9727},{},[9728],{"type":37,"value":9729},"list 是不可变链表，vector 性能更平衡，arraybuffer 可变、适合追加",{"type":18,"tag":399,"props":9731,"children":9732},{},[9733,9738,9754,9763],{"type":18,"tag":421,"props":9734,"children":9735},{},[9736],{"type":37,"value":9737},"集合（set）",{"type":18,"tag":421,"props":9739,"children":9740},{},[9741,9747,9748],{"type":18,"tag":268,"props":9742,"children":9744},{"className":9743},[],[9745],{"type":37,"value":9746},"set",{"type":37,"value":9637},{"type":18,"tag":268,"props":9749,"children":9751},{"className":9750},[],[9752],{"type":37,"value":9753},"sortedset",{"type":18,"tag":421,"props":9755,"children":9756},{},[9757],{"type":18,"tag":268,"props":9758,"children":9760},{"className":9759},[],[9761],{"type":37,"value":9762},"hashset",{"type":18,"tag":421,"props":9764,"children":9765},{},[9766],{"type":37,"value":9767},"不可变集合默认使用 hash 实现，可变集合有更多实现",{"type":18,"tag":399,"props":9769,"children":9770},{},[9771,9776,9791,9808],{"type":18,"tag":421,"props":9772,"children":9773},{},[9774],{"type":37,"value":9775},"映射（map）",{"type":18,"tag":421,"props":9777,"children":9778},{},[9779,9784,9785],{"type":18,"tag":268,"props":9780,"children":9782},{"className":9781},[],[9783],{"type":37,"value":7877},{"type":37,"value":5866},{"type":18,"tag":268,"props":9786,"children":9788},{"className":9787},[],[9789],{"type":37,"value":9790},"SortedMap",{"type":18,"tag":421,"props":9792,"children":9793},{},[9794,9800,9802],{"type":18,"tag":268,"props":9795,"children":9797},{"className":9796},[],[9798],{"type":37,"value":9799},"hashmap",{"type":37,"value":9801}," , ",{"type":18,"tag":268,"props":9803,"children":9805},{"className":9804},[],[9806],{"type":37,"value":9807},"weakhashmap",{"type":18,"tag":421,"props":9809,"children":9810},{},[9811],{"type":37,"value":9812},"不可变 map 默认使用 hashmap，可变版本适合高性能需求",{"type":18,"tag":399,"props":9814,"children":9815},{},[9816,9821,9824,9846],{"type":18,"tag":421,"props":9817,"children":9818},{},[9819],{"type":37,"value":9820},"栈 / 队列",{"type":18,"tag":421,"props":9822,"children":9823},{},[],{"type":18,"tag":421,"props":9825,"children":9826},{},[9827,9832,9833,9839,9840],{"type":18,"tag":268,"props":9828,"children":9830},{"className":9829},[],[9831],{"type":37,"value":9724},{"type":37,"value":9637},{"type":18,"tag":268,"props":9834,"children":9836},{"className":9835},[],[9837],{"type":37,"value":9838},"stack",{"type":37,"value":9637},{"type":18,"tag":268,"props":9841,"children":9843},{"className":9842},[],[9844],{"type":37,"value":9845},"arraydeque",{"type":18,"tag":421,"props":9847,"children":9848},{},[9849],{"type":37,"value":9850},"可变和不可变队列同名，但位于不同包中",{"type":18,"tag":399,"props":9852,"children":9853},{},[9854,9859,9868,9876],{"type":18,"tag":421,"props":9855,"children":9856},{},[9857],{"type":37,"value":9858},"数组",{"type":18,"tag":421,"props":9860,"children":9861},{},[9862],{"type":18,"tag":268,"props":9863,"children":9865},{"className":9864},[],[9866],{"type":37,"value":9867},"array",{"type":18,"tag":421,"props":9869,"children":9870},{},[9871],{"type":18,"tag":268,"props":9872,"children":9874},{"className":9873},[],[9875],{"type":37,"value":9710},{"type":18,"tag":421,"props":9877,"children":9878},{},[9879,9884],{"type":18,"tag":268,"props":9880,"children":9882},{"className":9881},[],[9883],{"type":37,"value":9867},{"type":37,"value":9885}," 不是集合框架成员，但常用",{"type":18,"tag":399,"props":9887,"children":9888},{},[9889,9894,9910,9913],{"type":18,"tag":421,"props":9890,"children":9891},{},[9892],{"type":37,"value":9893},"特殊集合",{"type":18,"tag":421,"props":9895,"children":9896},{},[9897,9903,9904],{"type":18,"tag":268,"props":9898,"children":9900},{"className":9899},[],[9901],{"type":37,"value":9902},"range",{"type":37,"value":9637},{"type":18,"tag":268,"props":9905,"children":9907},{"className":9906},[],[9908],{"type":37,"value":9909},"emptyset",{"type":18,"tag":421,"props":9911,"children":9912},{},[],{"type":18,"tag":421,"props":9914,"children":9915},{},[9916],{"type":37,"value":9917},"用于构造或默认空集合值",{"type":18,"tag":40,"props":9919,"children":9920},{},[9921],{"type":37,"value":9922},"(真的是太多了，可能不是很全，大致了解下)",{"type":18,"tag":71,"props":9924,"children":9925},{},[],{"type":18,"tag":165,"props":9927,"children":9929},{"id":9928},"并发-2",[9930],{"type":37,"value":9931},"并发 2",{"type":18,"tag":27,"props":9933,"children":9935},{"t":9934},"并发",[],{"type":18,"tag":1447,"props":9937,"children":9938},{"type":1449},[9939],{"type":18,"tag":40,"props":9940,"children":9941},{},[9942],{"type":37,"value":9943},"一个语言对可变性和不可变性的支持程度，直接影响它在并发编程中的优势与设计难度。",{"type":18,"tag":40,"props":9945,"children":9946},{},[9947],{"type":37,"value":9948},"上面这句话基本上就可以衡量一个语言在并发上的优势。例如不可变结构在多线程共享、无锁共享数据结构使用场景。但在此之前，我可以借助 scala 了解下一些并发模型，这样可以更加理解并发，同时适应于其他语言(毕竟模型一样，只不过语法变了)。",{"type":18,"tag":4071,"props":9950,"children":9952},{"id":9951},"future-promise-1",[9953],{"type":37,"value":9954},"Future / Promise 1",{"type":18,"tag":27,"props":9956,"children":9958},{"t":9957,"type":311},"Future / Promise",[],{"type":18,"tag":40,"props":9960,"children":9961},{},[9962,9968],{"type":18,"tag":193,"props":9963,"children":9966},{"href":9964,"rel":9965},"https://en.wikipedia.org/wiki/Futures_and_promises",[197],[9967],{"type":37,"value":9957},{"type":37,"value":9969}," 一般他们是同时出现的，中文直译就是 “未来与承诺”。但是在 CS 中，有很多关于并发的专业名字，例如：",{"type":37,"value":3013},{"type":18,"tag":391,"props":9972,"children":9973},{},[9974,9994],{"type":18,"tag":395,"props":9975,"children":9976},{},[9977],{"type":18,"tag":399,"props":9978,"children":9979},{},[9980,9984,9989],{"type":18,"tag":403,"props":9981,"children":9982},{},[9983],{"type":37,"value":3027},{"type":18,"tag":403,"props":9985,"children":9986},{},[9987],{"type":37,"value":9988},"Desc",{"type":18,"tag":403,"props":9990,"children":9991},{},[9992],{"type":37,"value":9993},"Chinese",{"type":18,"tag":414,"props":9995,"children":9996},{},[9997,10015,10033,10051],{"type":18,"tag":399,"props":9998,"children":9999},{},[10000,10005,10010],{"type":18,"tag":421,"props":10001,"children":10002},{},[10003],{"type":37,"value":10004},"future",{"type":18,"tag":421,"props":10006,"children":10007},{},[10008],{"type":37,"value":10009},"值将在未来某时可用。通常由系统或框架执行任务并返回。",{"type":18,"tag":421,"props":10011,"children":10012},{},[10013],{"type":37,"value":10014},"未来",{"type":18,"tag":399,"props":10016,"children":10017},{},[10018,10023,10028],{"type":18,"tag":421,"props":10019,"children":10020},{},[10021],{"type":37,"value":10022},"promise",{"type":18,"tag":421,"props":10024,"children":10025},{},[10026],{"type":37,"value":10027},"手动控制 Future 的完成。开发者显式 resolve/reject",{"type":18,"tag":421,"props":10029,"children":10030},{},[10031],{"type":37,"value":10032},"承诺",{"type":18,"tag":399,"props":10034,"children":10035},{},[10036,10041,10046],{"type":18,"tag":421,"props":10037,"children":10038},{},[10039],{"type":37,"value":10040},"delay",{"type":18,"tag":421,"props":10042,"children":10043},{},[10044],{"type":37,"value":10045},"尚未开始执行的任务（延迟计算），强调“推迟”",{"type":18,"tag":421,"props":10047,"children":10048},{},[10049],{"type":37,"value":10050},"延迟",{"type":18,"tag":399,"props":10052,"children":10053},{},[10054,10059,10064],{"type":18,"tag":421,"props":10055,"children":10056},{},[10057],{"type":37,"value":10058},"deferred",{"type":18,"tag":421,"props":10060,"children":10061},{},[10062],{"type":37,"value":10063},"一种控制句柄，表示延迟+手动完成的组合",{"type":18,"tag":421,"props":10065,"children":10066},{},[10067],{"type":37,"value":10068},"推迟",{"type":18,"tag":40,"props":10070,"children":10071},{},[10072,10074,10081,10083,10089,10091,10098],{"type":37,"value":10073},"在 Scala 文档的 ",{"type":18,"tag":193,"props":10075,"children":10078},{"href":10076,"rel":10077},"https://docs.scala-lang.org/scala3/book/concurrency.html",[197],[10079],{"type":37,"value":10080},"Concurrency",{"type":37,"value":10082}," 部分中，介绍了 ",{"type":18,"tag":268,"props":10084,"children":10086},{"className":10085},[],[10087],{"type":37,"value":10088},"scala.concurrent.Future",{"type":37,"value":10090}," 并且也有社区写的文档，例如 ",{"type":18,"tag":193,"props":10092,"children":10095},{"href":10093,"rel":10094},"https://docs.scala-lang.org/overviews/core/futures.html",[197],[10096],{"type":37,"value":10097},"Future and Promise",{"type":37,"value":4787},{"type":18,"tag":263,"props":10100,"children":10102},{"code":10101},"import scala.concurrent.{Future, Promise}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.util.{Success, Failure}\nimport scala.concurrent.Await\nimport scala.concurrent.duration._\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    // Future\n    val future = Future {\n      Thread.sleep(1000)\n      \"Hello from Future!\"\n    }\n    \n    future.onComplete {\n      case Success(msg) => println(msg)\n      case Failure(e) => println(s\"Error: ${e.getMessage}\")\n    }\n    \n    // Promise\n    val promise = Promise[String]()\n    val futureFromPromise = promise.future\n    \n    futureFromPromise.foreach(msg => println(msg))\n    \n    Future {\n      Thread.sleep(800)\n      promise.success(\"Hello from Promise!\")\n    }\n \n    // 最多等待 3ms\n    Await.result(Future.sequence(Seq(future, futureFromPromise)), 3.seconds)\n    println(\"END\")\n  }\n}\n",[10103],{"type":18,"tag":268,"props":10104,"children":10105},{"__ignoreMap":8},[10106],{"type":37,"value":10101},{"type":18,"tag":40,"props":10108,"children":10109},{},[10110,10112,10117],{"type":37,"value":10111},"这个流程其实非常简单，主打一个 ",{"type":18,"tag":268,"props":10113,"children":10115},{"className":10114},[],[10116],{"type":37,"value":9957},{"type":37,"value":10118},", 他的流程是这样的：",{"type":18,"tag":263,"props":10120,"children":10122},{"code":10121},"[主线程]\n  │\n  ├─ 创建Future → 后台线程执行计算 → 完成后触发回调\n  │\n  └─ 创建Promise → 获取关联Future → 设置回调\n        │\n        └─ 另一个线程完成Promise → 触发关联Future的回调\n",[10123],{"type":18,"tag":268,"props":10124,"children":10125},{"__ignoreMap":8},[10126],{"type":37,"value":10121},{"type":18,"tag":40,"props":10128,"children":10129},{},[10130,10132,10137],{"type":37,"value":10131},"所以这个模型的核心思想是 ",{"type":18,"tag":747,"props":10133,"children":10134},{},[10135],{"type":37,"value":10136},"将结果的产生和消费解耦，让主线程不被阻塞。",{"type":37,"value":10138}," 通过回调处理异步结果。想象一下这样的场景：",{"type":18,"tag":263,"props":10140,"children":10142},{"code":10141},"Future 就像你的外卖订单：\n你下单后(Future { ... })继续做自己的事\n设置回调(foreach)相当于告诉外卖员：\"送到后打电话给我\"\n\n---\n\nPromise 就像餐厅的接单系统：\n餐厅收到订单创建了一个承诺(Promise)\n厨房工作完成后调用promise.success(餐品)\n与你关联的外卖订单(futureFromPromise)会自动更新状态\n\n---\n\nDelay 就是明确告诉你预计 30 分钟后取餐\n(Thread.sleep)\n\n---\n\nDeferred 就是给你个订单号，告诉你商家正在准备中…… 弄好了再告诉你\n\nimport scala.concurrent.{Future, Promise}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.util.{Success, Failure}\n\nclass Deferred[T] {\n  private val promise = Promise[T]()\n  val future: Future[T] = promise.future\n  \n  def complete(value: T): Unit = promise.success(value)\n  def fail(ex: Throwable): Unit = promise.failure(ex)\n}\n\nobject DeferredDemo extends App {\n  // Deferred\n  val deferredResult = new Deferred[String]()\n  \n  println(\"哈哈外卖提醒您！商家正在备货中~\")\n  \n  // 2. 回调\n  deferredResult.future.onComplete {\n    case Success(value) => println(s\"收到结果: $value\")\n    case Failure(ex)    => println(s\"操作失败: ${ex.getMessage}\")\n  }\n  \n  // 模拟异步操作完成后完成Deferred\n  Future {\n    Thread.sleep(2000) \n    deferredResult.complete(\"完成啦！!\")\n  }\n  \n  Thread.sleep(3000)\n  println(\"演示结束\")\n}\n",[10143],{"type":18,"tag":268,"props":10144,"children":10145},{"__ignoreMap":8},[10146],{"type":37,"value":10141},{"type":18,"tag":71,"props":10148,"children":10149},{},[],{"type":18,"tag":4071,"props":10151,"children":10153},{"id":10152},"akka-actor-1",[10154],{"type":37,"value":10155},"Akka Actor 1",{"type":18,"tag":27,"props":10157,"children":10159},{"t":10158,"type":311},"Akka Actor",[],{"type":18,"tag":40,"props":10161,"children":10162},{},[10163,10165,10172],{"type":37,"value":10164},"要理解 Akka Actor，首先要理解 ",{"type":18,"tag":193,"props":10166,"children":10169},{"href":10167,"rel":10168},"https://en.wikipedia.org/wiki/Actor_model",[197],[10170],{"type":37,"value":10171},"Actor Model",{"type":37,"value":10173},"。在维基百科中，描述了 Actor 的一个理解：",{"type":18,"tag":1447,"props":10175,"children":10176},{"type":1449},[10177],{"type":18,"tag":40,"props":10178,"children":10179},{},[10180,10182,10185],{"type":37,"value":10181},"万物皆可 Actor",{"type":18,"tag":1504,"props":10183,"children":10184},{},[],{"type":37,"value":10186},"\neverything is an actor",{"type":18,"tag":40,"props":10188,"children":10189},{},[10190],{"type":37,"value":10191},"类似于面向对象中的 “万物皆可对象”，Actor 应该是：“角色扮演”，例如你有一家快递公司：",{"type":18,"tag":263,"props":10193,"children":10195},{"code":10194},"[快递公司运作流程]\n  顾客 → 快递员 → 分拣中心 → 配送站 → 收件人\n",[10196],{"type":18,"tag":268,"props":10197,"children":10198},{"__ignoreMap":8},[10199],{"type":37,"value":10194},{"type":18,"tag":40,"props":10201,"children":10202},{},[10203],{"type":37,"value":10204},"那么上面的流程中，每个角色都是一个 Actor，所以可以划分为：",{"type":37,"value":1577},{"type":18,"tag":391,"props":10207,"children":10208},{},[10209,10229],{"type":18,"tag":395,"props":10210,"children":10211},{},[10212],{"type":18,"tag":399,"props":10213,"children":10214},{},[10215,10220,10225],{"type":18,"tag":403,"props":10216,"children":10217},{},[10218],{"type":37,"value":10219},"角色",{"type":18,"tag":403,"props":10221,"children":10222},{},[10223],{"type":37,"value":10224},"Actor",{"type":18,"tag":403,"props":10226,"children":10227},{},[10228],{"type":37,"value":2287},{"type":18,"tag":414,"props":10230,"children":10231},{},[10232,10250,10268,10286,10304],{"type":18,"tag":399,"props":10233,"children":10234},{},[10235,10240,10245],{"type":18,"tag":421,"props":10236,"children":10237},{},[10238],{"type":37,"value":10239},"快递员",{"type":18,"tag":421,"props":10241,"children":10242},{},[10243],{"type":37,"value":10244},"单个 Actor",{"type":18,"tag":421,"props":10246,"children":10247},{},[10248],{"type":37,"value":10249},"只负责自己片区，不知道其他快递员在干嘛",{"type":18,"tag":399,"props":10251,"children":10252},{},[10253,10258,10263],{"type":18,"tag":421,"props":10254,"children":10255},{},[10256],{"type":37,"value":10257},"快递包裹",{"type":18,"tag":421,"props":10259,"children":10260},{},[10261],{"type":37,"value":10262},"消息（Message）",{"type":18,"tag":421,"props":10264,"children":10265},{},[10266],{"type":37,"value":10267},"只有包裹里的信息（不能直接打电话问快递员\"你在哪\"）",{"type":18,"tag":399,"props":10269,"children":10270},{},[10271,10276,10281],{"type":18,"tag":421,"props":10272,"children":10273},{},[10274],{"type":37,"value":10275},"快递柜",{"type":18,"tag":421,"props":10277,"children":10278},{},[10279],{"type":37,"value":10280},"邮箱（Mailbox）",{"type":18,"tag":421,"props":10282,"children":10283},{},[10284],{"type":37,"value":10285},"快递员只有送到柜子里的包裹才会处理",{"type":18,"tag":399,"props":10287,"children":10288},{},[10289,10294,10299],{"type":18,"tag":421,"props":10290,"children":10291},{},[10292],{"type":37,"value":10293},"片区经理",{"type":18,"tag":421,"props":10295,"children":10296},{},[10297],{"type":37,"value":10298},"父级 Supervisor",{"type":18,"tag":421,"props":10300,"children":10301},{},[10302],{"type":37,"value":10303},"快递员生病了（崩溃）由经理决定是否换人",{"type":18,"tag":399,"props":10305,"children":10306},{},[10307,10312,10317],{"type":18,"tag":421,"props":10308,"children":10309},{},[10310],{"type":37,"value":10311},"公司总部",{"type":18,"tag":421,"props":10313,"children":10314},{},[10315],{"type":37,"value":10316},"Actor System",{"type":18,"tag":421,"props":10318,"children":10319},{},[10320],{"type":37,"value":10321},"整个快递网络的基础框架",{"type":18,"tag":40,"props":10323,"children":10324},{},[10325],{"type":37,"value":10326},"如果你要映射到 Code， 可以这么想，假设现在有100个包裹要配送：",{"type":37,"value":1577},{"type":18,"tag":391,"props":10329,"children":10330},{},[10331,10357],{"type":18,"tag":395,"props":10332,"children":10333},{},[10334],{"type":18,"tag":399,"props":10335,"children":10336},{},[10337,10342,10347,10352],{"type":18,"tag":403,"props":10338,"children":10339},{},[10340],{"type":37,"value":10341},"方式",{"type":18,"tag":403,"props":10343,"children":10344},{},[10345],{"type":37,"value":10346},"传统多线程做法",{"type":18,"tag":403,"props":10348,"children":10349},{},[10350],{"type":37,"value":10351},"Actor mode",{"type":18,"tag":403,"props":10353,"children":10354},{},[10355],{"type":37,"value":10356},"VS",{"type":18,"tag":414,"props":10358,"children":10359},{},[10360,10383,10406,10429],{"type":18,"tag":399,"props":10361,"children":10362},{},[10363,10368,10373,10378],{"type":18,"tag":421,"props":10364,"children":10365},{},[10366],{"type":37,"value":10367},"资源分配",{"type":18,"tag":421,"props":10369,"children":10370},{},[10371],{"type":37,"value":10372},"创建100个快递员（线程）",{"type":18,"tag":421,"props":10374,"children":10375},{},[10376],{"type":37,"value":10377},"固定10个快递员轮流处理",{"type":18,"tag":421,"props":10379,"children":10380},{},[10381],{"type":37,"value":10382},"线程太多会崩溃",{"type":18,"tag":399,"props":10384,"children":10385},{},[10386,10391,10396,10401],{"type":18,"tag":421,"props":10387,"children":10388},{},[10389],{"type":37,"value":10390},"沟通方式",{"type":18,"tag":421,"props":10392,"children":10393},{},[10394],{"type":37,"value":10395},"快递员互相打电话问路（共享内存）",{"type":18,"tag":421,"props":10397,"children":10398},{},[10399],{"type":37,"value":10400},"只通过包裹上的地址（消息传递）",{"type":18,"tag":421,"props":10402,"children":10403},{},[10404],{"type":37,"value":10405},"避免\"堵车死锁\"",{"type":18,"tag":399,"props":10407,"children":10408},{},[10409,10414,10419,10424],{"type":18,"tag":421,"props":10410,"children":10411},{},[10412],{"type":37,"value":10413},"错误处理",{"type":18,"tag":421,"props":10415,"children":10416},{},[10417],{"type":37,"value":10418},"一个快递员车祸导致整个系统瘫痪",{"type":18,"tag":421,"props":10420,"children":10421},{},[10422],{"type":37,"value":10423},"该快递员路线由经理重新分配（监督策略）",{"type":18,"tag":421,"props":10425,"children":10426},{},[10427],{"type":37,"value":10428},"局部故障不影响整体",{"type":18,"tag":399,"props":10430,"children":10431},{},[10432,10437,10442,10447],{"type":18,"tag":421,"props":10433,"children":10434},{},[10435],{"type":37,"value":10436},"状态管理",{"type":18,"tag":421,"props":10438,"children":10439},{},[10440],{"type":37,"value":10441},"所有快递员共享实时地图",{"type":18,"tag":421,"props":10443,"children":10444},{},[10445],{"type":37,"value":10446},"每个快递员有自己的笔记本记录",{"type":18,"tag":421,"props":10448,"children":10449},{},[10450],{"type":37,"value":10451},"避免地图被同时修改出错",{"type":18,"tag":40,"props":10453,"children":10454},{},[10455],{"type":37,"value":10456},"所以 Actor 有点像是反应式的设计思路，例如其核心就是：",{"type":18,"tag":185,"props":10458,"children":10459},{},[10460,10465,10470],{"type":18,"tag":189,"props":10461,"children":10462},{},[10463],{"type":37,"value":10464},"绝不共享：就像快递员不会共用同一辆货车（每个Actor有自己的状态）",{"type":18,"tag":189,"props":10466,"children":10467},{},[10468],{"type":37,"value":10469},"只认包裹：就像快递员只按包裹信息送货（只通过消息通信）",{"type":18,"tag":189,"props":10471,"children":10472},{},[10473],{"type":37,"value":10474},"各司其职：就像快递员不会突然去帮客服接电话（单一职责）",{"type":18,"tag":4323,"props":10476,"children":10478},{"id":10477},"akka-actor-2",[10479],{"type":37,"value":10480},"Akka Actor 2",{"type":18,"tag":27,"props":10482,"children":10483},{"t":10158,"type":311},[],{"type":18,"tag":40,"props":10485,"children":10486},{},[10487,10489,10496,10498,10505,10507,10513],{"type":37,"value":10488},"了解完了 Actor mode ，可以了解 ",{"type":18,"tag":193,"props":10490,"children":10493},{"href":10491,"rel":10492},"https://en.wikipedia.org/wiki/Akka_(toolkit)",[197],[10494],{"type":37,"value":10495},"akka",{"type":37,"value":10497},"，akka 是一个公司，也是一个包。最早实现于 2006 年，感觉这种并发一般会和分布式、微服务之类的架构建立联系，所以详情可以去看 ",{"type":18,"tag":193,"props":10499,"children":10502},{"href":10500,"rel":10501},"https://doc.akka.io/libraries/akka-core/current/typed/actors.html",[197],[10503],{"type":37,"value":10504},"akka docs",{"type":37,"value":10506}," 写的还是很全的。在 Scala 中可以  ",{"type":18,"tag":268,"props":10508,"children":10510},{"className":10509},[],[10511],{"type":37,"value":10512},"import akka.actor",{"type":37,"value":10514}," 来使用 Akka actor",{"type":18,"tag":263,"props":10516,"children":10518},{"code":10517},"import akka.actor.typed.{ActorRef, ActorSystem, Behavior}\nimport akka.actor.typed.scaladsl.Behaviors\n\nobject Main {\n  // 消息协议\n  final case class Greet(whom: String, replyTo: ActorRef[Greeted])\n  final case class Greeted(whom: String, from: ActorRef[Greet])\n\n  // HelloWorld Actor\n  def helloWorld(): Behavior[Greet] = Behaviors.receive { (context, message) =>\n    println(s\"Hello ${message.whom}!\")\n    message.replyTo ! Greeted(message.whom, context.self)\n    Behaviors.same\n  }\n\n  // main Actor\n  def mainBehavior(): Behavior[Greeted] = Behaviors.setup { context =>\n    // create HelloWorld Actor\n    val greeter = context.spawn(helloWorld(), \"helloWorld\")\n    \n    // send\n    greeter ! Greet(\"Akka\", context.self)\n\n    Behaviors.receiveMessage { message =>\n      println(s\"${message.from.path.name} 已问候 ${message.whom}\")\n      Behaviors.stopped\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    // create Actor system\n    val system = ActorSystem(mainBehavior(), \"DemoSystem\")\n    \n    Thread.sleep(1000)\n    system.terminate()\n  }\n}\n",[10519],{"type":18,"tag":268,"props":10520,"children":10521},{"__ignoreMap":8},[10522],{"type":37,"value":10517},{"type":18,"tag":71,"props":10524,"children":10525},{},[],{"type":18,"tag":4071,"props":10527,"children":10529},{"id":10528},"zio-2",[10530],{"type":37,"value":10531},"ZIO 2",{"type":18,"tag":27,"props":10533,"children":10535},{"t":10534,"typo":311},"ZIO",[],{"type":18,"tag":40,"props":10537,"children":10538},{},[10539,10541,10546],{"type":37,"value":10540},"ZIO 是一个 ",{"type":18,"tag":747,"props":10542,"children":10543},{},[10544],{"type":37,"value":10545},"类型安全、可组合异步和并发编程",{"type":37,"value":10547}," 的一个框架，其和新的是 ZIO 数据类型。分为了 R、E、A 三种，分别代表：",{"type":37,"value":2273},{"type":18,"tag":391,"props":10550,"children":10551},{},[10552,10567],{"type":18,"tag":395,"props":10553,"children":10554},{},[10555],{"type":18,"tag":399,"props":10556,"children":10557},{},[10558,10563],{"type":18,"tag":403,"props":10559,"children":10560},{},[10561],{"type":37,"value":10562},"Type",{"type":18,"tag":403,"props":10564,"children":10565},{},[10566],{"type":37,"value":3032},{"type":18,"tag":414,"props":10568,"children":10569},{},[10570,10583,10596],{"type":18,"tag":399,"props":10571,"children":10572},{},[10573,10578],{"type":18,"tag":421,"props":10574,"children":10575},{},[10576],{"type":37,"value":10577},"R",{"type":18,"tag":421,"props":10579,"children":10580},{},[10581],{"type":37,"value":10582},"环境类型参数，表示需要的上下文值。",{"type":18,"tag":399,"props":10584,"children":10585},{},[10586,10591],{"type":18,"tag":421,"props":10587,"children":10588},{},[10589],{"type":37,"value":10590},"E",{"type":18,"tag":421,"props":10592,"children":10593},{},[10594],{"type":37,"value":10595},"错误类型参数，表示可能出现的错误类型。",{"type":18,"tag":399,"props":10597,"children":10598},{},[10599,10604],{"type":18,"tag":421,"props":10600,"children":10601},{},[10602],{"type":37,"value":10603},"A",{"type":18,"tag":421,"props":10605,"children":10606},{},[10607],{"type":37,"value":10608},"成功值类型参数，表示成功结果的类型。",{"type":18,"tag":40,"props":10610,"children":10611},{},[10612,10614,10621,10623,10629,10630,10636],{"type":37,"value":10613},"当然还有很多类型别名啊，可以根据 ",{"type":18,"tag":193,"props":10615,"children":10618},{"href":10616,"rel":10617},"https://zio.dev/overview/summary",[197],[10619],{"type":37,"value":10620},"zio docs",{"type":37,"value":10622}," 来进行学习，例如 ",{"type":18,"tag":268,"props":10624,"children":10626},{"className":10625},[],[10627],{"type":37,"value":10628},"UIO[A]",{"type":37,"value":1962},{"type":18,"tag":268,"props":10631,"children":10633},{"className":10632},[],[10634],{"type":37,"value":10635},"URIO[R, A]",{"type":37,"value":10637}," 什么的。也就是说啊：",{"type":18,"tag":1447,"props":10639,"children":10640},{"type":1449},[10641,10672],{"type":18,"tag":40,"props":10642,"children":10643},{},[10644,10646,10649],{"type":37,"value":10645},"它需要一个环境类型参数 R，并产生一个失败的类型 E 或一个成功值的类型 A。",{"type":18,"tag":1504,"props":10647,"children":10648},{},[],{"type":18,"tag":10650,"props":10651,"children":10652},"b",{},[10653,10655,10660,10662,10666,10668],{"type":37,"value":10654},"这就很哲学，例如你做一个产品",{"type":18,"tag":10656,"props":10657,"children":10658},"span",{},[10659],{"type":37,"value":10577},{"type":37,"value":10661},"，可能会赚到 money",{"type":18,"tag":10656,"props":10663,"children":10664},{},[10665],{"type":37,"value":10603},{"type":37,"value":10667},"，也可能没有赚到 money",{"type":18,"tag":10656,"props":10669,"children":10670},{},[10671],{"type":37,"value":10590},{"type":18,"tag":40,"props":10673,"children":10674},{},[10675,10677,10683,10685,10690,10692,10697],{"type":37,"value":10676},"你还可以把一些类型别名带进去，例如 ",{"type":18,"tag":268,"props":10678,"children":10680},{"className":10679},[],[10681],{"type":37,"value":10682},"IO[E, A]",{"type":37,"value":10684}," 那就是 “这个项目可能因为 ",{"type":18,"tag":268,"props":10686,"children":10688},{"className":10687},[],[10689],{"type":37,"value":10590},{"type":37,"value":10691}," 没有赚到 money，或者因为 ",{"type":18,"tag":268,"props":10693,"children":10695},{"className":10694},[],[10696],{"type":37,"value":10603},{"type":37,"value":10698}," 而赚到 money”",{"type":18,"tag":40,"props":10700,"children":10701},{},[10702,10704,10710],{"type":37,"value":10703},"ZIO 这个框架的核心还是很方便代入的，例如 ",{"type":18,"tag":268,"props":10705,"children":10707},{"className":10706},[],[10708],{"type":37,"value":10709},"ZIO[R, E, A]",{"type":37,"value":4787},{"type":37,"value":3828},{"type":18,"tag":391,"props":10713,"children":10714},{},[10715,10735],{"type":18,"tag":395,"props":10716,"children":10717},{},[10718],{"type":18,"tag":399,"props":10719,"children":10720},{},[10721,10725,10730],{"type":18,"tag":403,"props":10722,"children":10723},{},[10724],{"type":37,"value":10562},{"type":18,"tag":403,"props":10726,"children":10727},{},[10728],{"type":37,"value":10729},"Vs",{"type":18,"tag":403,"props":10731,"children":10732},{},[10733],{"type":37,"value":10734},"Tech",{"type":18,"tag":414,"props":10736,"children":10737},{},[10738,10769,10799],{"type":18,"tag":399,"props":10739,"children":10740},{},[10741,10745,10764],{"type":18,"tag":421,"props":10742,"children":10743},{},[10744],{"type":37,"value":10577},{"type":18,"tag":421,"props":10746,"children":10747},{},[10748,10750,10755,10757,10762],{"type":37,"value":10749},"你创业需要的初始资源（办公场地",{"type":18,"tag":10656,"props":10751,"children":10752},{},[10753],{"type":37,"value":10754},"R=Office",{"type":37,"value":10756},"、启动资金",{"type":18,"tag":10656,"props":10758,"children":10759},{},[10760],{"type":37,"value":10761},"R=Capital",{"type":37,"value":10763},"）",{"type":18,"tag":421,"props":10765,"children":10766},{},[10767],{"type":37,"value":10768},"执行所需的环境依赖（数据库连接、配置等）",{"type":18,"tag":399,"props":10770,"children":10771},{},[10772,10776,10794],{"type":18,"tag":421,"props":10773,"children":10774},{},[10775],{"type":37,"value":10590},{"type":18,"tag":421,"props":10777,"children":10778},{},[10779,10781,10786,10788,10793],{"type":37,"value":10780},"可能遭遇的失败类型（资金断裂",{"type":18,"tag":10656,"props":10782,"children":10783},{},[10784],{"type":37,"value":10785},"E=Bankrupt",{"type":37,"value":10787},"、政策风险",{"type":18,"tag":10656,"props":10789,"children":10790},{},[10791],{"type":37,"value":10792},"E=Regulation",{"type":37,"value":10763},{"type":18,"tag":421,"props":10795,"children":10796},{},[10797],{"type":37,"value":10798},"可能发生的错误类型（IOException、TimeoutException等）",{"type":18,"tag":399,"props":10800,"children":10801},{},[10802,10806,10824],{"type":18,"tag":421,"props":10803,"children":10804},{},[10805],{"type":37,"value":10603},{"type":18,"tag":421,"props":10807,"children":10808},{},[10809,10811,10816,10818,10823],{"type":37,"value":10810},"最终获得的成功成果（上市",{"type":18,"tag":10656,"props":10812,"children":10813},{},[10814],{"type":37,"value":10815},"A=IPO",{"type":37,"value":10817},"、盈利",{"type":18,"tag":10656,"props":10819,"children":10820},{},[10821],{"type":37,"value":10822},"A=Profit",{"type":37,"value":10763},{"type":18,"tag":421,"props":10825,"children":10826},{},[10827],{"type":37,"value":10828},"计算成功返回的结果（用户数据、交易ID等）",{"type":18,"tag":40,"props":10830,"children":10831},{},[10832],{"type":37,"value":10833},"大致看了下文档，可惜在 scastie 上跑有些问题，自己又不想弄本地的 ZIO 环境，所以还是算了。以后用到的时候在仔细体验，但这个框架理解起来还是蛮简单的。",{"type":18,"tag":71,"props":10835,"children":10836},{},[],{"type":18,"tag":4071,"props":10838,"children":10840},{"id":10839},"模式匹配-2",[10841],{"type":37,"value":10842},"模式匹配 2",{"type":18,"tag":27,"props":10844,"children":10845},{"t":3663,"type":311},[],{"type":18,"tag":40,"props":10847,"children":10848},{},[10849,10856],{"type":18,"tag":193,"props":10850,"children":10853},{"href":10851,"rel":10852},"https://en.wikipedia.org/wiki/Pattern_matching",[197],[10854],{"type":37,"value":10855},"模式匹配(Pattern matching)",{"type":37,"value":10857},"是函数式、并发的核心之一。有点像是 ADT，但又不是，毕竟 ADT 是类型的一种，不过有类型模式匹配。可能跟模式匹配比较像的就是 if/else(不完全是)，可以讲 if/else 和模式匹配比做成：",{"type":18,"tag":40,"props":10859,"children":10860},{},[10861],{"type":37,"value":10862},"IF/ELSE: 逐个拆箱检查内容物",{"type":18,"tag":1086,"props":10864,"children":10865},{},[10866],{"type":18,"tag":189,"props":10867,"children":10868},{},[10869],{"type":18,"tag":10870,"props":10871,"children":10872},"em",{},[10873],{"type":37,"value":10874},"\"如果是盒子A，打开看是不是红色物品；如果是盒子B，摇晃听声音...\"",{"type":18,"tag":40,"props":10876,"children":10877},{},[10878],{"type":37,"value":10879},"模式匹配: 用智能扫描仪直接识别包装特征",{"type":18,"tag":1086,"props":10881,"children":10882},{},[10883],{"type":18,"tag":189,"props":10884,"children":10885},{},[10886],{"type":18,"tag":10870,"props":10887,"children":10888},{},[10889],{"type":37,"value":10890},"\"匹配‘红色立方体盒子’ → 送往区域X；匹配‘圆柱体包裹’ → 送往区域Y\"",{"type":18,"tag":1504,"props":10892,"children":10893},{},[],{"type":18,"tag":263,"props":10895,"children":10897},{"code":10896},"object PatternMatchingDemo extends App {\n  // 基础值\n  def explainNumber(num: Int): String = num match {\n    case 0 => \"零\"\n    case 1 => \"壹\"\n    case _ => \"其他数字\"  // default\n  }\n  println(explainNumber(1))  // 壹\n\n  // 结构匹配 \n  val nums = List(1, 2, 3)\n  nums match {\n    case head :: tail => println(s\"头部: $head, 尾部: $tail\")  // 头部: 1, 尾部: List(2, 3)\n    case Nil => println(\"空列表\")\n  }\n\n  // 类型匹配\n  val any: Any = \"hello\"\n  any match {\n    case s: String => println(s\"字符串长度: ${s.length}\")  // 字符串长度: 5\n    case i: Int    => println(s\"数字: $i\")\n  }\n}\n",[10898],{"type":18,"tag":268,"props":10899,"children":10900},{"__ignoreMap":8},[10901],{"type":37,"value":10896},{"type":18,"tag":40,"props":10903,"children":10904},{},[10905],{"type":37,"value":10906},"(感觉没 py 的那种写法简洁，不过 scala 对比 java 感觉 lang style 也挺不错的)",{"type":18,"tag":71,"props":10908,"children":10909},{},[],{"type":18,"tag":32,"props":10911,"children":10913},{"id":10912},"erlang-1",[10914],{"type":37,"value":10915},"Erlang 1",{"type":18,"tag":27,"props":10917,"children":10918},{"t":595},[],{"type":18,"tag":40,"props":10920,"children":10921},{},[10922,10924,10929],{"type":37,"value":10923},"Erlang 我比较有印象，因为我了解过 ",{"type":18,"tag":193,"props":10925,"children":10927},{"href":600,"rel":10926},[197],[10928],{"type":37,"value":604},{"type":37,"value":10930}," 它是构建在 Erlang 之上的(我觉得 Elixir 的 Logo 比 Erlang 的好看) 不过这两个的特性都在于并发和分布式，所以我会了解和分布式相关的，看看和前面的 Scala 的并发有什么区别，是不是和 Scala 的静态类型和动态类型一样复杂。",{"type":18,"tag":40,"props":10932,"children":10933},{},[10934,10936,10941],{"type":37,"value":10935},"Erlang 是一个函数式、并发的语言，他的运行时就是为了",{"type":18,"tag":747,"props":10937,"children":10938},{},[10939],{"type":37,"value":10940},"分布式、容错、高可用不间断、实时计算、热插拔",{"type":37,"value":10942},"而设计的。因为为了这些而设计，所以 Erlang 具有不可变类型。",{"type":18,"tag":71,"props":10944,"children":10945},{},[],{"type":18,"tag":165,"props":10947,"children":10949},{"id":10948},"模块-1",[10950],{"type":37,"value":10951},"模块 1",{"type":18,"tag":27,"props":10953,"children":10955},{"t":10954},"模块",[],{"type":18,"tag":40,"props":10957,"children":10958},{},[10959,10961,10968,10970,10977],{"type":37,"value":10960},"由于我只是学习目的，所以我尝试在线的环境来学习 Erlang。体验了一翻 ",{"type":18,"tag":193,"props":10962,"children":10965},{"href":10963,"rel":10964},"https://replit.com/",[197],[10966],{"type":37,"value":10967},"Replit",{"type":37,"value":10969}," 感觉还是很不错的。如果要在 Erlang 中输出 Hello,world，那么需要使用 ",{"type":18,"tag":193,"props":10971,"children":10974},{"href":10972,"rel":10973},"https://www.erlang.org/doc/system/seq_prog#writing-output-to-a-terminal",[197],[10975],{"type":37,"value":10976},"io:format",{"type":37,"value":10978},"(有一说一官方文档写的还是很不错的，很方便学习和理解):",{"type":18,"tag":263,"props":10980,"children":10982},{"code":10981},"\n--- filename: main.ert\n-module(main).\n-export([start/0]).\n\nstart() ->\n    io:format(\"Hello,world\").\n",[10983],{"type":18,"tag":268,"props":10984,"children":10985},{"__ignoreMap":8},[10986],{"type":37,"value":10981},{"type":18,"tag":40,"props":10988,"children":10989},{},[10990,10992,10998,11000,11006,11008,11013],{"type":37,"value":10991},"在 Erlang 中，文件相当于一个模块，也就是你看到的 ",{"type":18,"tag":268,"props":10993,"children":10995},{"className":10994},[],[10996],{"type":37,"value":10997},"-module(main)",{"type":37,"value":10999}," 之后需要导出 ",{"type":18,"tag":268,"props":11001,"children":11003},{"className":11002},[],[11004],{"type":37,"value":11005},"-export([start/0, add/1])",{"type":37,"value":11007}," 这里的 ",{"type":18,"tag":268,"props":11009,"children":11011},{"className":11010},[],[11012],{"type":37,"value":5037},{"type":37,"value":11014}," 表示需要导出的是 0 个参数，如果需要导出，就是这样：",{"type":18,"tag":263,"props":11016,"children":11018},{"code":11017},"-module(main).\n-export([start/0, add/1]).\nstart() ->\n  io:format(\"Hello,world\").\n\nadd(X) ->\n  2 * X.\n",[11019],{"type":18,"tag":268,"props":11020,"children":11021},{"__ignoreMap":8},[11022],{"type":37,"value":11017},{"type":18,"tag":40,"props":11024,"children":11025},{},[11026],{"type":37,"value":11027},"如果是 ES6 或者 Python，那就是这样的：",{"type":18,"tag":263,"props":11029,"children":11031},{"code":11030},"--- ES6\nexport function hello() { ... }\nexport default function () { ... }\n\n// CommonJS\nmodule.exports = {\n  hello,\n  add\n}\n\n--- Python 3\n# Declare some variables\napp = 10\nball = True\ncat = 'kitten'\ndog = 100.0\n\n# Define variables to be imported\n# when module is imported\n__all__ = ['app', 'ball']\n",[11032],{"type":18,"tag":268,"props":11033,"children":11034},{"__ignoreMap":8},[11035],{"type":37,"value":11030},{"type":18,"tag":40,"props":11037,"children":11038},{},[11039,11041,11047],{"type":37,"value":11040},"如果要运行我们刚才写的 ",{"type":18,"tag":268,"props":11042,"children":11044},{"className":11043},[],[11045],{"type":37,"value":11046},"add",{"type":37,"value":11048}," 函数，可以通过进入 Erlang 的 REPL 执行：",{"type":18,"tag":263,"props":11050,"children":11052},{"code":11051},"> c(main).\n{ok,main}\n> main:add(10).\n20\n",[11053],{"type":18,"tag":268,"props":11054,"children":11055},{"__ignoreMap":8},[11056],{"type":37,"value":11051},{"type":18,"tag":40,"props":11058,"children":11059},{},[11060,11062,11068,11070,11076,11078,11085],{"type":37,"value":11061},"如果要退出只需要输入 ",{"type":18,"tag":268,"props":11063,"children":11065},{"className":11064},[],[11066],{"type":37,"value":11067},"halt().",{"type":37,"value":11069},"，其中，输入的 ",{"type":18,"tag":268,"props":11071,"children":11073},{"className":11072},[],[11074],{"type":37,"value":11075},"c",{"type":37,"value":11077}," 表示编译，也就是 ",{"type":18,"tag":193,"props":11079,"children":11082},{"href":11080,"rel":11081},"https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine)",[197],[11083],{"type":37,"value":11084},"BEAM,Bogdan's Erlang Abstract Machine",{"type":37,"value":11086},"，这是 Erlang 的虚拟机，跟 Java 的 JVM 差不多，都是有虚拟机运行的。",{"type":18,"tag":165,"props":11088,"children":11090},{"id":11089},"数据类型-2",[11091],{"type":37,"value":11092},"数据类型 2",{"type":18,"tag":27,"props":11094,"children":11096},{"t":11095,"type":311},"数据类型",[],{"type":37,"value":11098},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":11100,"children":11101},{},[11102,11127],{"type":18,"tag":395,"props":11103,"children":11104},{},[11105],{"type":18,"tag":399,"props":11106,"children":11107},{},[11108,11112,11117,11122],{"type":18,"tag":403,"props":11109,"children":11110},{},[11111],{"type":37,"value":1596},{"type":18,"tag":403,"props":11113,"children":11114},{},[11115],{"type":37,"value":11116},"独特性说明",{"type":18,"tag":403,"props":11118,"children":11119},{},[11120],{"type":37,"value":11121},"其他语言近似替代",{"type":18,"tag":403,"props":11123,"children":11124},{},[11125],{"type":37,"value":11126},"典型应用场景",{"type":18,"tag":414,"props":11128,"children":11129},{},[11130,11170,11212,11254,11288,11330,11363,11396,11437,11486],{"type":18,"tag":399,"props":11131,"children":11132},{},[11133,11141,11146,11165],{"type":18,"tag":421,"props":11134,"children":11135},{},[11136],{"type":18,"tag":747,"props":11137,"children":11138},{},[11139],{"type":37,"value":11140},"Atom",{"type":18,"tag":421,"props":11142,"children":11143},{},[11144],{"type":37,"value":11145},"全局唯一不可变常量，小写开头，直接用于模式匹配",{"type":18,"tag":421,"props":11147,"children":11148},{},[11149,11151,11157,11159],{"type":37,"value":11150},"Ruby ",{"type":18,"tag":268,"props":11152,"children":11154},{"className":11153},[],[11155],{"type":37,"value":11156},"Symbol",{"type":37,"value":11158},", Python ",{"type":18,"tag":268,"props":11160,"children":11162},{"className":11161},[],[11163],{"type":37,"value":11164},"Enum",{"type":18,"tag":421,"props":11166,"children":11167},{},[11168],{"type":37,"value":11169},"状态标签、消息类型标识",{"type":18,"tag":399,"props":11171,"children":11172},{},[11173,11181,11194,11207],{"type":18,"tag":421,"props":11174,"children":11175},{},[11176],{"type":18,"tag":747,"props":11177,"children":11178},{},[11179],{"type":37,"value":11180},"Pid",{"type":18,"tag":421,"props":11182,"children":11183},{},[11184,11186,11192],{"type":37,"value":11185},"轻量级进程的唯一标识符，支持跨节点通信 (",{"type":18,"tag":268,"props":11187,"children":11189},{"className":11188},[],[11190],{"type":37,"value":11191},"!",{"type":37,"value":11193}," 操作符)",{"type":18,"tag":421,"props":11195,"children":11196},{},[11197,11199,11205],{"type":37,"value":11198},"Akka ",{"type":18,"tag":268,"props":11200,"children":11202},{"className":11201},[],[11203],{"type":37,"value":11204},"ActorRef",{"type":37,"value":11206}," (库实现)",{"type":18,"tag":421,"props":11208,"children":11209},{},[11210],{"type":37,"value":11211},"分布式进程寻址",{"type":18,"tag":399,"props":11213,"children":11214},{},[11215,11223,11236,11249],{"type":18,"tag":421,"props":11216,"children":11217},{},[11218],{"type":18,"tag":747,"props":11219,"children":11220},{},[11221],{"type":37,"value":11222},"Reference",{"type":18,"tag":421,"props":11224,"children":11225},{},[11226,11228,11234],{"type":37,"value":11227},"运行时生成的全局唯一引用 (",{"type":18,"tag":268,"props":11229,"children":11231},{"className":11230},[],[11232],{"type":37,"value":11233},"make_ref()",{"type":37,"value":11235},")",{"type":18,"tag":421,"props":11237,"children":11238},{},[11239,11241,11247],{"type":37,"value":11240},"Java ",{"type":18,"tag":268,"props":11242,"children":11244},{"className":11243},[],[11245],{"type":37,"value":11246},"UUID",{"type":37,"value":11248}," (需库)",{"type":18,"tag":421,"props":11250,"children":11251},{},[11252],{"type":37,"value":11253},"异步消息去重、RPC 回调标识",{"type":18,"tag":399,"props":11255,"children":11256},{},[11257,11265,11270,11283],{"type":18,"tag":421,"props":11258,"children":11259},{},[11260],{"type":18,"tag":747,"props":11261,"children":11262},{},[11263],{"type":37,"value":11264},"Port Identifier",{"type":18,"tag":421,"props":11266,"children":11267},{},[11268],{"type":37,"value":11269},"与外部进程通信的句柄，内置跨语言支持",{"type":18,"tag":421,"props":11271,"children":11272},{},[11273,11275,11281],{"type":37,"value":11274},"Python ",{"type":18,"tag":268,"props":11276,"children":11278},{"className":11277},[],[11279],{"type":37,"value":11280},"subprocess.Popen",{"type":37,"value":11282}," (OS 依赖)",{"type":18,"tag":421,"props":11284,"children":11285},{},[11286],{"type":37,"value":11287},"调用 C/Python 等外部程序",{"type":18,"tag":399,"props":11289,"children":11290},{},[11291,11299,11312,11325],{"type":18,"tag":421,"props":11292,"children":11293},{},[11294],{"type":18,"tag":747,"props":11295,"children":11296},{},[11297],{"type":37,"value":11298},"Bit Strings",{"type":18,"tag":421,"props":11300,"children":11301},{},[11302,11304,11310],{"type":37,"value":11303},"原生位操作语法 (",{"type":18,"tag":268,"props":11305,"children":11307},{"className":11306},[],[11308],{"type":37,"value":11309},"\u003C\u003C1:3, 2:5>>",{"type":37,"value":11311},")，无需手动位移",{"type":18,"tag":421,"props":11313,"children":11314},{},[11315,11317,11323],{"type":37,"value":11316},"C++ ",{"type":18,"tag":268,"props":11318,"children":11320},{"className":11319},[],[11321],{"type":37,"value":11322},"std::bitset",{"type":37,"value":11324}," (需手动处理)",{"type":18,"tag":421,"props":11326,"children":11327},{},[11328],{"type":37,"value":11329},"协议解析、二进制数据压缩",{"type":18,"tag":399,"props":11331,"children":11332},{},[11333,11341,11353,11358],{"type":18,"tag":421,"props":11334,"children":11335},{},[11336],{"type":18,"tag":747,"props":11337,"children":11338},{},[11339],{"type":37,"value":11340},"Sigil",{"type":18,"tag":421,"props":11342,"children":11343},{},[11344,11346,11352],{"type":37,"value":11345},"语法糖简化字符串/正则处理 (如 ",{"type":18,"tag":268,"props":11347,"children":11349},{"className":11348},[],[11350],{"type":37,"value":11351},"~s(RAW)",{"type":37,"value":11235},{"type":18,"tag":421,"props":11354,"children":11355},{},[11356],{"type":37,"value":11357},"无直接等价，需函数调用",{"type":18,"tag":421,"props":11359,"children":11360},{},[11361],{"type":37,"value":11362},"模板生成、正则表达式构建",{"type":18,"tag":399,"props":11364,"children":11365},{},[11366,11374,11386,11391],{"type":18,"tag":421,"props":11367,"children":11368},{},[11369],{"type":18,"tag":747,"props":11370,"children":11371},{},[11372],{"type":37,"value":11373},"Fun",{"type":18,"tag":421,"props":11375,"children":11376},{},[11377,11379,11385],{"type":37,"value":11378},"可序列化的不可变函数对象 (",{"type":18,"tag":268,"props":11380,"children":11382},{"className":11381},[],[11383],{"type":37,"value":11384},"fun(X) -> X*2 end",{"type":37,"value":11235},{"type":18,"tag":421,"props":11387,"children":11388},{},[11389],{"type":37,"value":11390},"JavaScript 闭包 (但携带可变状态)",{"type":18,"tag":421,"props":11392,"children":11393},{},[11394],{"type":37,"value":11395},"分布式传递计算逻辑",{"type":18,"tag":399,"props":11397,"children":11398},{},[11399,11407,11427,11432],{"type":18,"tag":421,"props":11400,"children":11401},{},[11402],{"type":18,"tag":747,"props":11403,"children":11404},{},[11405],{"type":37,"value":11406},"Tuple",{"type":18,"tag":421,"props":11408,"children":11409},{},[11410,11412,11418,11420,11426],{"type":37,"value":11411},"定长异构集合，匹配时需完全一致 (",{"type":18,"tag":268,"props":11413,"children":11415},{"className":11414},[],[11416],{"type":37,"value":11417},"{ok, Value}",{"type":37,"value":11419}," vs ",{"type":18,"tag":268,"props":11421,"children":11423},{"className":11422},[],[11424],{"type":37,"value":11425},"{error, Reason}",{"type":37,"value":11235},{"type":18,"tag":421,"props":11428,"children":11429},{},[11430],{"type":37,"value":11431},"Python 元组 (但无模式匹配语义)",{"type":18,"tag":421,"props":11433,"children":11434},{},[11435],{"type":37,"value":11436},"多返回值、结构化消息",{"type":18,"tag":399,"props":11438,"children":11439},{},[11440,11448,11476,11481],{"type":18,"tag":421,"props":11441,"children":11442},{},[11443],{"type":18,"tag":747,"props":11444,"children":11445},{},[11446],{"type":37,"value":11447},"List",{"type":18,"tag":421,"props":11449,"children":11450},{},[11451,11453,11459,11461,11467,11469,11475],{"type":37,"value":11452},"链表结构，",{"type":18,"tag":268,"props":11454,"children":11456},{"className":11455},[],[11457],{"type":37,"value":11458},"[Head/Tail]",{"type":37,"value":11460}," 解构，字符串即整数列表 (",{"type":18,"tag":268,"props":11462,"children":11464},{"className":11463},[],[11465],{"type":37,"value":11466},"[72,101]",{"type":37,"value":11468}," → ",{"type":18,"tag":268,"props":11470,"children":11472},{"className":11471},[],[11473],{"type":37,"value":11474},"\"He\"",{"type":37,"value":11235},{"type":18,"tag":421,"props":11477,"children":11478},{},[11479],{"type":37,"value":11480},"大多数语言的链表 (但无自动字符转换)",{"type":18,"tag":421,"props":11482,"children":11483},{},[11484],{"type":37,"value":11485},"递归处理、文本解析",{"type":18,"tag":399,"props":11487,"children":11488},{},[11489,11497,11502,11519],{"type":18,"tag":421,"props":11490,"children":11491},{},[11492],{"type":18,"tag":747,"props":11493,"children":11494},{},[11495],{"type":37,"value":11496},"Map",{"type":18,"tag":421,"props":11498,"children":11499},{},[11500],{"type":37,"value":11501},"动态 K-V 存储 (类似字典)，但匹配时需完全匹配键",{"type":18,"tag":421,"props":11503,"children":11504},{},[11505,11506,11512,11513],{"type":37,"value":11240},{"type":18,"tag":268,"props":11507,"children":11509},{"className":11508},[],[11510],{"type":37,"value":11511},"HashMap",{"type":37,"value":11158},{"type":18,"tag":268,"props":11514,"children":11516},{"className":11515},[],[11517],{"type":37,"value":11518},"dict",{"type":18,"tag":421,"props":11520,"children":11521},{},[11522],{"type":37,"value":11523},"动态配置、JSON 交互",{"type":18,"tag":4071,"props":11525,"children":11527},{"id":11526},"pid-2",[11528],{"type":37,"value":11529},"pid 2",{"type":18,"tag":27,"props":11531,"children":11533},{"t":11532,"type":311},"PID",[],{"type":18,"tag":40,"props":11535,"children":11536},{},[11537,11539,11544],{"type":37,"value":11538},"这里面有很多有趣的，例如 ",{"type":18,"tag":268,"props":11540,"children":11542},{"className":11541},[],[11543],{"type":37,"value":11180},{"type":37,"value":11545},"。你可能会有一个疑问，为什么 PID 是一个单独的数据类型，而不是某个库提供的方法？感觉其他的 Lang 的数据类型都很常见，什么 Tuple、String、Int、List 之类的，但 PID 可能作为一个数据类型单独拿出来。",{"type":18,"tag":40,"props":11547,"children":11548},{},[11549,11551,11556],{"type":37,"value":11550},"显然 PID 是一个专门为多线程操作设计的一个类型，其主要方便的一点是保证 ",{"type":18,"tag":747,"props":11552,"children":11553},{},[11554],{"type":37,"value":11555},"原子化",{"type":37,"value":11557},", 简单的来说就是给每个节点分配一个唯一的 ID（有点像是在学 spring cloud 的内容）总结来说 PID 类型在于：",{"type":18,"tag":185,"props":11559,"children":11560},{},[11561,11566,11571],{"type":18,"tag":189,"props":11562,"children":11563},{},[11564],{"type":37,"value":11565},"原子性（atomicity）：每个 Pid 是唯一且不可变的，保证了进程间通信时不会混淆目标。",{"type":18,"tag":189,"props":11567,"children":11568},{},[11569],{"type":37,"value":11570},"分布式唯一性：即便是在多节点（Node）之间通信，每个进程仍能通过 Pid 被唯一标识。",{"type":18,"tag":189,"props":11572,"children":11573},{},[11574],{"type":37,"value":11575},"安全发送：Pid ! Message 是 Erlang 的基础通信语法，而你无法伪造一个 Pid 给系统发送消息。",{"type":18,"tag":40,"props":11577,"children":11578},{},[11579,11581],{"type":37,"value":11580},"例如在创建新的进程或者两者之间需要收发消息的时候就需要用到 PID，可以参考 ",{"type":18,"tag":193,"props":11582,"children":11585},{"href":11583,"rel":11584},"https://www.erlang.org/doc/system/ref_man_processes#process-creation",[197],[11586],{"type":37,"value":11587},"Process Creation",{"type":18,"tag":263,"props":11589,"children":11591},{"code":11590},"-module(main).\n\n-export([start/0, ping/2, pong/0]).\n\nping(0, Pong_PID) ->\n    Pong_PID ! finished,\n    io:format(\"ping finished~n\", []);\nping(N, Pong_PID) ->\n    Pong_PID ! {ping, self()},\n    receive\n        pong ->\n            io:format(\"Ping received pong~n\", [])\n    end,\n    ping(N - 1, Pong_PID).\n\npong() ->\n    receive\n        finished ->\n            io:format(\"Pong finished~n\", []);\n        {ping, Ping_PID} ->\n            io:format(\"Pong received ping~n\", []),\n            Ping_PID ! pong,\n            pong()\n    end.\n\nstart() ->\n    Pong_PID = spawn(main, pong, []),\n    spawn(main, ping, [3, Pong_PID]).\n\n---\nPong received ping\nPing received pong\nPong received ping\nPing received pong\nPong received ping\nPing received pong\nping finished\nPong finished\n",[11592],{"type":18,"tag":268,"props":11593,"children":11594},{"__ignoreMap":8},[11595],{"type":37,"value":11590},{"type":18,"tag":71,"props":11597,"children":11598},{},[],{"type":18,"tag":165,"props":11600,"children":11602},{"id":11601},"并发与设计哲学-2",[11603],{"type":37,"value":11604},"并发与设计哲学 2",{"type":18,"tag":27,"props":11606,"children":11608},{"t":11607},"Erlang 核心操作与设计哲学",[],{"type":18,"tag":11610,"props":11611,"children":11614},"wise-info",{"by":11612,"topic":11613},"Getting Started with Erlang","Concurrent Programming",[11615],{"type":18,"tag":40,"props":11616,"children":11617},{},[11618],{"type":37,"value":11619},"使用 Erlang 而不是其他函数式语言的主要原因之一是 Erlang 处理并发和分布式编程的能力",{"type":18,"tag":40,"props":11621,"children":11622},{},[11623],{"type":37,"value":11624},"这句话很有底气。在 Erlang 中，有一个并发的三要素，也就是：",{"type":18,"tag":185,"props":11626,"children":11627},{},[11628,11639,11649],{"type":18,"tag":189,"props":11629,"children":11630},{},[11631,11637],{"type":18,"tag":268,"props":11632,"children":11634},{"className":11633},[],[11635],{"type":37,"value":11636},"spawn",{"type":37,"value":11638},": 用于创建新进程;",{"type":18,"tag":189,"props":11640,"children":11641},{},[11642,11647],{"type":18,"tag":268,"props":11643,"children":11645},{"className":11644},[],[11646],{"type":37,"value":11191},{"type":37,"value":11648},": 消息传递；",{"type":18,"tag":189,"props":11650,"children":11651},{},[11652,11658,11660,11663,11665,11670],{"type":18,"tag":268,"props":11653,"children":11655},{"className":11654},[],[11656],{"type":37,"value":11657},"receive",{"type":37,"value":11659},": 模式匹配处理消息:",{"type":18,"tag":1504,"props":11661,"children":11662},{},[],{"type":37,"value":11664}," 队列中的第一条消息将与 中的  ",{"type":18,"tag":268,"props":11666,"children":11668},{"className":11667},[],[11669],{"type":37,"value":11657},{"type":37,"value":11671}," 第一个模式进行匹配。如果匹配，则从队列中删除消息并执行与模式对应的作。",{"type":18,"tag":11610,"props":11673,"children":11675},{"by":587,"topic":11674},"Programming Erlang",[11676],{"type":18,"tag":40,"props":11677,"children":11678},{},[11679],{"type":37,"value":11680},"let it crash",{"type":18,"tag":40,"props":11682,"children":11683},{},[11684,11686,11693],{"type":37,"value":11685},"毫无疑问的是，这一句话广为流传。有点像火箭中的 \"Blow it up\"。当然这不是我说的，对于这个设计哲学的讨论实在是太多了。我更倾向于 ",{"type":18,"tag":193,"props":11687,"children":11690},{"href":11688,"rel":11689},"https://ferd.ca/the-zen-of-erlang.html",[197],[11691],{"type":37,"value":11692},"The Zen of Erlang",{"type":37,"value":11694}," 这一篇演讲。举了很多例子，比如：",{"type":37,"value":1577},{"type":18,"tag":391,"props":11697,"children":11698},{},[11699,11717],{"type":18,"tag":395,"props":11700,"children":11701},{},[11702],{"type":18,"tag":399,"props":11703,"children":11704},{},[11705,11709,11714],{"type":18,"tag":403,"props":11706,"children":11707},{},[11708],{"type":37,"value":595},{"type":18,"tag":403,"props":11710,"children":11711},{},[11712],{"type":37,"value":11713},"E.g",{"type":18,"tag":403,"props":11715,"children":11716},{},[],{"type":18,"tag":414,"props":11718,"children":11719},{},[11720,11738,11754,11772,11788],{"type":18,"tag":399,"props":11721,"children":11722},{},[11723,11728,11733],{"type":18,"tag":421,"props":11724,"children":11725},{},[11726],{"type":37,"value":11727},"Let it Crash",{"type":18,"tag":421,"props":11729,"children":11730},{},[11731],{"type":37,"value":11732},"火箭科学（Blow it Up）​",{"type":18,"tag":421,"props":11734,"children":11735},{},[11736],{"type":37,"value":11737},"火箭推进本质是控制爆炸（燃烧燃料），而非避免爆炸。",{"type":18,"tag":399,"props":11739,"children":11740},{},[11741,11744,11749],{"type":18,"tag":421,"props":11742,"children":11743},{},[],{"type":18,"tag":421,"props":11745,"children":11746},{},[11747],{"type":37,"value":11748},"森林防火",{"type":18,"tag":421,"props":11750,"children":11751},{},[11752],{"type":37,"value":11753},"通过“受控燃烧”清除易燃物，防止更大火灾。",{"type":18,"tag":399,"props":11755,"children":11756},{},[11757,11762,11767],{"type":18,"tag":421,"props":11758,"children":11759},{},[11760],{"type":37,"value":11761},"Processes",{"type":18,"tag":421,"props":11763,"children":11764},{},[11765],{"type":37,"value":11766},"蜜蜂群",{"type":18,"tag":421,"props":11768,"children":11769},{},[11770],{"type":37,"value":11771},"蜂群中每只蜜蜂独立工作，死亡不影响整体。",{"type":18,"tag":399,"props":11773,"children":11774},{},[11775,11778,11783],{"type":18,"tag":421,"props":11776,"children":11777},{},[],{"type":18,"tag":421,"props":11779,"children":11780},{},[11781],{"type":37,"value":11782},"登山队",{"type":18,"tag":421,"props":11784,"children":11785},{},[11786],{"type":37,"value":11787},"登山者用绳索相连，但一人坠落可能拖累全队。",{"type":18,"tag":399,"props":11789,"children":11790},{},[11791,11796,11801],{"type":18,"tag":421,"props":11792,"children":11793},{},[11794],{"type":37,"value":11795},"Message Passing",{"type":18,"tag":421,"props":11797,"children":11798},{},[11799],{"type":37,"value":11800},"邮递、旗语",{"type":18,"tag":421,"props":11802,"children":11803},{},[11804],{"type":37,"value":11805},"旗语、邮差送信是异步的，发信后无需等待回复。",{"type":18,"tag":71,"props":11807,"children":11808},{},[],{"type":18,"tag":165,"props":11810,"children":11812},{"id":11811},"bohrbug-and-heisenbug-2",[11813],{"type":37,"value":11814},"Bohrbug and Heisenbug 2",{"type":18,"tag":27,"props":11816,"children":11818},{"t":11817},"Bohrbug and Heisenbug",[],{"type":18,"tag":1447,"props":11820,"children":11821},{"type":1449},[11822],{"type":18,"tag":40,"props":11823,"children":11824},{},[11825],{"type":37,"value":11826},"'Bohrbug' 和 'Heisenbug' 由 Jim Gray 于 1985 年创造（我建议您尽可能多地阅读 Jim Gray 的论文，它们几乎都很棒！）",{"type":18,"tag":40,"props":11828,"children":11829},{},[11830,11832,11839],{"type":37,"value":11831},"虽然我没有兴趣看论文，但我在看 wikipedia 的时候找到了 Bohrbug 的参考文献即 ",{"type":18,"tag":193,"props":11833,"children":11836},{"href":11834,"rel":11835},"http://catb.org/jargon/html/B/Bohr-bug.html",[197],[11837],{"type":37,"value":11838},"\"catb.org\"(\nEric S. Raymond's Home Page)",{"type":37,"value":11840}," 很有趣。看了他的个人介绍发现也是一位很有故事的人：",{"type":18,"tag":11610,"props":11842,"children":11845},{"by":11843,"topic":11844},"Eric S. Raymond","Views on open source",[11846],{"type":18,"tag":40,"props":11847,"children":11848},{},[11849,11851,11854],{"type":37,"value":11850},"Given enough eyeballs, all bugs are shallow.",{"type":18,"tag":1504,"props":11852,"children":11853},{},[],{"type":37,"value":11855},"\n只要有足够多的眼睛，所有Bug都是浅显的",{"type":18,"tag":40,"props":11857,"children":11858},{},[11859,11861,11868,11870,11876],{"type":37,"value":11860},"(好像很契合这一部分的章节) 突然对这本书很有兴趣，毕竟是 ",{"type":18,"tag":193,"props":11862,"children":11865},{"href":11863,"rel":11864},"https://en.wikipedia.org/wiki/Jargon_File",[197],[11866],{"type":37,"value":11867},"《Jargon File》行话文件",{"type":37,"value":11869}," 以后和群u萌水群的时候也可以拽几句俚语和上古行话了（后仰。让我意外的是 ",{"type":18,"tag":193,"props":11871,"children":11873},{"href":11834,"rel":11872},[197],[11874],{"type":37,"value":11875},"Bohrbug",{"type":37,"value":11877}," 竟然来自量子物理学，",{"type":37,"value":11879},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":11881,"children":11882},{},[11883,11902],{"type":18,"tag":395,"props":11884,"children":11885},{},[11886],{"type":18,"tag":399,"props":11887,"children":11888},{},[11889,11893,11897],{"type":18,"tag":403,"props":11890,"children":11891},{},[11892],{"type":37,"value":10562},{"type":18,"tag":403,"props":11894,"children":11895},{},[11896],{"type":37,"value":9988},{"type":18,"tag":403,"props":11898,"children":11899},{},[11900],{"type":37,"value":11901},"Jargon_File",{"type":18,"tag":414,"props":11903,"children":11904},{},[11905,11922,11936,11952,11966,11984,11998],{"type":18,"tag":399,"props":11906,"children":11907},{},[11908,11912,11917],{"type":18,"tag":421,"props":11909,"children":11910},{},[11911],{"type":37,"value":11875},{"type":18,"tag":421,"props":11913,"children":11914},{},[11915],{"type":37,"value":11916},"稳定可复现​​：在相同条件下必然复现",{"type":18,"tag":421,"props":11918,"children":11919},{},[11920],{"type":37,"value":11921},"一种可重复出现的错误；在一组可能未知但定义明确的条件下可靠地出现",{"type":18,"tag":399,"props":11923,"children":11924},{},[11925,11928,11933],{"type":18,"tag":421,"props":11926,"children":11927},{},[],{"type":18,"tag":421,"props":11929,"children":11930},{},[11931],{"type":37,"value":11932},"易于调试​​：可通过日志、断点或单元测试定位。",{"type":18,"tag":421,"props":11934,"children":11935},{},[],{"type":18,"tag":399,"props":11937,"children":11938},{},[11939,11944,11949],{"type":18,"tag":421,"props":11940,"children":11941},{},[11942],{"type":37,"value":11943},"Heisenbug",{"type":18,"tag":421,"props":11945,"children":11946},{},[11947],{"type":37,"value":11948},"难以复现​​：仅在特定条件下偶然出现（如高并发、特定硬件状态）。",{"type":18,"tag":421,"props":11950,"children":11951},{},[],{"type":18,"tag":399,"props":11953,"children":11954},{},[11955,11958,11963],{"type":18,"tag":421,"props":11956,"children":11957},{},[],{"type":18,"tag":421,"props":11959,"children":11960},{},[11961],{"type":37,"value":11962},"牵一发而动全身：尝试修复它们常导致更多意外行为",{"type":18,"tag":421,"props":11964,"children":11965},{},[],{"type":18,"tag":399,"props":11967,"children":11968},{},[11969,11974,11979],{"type":18,"tag":421,"props":11970,"children":11971},{},[11972],{"type":37,"value":11973},"Mandelbug",{"type":18,"tag":421,"props":11975,"children":11976},{},[11977],{"type":37,"value":11978},"问题根源深藏于系统复杂交互中",{"type":18,"tag":421,"props":11980,"children":11981},{},[11982],{"type":37,"value":11983},"一种底层原因极其复杂且晦涩的bug，其行为看似混沌甚至非确定性。该术语暗示说话者认为它是一个 ​​Bohr bug​​（稳定可复现的bug），而非 ​​Heisenbug​​",{"type":18,"tag":399,"props":11985,"children":11986},{},[11987,11990,11995],{"type":18,"tag":421,"props":11988,"children":11989},{},[],{"type":18,"tag":421,"props":11991,"children":11992},{},[11993],{"type":37,"value":11994},"行为难以预测，但一旦复现则稳定存在",{"type":18,"tag":421,"props":11996,"children":11997},{},[],{"type":18,"tag":399,"props":11999,"children":12000},{},[12001,12006,12011],{"type":18,"tag":421,"props":12002,"children":12003},{},[12004],{"type":37,"value":12005},"Schroedinbug",{"type":18,"tag":421,"props":12007,"children":12008},{},[12009],{"type":37,"value":12010},"类比量子物理中的“薛定谔的猫”思想实验",{"type":18,"tag":421,"props":12012,"children":12013},{},[12014],{"type":37,"value":12015},"程序中的设计或实现bug，平时潜伏不发作，直到有人阅读源代码或以非常规方式使用程序时，突然发现“这代码根本不该工作！”——随后程序立即对所有人失效，直到修复。",{"type":18,"tag":71,"props":12017,"children":12018},{},[],{"type":18,"tag":32,"props":12020,"children":12022},{"id":12021},"clojure-1",[12023],{"type":37,"value":12024},"Clojure 1",{"type":18,"tag":27,"props":12026,"children":12027},{"t":1855},[],{"type":18,"tag":40,"props":12029,"children":12030},{},[12031],{"type":37,"value":12032},"我对 Clojure 的印象就是 lisp(LISt Processing) 的 logo 很像 ☯  (阴阳) 除此之外没了。在本书中，作者强调了 Clojure 像是《星球大战》中的​​尤达大师​​——看似古怪（语法反直觉），实则蕴含深厚智慧（并发模型、JVM生态）。而 Lisp 的双重性比如 195 8年诞生，是第二古老的高级语言。同时又兼顾了 宏（macro）和代码即数据（homoiconicity）等特性,又现代了那么一点点。",{"type":18,"tag":40,"props":12034,"children":12035},{},[12036],{"type":37,"value":12037},"要理解 Clojure 还需要先了解 LISt Processing 、Code as Data 这些 lisp 的核心特性。从输出 Hello,world 的方式来看，两者都是差不多的：",{"type":18,"tag":263,"props":12039,"children":12041},{"code":12040},"Common Lisp:\n(format t \"Hello, World!\")\n---\n\nClojure\n(println \"Hello, World!\")\n",[12042],{"type":18,"tag":268,"props":12043,"children":12044},{"__ignoreMap":8},[12045],{"type":37,"value":12040},{"type":18,"tag":263,"props":12047,"children":12049},{"code":12048},"--- Clojure\n\n;;    name   params         body\n;;    -----  ------  -------------------\n(defn greet [name]   (println (str \"Hello, \" name \"!\")))\n\n(greet \"John\")\n(greet \"Alla\")\n\n--- Common Lisp\n(defun fib (n)\n  \"Return the nth Fibonacci number.\"\n  (if (\u003C n 2)\n      n\n      (+ (fib (- n 1))\n         (fib (- n 2)))))\n\n(format t \"Fibonacci of 30: ~D\" (fib 30))\n",[12050],{"type":18,"tag":268,"props":12051,"children":12052},{"__ignoreMap":8},[12053],{"type":37,"value":12048},{"type":18,"tag":40,"props":12055,"children":12056},{},[12057,12059,12066,12068,12075],{"type":37,"value":12058},"你别说你还真别说，Clojure 这个文档写的还是很通俗易懂的，很简洁，",{"type":18,"tag":193,"props":12060,"children":12063},{"href":12061,"rel":12062},"https://lisp-lang.org/",[197],[12064],{"type":37,"value":12065},"Common Lisp",{"type":37,"value":12067}," 的文档也很简洁，不过 Common Lisp 是上古时期 Lisp 的改良版，因此要体验原汁原味的历史厚重感，要通过 ",{"type":18,"tag":193,"props":12069,"children":12072},{"href":12070,"rel":12071},"https://interlisp.org/",[197],[12073],{"type":37,"value":12074},"The Medley Interlisp Project",{"type":37,"value":12076}," 这个伟大的项目。",{"type":18,"tag":40,"props":12078,"children":12079},{},[12080,12082,12088,12090,12097],{"type":37,"value":12081},"虽然不是最原始的 lisp，是 ",{"type":18,"tag":193,"props":12083,"children":12085},{"href":703,"rel":12084},[197],[12086],{"type":37,"value":12087},"Interlisp",{"type":37,"value":12089}," 但这也在 lisp 历史时间线中靠前的，并发挥了重要的作用。有兴趣的话可以阅读下 ",{"type":18,"tag":193,"props":12091,"children":12094},{"href":12092,"rel":12093},"https://interlisp.org/history/timeline/",[197],[12095],{"type":37,"value":12096},"Interlisp Timeline",{"type":37,"value":12098}," 记录了 1960 至今的时间线。",{"type":18,"tag":165,"props":12100,"children":12102},{"id":12101},"clojure-hosted-2",[12103],{"type":37,"value":12104},"Clojure Hosted 2",{"type":18,"tag":27,"props":12106,"children":12108},{"t":12107},"Clojure JVM",[],{"type":18,"tag":40,"props":12110,"children":12111},{},[12112,12114,12120],{"type":37,"value":12113},"这一章算是让我意外的，我看到了作者在 Scala 篇章中没有写的内容，比如 Scala 和 Clojure 都是 JVM 生态。他们都可以使用 Java 的生态构建项目(有一说一我还是挺喜欢 scala 的，Code 看起来确实比 ",{"type":18,"tag":268,"props":12115,"children":12117},{"className":12116},[],[12118],{"type":37,"value":12119},"(",{"type":37,"value":12121}," 好看多了)：",{"type":18,"tag":263,"props":12123,"children":12125},{"code":12124},"--- Scala\n\nimport java.time.LocalDate\n\ndef addWeek(date: LocalDate): LocalDate =\n  date.plusDays(7)\n\ndef dayToStr(date: LocalDate): String =\n  s\"${date.getMonth} ${date.getDayOfMonth}, ${date.getYear}\"\n\n// Infinite lazy list of weekly dates from today\nval futureWeeks: LazyList[LocalDate] =\n  LazyList.iterate(LocalDate.now())(addWeek)\n\n// Take first 4 and print\nfutureWeeks\n  .take(4)\n  .map(dayToStr)\n  .foreach(println)\n\n--- Clojure\n(import '[java.time LocalDate])\n\n(defn add-week ^LocalDate [^LocalDate date]\n  (.plusDays date 7))\n\n(defn day->str [^LocalDate date]\n  (format \"%s %s, %s\" (.getMonth date) (.getDayOfMonth date) (.getYear date)))\n\n;; infinite sequence of weekly dates, starting from today\n(def future-weeks (iterate add-week (LocalDate/now)))\n\n(doseq [s (map day->str (take 4 future-weeks))]\n  (println s))\n\n\nOutput:\nJULY 21, 2025\nJULY 28, 2025\nAUGUST 4, 2025\nAUGUST 11, 2025\n",[12126],{"type":18,"tag":268,"props":12127,"children":12128},{"__ignoreMap":8},[12129],{"type":37,"value":12124},{"type":18,"tag":1447,"props":12131,"children":12132},{"type":1449},[12133],{"type":18,"tag":40,"props":12134,"children":12135},{},[12136],{"type":37,"value":12137},"clojure-CLR（Common Language Runtime） 是 .NET 平台的核心运行时环境。不过我还没写过 .NET。给我的映像就是以前装什么软件会提示缺少 .NET Framework 3.x\\4.x 环境什么的，一度认为是 .NET 域名有深厚联系。",{"type":18,"tag":40,"props":12139,"children":12140},{},[12141,12143,12150,12152,12159,12160],{"type":37,"value":12142},"不过作者成书的时候比较早，Clojure 目前将这个特性称之为 ",{"type":18,"tag":193,"props":12144,"children":12147},{"href":12145,"rel":12146},"https://clojure.org/about/jvm_hosted",[197],[12148],{"type":37,"value":12149},"Hosted",{"type":37,"value":12151}," 除了 JVM 还有 ",{"type":18,"tag":193,"props":12153,"children":12156},{"href":12154,"rel":12155},"https://clojurescript.org/",[197],[12157],{"type":37,"value":12158},"ClojureScript",{"type":37,"value":1962},{"type":18,"tag":193,"props":12161,"children":12164},{"href":12162,"rel":12163},"https://github.com/clojure/clojure-clr",[197],[12165],{"type":37,"value":12166},"ClojureCLR",{"type":18,"tag":165,"props":12168,"children":12170},{"id":12169},"homoiconicity-2",[12171],{"type":37,"value":12172},"Homoiconicity 2",{"type":18,"tag":27,"props":12174,"children":12176},{"t":12175},"Homoiconicity",[],{"type":18,"tag":40,"props":12178,"children":12179},{},[12180],{"type":37,"value":12181},"Homoiconicity（同像性）同常被视作为 \"代码视为数据\" 但貌似并没有达成共识。因此我更倾向于在大多数语言中（比如 Python、Java、C），你写的代码和数据结构是两回事，代码是“语言语法”，而数据是运行时的值。",{"type":18,"tag":1447,"props":12183,"children":12184},{"type":1449},[12185,12197],{"type":18,"tag":40,"props":12186,"children":12187},{},[12188,12190,12195],{"type":37,"value":12189},"这里的 “代码即数据” 并不严谨，更多的是方便理解，其真正的核心是 ",{"type":18,"tag":747,"props":12191,"children":12192},{},[12193],{"type":37,"value":12194},"同像性（homoiconicity来自希腊语单词，homo-意为相同，icon含义表像）",{"type":37,"value":12196}," 这个单词组合：",{"type":18,"tag":40,"props":12198,"children":12199},{},[12200],{"type":37,"value":12201},"Homoiconicity 是代码和数据的表示形式高度统一，语言的基本数据结构也是代码的语法结构，而不仅仅是代码“可以”被当数据处理。",{"type":18,"tag":40,"props":12203,"children":12204},{},[12205],{"type":37,"value":12206},"但在 Clojure（或 Lisp） 中，代码的结构本身 就是数据结构（一般是列表 list）。所以你可以像操作数据一样，读取、修改、构造、执行代码。",{"type":18,"tag":4071,"props":12208,"children":12210},{"id":12209},"macros-2",[12211],{"type":37,"value":12212},"Macros 2",{"type":18,"tag":27,"props":12214,"children":12216},{"t":12215},"Macros",[],{"type":18,"tag":40,"props":12218,"children":12219},{},[12220,12222,12227],{"type":37,"value":12221},"在此之前，作者阐述了语言的五个核心，其中在 “语言有哪些独特的核心特性” 里，并发支持、宏系统、虚拟机等成为主要的衡量因素。而上述的 Homoiconicity 体现之一，就是宏 (Macros) 宏实现了 Homoiconicity 中的 ",{"type":18,"tag":747,"props":12223,"children":12224},{},[12225],{"type":37,"value":12226},"代码即数据",{"type":37,"value":3150},{"type":18,"tag":40,"props":12229,"children":12230},{},[12231,12233,12239,12241,12248],{"type":37,"value":12232},"可以通过 ",{"type":18,"tag":268,"props":12234,"children":12236},{"className":12235},[],[12237],{"type":37,"value":12238},"macroexpand",{"type":37,"value":12240}," 函数来展开宏，例如 Clojure Docs 在 Macros 这一章给出的例子（可以丢进 ",{"type":18,"tag":193,"props":12242,"children":12245},{"href":12243,"rel":12244},"https://www.tryclojure.com/",[197],[12246],{"type":37,"value":12247},"Try Clojure\n",{"type":37,"value":12249}," 这个在线的 REPL 上看看，不过最近一次更新已经是 10 years ago 了 ：",{"type":18,"tag":263,"props":12251,"children":12253},{"code":12252},"user=> (-> {} (assoc :a 1) (assoc :b 2))\n{:b 2, :a 1}\n\nuser=> (macroexpand '(-> {} (assoc :a 1) (assoc :b 2)))\n(assoc (assoc {} :a 1) :b 2)\n\n---\n(list 'assoc\n      (list 'assoc {} :a 1)\n      :b 2)\n",[12254],{"type":18,"tag":268,"props":12255,"children":12256},{"__ignoreMap":8},[12257],{"type":37,"value":12252},{"type":18,"tag":40,"props":12259,"children":12260},{},[12261],{"type":37,"value":12262},"这就是代码和数据的统一性（同源性），既是 代码，也是一个 列表数据结构。（可以像操作普通数据一样，操作这段代码），因此宏可以用代码来生成代码。",{"type":18,"tag":165,"props":12264,"children":12266},{"id":12265},"destructuring-1",[12267],{"type":37,"value":12268},"Destructuring 1",{"type":18,"tag":27,"props":12270,"children":12272},{"t":12271},"Destructuring",[],{"type":18,"tag":40,"props":12274,"children":12275},{},[12276,12278,12283,12285,12291],{"type":37,"value":12277},"解构（Destructuring），我的理解就是匹配，严谨来说就是 ",{"type":18,"tag":747,"props":12279,"children":12280},{},[12281],{"type":37,"value":12282},"一种将名称简洁地绑定到数据结构内的值的方法",{"type":37,"value":12284},"。例如 MDN 的 ",{"type":18,"tag":193,"props":12286,"children":12289},{"href":12287,"rel":12288},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring",[197],[12290],{"type":37,"value":12271},{"type":37,"value":12292}," 例子非常的简洁明了，而 Clojure 给出的例子就很直观：",{"type":18,"tag":263,"props":12294,"children":12296},{"code":12295},"(def my-line [[5 10] [10 20]])\n\n(let [p1 (first my-line)\n      p2 (second my-line)\n      x1 (first p1)\n      y1 (second p1)\n      x2 (first p2)\n      y2 (second p2)]\n  (println \"Line from (\" x1 \",\" y1 \") to (\" x2 \", \" y2 \")\"))\n;= \"Line from ( 5 , 10 ) to ( 10 , 20 )\"\n",[12297],{"type":18,"tag":268,"props":12298,"children":12299},{"__ignoreMap":8},[12300],{"type":37,"value":12295},{"type":18,"tag":40,"props":12302,"children":12303},{},[12304],{"type":37,"value":12305},"Clojure 用的是显式(explicit)。同样是函数式的 py 则是 隐式(implicit)，就显得很简洁：",{"type":18,"tag":263,"props":12307,"children":12309},{"code":12308},"head, *middle, tail = [1, 2, 3, 4, 5]\n\nprint(head)    # 1\nprint(middle)  # [2, 3, 4]\nprint(tail)    # 5\n",[12310],{"type":18,"tag":268,"props":12311,"children":12312},{"__ignoreMap":8},[12313],{"type":37,"value":12308},{"type":18,"tag":40,"props":12315,"children":12316},{},[12317,12319,12324,12326,12333],{"type":37,"value":12318},"如果要了解 ",{"type":18,"tag":10656,"props":12320,"children":12321},{},[12322],{"type":37,"value":12323},"Explicit Pattern and Implicit Pattern",{"type":37,"value":12325}," 两种设计哲学，还是非常复杂的，虽然很多 lang 的 docs 中都有这个名词。但真正能介绍的很少，但我觉得可以看看 ",{"type":18,"tag":193,"props":12327,"children":12330},{"href":12328,"rel":12329},"https://en.wikipedia.org/wiki/Explicit_and_implicit_methods",[197],[12331],{"type":37,"value":12332},"Explicit and implicit methods",{"type":37,"value":12334}," 的介绍，总的来说就是字面理解：",{"type":18,"tag":1086,"props":12336,"children":12337},{},[12338,12343],{"type":18,"tag":189,"props":12339,"children":12340},{},[12341],{"type":37,"value":12342},"explicit：来自拉丁文 explicare，意为“展开、解释清楚”",{"type":18,"tag":189,"props":12344,"children":12345},{},[12346],{"type":37,"value":12347},"implicit：来自拉丁文 implicare，意为“卷入、含而不露”",{"type":18,"tag":40,"props":12349,"children":12350},{},[12351],{"type":37,"value":12352},"不过在数学中，是反过来的，也就是正如下面两个式子一样。“显式”强调的是计算是“明确”的,而“隐式”是：你不知道下一步状态具体怎么求，需要解个方程。:",{"type":18,"tag":4981,"props":12354,"children":12356},{"className":12355,"jax":4985},[4984],[12357],{"type":18,"tag":4988,"props":12358,"children":12361},{"style":4990,"xmlns":4991,"width":12359,"height":6787,"role":22,"focusable":4994,"viewBox":12360,"xmlnsXLink":4996},"30.327ex","0 -750 13404.6 1000",[12362,12435],{"type":18,"tag":4999,"props":12363,"children":12364},{},[12365,12370,12374,12379,12384,12388,12393,12398,12403,12408,12412,12417,12422,12426,12430],{"type":18,"tag":5003,"props":12366,"children":12369},{"id":12367,"d":12368},"MJX-6-TEX-I-1D452","M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z",[],{"type":18,"tag":5003,"props":12371,"children":12373},{"id":12372,"d":5016},"MJX-6-TEX-I-1D465",[],{"type":18,"tag":5003,"props":12375,"children":12378},{"id":12376,"d":12377},"MJX-6-TEX-I-1D45D","M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z",[],{"type":18,"tag":5003,"props":12380,"children":12383},{"id":12381,"d":12382},"MJX-6-TEX-I-1D459","M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z",[],{"type":18,"tag":5003,"props":12385,"children":12387},{"id":12386,"d":8215},"MJX-6-TEX-I-1D456",[],{"type":18,"tag":5003,"props":12389,"children":12392},{"id":12390,"d":12391},"MJX-6-TEX-I-1D450","M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z",[],{"type":18,"tag":5003,"props":12394,"children":12397},{"id":12395,"d":12396},"MJX-6-TEX-I-1D461","M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",[],{"type":18,"tag":5003,"props":12399,"children":12402},{"id":12400,"d":12401},"MJX-6-TEX-N-3A","M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z",[],{"type":18,"tag":5003,"props":12404,"children":12407},{"id":12405,"d":12406},"MJX-6-TEX-I-1D44C","M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z",[],{"type":18,"tag":5003,"props":12409,"children":12411},{"id":12410,"d":5011},"MJX-6-TEX-N-28",[],{"type":18,"tag":5003,"props":12413,"children":12416},{"id":12414,"d":12415},"MJX-6-TEX-N-2B","M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z",[],{"type":18,"tag":5003,"props":12418,"children":12421},{"id":12419,"d":12420},"MJX-6-TEX-N-394","M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z",[],{"type":18,"tag":5003,"props":12423,"children":12425},{"id":12424,"d":5021},"MJX-6-TEX-N-29",[],{"type":18,"tag":5003,"props":12427,"children":12429},{"id":12428,"d":5026},"MJX-6-TEX-N-3D",[],{"type":18,"tag":5003,"props":12431,"children":12434},{"id":12432,"d":12433},"MJX-6-TEX-I-1D439","M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z",[],{"type":18,"tag":5034,"props":12436,"children":12437},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[12438],{"type":18,"tag":5034,"props":12439,"children":12440},{"dataMmlNode":5042},[12441,12449,12457,12466,12475,12483,12492,12499,12508,12517],{"type":18,"tag":5034,"props":12442,"children":12443},{"dataMmlNode":5046},[12444],{"type":18,"tag":5049,"props":12445,"children":12448},{"dataC":12446,"xLinkHref":12447},"1D452","#MJX-6-TEX-I-1D452",[],{"type":18,"tag":5034,"props":12450,"children":12452},{"dataMmlNode":5046,"transform":12451},"translate(466,0)",[12453],{"type":18,"tag":5049,"props":12454,"children":12456},{"dataC":5070,"xLinkHref":12455},"#MJX-6-TEX-I-1D465",[],{"type":18,"tag":5034,"props":12458,"children":12460},{"dataMmlNode":5046,"transform":12459},"translate(1038,0)",[12461],{"type":18,"tag":5049,"props":12462,"children":12465},{"dataC":12463,"xLinkHref":12464},"1D45D","#MJX-6-TEX-I-1D45D",[],{"type":18,"tag":5034,"props":12467,"children":12469},{"dataMmlNode":5046,"transform":12468},"translate(1541,0)",[12470],{"type":18,"tag":5049,"props":12471,"children":12474},{"dataC":12472,"xLinkHref":12473},"1D459","#MJX-6-TEX-I-1D459",[],{"type":18,"tag":5034,"props":12476,"children":12478},{"dataMmlNode":5046,"transform":12477},"translate(1839,0)",[12479],{"type":18,"tag":5049,"props":12480,"children":12482},{"dataC":8290,"xLinkHref":12481},"#MJX-6-TEX-I-1D456",[],{"type":18,"tag":5034,"props":12484,"children":12486},{"dataMmlNode":5046,"transform":12485},"translate(2184,0)",[12487],{"type":18,"tag":5049,"props":12488,"children":12491},{"dataC":12489,"xLinkHref":12490},"1D450","#MJX-6-TEX-I-1D450",[],{"type":18,"tag":5034,"props":12493,"children":12495},{"dataMmlNode":5046,"transform":12494},"translate(2617,0)",[12496],{"type":18,"tag":5049,"props":12497,"children":12498},{"dataC":8290,"xLinkHref":12481},[],{"type":18,"tag":5034,"props":12500,"children":12502},{"dataMmlNode":5046,"transform":12501},"translate(2962,0)",[12503],{"type":18,"tag":5049,"props":12504,"children":12507},{"dataC":12505,"xLinkHref":12506},"1D461","#MJX-6-TEX-I-1D461",[],{"type":18,"tag":5034,"props":12509,"children":12511},{"dataMmlNode":5056,"transform":12510},"translate(3600.8,0)",[12512],{"type":18,"tag":5049,"props":12513,"children":12516},{"dataC":12514,"xLinkHref":12515},"3A","#MJX-6-TEX-N-3A",[],{"type":18,"tag":5034,"props":12518,"children":12522},{"dataMmlNode":12519,"dataMjxTexclass":12520,"transform":12521},"TeXAtom","ORD","translate(4156.6,0)",[12523],{"type":18,"tag":5034,"props":12524,"children":12526},{"dataMmlNode":12525},"mstyle",[12527,12535,12543,12550,12559,12568,12575,12583,12591,12600,12607,12614,12621,12628,12635,12642],{"type":18,"tag":5034,"props":12528,"children":12529},{"dataMmlNode":5046},[12530],{"type":18,"tag":5049,"props":12531,"children":12534},{"dataC":12532,"xLinkHref":12533},"1D44C","#MJX-6-TEX-I-1D44C",[],{"type":18,"tag":5034,"props":12536,"children":12538},{"dataMmlNode":5056,"transform":12537},"translate(763,0)",[12539],{"type":18,"tag":5049,"props":12540,"children":12542},{"dataC":5061,"xLinkHref":12541},"#MJX-6-TEX-N-28",[],{"type":18,"tag":5034,"props":12544,"children":12546},{"dataMmlNode":5046,"transform":12545},"translate(1152,0)",[12547],{"type":18,"tag":5049,"props":12548,"children":12549},{"dataC":12505,"xLinkHref":12506},[],{"type":18,"tag":5034,"props":12551,"children":12553},{"dataMmlNode":5056,"transform":12552},"translate(1735.2,0)",[12554],{"type":18,"tag":5049,"props":12555,"children":12558},{"dataC":12556,"xLinkHref":12557},"2B","#MJX-6-TEX-N-2B",[],{"type":18,"tag":5034,"props":12560,"children":12562},{"dataMmlNode":5046,"transform":12561},"translate(2735.4,0)",[12563],{"type":18,"tag":5049,"props":12564,"children":12567},{"dataC":12565,"xLinkHref":12566},"394","#MJX-6-TEX-N-394",[],{"type":18,"tag":5034,"props":12569,"children":12571},{"dataMmlNode":5046,"transform":12570},"translate(3568.4,0)",[12572],{"type":18,"tag":5049,"props":12573,"children":12574},{"dataC":12505,"xLinkHref":12506},[],{"type":18,"tag":5034,"props":12576,"children":12578},{"dataMmlNode":5056,"transform":12577},"translate(3929.4,0)",[12579],{"type":18,"tag":5049,"props":12580,"children":12582},{"dataC":5079,"xLinkHref":12581},"#MJX-6-TEX-N-29",[],{"type":18,"tag":5034,"props":12584,"children":12586},{"dataMmlNode":5056,"transform":12585},"translate(4596.2,0)",[12587],{"type":18,"tag":5049,"props":12588,"children":12590},{"dataC":5088,"xLinkHref":12589},"#MJX-6-TEX-N-3D",[],{"type":18,"tag":5034,"props":12592,"children":12594},{"dataMmlNode":5046,"transform":12593},"translate(5652,0)",[12595],{"type":18,"tag":5049,"props":12596,"children":12599},{"dataC":12597,"xLinkHref":12598},"1D439","#MJX-6-TEX-I-1D439",[],{"type":18,"tag":5034,"props":12601,"children":12603},{"dataMmlNode":5056,"transform":12602},"translate(6401,0)",[12604],{"type":18,"tag":5049,"props":12605,"children":12606},{"dataC":5061,"xLinkHref":12541},[],{"type":18,"tag":5034,"props":12608,"children":12610},{"dataMmlNode":5046,"transform":12609},"translate(6790,0)",[12611],{"type":18,"tag":5049,"props":12612,"children":12613},{"dataC":12532,"xLinkHref":12533},[],{"type":18,"tag":5034,"props":12615,"children":12617},{"dataMmlNode":5056,"transform":12616},"translate(7553,0)",[12618],{"type":18,"tag":5049,"props":12619,"children":12620},{"dataC":5061,"xLinkHref":12541},[],{"type":18,"tag":5034,"props":12622,"children":12624},{"dataMmlNode":5046,"transform":12623},"translate(7942,0)",[12625],{"type":18,"tag":5049,"props":12626,"children":12627},{"dataC":12505,"xLinkHref":12506},[],{"type":18,"tag":5034,"props":12629,"children":12631},{"dataMmlNode":5056,"transform":12630},"translate(8303,0)",[12632],{"type":18,"tag":5049,"props":12633,"children":12634},{"dataC":5079,"xLinkHref":12581},[],{"type":18,"tag":5034,"props":12636,"children":12638},{"dataMmlNode":5056,"transform":12637},"translate(8692,0)",[12639],{"type":18,"tag":5049,"props":12640,"children":12641},{"dataC":5079,"xLinkHref":12581},[],{"type":18,"tag":5034,"props":12643,"children":12645},{"dataMmlNode":12525,"transform":12644},"translate(9081,0)",[12646],{"type":18,"tag":5034,"props":12647,"children":12649},{"dataMmlNode":12648},"mspace",[],{"type":18,"tag":4981,"props":12651,"children":12653},{"className":12652,"jax":4985},[4984],[12654],{"type":18,"tag":4988,"props":12655,"children":12660},{"style":12656,"xmlns":4991,"width":12657,"height":12658,"role":22,"focusable":4994,"viewBox":12659,"xmlnsXLink":4996},"vertical-align: -1.469ex;","33.53ex","4.07ex","0 -1149.5 14820.2 1799",[12661,12741],{"type":18,"tag":4999,"props":12662,"children":12663},{},[12664,12668,12673,12677,12681,12685,12689,12693,12698,12703,12707,12711,12715,12720,12724,12728,12733,12737],{"type":18,"tag":5003,"props":12665,"children":12667},{"id":12666,"d":8215},"MJX-7-TEX-I-1D456",[],{"type":18,"tag":5003,"props":12669,"children":12672},{"id":12670,"d":12671},"MJX-7-TEX-I-1D45A","M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z",[],{"type":18,"tag":5003,"props":12674,"children":12676},{"id":12675,"d":12377},"MJX-7-TEX-I-1D45D",[],{"type":18,"tag":5003,"props":12678,"children":12680},{"id":12679,"d":12382},"MJX-7-TEX-I-1D459",[],{"type":18,"tag":5003,"props":12682,"children":12684},{"id":12683,"d":12391},"MJX-7-TEX-I-1D450",[],{"type":18,"tag":5003,"props":12686,"children":12688},{"id":12687,"d":12396},"MJX-7-TEX-I-1D461",[],{"type":18,"tag":5003,"props":12690,"children":12692},{"id":12691,"d":12401},"MJX-7-TEX-N-3A",[],{"type":18,"tag":5003,"props":12694,"children":12697},{"id":12695,"d":12696},"MJX-7-TEX-I-1D43A","M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z",[],{"type":18,"tag":5003,"props":12699,"children":12702},{"id":12700,"d":12701},"MJX-7-TEX-LO-28","M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z",[],{"type":18,"tag":5003,"props":12704,"children":12706},{"id":12705,"d":12406},"MJX-7-TEX-I-1D44C",[],{"type":18,"tag":5003,"props":12708,"children":12710},{"id":12709,"d":5011},"MJX-7-TEX-N-28",[],{"type":18,"tag":5003,"props":12712,"children":12714},{"id":12713,"d":5021},"MJX-7-TEX-N-29",[],{"type":18,"tag":5003,"props":12716,"children":12719},{"id":12717,"d":12718},"MJX-7-TEX-N-2C","M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z",[],{"type":18,"tag":5003,"props":12721,"children":12723},{"id":12722,"d":12415},"MJX-7-TEX-N-2B",[],{"type":18,"tag":5003,"props":12725,"children":12727},{"id":12726,"d":12420},"MJX-7-TEX-N-394",[],{"type":18,"tag":5003,"props":12729,"children":12732},{"id":12730,"d":12731},"MJX-7-TEX-LO-29","M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z",[],{"type":18,"tag":5003,"props":12734,"children":12736},{"id":12735,"d":5026},"MJX-7-TEX-N-3D",[],{"type":18,"tag":5003,"props":12738,"children":12740},{"id":12739,"d":7104},"MJX-7-TEX-N-30",[],{"type":18,"tag":5034,"props":12742,"children":12743},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[12744],{"type":18,"tag":5034,"props":12745,"children":12746},{"dataMmlNode":5042},[12747,12754,12763,12771,12779,12786,12794,12801,12809,12817],{"type":18,"tag":5034,"props":12748,"children":12749},{"dataMmlNode":5046},[12750],{"type":18,"tag":5049,"props":12751,"children":12753},{"dataC":8290,"xLinkHref":12752},"#MJX-7-TEX-I-1D456",[],{"type":18,"tag":5034,"props":12755,"children":12757},{"dataMmlNode":5046,"transform":12756},"translate(345,0)",[12758],{"type":18,"tag":5049,"props":12759,"children":12762},{"dataC":12760,"xLinkHref":12761},"1D45A","#MJX-7-TEX-I-1D45A",[],{"type":18,"tag":5034,"props":12764,"children":12766},{"dataMmlNode":5046,"transform":12765},"translate(1223,0)",[12767],{"type":18,"tag":5049,"props":12768,"children":12770},{"dataC":12463,"xLinkHref":12769},"#MJX-7-TEX-I-1D45D",[],{"type":18,"tag":5034,"props":12772,"children":12774},{"dataMmlNode":5046,"transform":12773},"translate(1726,0)",[12775],{"type":18,"tag":5049,"props":12776,"children":12778},{"dataC":12472,"xLinkHref":12777},"#MJX-7-TEX-I-1D459",[],{"type":18,"tag":5034,"props":12780,"children":12782},{"dataMmlNode":5046,"transform":12781},"translate(2024,0)",[12783],{"type":18,"tag":5049,"props":12784,"children":12785},{"dataC":8290,"xLinkHref":12752},[],{"type":18,"tag":5034,"props":12787,"children":12789},{"dataMmlNode":5046,"transform":12788},"translate(2369,0)",[12790],{"type":18,"tag":5049,"props":12791,"children":12793},{"dataC":12489,"xLinkHref":12792},"#MJX-7-TEX-I-1D450",[],{"type":18,"tag":5034,"props":12795,"children":12797},{"dataMmlNode":5046,"transform":12796},"translate(2802,0)",[12798],{"type":18,"tag":5049,"props":12799,"children":12800},{"dataC":8290,"xLinkHref":12752},[],{"type":18,"tag":5034,"props":12802,"children":12804},{"dataMmlNode":5046,"transform":12803},"translate(3147,0)",[12805],{"type":18,"tag":5049,"props":12806,"children":12808},{"dataC":12505,"xLinkHref":12807},"#MJX-7-TEX-I-1D461",[],{"type":18,"tag":5034,"props":12810,"children":12812},{"dataMmlNode":5056,"transform":12811},"translate(3785.8,0)",[12813],{"type":18,"tag":5049,"props":12814,"children":12816},{"dataC":12514,"xLinkHref":12815},"#MJX-7-TEX-N-3A",[],{"type":18,"tag":5034,"props":12818,"children":12820},{"dataMmlNode":12519,"dataMjxTexclass":12520,"transform":12819},"translate(4341.6,0)",[12821],{"type":18,"tag":5034,"props":12822,"children":12823},{"dataMmlNode":12525},[12824,12832,12846,12854,12862,12869,12877,12886,12893,12900,12907,12915,12923,12930,12937,12951,12959],{"type":18,"tag":5034,"props":12825,"children":12826},{"dataMmlNode":5046},[12827],{"type":18,"tag":5049,"props":12828,"children":12831},{"dataC":12829,"xLinkHref":12830},"1D43A","#MJX-7-TEX-I-1D43A",[],{"type":18,"tag":5034,"props":12833,"children":12835},{"dataMmlNode":12519,"dataMjxTexclass":12520,"transform":12834},"translate(786,0)",[12836],{"type":18,"tag":5034,"props":12837,"children":12838},{"dataMmlNode":12519,"dataMjxTexclass":12520},[12839],{"type":18,"tag":5034,"props":12840,"children":12841},{"dataMmlNode":5056,"transform":7220},[12842],{"type":18,"tag":5049,"props":12843,"children":12845},{"dataC":5061,"xLinkHref":12844},"#MJX-7-TEX-LO-28",[],{"type":18,"tag":5034,"props":12847,"children":12849},{"dataMmlNode":5046,"transform":12848},"translate(1383,0)",[12850],{"type":18,"tag":5049,"props":12851,"children":12853},{"dataC":12532,"xLinkHref":12852},"#MJX-7-TEX-I-1D44C",[],{"type":18,"tag":5034,"props":12855,"children":12857},{"dataMmlNode":5056,"transform":12856},"translate(2146,0)",[12858],{"type":18,"tag":5049,"props":12859,"children":12861},{"dataC":5061,"xLinkHref":12860},"#MJX-7-TEX-N-28",[],{"type":18,"tag":5034,"props":12863,"children":12865},{"dataMmlNode":5046,"transform":12864},"translate(2535,0)",[12866],{"type":18,"tag":5049,"props":12867,"children":12868},{"dataC":12505,"xLinkHref":12807},[],{"type":18,"tag":5034,"props":12870,"children":12872},{"dataMmlNode":5056,"transform":12871},"translate(2896,0)",[12873],{"type":18,"tag":5049,"props":12874,"children":12876},{"dataC":5079,"xLinkHref":12875},"#MJX-7-TEX-N-29",[],{"type":18,"tag":5034,"props":12878,"children":12880},{"dataMmlNode":5056,"transform":12879},"translate(3285,0)",[12881],{"type":18,"tag":5049,"props":12882,"children":12885},{"dataC":12883,"xLinkHref":12884},"2C","#MJX-7-TEX-N-2C",[],{"type":18,"tag":5034,"props":12887,"children":12889},{"dataMmlNode":5046,"transform":12888},"translate(3729.7,0)",[12890],{"type":18,"tag":5049,"props":12891,"children":12892},{"dataC":12532,"xLinkHref":12852},[],{"type":18,"tag":5034,"props":12894,"children":12896},{"dataMmlNode":5056,"transform":12895},"translate(4492.7,0)",[12897],{"type":18,"tag":5049,"props":12898,"children":12899},{"dataC":5061,"xLinkHref":12860},[],{"type":18,"tag":5034,"props":12901,"children":12903},{"dataMmlNode":5046,"transform":12902},"translate(4881.7,0)",[12904],{"type":18,"tag":5049,"props":12905,"children":12906},{"dataC":12505,"xLinkHref":12807},[],{"type":18,"tag":5034,"props":12908,"children":12910},{"dataMmlNode":5056,"transform":12909},"translate(5464.9,0)",[12911],{"type":18,"tag":5049,"props":12912,"children":12914},{"dataC":12556,"xLinkHref":12913},"#MJX-7-TEX-N-2B",[],{"type":18,"tag":5034,"props":12916,"children":12918},{"dataMmlNode":5046,"transform":12917},"translate(6465.1,0)",[12919],{"type":18,"tag":5049,"props":12920,"children":12922},{"dataC":12565,"xLinkHref":12921},"#MJX-7-TEX-N-394",[],{"type":18,"tag":5034,"props":12924,"children":12926},{"dataMmlNode":5046,"transform":12925},"translate(7298.1,0)",[12927],{"type":18,"tag":5049,"props":12928,"children":12929},{"dataC":12505,"xLinkHref":12807},[],{"type":18,"tag":5034,"props":12931,"children":12933},{"dataMmlNode":5056,"transform":12932},"translate(7659.1,0)",[12934],{"type":18,"tag":5049,"props":12935,"children":12936},{"dataC":5079,"xLinkHref":12875},[],{"type":18,"tag":5034,"props":12938,"children":12940},{"dataMmlNode":12519,"dataMjxTexclass":12520,"transform":12939},"translate(8048.1,0)",[12941],{"type":18,"tag":5034,"props":12942,"children":12943},{"dataMmlNode":12519,"dataMjxTexclass":12520},[12944],{"type":18,"tag":5034,"props":12945,"children":12946},{"dataMmlNode":5056,"transform":7220},[12947],{"type":18,"tag":5049,"props":12948,"children":12950},{"dataC":5079,"xLinkHref":12949},"#MJX-7-TEX-LO-29",[],{"type":18,"tag":5034,"props":12952,"children":12954},{"dataMmlNode":5056,"transform":12953},"translate(8922.9,0)",[12955],{"type":18,"tag":5049,"props":12956,"children":12958},{"dataC":5088,"xLinkHref":12957},"#MJX-7-TEX-N-3D",[],{"type":18,"tag":5034,"props":12960,"children":12962},{"dataMmlNode":5104,"transform":12961},"translate(9978.7,0)",[12963],{"type":18,"tag":5049,"props":12964,"children":12966},{"dataC":7288,"xLinkHref":12965},"#MJX-7-TEX-N-30",[],{"type":18,"tag":40,"props":12968,"children":12969},{},[12970,12972,12977],{"type":37,"value":12971},"而在 lang 中则是，",{"type":18,"tag":747,"props":12973,"children":12974},{},[12975],{"type":37,"value":12976},"显式写出（显式） vs 编译器自动推导（隐式）",{"type":37,"value":12978},"（突然理解了为什么 Haskell 会在 docs 上写推导了。",{"type":18,"tag":12980,"props":12981,"children":12982},"blockquote",{},[12983],{"type":18,"tag":40,"props":12984,"children":12985},{},[12986],{"type":37,"value":12987},"Kind inference checks the validity of type expressions in a similar way that type inference checks the validity of value expressions. However, unlike types, kinds are entirely implicit and are not a visible part of the language. Kind inference is discussed in Section 4.6.",{"type":18,"tag":71,"props":12989,"children":12990},{},[],{"type":18,"tag":165,"props":12992,"children":12994},{"id":12993},"原力-2",[12995],{"type":37,"value":12996},"原力 2",{"type":18,"tag":27,"props":12998,"children":13000},{"t":12999},"原力",[],{"type":18,"tag":40,"props":13002,"children":13003},{},[13004],{"type":37,"value":13005},"作者很有意思，会在每个章节的开头用影视剧的剧情来描述本章节可能带来的一些内容，比如本章节就以星球大战中的剧情为例子体现出 在 Clojure 中，​​序列（Sequences）​​、​​惰性求值（Lazy Evaluation）​​和​​宏（Macros）是原力的体现",{"type":18,"tag":4071,"props":13007,"children":13009},{"id":13008},"sequences-2",[13010],{"type":37,"value":13011},"Sequences 2",{"type":18,"tag":27,"props":13013,"children":13015},{"t":13014},"Sequences",[],{"type":18,"tag":1447,"props":13017,"children":13018},{"type":1449},[13019,13024,13032,13037,13042,13047],{"type":18,"tag":40,"props":13020,"children":13021},{},[13022],{"type":37,"value":13023},"在数学中， 序列是允许重复且顺序很重要的对象的枚举集合。与集合一样，它包含成员 （也称为元素或术语 ）。元素的数量（可能是无限的）称为序列的长度 。与集合不同，相同的元素可以在序列中的不同位置多次出现，并且与集合不同，顺序确实很重要。",{"type":18,"tag":40,"props":13025,"children":13026},{},[13027],{"type":18,"tag":747,"props":13028,"children":13029},{},[13030],{"type":37,"value":13031},"有限和无限序列",{"type":18,"tag":40,"props":13033,"children":13034},{},[13035],{"type":37,"value":13036},"序列的长度定义为序列中的项数。限长度的序列是有限序列 。长度为 n 的有限序列也称为 n 元组 。有限序列包括没有元素的空序列 ，表示为 （ ）。",{"type":18,"tag":40,"props":13038,"children":13039},{},[13040],{"type":37,"value":13041},"限序列是指在一个方向上是无限的，在另一个方向上是有限的序列;这样的序列有第一个元素，但没有最终元素，当需要消歧义时称为单无限序列或单侧无限序列 。",{"type":18,"tag":40,"props":13043,"children":13044},{},[13045],{"type":37,"value":13046},"在两个方向上都是无限的序列——即既没有第一个元素也没有最后一个元素——称为双无限序列 、 双向无限序列或双无限序列 。",{"type":18,"tag":12980,"props":13048,"children":13049},{},[13050],{"type":18,"tag":40,"props":13051,"children":13052},{},[13053],{"type":37,"value":13054},"例如所有偶数整数的序列 （ ...， −4， −2， 0， 2， 4， 6， 8， ... ），是双无限的。（建议看维基百科的介绍)",{"type":18,"tag":40,"props":13056,"children":13057},{},[13058,13065],{"type":18,"tag":193,"props":13059,"children":13062},{"href":13060,"rel":13061},"https://en.wikipedia.org/wiki/Sequence",[197],[13063],{"type":37,"value":13064},"序列（Sequences）",{"type":37,"value":13066}," 我的理解就是操作数据结构的一种方式，在计算机科学中，有限序列通常称为字符串 、 单词或列表(而无限序列被称之为流)。这也就是为什么 Clojure 会在这一章接描述中写了一句 “seq 是一个逻辑列表” 的原因，而 ISeq 大概就是 Interface for Sequence 的缩写？",{"type":18,"tag":40,"props":13068,"children":13069},{},[13070,13072,13079,13081,13088,13090,13095,13097,13104],{"type":37,"value":13071},"因此这就抛出了一个 Clojure 特性之一的 ",{"type":18,"tag":193,"props":13073,"children":13076},{"href":13074,"rel":13075},"https://en.wikipedia.org/wiki/Lazy_evaluation",[197],[13077],{"type":37,"value":13078},"“Lazy Evaluation” 即惰性求值",{"type":37,"value":13080},"。是 ",{"type":18,"tag":193,"props":13082,"children":13085},{"href":13083,"rel":13084},"https://en.wikipedia.org/wiki/Programming_language_theory",[197],[13086],{"type":37,"value":13087},"Programming language theory",{"type":37,"value":13089}," 讨论的范畴，而 ",{"type":18,"tag":747,"props":13091,"children":13092},{},[13093],{"type":37,"value":13094},"λ",{"type":37,"value":13096}," 属于编程语言理论(PLT) 的非官方符号（怪不得 Haskell website 上能看到这个符号）值得注意的是这个符号还是 ",{"type":18,"tag":193,"props":13098,"children":13101},{"href":13099,"rel":13100},"https://en.wikipedia.org/wiki/Scheme_(programming_language)",[197],[13102],{"type":37,"value":13103},"Scheme",{"type":37,"value":13105}," 的 logo，他是 Lisp 系列编程语言的一种方言之一，诞生于 1970 年代。",{"type":18,"tag":40,"props":13107,"children":13108},{},[13109,13114,13116,13123],{"type":18,"tag":747,"props":13110,"children":13111},{},[13112],{"type":37,"value":13113},"惰性求值的优点是能够创建可计算的无限列表",{"type":37,"value":13115},"，怪不得很多 lang 都喜欢 ",{"type":18,"tag":193,"props":13117,"children":13120},{"href":13118,"rel":13119},"https://en.wikipedia.org/wiki/Fibonacci_sequence",[197],[13121],{"type":37,"value":13122},"斐波那契数列",{"type":37,"value":13124}," 做特性展示。原来是 show lang 的序列特性哇:",{"type":18,"tag":263,"props":13126,"children":13128},{"code":13127},"(def fib-seq\n  (->> [0 1]                      \n       (iterate (fn [[a b]] [b (+ a b)])) \n       (map first)))       \n       \n(println (take 20 fib-seq))\n;;  (0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181)\n",[13129],{"type":18,"tag":268,"props":13130,"children":13131},{"__ignoreMap":8},[13132],{"type":37,"value":13127},{"type":18,"tag":1504,"props":13134,"children":13135},{},[],{"type":18,"tag":4981,"props":13137,"children":13139},{"className":13138,"jax":4985},[4984],[13140],{"type":18,"tag":4988,"props":13141,"children":13146},{"style":13142,"xmlns":4991,"width":13143,"height":13144,"role":22,"focusable":4994,"viewBox":13145,"xmlnsXLink":4996},"vertical-align: -3.507ex;","38.61ex","8.145ex","0 -2050 17065.4 3600",[13147,13199],{"type":18,"tag":4999,"props":13148,"children":13149},{},[13150,13154,13158,13162,13166,13170,13174,13178,13182,13186,13190,13194],{"type":18,"tag":5003,"props":13151,"children":13153},{"id":13152,"d":12433},"MJX-8-TEX-I-1D439",[],{"type":18,"tag":5003,"props":13155,"children":13157},{"id":13156,"d":5011},"MJX-8-TEX-N-28",[],{"type":18,"tag":5003,"props":13159,"children":13161},{"id":13160,"d":7104},"MJX-8-TEX-N-30",[],{"type":18,"tag":5003,"props":13163,"children":13165},{"id":13164,"d":5021},"MJX-8-TEX-N-29",[],{"type":18,"tag":5003,"props":13167,"children":13169},{"id":13168,"d":5026},"MJX-8-TEX-N-3D",[],{"type":18,"tag":5003,"props":13171,"children":13173},{"id":13172,"d":6824},"MJX-8-TEX-N-31",[],{"type":18,"tag":5003,"props":13175,"children":13177},{"id":13176,"d":6796},"MJX-8-TEX-I-1D45B",[],{"type":18,"tag":5003,"props":13179,"children":13181},{"id":13180,"d":6819},"MJX-8-TEX-N-2212",[],{"type":18,"tag":5003,"props":13183,"children":13185},{"id":13184,"d":12415},"MJX-8-TEX-N-2B",[],{"type":18,"tag":5003,"props":13187,"children":13189},{"id":13188,"d":5031},"MJX-8-TEX-N-32",[],{"type":18,"tag":5003,"props":13191,"children":13193},{"id":13192,"d":8},"MJX-8-TEX-N-A0",[],{"type":18,"tag":5003,"props":13195,"children":13198},{"id":13196,"d":13197},"MJX-8-TEX-N-2265","M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z",[],{"type":18,"tag":5034,"props":13200,"children":13201},{"stroke":5036,"fill":5036,"stroke-width":5037,"transform":5038},[13202],{"type":18,"tag":5034,"props":13203,"children":13204},{"dataMmlNode":5042},[13205],{"type":18,"tag":5034,"props":13206,"children":13207},{"dataMmlNode":7229},[13208,13269,13319],{"type":18,"tag":5034,"props":13209,"children":13211},{"dataMmlNode":7234,"transform":13210},"translate(0,1300)",[13212,13247],{"type":18,"tag":5034,"props":13213,"children":13215},{"dataMmlNode":7239,"transform":13214},"translate(100,0)",[13216,13223,13231,13239],{"type":18,"tag":5034,"props":13217,"children":13218},{"dataMmlNode":5046},[13219],{"type":18,"tag":5049,"props":13220,"children":13222},{"dataC":12597,"xLinkHref":13221},"#MJX-8-TEX-I-1D439",[],{"type":18,"tag":5034,"props":13224,"children":13226},{"dataMmlNode":5056,"transform":13225},"translate(749,0)",[13227],{"type":18,"tag":5049,"props":13228,"children":13230},{"dataC":5061,"xLinkHref":13229},"#MJX-8-TEX-N-28",[],{"type":18,"tag":5034,"props":13232,"children":13234},{"dataMmlNode":5104,"transform":13233},"translate(1138,0)",[13235],{"type":18,"tag":5049,"props":13236,"children":13238},{"dataC":7288,"xLinkHref":13237},"#MJX-8-TEX-N-30",[],{"type":18,"tag":5034,"props":13240,"children":13242},{"dataMmlNode":5056,"transform":13241},"translate(1638,0)",[13243],{"type":18,"tag":5049,"props":13244,"children":13246},{"dataC":5079,"xLinkHref":13245},"#MJX-8-TEX-N-29",[],{"type":18,"tag":5034,"props":13248,"children":13250},{"dataMmlNode":7239,"transform":13249},"translate(2127,0)",[13251,13254,13262],{"type":18,"tag":5034,"props":13252,"children":13253},{"dataMmlNode":5046},[],{"type":18,"tag":5034,"props":13255,"children":13257},{"dataMmlNode":5056,"transform":13256},"translate(277.8,0)",[13258],{"type":18,"tag":5049,"props":13259,"children":13261},{"dataC":5088,"xLinkHref":13260},"#MJX-8-TEX-N-3D",[],{"type":18,"tag":5034,"props":13263,"children":13265},{"dataMmlNode":5104,"transform":13264},"translate(1333.6,0)",[13266],{"type":18,"tag":5049,"props":13267,"children":13268},{"dataC":7288,"xLinkHref":13237},[],{"type":18,"tag":5034,"props":13270,"children":13272},{"dataMmlNode":7234,"transform":13271},"translate(0,0)",[13273,13301],{"type":18,"tag":5034,"props":13274,"children":13275},{"dataMmlNode":7239,"transform":13214},[13276,13282,13288,13295],{"type":18,"tag":5034,"props":13277,"children":13278},{"dataMmlNode":5046},[13279],{"type":18,"tag":5049,"props":13280,"children":13281},{"dataC":12597,"xLinkHref":13221},[],{"type":18,"tag":5034,"props":13283,"children":13284},{"dataMmlNode":5056,"transform":13225},[13285],{"type":18,"tag":5049,"props":13286,"children":13287},{"dataC":5061,"xLinkHref":13229},[],{"type":18,"tag":5034,"props":13289,"children":13290},{"dataMmlNode":5104,"transform":13233},[13291],{"type":18,"tag":5049,"props":13292,"children":13294},{"dataC":6916,"xLinkHref":13293},"#MJX-8-TEX-N-31",[],{"type":18,"tag":5034,"props":13296,"children":13297},{"dataMmlNode":5056,"transform":13241},[13298],{"type":18,"tag":5049,"props":13299,"children":13300},{"dataC":5079,"xLinkHref":13245},[],{"type":18,"tag":5034,"props":13302,"children":13303},{"dataMmlNode":7239,"transform":13249},[13304,13307,13313],{"type":18,"tag":5034,"props":13305,"children":13306},{"dataMmlNode":5046},[],{"type":18,"tag":5034,"props":13308,"children":13309},{"dataMmlNode":5056,"transform":13256},[13310],{"type":18,"tag":5049,"props":13311,"children":13312},{"dataC":5088,"xLinkHref":13260},[],{"type":18,"tag":5034,"props":13314,"children":13315},{"dataMmlNode":5104,"transform":13264},[13316],{"type":18,"tag":5049,"props":13317,"children":13318},{"dataC":6916,"xLinkHref":13293},[],{"type":18,"tag":5034,"props":13320,"children":13322},{"dataMmlNode":7234,"transform":13321},"translate(0,-1300)",[13323,13352],{"type":18,"tag":5034,"props":13324,"children":13325},{"dataMmlNode":7239},[13326,13332,13338,13345],{"type":18,"tag":5034,"props":13327,"children":13328},{"dataMmlNode":5046},[13329],{"type":18,"tag":5049,"props":13330,"children":13331},{"dataC":12597,"xLinkHref":13221},[],{"type":18,"tag":5034,"props":13333,"children":13334},{"dataMmlNode":5056,"transform":13225},[13335],{"type":18,"tag":5049,"props":13336,"children":13337},{"dataC":5061,"xLinkHref":13229},[],{"type":18,"tag":5034,"props":13339,"children":13340},{"dataMmlNode":5046,"transform":13233},[13341],{"type":18,"tag":5049,"props":13342,"children":13344},{"dataC":6850,"xLinkHref":13343},"#MJX-8-TEX-I-1D45B",[],{"type":18,"tag":5034,"props":13346,"children":13348},{"dataMmlNode":5056,"transform":13347},"translate(1738,0)",[13349],{"type":18,"tag":5049,"props":13350,"children":13351},{"dataC":5079,"xLinkHref":13245},[],{"type":18,"tag":5034,"props":13353,"children":13354},{"dataMmlNode":7239,"transform":13249},[13355,13358,13364,13370,13377,13384,13392,13399,13406,13414,13421,13428,13435,13442,13450,13457,13464,13481,13488,13497],{"type":18,"tag":5034,"props":13356,"children":13357},{"dataMmlNode":5046},[],{"type":18,"tag":5034,"props":13359,"children":13360},{"dataMmlNode":5056,"transform":13256},[13361],{"type":18,"tag":5049,"props":13362,"children":13363},{"dataC":5088,"xLinkHref":13260},[],{"type":18,"tag":5034,"props":13365,"children":13366},{"dataMmlNode":5046,"transform":13264},[13367],{"type":18,"tag":5049,"props":13368,"children":13369},{"dataC":12597,"xLinkHref":13221},[],{"type":18,"tag":5034,"props":13371,"children":13373},{"dataMmlNode":5056,"transform":13372},"translate(2082.6,0)",[13374],{"type":18,"tag":5049,"props":13375,"children":13376},{"dataC":5061,"xLinkHref":13229},[],{"type":18,"tag":5034,"props":13378,"children":13380},{"dataMmlNode":5046,"transform":13379},"translate(2471.6,0)",[13381],{"type":18,"tag":5049,"props":13382,"children":13383},{"dataC":6850,"xLinkHref":13343},[],{"type":18,"tag":5034,"props":13385,"children":13387},{"dataMmlNode":5056,"transform":13386},"translate(3293.8,0)",[13388],{"type":18,"tag":5049,"props":13389,"children":13391},{"dataC":6907,"xLinkHref":13390},"#MJX-8-TEX-N-2212",[],{"type":18,"tag":5034,"props":13393,"children":13395},{"dataMmlNode":5104,"transform":13394},"translate(4294,0)",[13396],{"type":18,"tag":5049,"props":13397,"children":13398},{"dataC":6916,"xLinkHref":13293},[],{"type":18,"tag":5034,"props":13400,"children":13402},{"dataMmlNode":5056,"transform":13401},"translate(4794,0)",[13403],{"type":18,"tag":5049,"props":13404,"children":13405},{"dataC":5079,"xLinkHref":13245},[],{"type":18,"tag":5034,"props":13407,"children":13409},{"dataMmlNode":5056,"transform":13408},"translate(5405.2,0)",[13410],{"type":18,"tag":5049,"props":13411,"children":13413},{"dataC":12556,"xLinkHref":13412},"#MJX-8-TEX-N-2B",[],{"type":18,"tag":5034,"props":13415,"children":13417},{"dataMmlNode":5046,"transform":13416},"translate(6405.4,0)",[13418],{"type":18,"tag":5049,"props":13419,"children":13420},{"dataC":12597,"xLinkHref":13221},[],{"type":18,"tag":5034,"props":13422,"children":13424},{"dataMmlNode":5056,"transform":13423},"translate(7154.4,0)",[13425],{"type":18,"tag":5049,"props":13426,"children":13427},{"dataC":5061,"xLinkHref":13229},[],{"type":18,"tag":5034,"props":13429,"children":13431},{"dataMmlNode":5046,"transform":13430},"translate(7543.4,0)",[13432],{"type":18,"tag":5049,"props":13433,"children":13434},{"dataC":6850,"xLinkHref":13343},[],{"type":18,"tag":5034,"props":13436,"children":13438},{"dataMmlNode":5056,"transform":13437},"translate(8365.7,0)",[13439],{"type":18,"tag":5049,"props":13440,"children":13441},{"dataC":6907,"xLinkHref":13390},[],{"type":18,"tag":5034,"props":13443,"children":13445},{"dataMmlNode":5104,"transform":13444},"translate(9365.9,0)",[13446],{"type":18,"tag":5049,"props":13447,"children":13449},{"dataC":5109,"xLinkHref":13448},"#MJX-8-TEX-N-32",[],{"type":18,"tag":5034,"props":13451,"children":13453},{"dataMmlNode":5056,"transform":13452},"translate(9865.9,0)",[13454],{"type":18,"tag":5049,"props":13455,"children":13456},{"dataC":5079,"xLinkHref":13245},[],{"type":18,"tag":5034,"props":13458,"children":13460},{"dataMmlNode":12525,"transform":13459},"translate(10254.9,0)",[13461],{"type":18,"tag":5034,"props":13462,"children":13463},{"dataMmlNode":12648},[],{"type":18,"tag":5034,"props":13465,"children":13467},{"dataMmlNode":7128,"transform":13466},"translate(11254.9,0)",[13468,13476],{"type":18,"tag":37,"props":13469,"children":13473},{"dataVariant":13470,"transform":5038,"font-size":13471,"font-family":13472},"normal","884px","serif",[13474],{"type":37,"value":13475},"当",{"type":18,"tag":5049,"props":13477,"children":13480},{"dataC":7264,"xLinkHref":13478,"transform":13479},"#MJX-8-TEX-N-A0","translate(1000,0)",[],{"type":18,"tag":5034,"props":13482,"children":13484},{"dataMmlNode":5046,"transform":13483},"translate(12504.9,0)",[13485],{"type":18,"tag":5049,"props":13486,"children":13487},{"dataC":6850,"xLinkHref":13343},[],{"type":18,"tag":5034,"props":13489,"children":13491},{"dataMmlNode":5056,"transform":13490},"translate(13382.7,0)",[13492],{"type":18,"tag":5049,"props":13493,"children":13496},{"dataC":13494,"xLinkHref":13495},"2265","#MJX-8-TEX-N-2265",[],{"type":18,"tag":5034,"props":13498,"children":13500},{"dataMmlNode":5104,"transform":13499},"translate(14438.4,0)",[13501],{"type":18,"tag":5049,"props":13502,"children":13503},{"dataC":5109,"xLinkHref":13448},[],{"type":18,"tag":40,"props":13505,"children":13506},{},[13507,13509,13516],{"type":37,"value":13508},"比如这里我们就展示到了 Clojure 的惰性求值特性也就是 ",{"type":18,"tag":193,"props":13510,"children":13513},{"href":13511,"rel":13512},"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/iterate",[197],[13514],{"type":37,"value":13515},"iterate",{"type":37,"value":13517}," 方法。Clojure 文档介绍的很详细：",{"type":18,"tag":263,"props":13519,"children":13521},{"code":13520},"iterate\nfunction\n\nUsage: (iterate f x)\nReturns a lazy (infinite!) sequence of x, (f x), (f (f x)) etc.\nf must be free of side-effects\n",[13522],{"type":18,"tag":268,"props":13523,"children":13524},{"__ignoreMap":8},[13525],{"type":37,"value":13520},{"type":18,"tag":4071,"props":13527,"children":13529},{"id":13528},"iseq-1",[13530],{"type":37,"value":13531},"ISeq 1",{"type":18,"tag":27,"props":13533,"children":13535},{"t":13534},"ISeq",[],{"type":18,"tag":40,"props":13537,"children":13538},{},[13539,13541,13547,13548,13554,13556],{"type":37,"value":13540},"ISeq(Interface for Sequence, Sequences)，在这一章节中，ISeq 和 Seq 的区别在于，所有 Interface 都必须满足两个条件，即​​不可变（Immutable）、持久化（Persistent） 。",{"type":18,"tag":268,"props":13542,"children":13544},{"className":13543},[],[13545],{"type":37,"value":13546},"for",{"type":37,"value":1962},{"type":18,"tag":268,"props":13549,"children":13551},{"className":13550},[],[13552],{"type":37,"value":13553},"while",{"type":37,"value":13555}," 这些循环获取数据的，叫 ",{"type":18,"tag":747,"props":13557,"children":13558},{},[13559],{"type":37,"value":13560},"迭代器（Iterator）",{"type":18,"tag":40,"props":13562,"children":13563},{},[13564,13566,13573,13575,13581],{"type":37,"value":13565},"使用 ISeq 不仅原生支持 ",{"type":18,"tag":193,"props":13567,"children":13570},{"href":13568,"rel":13569},"https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/lazy-seq",[197],[13571],{"type":37,"value":13572},"lazy-seq",{"type":37,"value":13574},"，同时还用有不可变不可变性（Immutability）增加了线程安全性, BTW 有一说一，Clojure docs 还挺全的。比如上面我们演示 斐波那契数列所使用的 ",{"type":18,"tag":193,"props":13576,"children":13579},{"href":13577,"rel":13578},"https://github.com/clojure/clojure/blob/clojure-1.11.1/src/clj/clojure/core.clj#L3030",[197],[13580],{"type":37,"value":13515},{"type":37,"value":13582}," 函数算是隐式依赖 ISeq 接口：",{"type":18,"tag":263,"props":13584,"children":13586},{"code":13585},"Give me some Clojure:\n> (instance? clojure.lang.ISeq s)\ntrue\n",[13587],{"type":18,"tag":268,"props":13588,"children":13589},{"__ignoreMap":8},[13590],{"type":37,"value":13585},{"type":18,"tag":1447,"props":13592,"children":13593},{"type":1449},[13594],{"type":18,"tag":40,"props":13595,"children":13596},{},[13597],{"type":37,"value":13598},"不可变性看似线程安全很小众，实则避免了传统语言中 90% 的并发的 Bug（如竞态条件、死锁）",{"type":18,"tag":4323,"props":13600,"children":13602},{"id":13601},"声明式-2",[13603],{"type":37,"value":13604},"声明式 2",{"type":18,"tag":27,"props":13606,"children":13607},{"t":8753,"type":311},[],{"type":18,"tag":1447,"props":13609,"children":13610},{"type":1449},[13611],{"type":18,"tag":40,"props":13612,"children":13613},{},[13614],{"type":37,"value":13615},"声明式编程是一个总称， 包括许多更知名的编程范例 。",{"type":18,"tag":40,"props":13617,"children":13618},{},[13619,13626,13628,13633],{"type":18,"tag":193,"props":13620,"children":13623},{"href":13621,"rel":13622},"https://en.wikipedia.org/wiki/Declarative_programming",[197],[13624],{"type":37,"value":13625},"​​声明式编程​​\t(Declarative Programming)",{"type":37,"value":13627}," 有一说一我还挺喜欢这个范式的，不过他竟然还有个子范式，大名鼎鼎的 Functional programming  函数式编程 没想到也是在这个范式里面的。总的来说声明式的特点是 ",{"type":18,"tag":747,"props":13629,"children":13630},{},[13631],{"type":37,"value":13632},"关注“做什么”（What）",{"type":37,"value":4787},{"type":18,"tag":263,"props":13635,"children":13637},{"code":13636},"┌───────────────────────┐                                                        \n│    Clojure vs Java    │                                                        \n└───────────────────────┤                                                        \n                        │                                                        \n> (->> [1 2 3 4 5 6]    │   import java.util.*;                                  \n     (filter even?)     │                                                        \n     (map #(* % %))     │   public class Main {                                  \n     (reduce +))        │     public static void main(String[] args) {           \n56                      │       int sum = 0;                                     \n                        │       for (int num : Arrays.asList(1, 2, 3, 4, 5, 6)) {\n                        │         if (num % 2 == 0) {                            \n                        │           System.out.println(sum += num * num);        \n                        │         }                                              \n                        │       }                                                \n                        │     }                                                  \n                        │   }                                                    \n                        │                                                        \n",[13638],{"type":18,"tag":268,"props":13639,"children":13640},{"__ignoreMap":8},[13641],{"type":37,"value":13636},{"type":18,"tag":40,"props":13643,"children":13644},{},[13645],{"type":37,"value":13646},"数据像流水线一样通过转换规则，​​无需关心中间步骤如何实现​​。而命令式则是需自行实现迭代、过滤、计算和累加，​​每一步都暴露细节​​。BTW, THIS Thread safety",{"type":18,"tag":4323,"props":13648,"children":13650},{"id":13649},"命令式-2",[13651],{"type":37,"value":13652},"命令式 2",{"type":18,"tag":27,"props":13654,"children":13656},{"t":13655,"type":311},"命令式编程",[],{"type":18,"tag":40,"props":13658,"children":13659},{},[13660,13667,13669,13674,13676,13681,13683,13688],{"type":18,"tag":193,"props":13661,"children":13664},{"href":13662,"rel":13663},"https://en.wikipedia.org/wiki/Imperative_programming",[197],[13665],{"type":37,"value":13666},"​​命令式编程​​\t(Imperative Programming\t)",{"type":37,"value":13668}," 正如维基百科所介绍的 ",{"type":18,"tag":747,"props":13670,"children":13671},{},[13672],{"type":37,"value":13673},"“命令式编程侧重于描述程序如何逐步运行”",{"type":37,"value":13675}," 我觉得这句话很精髓，也就是关注 ",{"type":18,"tag":747,"props":13677,"children":13678},{},[13679],{"type":37,"value":13680},"如何做”（How）",{"type":37,"value":13682},"，不过有一说一两种方式跟思维习惯有很大的关系。两者的区别是 ",{"type":18,"tag":747,"props":13684,"children":13685},{},[13686],{"type":37,"value":13687},"过程导向​​ or 目标导向​",{"type":37,"value":13689},"。酱紫好像声明式更适合我，但命令式貌似上限更高？命令式更接近底层​的感觉，比如直接操作内存、寄存器、指针\\手动实现循环展开、内存预分配",{"type":18,"tag":40,"props":13691,"children":13692},{},[13693],{"type":37,"value":13694},"就像是选择系统时，是想选择 Windows 还是 Linux 甚至是 macOS 的感觉一样。如果选择了 Linux，那就会接触到各种各样的技术栈，比如打包、构建、包管理、桌面管理将时间花在自定义和 Linux 生态上，每次更新都能遇到一大堆 warning 甚至是引导错误，随处可见的 Bug 等着你的 PR。",{"type":18,"tag":40,"props":13696,"children":13697},{},[13698],{"type":37,"value":13699},"macOS 则偏向“开箱即用”（Out-of-the-Box Experience），大多数功能都已经封装得很好，适合直接“做事”而不是“折腾”。虽然可自定义性有限，但开发者可以在其封闭但统一的环境中获得一致性体验（Consistent Developer Environment）。当然，如果你乐于突破沙箱限制，说不定还能邂逅一个 0day CVE（笑）。",{"type":18,"tag":40,"props":13701,"children":13702},{},[13703],{"type":37,"value":13704},"Windows 则更像是一个多元宇宙。无论是进行商业软件开发、跑各种奇怪的 GUI 工具，还是畅玩 3A 大作，它都能胜任。这个系统更倾向于广度而非深度，提供了一个丰富而包容的生态，适合“想怎么玩就怎么玩”。",{"type":18,"tag":71,"props":13706,"children":13707},{},[],{"type":18,"tag":165,"props":13709,"children":13711},{"id":13710},"protocols-2",[13712],{"type":37,"value":13713},"Protocols 2",{"type":18,"tag":27,"props":13715,"children":13717},{"t":13716},"Protocols",[],{"type":18,"tag":40,"props":13719,"children":13720},{},[13721,13723,13730,13732,13739,13741,13755],{"type":37,"value":13722},"有一说一这个 Protocols 一眼让我联想到了 ",{"type":18,"tag":193,"props":13724,"children":13727},{"href":13725,"rel":13726},"https://en.wikipedia.org/wiki/Internet_protocol_suite",[197],[13728],{"type":37,"value":13729},"Internet protocol suite",{"type":37,"value":13731},"。还想着 Clojure 竟然还能写协议？不过仔细看了下 ",{"type":18,"tag":193,"props":13733,"children":13736},{"href":13734,"rel":13735},"https://clojure.org/reference/protocols",[197],[13737],{"type":37,"value":13738},"Clojure Protocols",{"type":37,"value":13740}," 章节发现只能是 ",{"type":18,"tag":747,"props":13742,"children":13743},{},[13744,13746,13753],{"type":37,"value":13745},"定义“什么能做什么”（如 Movable 协议要求实现 move 方法）。而隔壁的 ",{"type":18,"tag":193,"props":13747,"children":13750},{"href":13748,"rel":13749},"https://docs.rs/protocol/latest/protocol/",[197],[13751],{"type":37,"value":13752},"​​Rust protocol crate",{"type":37,"value":13754}," 则是实打实的 Protocols",{"type":37,"value":4787},{"type":37,"value":3828},{"type":18,"tag":391,"props":13758,"children":13759},{},[13760,13775],{"type":18,"tag":395,"props":13761,"children":13762},{},[13763],{"type":18,"tag":399,"props":13764,"children":13765},{},[13766,13771],{"type":18,"tag":403,"props":13767,"children":13768},{},[13769],{"type":37,"value":13770},"Code",{"type":18,"tag":403,"props":13772,"children":13773},{},[13774],{"type":37,"value":3032},{"type":18,"tag":414,"props":13776,"children":13777},{},[13778,13791,13804,13817],{"type":18,"tag":399,"props":13779,"children":13780},{},[13781,13786],{"type":18,"tag":421,"props":13782,"children":13783},{},[13784],{"type":37,"value":13785},"(defprotocol Greet)",{"type":18,"tag":421,"props":13787,"children":13788},{},[13789],{"type":37,"value":13790},"定义“打招呼”的标准（如挥手、微笑、说“Hi”）。",{"type":18,"tag":399,"props":13792,"children":13793},{},[13794,13799],{"type":18,"tag":421,"props":13795,"children":13796},{},[13797],{"type":37,"value":13798},"(defrecord Person)",{"type":18,"tag":421,"props":13800,"children":13801},{},[13802],{"type":37,"value":13803},"人类实现：用语言打招呼。",{"type":18,"tag":399,"props":13805,"children":13806},{},[13807,13812],{"type":18,"tag":421,"props":13808,"children":13809},{},[13810],{"type":37,"value":13811},"(defrecord Robot)",{"type":18,"tag":421,"props":13813,"children":13814},{},[13815],{"type":37,"value":13816},"机器人实现：用电子音打招呼。",{"type":18,"tag":399,"props":13818,"children":13819},{},[13820,13825],{"type":18,"tag":421,"props":13821,"children":13822},{},[13823],{"type":37,"value":13824},"(extend-type String)",{"type":18,"tag":421,"props":13826,"children":13827},{},[13828],{"type":37,"value":13829},"让纸条（String）也能“打招呼”（打印文字）。",{"type":18,"tag":263,"props":13831,"children":13833},{"code":13832},"Protocol  │ (defprotocol Greet                                           \n          │   (say-hi [this]))                                           \n                                                                         \n                                                                         \nDefrecord │ (defrecord Person [name]                                     \n          │   Greet                                                      \n          │   (say-hi [this] (println (str \"Hi, I'm \" (:name this)))))   \n          │                                                              \n          │ (defrecord Robot [id]                                        \n          │   Greet                                                      \n          │   (say-hi [this] (println (str \"Beep \" (:id this)))))        \n                                                                         \n                                                                         \n            (def alice (->Person \"Alice\"))                               \n            (def bot (->Robot 42))                                       \n                                                                         \n            (say-hi alice)  ;\"Hi, I'm Alice\"                             \n            (say-hi bot)    ;Beep 42\"                                    \n                                                                         \n                                                                         \nextend-ty │ (extend-type String                                          \npe        │   Greet                                                      \n          │   (say-hi [this] (println (str \"Hello from string: \" this))))\n          │                                                              \n          │ (say-hi \"Clojure\") ;\"Hello from string: Clojure\"             \n",[13834],{"type":18,"tag":268,"props":13835,"children":13836},{"__ignoreMap":8},[13837],{"type":37,"value":13832},{"type":18,"tag":71,"props":13839,"children":13840},{},[],{"type":18,"tag":165,"props":13842,"children":13844},{"id":13843},"stm-2",[13845],{"type":37,"value":13846},"STM 2",{"type":18,"tag":27,"props":13848,"children":13850},{"t":13849},"STM",[],{"type":18,"tag":40,"props":13852,"children":13853},{},[13854,13861],{"type":18,"tag":193,"props":13855,"children":13858},{"href":13856,"rel":13857},"https://en.wikipedia.org/wiki/Software_transactional_memory",[197],[13859],{"type":37,"value":13860},"STM(software transactional memory, 软件事务内存)",{"type":37,"value":13862}," 在最后一个章节中，作者讲述的是 Clojure 的并发控制。以体现出与 Io、Scala、Erlang 的不同之处。上述大多是采用 Actor，而 Clojure 则内建了 STM。（有一说一真的很像是学 spring cloud 时候的感觉",{"type":18,"tag":1447,"props":13864,"children":13865},{"type":1449},[13866],{"type":18,"tag":40,"props":13867,"children":13868},{},[13869,13875,13877,13883],{"type":18,"tag":268,"props":13870,"children":13872},{"className":13871},[],[13873],{"type":37,"value":13874},"Var",{"type":37,"value":13876}," 通过线程隔离确保安全使用可变存储位置，而事务引用 （",{"type":18,"tag":268,"props":13878,"children":13880},{"className":13879},[],[13881],{"type":37,"value":13882},"Refs",{"type":37,"value":13884},"） 确保通过软件事务内存 （STM） 系统安全共享可变存储位置。",{"type":37,"value":13886},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":13888,"children":13889},{},[13890,13910],{"type":18,"tag":395,"props":13891,"children":13892},{},[13893],{"type":18,"tag":399,"props":13894,"children":13895},{},[13896,13900,13905],{"type":18,"tag":403,"props":13897,"children":13898},{},[13899],{"type":37,"value":3732},{"type":18,"tag":403,"props":13901,"children":13902},{},[13903],{"type":37,"value":13904},"DESC",{"type":18,"tag":403,"props":13906,"children":13907},{},[13908],{"type":37,"value":13909},"TIP",{"type":18,"tag":414,"props":13911,"children":13912},{},[13913,13931,13947,13963,13979,14001,14017,14033,14049,14067,14083,14099],{"type":18,"tag":399,"props":13914,"children":13915},{},[13916,13921,13926],{"type":18,"tag":421,"props":13917,"children":13918},{},[13919],{"type":37,"value":13920},"alter",{"type":18,"tag":421,"props":13922,"children":13923},{},[13924],{"type":37,"value":13925},"标准修改，基于当前值",{"type":18,"tag":421,"props":13927,"children":13928},{},[13929],{"type":37,"value":13930},"STM 提供的三种方式",{"type":18,"tag":399,"props":13932,"children":13933},{},[13934,13939,13944],{"type":18,"tag":421,"props":13935,"children":13936},{},[13937],{"type":37,"value":13938},"commute",{"type":18,"tag":421,"props":13940,"children":13941},{},[13942],{"type":37,"value":13943},"可交换（commutative）操作，适合并发较高场景",{"type":18,"tag":421,"props":13945,"children":13946},{},[],{"type":18,"tag":399,"props":13948,"children":13949},{},[13950,13955,13960],{"type":18,"tag":421,"props":13951,"children":13952},{},[13953],{"type":37,"value":13954},"ref-set",{"type":18,"tag":421,"props":13956,"children":13957},{},[13958],{"type":37,"value":13959},"直接替换整个值",{"type":18,"tag":421,"props":13961,"children":13962},{},[],{"type":18,"tag":399,"props":13964,"children":13965},{},[13966,13971,13976],{"type":18,"tag":421,"props":13967,"children":13968},{},[13969],{"type":37,"value":13970},"ensure",{"type":18,"tag":421,"props":13972,"children":13973},{},[13974],{"type":37,"value":13975},"用于读取但不修改的 Ref，它的值不能被其他事务修改，否则当前事务失败",{"type":18,"tag":421,"props":13977,"children":13978},{},[],{"type":18,"tag":399,"props":13980,"children":13981},{},[13982,13987,13992],{"type":18,"tag":421,"props":13983,"children":13984},{},[13985],{"type":37,"value":13986},"nvecs",{"type":18,"tag":421,"props":13988,"children":13989},{},[13990],{"type":37,"value":13991},"有多少个向量（Ref）",{"type":18,"tag":421,"props":13993,"children":13994},{},[13995],{"type":18,"tag":268,"props":13996,"children":13998},{"className":13997},[],[13999],{"type":37,"value":14000},"run [nvecs nitems nthreads niters]",{"type":18,"tag":399,"props":14002,"children":14003},{},[14004,14009,14014],{"type":18,"tag":421,"props":14005,"children":14006},{},[14007],{"type":37,"value":14008},"nitems",{"type":18,"tag":421,"props":14010,"children":14011},{},[14012],{"type":37,"value":14013},"每个向量有多少个元素",{"type":18,"tag":421,"props":14015,"children":14016},{},[],{"type":18,"tag":399,"props":14018,"children":14019},{},[14020,14025,14030],{"type":18,"tag":421,"props":14021,"children":14022},{},[14023],{"type":37,"value":14024},"nthreads",{"type":18,"tag":421,"props":14026,"children":14027},{},[14028],{"type":37,"value":14029},"启动多少线程",{"type":18,"tag":421,"props":14031,"children":14032},{},[],{"type":18,"tag":399,"props":14034,"children":14035},{},[14036,14041,14046],{"type":18,"tag":421,"props":14037,"children":14038},{},[14039],{"type":37,"value":14040},"niters",{"type":18,"tag":421,"props":14042,"children":14043},{},[14044],{"type":37,"value":14045},"每个线程执行多少次交换操作",{"type":18,"tag":421,"props":14047,"children":14048},{},[],{"type":18,"tag":399,"props":14050,"children":14051},{},[14052,14057,14062],{"type":18,"tag":421,"props":14053,"children":14054},{},[14055],{"type":37,"value":14056},"有序",{"type":18,"tag":421,"props":14058,"children":14059},{},[14060],{"type":37,"value":14061},"元素有固定的顺序，按插入顺序排列",{"type":18,"tag":421,"props":14063,"children":14064},{},[14065],{"type":37,"value":14066},"向量（Vector）",{"type":18,"tag":399,"props":14068,"children":14069},{},[14070,14075,14080],{"type":18,"tag":421,"props":14071,"children":14072},{},[14073],{"type":37,"value":14074},"可索引",{"type":18,"tag":421,"props":14076,"children":14077},{},[14078],{"type":37,"value":14079},"可以通过索引访问某个位置的元素（和数组类似）",{"type":18,"tag":421,"props":14081,"children":14082},{},[],{"type":18,"tag":399,"props":14084,"children":14085},{},[14086,14091,14096],{"type":18,"tag":421,"props":14087,"children":14088},{},[14089],{"type":37,"value":14090},"不可变",{"type":18,"tag":421,"props":14092,"children":14093},{},[14094],{"type":37,"value":14095},"向量一旦创建，原始值不会被修改（更新会返回一个新的向量）",{"type":18,"tag":421,"props":14097,"children":14098},{},[],{"type":18,"tag":399,"props":14100,"children":14101},{},[14102,14107,14112],{"type":18,"tag":421,"props":14103,"children":14104},{},[14105],{"type":37,"value":14106},"高效结构共享",{"type":18,"tag":421,"props":14108,"children":14109},{},[14110],{"type":37,"value":14111},"修改后的向量共享结构，效率高，适合并发和持久化操作",{"type":18,"tag":421,"props":14113,"children":14114},{},[],{"type":18,"tag":40,"props":14116,"children":14117},{},[14118],{"type":37,"value":14119},"多说无益，Clojure Docs 给了一个很好的例子诠释其哲学：",{"type":18,"tag":263,"props":14121,"children":14123},{"code":14122},"; \n(defn run [nvecs nitems nthreads niters]\n  (let [vec-refs (vec (map (comp ref vec)\n                           (partition nitems (range (* nvecs nitems)))))\n        swap #(let [v1 (rand-int nvecs)\n                    v2 (rand-int nvecs)\n                    i1 (rand-int nitems)\n                    i2 (rand-int nitems)]\n                (dosync\n                 (let [temp (nth @(vec-refs v1) i1)]\n                   (alter (vec-refs v1) assoc i1 (nth @(vec-refs v2) i2))\n                   (alter (vec-refs v2) assoc i2 temp))))\n        report #(do\n                 (prn (map deref vec-refs))\n                 (println \"Distinct:\"\n                          (count (distinct (apply concat (map deref vec-refs))))))]\n    (report)\n    (dorun (apply pcalls (repeat nthreads #(dotimes [_ niters] (swap)))))\n    (report)))\n    (run 100 10 10 100000)\n---\n([0 1 2 3 4 5 6 7 8 9] [10 11 12 13 14 15 16 17 18 19] ...\n [990 991 992 993 994 995 996 997 998 999])\nDistinct: 1000\n",[14124],{"type":18,"tag":268,"props":14125,"children":14126},{"__ignoreMap":8},[14127],{"type":37,"value":14122},{"type":18,"tag":12980,"props":14129,"children":14130},{},[14131],{"type":18,"tag":40,"props":14132,"children":14133},{},[14134,14136,14139,14141,14144,14146,14149,14151,14154,14156],{"type":37,"value":14135},"你有很多盒子，每个盒子里装着不重复的数字（连续编号）",{"type":18,"tag":1504,"props":14137,"children":14138},{},[],{"type":37,"value":14140},"\n你派出好多工人（线程），每个人不停地随机去两个盒子里拿数字换来换去",{"type":18,"tag":1504,"props":14142,"children":14143},{},[],{"type":37,"value":14145},"\n这个换数字的过程用了一套“事务系统”保证不会打架（线程安全）",{"type":18,"tag":1504,"props":14147,"children":14148},{},[],{"type":37,"value":14150},"\n换来换去之后，数字的总数和唯一性不会丢失（不会丢数字，也不会重复数字）",{"type":18,"tag":1504,"props":14152,"children":14153},{},[],{"type":37,"value":14155},"\n最终打印开始和结束时盒子里的数字，证明所有数字依旧完整且没错乱。 ",{"type":18,"tag":1504,"props":14157,"children":14158},{},[],{"type":18,"tag":40,"props":14160,"children":14161},{},[14162],{"type":37,"value":14163},"你有一排盒子，每个盒子里装着一组连续的数字。所有盒子按顺序排列成一个大箱子。然后随机找两个盒子，从每个盒子里随机拿出一个数字，把这两个数字交换。整个交换过程是原子的，不会被其他线程打断，最后打印当前所有盒子里的数字状态，然后检查有没有数字丢失或者重复。",{"type":18,"tag":71,"props":14165,"children":14166},{},[],{"type":18,"tag":32,"props":14168,"children":14170},{"id":14169},"haskell-1",[14171],{"type":37,"value":14172},"Haskell 1",{"type":18,"tag":27,"props":14174,"children":14175},{"t":1868},[],{"type":18,"tag":11610,"props":14177,"children":14180},{"by":14178,"topic":14179},"Wikipedia","Haskell History",[14181,14186,14191,14199],{"type":18,"tag":40,"props":14182,"children":14183},{},[14184],{"type":37,"value":14185},"1985 年 Research Software Ltd. 发布 Miranda 后，人们对惰性函数式语言的兴趣与日俱增。",{"type":18,"tag":40,"props":14187,"children":14188},{},[14189],{"type":37,"value":14190},"到 1987 年，已经存在了十几种非严格的、纯函数式编程语言。Miranda 是使用最广泛的，但它是专有软件 。",{"type":18,"tag":40,"props":14192,"children":14193},{},[14194],{"type":18,"tag":747,"props":14195,"children":14196},{},[14197],{"type":37,"value":14198},"在俄勒冈州波特兰市举行的函数式编程语言和计算机体系结构 （FPCA '87） 会议上，人们达成了强烈共识，即成立一个委员会来定义此类语言的开放标准 。",{"type":18,"tag":40,"props":14200,"children":14201},{},[14202],{"type":37,"value":14203},"该委员会的目的是将现有的函数式语言整合为通用语言，作为未来函数式语言设计研究的基础。",{"type":18,"tag":40,"props":14205,"children":14206},{},[14207,14209,14215],{"type":37,"value":14208},"要想了解一个 Programming Language，很多时候会敲一个 ",{"type":18,"tag":268,"props":14210,"children":14212},{"className":14211},[],[14213],{"type":37,"value":14214},"Hello,world!",{"type":37,"value":14216},"。而可以与前者相提并论的就是斐波那契数列，在 Haskell wiki 中写到：",{"type":18,"tag":11610,"props":14218,"children":14221},{"by":14219,"topic":14220},"Haskell wiki","The Fibonacci sequence",[14222],{"type":18,"tag":40,"props":14223,"children":14224},{},[14225,14227,14230],{"type":37,"value":14226},"Implementing the Fibonacci sequence is considered the \"Hello, world!\" of Haskell programming.",{"type":18,"tag":1504,"props":14228,"children":14229},{},[],{"type":37,"value":14231},"\n斐波那契数列被认为是 Haskell 编程的“你好，世界！",{"type":18,"tag":263,"props":14233,"children":14235},{"code":14234},"fib 0 = 0\nfib 1 = 1\nfib n = fib (n-1) + fib (n-2)\n\nmain = do\n    let n = 10\n    print [fib i | i \u003C- [0..n-1]]\n\n--- Output:\n[0,1,1,2,3,5,8,13,21,34]\n\n",[14236],{"type":18,"tag":268,"props":14237,"children":14238},{"__ignoreMap":8},[14239],{"type":37,"value":14234},{"type":18,"tag":40,"props":14241,"children":14242},{},[14243],{"type":37,"value":14244},"在这一章中 wiki 给了很多中实现 fib 的方式，而我选择最基础的普通递归（naive recursion）。直接实现了斐波那契数列的定义，没有做任何优化。但我知道有更好的实现，例如尾递归、动态规划、矩阵幂。这就跟推箱子游戏一样，无论如何都可以通关，一开始大家追求的只是通关，而慢慢的就开始追求最小步数、更快的通关方式。",{"type":18,"tag":40,"props":14246,"children":14247},{},[14248],{"type":37,"value":14249},"可能这就是我与那些大佬之间的区别，没有对一件事情的极致追求以及偏执。就跟魂类游戏一样，有的人享受即使挂了很多次也可以重新开始拿起武器挥舞。而我可能会选择关闭不玩，转而去看电视。",{"type":18,"tag":165,"props":14251,"children":14253},{"id":14252},"guards-2",[14254],{"type":37,"value":14255},"Guards 2",{"type":18,"tag":27,"props":14257,"children":14259},{"t":14258,"type":311},"Guards",[],{"type":18,"tag":40,"props":14261,"children":14262},{},[14263,14265,14270,14272,14277,14279,14285,14287,14293],{"type":37,"value":14264},"作为一个将 ",{"type":18,"tag":268,"props":14266,"children":14268},{"className":14267},[],[14269],{"type":37,"value":13094},{"type":37,"value":14271}," 体现在 Logo 上的 Language 来说，我认为学术风格必然会占很大的比例（从文档上也能直接看出是很纯粹的 tech style）。感觉第一章的内容和 Haskell website 上的那个 “Try it!” 很像，内容相近。不过最让我好奇的是 ",{"type":18,"tag":268,"props":14273,"children":14275},{"className":14274},[],[14276],{"type":37,"value":14258},{"type":37,"value":14278},"(pattern guard) 的条件表达式，类比于其他语言中的 ",{"type":18,"tag":268,"props":14280,"children":14282},{"className":14281},[],[14283],{"type":37,"value":14284},"if-else",{"type":37,"value":14286}," or ",{"type":18,"tag":268,"props":14288,"children":14290},{"className":14289},[],[14291],{"type":37,"value":14292},"switch-case",{"type":37,"value":4787},{"type":18,"tag":263,"props":14295,"children":14297},{"code":14296},"f x\n  | pat \u003C- exp\n  , condition\n  = result\n\n--- Exp\n\naddMaybe :: Maybe Int -> Maybe Int -> Int\naddMaybe x y\n  | Just a \u003C- x\n  , Just b \u003C- y\n  = a + b\naddMaybe _ _ = 0 \n\nmain = do\n  print (addMaybe (Just 1) (Just 1)) \n  print (addMaybe (Just 1) Nothing)\n  print (addMaybe Nothing (Just 1))\n\n---> Output\n2\n0\n0\n",[14298],{"type":18,"tag":268,"props":14299,"children":14300},{"__ignoreMap":8},[14301],{"type":37,"value":14296},{"type":18,"tag":40,"props":14303,"children":14304},{},[14305,14307,14313,14315,14321,14322,14328,14330,14336,14338,14344,14346,14351,14353,14360],{"type":37,"value":14306},"例如上述的 ",{"type":18,"tag":268,"props":14308,"children":14310},{"className":14309},[],[14311],{"type":37,"value":14312},"pat \u003C- exp",{"type":37,"value":14314}," 就相当于一个模式守卫(pattern guards)，如果 ",{"type":18,"tag":268,"props":14316,"children":14318},{"className":14317},[],[14319],{"type":37,"value":14320},"x",{"type":37,"value":1033},{"type":18,"tag":268,"props":14323,"children":14325},{"className":14324},[],[14326],{"type":37,"value":14327},"y",{"type":37,"value":14329}," 都是 ",{"type":18,"tag":268,"props":14331,"children":14333},{"className":14332},[],[14334],{"type":37,"value":14335},"Just",{"type":37,"value":14337},"。比较有趣的是，Haskell 貌似有点语义化？比如 ",{"type":18,"tag":268,"props":14339,"children":14341},{"className":14340},[],[14342],{"type":37,"value":14343},"Maybe",{"type":37,"value":14345}," 类型和他的 ",{"type":18,"tag":268,"props":14347,"children":14349},{"className":14348},[],[14350],{"type":37,"value":14335},{"type":37,"value":14352}," 构造函数，都是能从字面意义上理解的。对于这两个的理解我还挺喜欢这篇  ",{"type":18,"tag":193,"props":14354,"children":14357},{"href":14355,"rel":14356},"https://stackoverflow.com/questions/18808258/what-does-the-just-syntax-mean-in-haskell",[197],[14358],{"type":37,"value":14359},"What does the \"Just\" syntax mean in Haskell?",{"type":37,"value":14361}," 回答的内容。",{"type":18,"tag":14363,"props":14364,"children":14365},"style",{},[14366],{"type":37,"value":14367},"\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n",{"title":8,"searchDepth":14369,"depth":14369,"links":14370},2,[14371,14372,14373,14374,14375,14376,14377,14378,14379,14380,14381,14382,14383,14384,14385,14386,14387,14388,14391,14394,14395,14396,14399,14403,14404,14405,14408,14412,14416,14421,14422,14428,14429,14435,14436,14439,14440,14441,14442,14445,14446,14450,14451,14452],{"id":167,"depth":14369,"text":170},{"id":304,"depth":14369,"text":307},{"id":501,"depth":14369,"text":504},{"id":617,"depth":14369,"text":620},{"id":679,"depth":14369,"text":682},{"id":898,"depth":14369,"text":901},{"id":1054,"depth":14369,"text":1057},{"id":1423,"depth":14369,"text":1426},{"id":1542,"depth":14369,"text":1545},{"id":1721,"depth":14369,"text":1724},{"id":1895,"depth":14369,"text":1898},{"id":2263,"depth":14369,"text":2266},{"id":2871,"depth":14369,"text":2874},{"id":2999,"depth":14369,"text":3002},{"id":3156,"depth":14369,"text":3159},{"id":3640,"depth":14369,"text":3643},{"id":3943,"depth":14369,"text":3946},{"id":4018,"depth":14369,"text":4021,"children":14389},[14390],{"id":4073,"depth":4058,"text":4076},{"id":4545,"depth":14369,"text":4548,"children":14392},[14393],{"id":4575,"depth":4058,"text":4578},{"id":4654,"depth":14369,"text":4657},{"id":4750,"depth":14369,"text":4753},{"id":4801,"depth":14369,"text":4804,"children":14397},[14398],{"id":4824,"depth":4058,"text":4827},{"id":5158,"depth":14369,"text":5161,"children":14400},[14401,14402],{"id":5357,"depth":4058,"text":5360},{"id":5443,"depth":4058,"text":5446},{"id":5505,"depth":14369,"text":5508},{"id":5560,"depth":14369,"text":5563},{"id":5747,"depth":14369,"text":5750,"children":14406},[14407],{"id":5952,"depth":4058,"text":5955},{"id":6035,"depth":14369,"text":6038,"children":14409},[14410,14411],{"id":6427,"depth":4058,"text":6430},{"id":6589,"depth":4058,"text":6592},{"id":6731,"depth":14369,"text":6734,"children":14413},[14414,14415],{"id":7760,"depth":4058,"text":7763},{"id":7816,"depth":4058,"text":7819},{"id":7892,"depth":14369,"text":7895,"children":14417},[14418,14419,14420],{"id":7940,"depth":4058,"text":7943},{"id":8001,"depth":4058,"text":8004},{"id":8421,"depth":4058,"text":8424},{"id":8528,"depth":14369,"text":8531},{"id":8756,"depth":14369,"text":8759,"children":14423},[14424,14425,14426,14427],{"id":8836,"depth":4058,"text":8839},{"id":8939,"depth":4058,"text":8942},{"id":9131,"depth":4058,"text":9134},{"id":9240,"depth":4058,"text":9243},{"id":9547,"depth":14369,"text":9550},{"id":9928,"depth":14369,"text":9931,"children":14430},[14431,14432,14433,14434],{"id":9951,"depth":4058,"text":9954},{"id":10152,"depth":4058,"text":10155},{"id":10528,"depth":4058,"text":10531},{"id":10839,"depth":4058,"text":10842},{"id":10948,"depth":14369,"text":10951},{"id":11089,"depth":14369,"text":11092,"children":14437},[14438],{"id":11526,"depth":4058,"text":11529},{"id":11601,"depth":14369,"text":11604},{"id":11811,"depth":14369,"text":11814},{"id":12101,"depth":14369,"text":12104},{"id":12169,"depth":14369,"text":12172,"children":14443},[14444],{"id":12209,"depth":4058,"text":12212},{"id":12265,"depth":14369,"text":12268},{"id":12993,"depth":14369,"text":12996,"children":14447},[14448,14449],{"id":13008,"depth":4058,"text":13011},{"id":13528,"depth":4058,"text":13531},{"id":13710,"depth":14369,"text":13713},{"id":13843,"depth":14369,"text":13846},{"id":14252,"depth":14369,"text":14255},"markdown","content:book:seven-languages-in-seven-weeks---bruce-a-tate.md","content","book/seven-languages-in-seven-weeks---bruce-a-tate.md","md",{"_path":14459,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":14460,"description":8,"director":14461,"time":14462,"img":14463,"plan":14464,"body":14465,"_type":14453,"_id":15187,"_source":14455,"_file":15188,"_extension":14457},"/book/game-life","游戏","N/A","2025","game/1.png","100,100",{"type":15,"children":14466,"toc":15159},[14467],{"type":18,"tag":19,"props":14468,"children":14469},{":by":21,":img":22,":plan":23,":title":24},[14470,14476,14480,14485,14490,14495,14526,14531,14550,14568,14571,14577,14581,14586,14592,14621,14627,14655,14661,14670,14676,14686,14692,14710,14716,14725,14731,14752,14758,14794,14800,14826,14832,14846,14852,14866,14872,14886,14889,14895,14899,14904,14910,14926,14932,14948,14954,14969,14972,14978,14982,14987,14993,14997,15002,15008,15012,15017,15023,15027,15032,15038,15042,15047,15053,15057,15062,15065,15071,15075,15081,15085,15090,15096,15100,15114,15120,15124,15129,15135,15139,15144,15150,15154],{"type":18,"tag":32,"props":14471,"children":14473},{"id":14472},"前言-1",[14474],{"type":37,"value":14475},"前言 1",{"type":18,"tag":27,"props":14477,"children":14479},{"t":14478},"为什么写？",[],{"type":18,"tag":40,"props":14481,"children":14482},{},[14483],{"type":37,"value":14484},"很多时候，当我们买了一款游戏后。虽然都可以发表自己的见解，但总会有一些平台出来给一个“作品”打分。而打分必然能产生争议，不同圈子、不同文化素养、不同习惯、审美的人进行争议一个作品的好坏。为了避免这样的内耗，有些人选择放弃了自己对一个作品的评价权利（即使花了钱）。有些人，选择了与他人争执，还有一些人，选择了阴阳怪气。",{"type":18,"tag":40,"props":14486,"children":14487},{},[14488],{"type":37,"value":14489},"不可否认，作为一个商品的消费者。自然有对其使用后评价的权利，但随着粉丝经济、饭圈文化和各种利益的加持下。如果您的评价，让一些受种者或狂热粉感觉到你是在诋毁他们喜欢的东西，那么可能会迎来攻击。",{"type":18,"tag":40,"props":14491,"children":14492},{},[14493],{"type":37,"value":14494},"但是。我们总有一个共同点，即：\"We are player\"。游戏，首先他要好玩。但是，不同游戏风格的玩家每个人都有自己的性格，有喜欢竞技的、难度高的。也有喜欢休闲的，当一场电影来看的。所以贸然的评论自然会受到热衷于这一类型游戏的玩家攻击、讽刺甚至是辱骂。",{"type":18,"tag":40,"props":14496,"children":14497},{},[14498,14500,14505,14507,14512,14513,14518,14520,14525],{"type":37,"value":14499},"因此。为了避免一些不愉快，我从未给任何一款游戏在其商城界面评分。即使我花钱买了，我只玩自己感兴趣的游戏。欣赏他人的作品，游戏是设计资产最多的，这需要多种工作岗位和跨领域的配合，才能完成一款让人难忘的游戏（当然你要说用 AI 生图讨个烂大街的玩法我自然无法反驳）。在我看来 ",{"type":18,"tag":747,"props":14501,"children":14502},{},[14503],{"type":37,"value":14504},"游戏最重要的是玩法",{"type":37,"value":14506},"，其次是 ",{"type":18,"tag":747,"props":14508,"children":14509},{},[14510],{"type":37,"value":14511},"游戏体验",{"type":37,"value":1962},{"type":18,"tag":747,"props":14514,"children":14515},{},[14516],{"type":37,"value":14517},"剧情",{"type":37,"value":14519},"，然后就是 ",{"type":18,"tag":747,"props":14521,"children":14522},{},[14523],{"type":37,"value":14524},"场景",{"type":37,"value":3150},{"type":18,"tag":40,"props":14527,"children":14528},{},[14529],{"type":37,"value":14530},"游戏的玩法设计，是需要自己的独特见解。一个游戏玩法衍生出了游戏的种类，甚至是一种风格。这就跟设计是一样的，有些设计追求的是风格，个性。而有些设计追求的是运用。前者负责设计风格的探索，后者站在巨人的肩膀上前行。",{"type":18,"tag":40,"props":14532,"children":14533},{},[14534,14536,14541,14543,14548],{"type":37,"value":14535},"我从来不是某一个游戏类型的反对者，每个人都有每个人的游戏取向。例如有的人喜欢 ",{"type":18,"tag":747,"props":14537,"children":14538},{},[14539],{"type":37,"value":14540},"电子竞技",{"type":37,"value":14542},"，有的人喜欢 ",{"type":18,"tag":747,"props":14544,"children":14545},{},[14546],{"type":37,"value":14547},"主机/单机游戏",{"type":37,"value":14549},"。但不可否认的是竞技类的游戏可能存在上瘾的风险，同时增加依赖感和成就感。所以我更偏向与后者，虽然前者的设计资产并不弱于后者，但他的副作用是长时间的依赖，和层次不齐的运营、策划让我实在是无法喜欢。",{"type":18,"tag":40,"props":14551,"children":14552},{},[14553,14555,14560,14561,14566],{"type":37,"value":14554},"可惜的是，游玩一款游戏需要很多时间。每个人都有自己的追求，对于我来说，游戏更多的是休闲与放松。或者说一次经历，一场电影。因此我并不是很喜欢 ",{"type":18,"tag":747,"props":14556,"children":14557},{},[14558],{"type":37,"value":14559},"竞技",{"type":37,"value":1033},{"type":18,"tag":747,"props":14562,"children":14563},{},[14564],{"type":37,"value":14565},"高难度",{"type":37,"value":14567}," 的游戏。",{"type":18,"tag":71,"props":14569,"children":14570},{},[],{"type":18,"tag":32,"props":14572,"children":14574},{"id":14573},"印象深刻-2",[14575],{"type":37,"value":14576},"印象深刻 2",{"type":18,"tag":27,"props":14578,"children":14580},{"t":14579},"印象深刻的游戏",[],{"type":18,"tag":40,"props":14582,"children":14583},{},[14584],{"type":37,"value":14585},"我会记录一些我印象深刻的游戏，他们可能是剧情、场景、游戏玩法上打动了我。以及我从他们身上学习到的一些东西，甚至是设计的风格等。",{"type":18,"tag":165,"props":14587,"children":14589},{"id":14588},"泰坦陨落2-1",[14590],{"type":37,"value":14591},"泰坦陨落2 1",{"type":18,"tag":14593,"props":14594,"children":14598},"game-info",{":img":14595,"love":14596,"size":14597},"/img/game/1.png","5",140,[14599,14611,14616],{"type":18,"tag":40,"props":14600,"children":14601},{},[14602,14604,14609],{"type":37,"value":14603},"新手教程真的是太赞了，最后因为 ",{"type":18,"tag":747,"props":14605,"children":14606},{},[14607],{"type":37,"value":14608},"“协议三：保护铁驭”",{"type":37,"value":14610}," 而潸然泪下。两三个小时的新手教程无疑给了我巨大的震撼，2016 年的游戏在 2024 年游玩依然感觉很不错（但是 UI 上有些看起来即使现在也不为过，但有些地方的 UI 放到现在显得独具那个年代的设计风格）。",{"type":18,"tag":40,"props":14612,"children":14613},{},[14614],{"type":37,"value":14615},"同时，在新手教程剧情中。关卡的设计也很不错，例如两个场景框架一模一样，但另一个场景可能会是过去，另一个场景是现在来穿插完成剧情。",{"type":18,"tag":40,"props":14617,"children":14618},{},[14619],{"type":37,"value":14620},"游戏的可玩性很多，例如飞檐走壁、机甲都是很好的可玩性。让我记忆深刻的是 \"寒霜引擎\"，这个名字听起来就很有感觉。但是我并不喜欢玩 PVP，经常被虐，但是 PVE 还是很爽的，很解压。",{"type":18,"tag":165,"props":14622,"children":14624},{"id":14623},"战地风云-5-1",[14625],{"type":37,"value":14626},"战地风云 5 1",{"type":18,"tag":14593,"props":14628,"children":14631},{":img":14629,"love":3377,"size":14630},"/img/game/2.png",100,[14632,14650],{"type":18,"tag":40,"props":14633,"children":14634},{},[14635,14637,14642,14644,14649],{"type":37,"value":14636},"UI 真的是太简洁了，2018 年的游戏 UI 即使放到现在依然觉得很现代，很简洁。可能这就是简洁设计的魅力吧，可以经久不衰？我印象深刻的地方在于 ",{"type":18,"tag":747,"props":14638,"children":14639},{},[14640],{"type":37,"value":14641},"功勋/统计",{"type":37,"value":14643}," 界面的 UI，可以随着 Tab 的切换，右侧人物的资历章也会随之变化，以及身体面向的方向也会变化。",{"type":18,"tag":747,"props":14645,"children":14646},{},[14647],{"type":37,"value":14648},"这一联动的设计让我感觉很不错",{"type":37,"value":3150},{"type":18,"tag":40,"props":14651,"children":14652},{},[14653],{"type":37,"value":14654},"其次是剧情方面，几个剧情无疑体现出了在第二次世界大战的残酷即普通人的渺小。大战场的感觉真的很震撼，很有身临其境的感觉。",{"type":18,"tag":4071,"props":14656,"children":14658},{"id":14657},"战地-2042-1",[14659],{"type":37,"value":14660},"战地 2042 1",{"type":18,"tag":14593,"props":14662,"children":14664},{":img":14663,"love":3377,"size":14630},"/img/game/3.png",[14665],{"type":18,"tag":40,"props":14666,"children":14667},{},[14668],{"type":37,"value":14669},"这一款也是 UI 吸引到我，设计风格很统一，是绿色+黑色的主色调。声音设计也还不错，可惜的是没有剧情？但是大战场加载时双方阵营的刻画很有沉浸感。特别是 CG，很有战场的氛围感。",{"type":18,"tag":165,"props":14671,"children":14673},{"id":14672},"古墓丽影-1",[14674],{"type":37,"value":14675},"古墓丽影 1",{"type":18,"tag":14593,"props":14677,"children":14680},{":img":14678,"love":14596,"size":14679},"/img/game/4.png",130,[14681],{"type":18,"tag":40,"props":14682,"children":14683},{},[14684],{"type":37,"value":14685},"几个小时的游玩非常的流畅，不是在打架就是在打架的路上。打架途中随即而来的建筑物坍塌跑路、登山稿很刺激。第一次去爬通信塔带来的刺激依然记忆深刻, 即使是 2013 年的游戏 UI 、游戏交互依然很不错，很现代。",{"type":18,"tag":165,"props":14687,"children":14689},{"id":14688},"吸血鬼幸存者-1",[14690],{"type":37,"value":14691},"吸血鬼幸存者 1",{"type":18,"tag":14593,"props":14693,"children":14695},{":img":14694,"love":3398,"size":14679},"/img/game/5.png",[14696],{"type":18,"tag":40,"props":14697,"children":14698},{},[14699,14701,14708],{"type":37,"value":14700},"游戏玩法让我感觉很解压，随着角色搜集的宝石越来越多，角色的攻击、道具也会得到质的飞跃。结合武器升级、道具升级，在游戏中期和后期的伤害基本上是全屏特效也不为过，听说是肉鸽系列成功的作品之一（",{"type":18,"tag":193,"props":14702,"children":14705},{"href":14703,"rel":14704},"https://en.wikipedia.org/wiki/Roguelike",[197],[14706],{"type":37,"value":14707},"维基百科是这么描述的",{"type":37,"value":14709},"）有幸可以在 Epic 上免费领取真的很幸运。",{"type":18,"tag":165,"props":14711,"children":14713},{"id":14712},"dead-cells-1",[14714],{"type":37,"value":14715},"Dead Cells 1",{"type":18,"tag":14593,"props":14717,"children":14719},{":img":14718,"love":3398,"size":14679},"/img/game/15.png",[14720],{"type":18,"tag":40,"props":14721,"children":14722},{},[14723],{"type":37,"value":14724},"又一款 Roguelike 类型的，貌似我还挺喜欢玩这种的，确实玩起来会有一种爽感。就是画风有点像素风，本人还是喜欢苍翼那种二次元风格。武器升级进化的话貌似没有吸血鬼幸存者那样直观？例如动不动就击杀满屏小怪的那种。总体来说值回票价，可以玩很久，还有类魂的体验？辅助模式也很棒，即使不喜欢类魂也可以游玩。",{"type":18,"tag":165,"props":14726,"children":14728},{"id":14727},"看门狗-1",[14729],{"type":37,"value":14730},"看门狗 1",{"type":18,"tag":14593,"props":14732,"children":14734},{":img":14733,"love":14596,"size":14679},"/img/game/6.png",[14735,14747],{"type":18,"tag":40,"props":14736,"children":14737},{},[14738,14740,14745],{"type":37,"value":14739},"作为一款 2014 年的游戏（那个时候我或许还在读小学）我在 2025 年游玩体验也是很有感觉的。游戏是 hacker 题材，充斥着入侵、社会工程、攻击、犯罪的剧情和游戏玩法。作为一个安全爱好者来说，如果实现出游戏中的那个 ",{"type":18,"tag":747,"props":14741,"children":14742},{},[14743],{"type":37,"value":14744},"透析",{"type":37,"value":14746}," 功能，可能需要社工大佬+人脸识别方面的技术栈和资源才能实现。",{"type":18,"tag":40,"props":14748,"children":14749},{},[14750],{"type":37,"value":14751},"在 2014 年，游戏中就有了物联网的攻击手段。例如让物联网设备过载而引发的小规模爆炸或停电，确实是至今来看都很符合现实的。游戏中的 UI、交互都显得很现代，即使 10 年过去了，以我设计从业者的角度来说，依然很好看。（看来简洁、炫酷的设计真的可以保存很久）",{"type":18,"tag":165,"props":14753,"children":14755},{"id":14754},"巫师3-1",[14756],{"type":37,"value":14757},"巫师3 1",{"type":18,"tag":14593,"props":14759,"children":14761},{":img":14760,"love":14596,"size":14597},"/img/game/7.png",[14762],{"type":18,"tag":40,"props":14763,"children":14764},{},[14765,14767,14772,14774,14779,14780,14785,14787,14792],{"type":37,"value":14766},"我认为这款游戏就是教会玩家如何养女儿的游戏，主打一个突出 ",{"type":18,"tag":747,"props":14768,"children":14769},{},[14770],{"type":37,"value":14771},"放手",{"type":37,"value":14773}," ，当女儿长大了，需要 ",{"type":18,"tag":747,"props":14775,"children":14776},{},[14777],{"type":37,"value":14778},"肯定",{"type":37,"value":7844},{"type":18,"tag":747,"props":14781,"children":14782},{},[14783],{"type":37,"value":14784},"鼓励",{"type":37,"value":14786},"，和 ",{"type":18,"tag":747,"props":14788,"children":14789},{},[14790],{"type":37,"value":14791},"让她自己决定",{"type":37,"value":14793},"，一旦选择错女儿就会离家跑路。但抛开这些人物的刻画，我觉得这款游戏的风景、UI、剧情、人设、交互和游玩体验，都是很不错的。",{"type":18,"tag":165,"props":14795,"children":14797},{"id":14796},"我的世界-1",[14798],{"type":37,"value":14799},"我的世界 1",{"type":18,"tag":14593,"props":14801,"children":14803},{":img":14802,"love":14596,"size":14597},"/img/game/8.png",[14804,14816,14821],{"type":18,"tag":40,"props":14805,"children":14806},{},[14807,14809,14814],{"type":37,"value":14808},"一款具有教育意义，引导普通玩家走向 Code、设计。让玩家接触到 JAVA，接触到插件的编写，以及创造。其故事模式同样具有教育意义，但网易的代理损失了 这些乐趣，单纯的变成了一款游戏。或许只有前往 ",{"type":18,"tag":193,"props":14810,"children":14812},{"href":14811},"www.minecraft.net",[14813],{"type":37,"value":14811},{"type":37,"value":14815}," 买了标准版或使用基岩版的玩家，才能有机会接触到我说的那些。",{"type":18,"tag":40,"props":14817,"children":14818},{},[14819],{"type":37,"value":14820},"也许，一开始。我们沉浸在自己的世界，但击杀完末影龙，玩遍了材质包与模组、加入了光影。依然无法满足自己，需要创造自己喜欢的场景和物品时，开始自己编写 mod、设计皮肤、材质的那一刻，完成了「在游戏中完成教育」。在下一阶段，与三五好友联机，慢慢扩大自己的社交圈，租用了一台服务器，了解到了基础的「网络知识」",{"type":18,"tag":40,"props":14822,"children":14823},{},[14824],{"type":37,"value":14825},"这款游戏不仅充满了教育意义的同时，具有很高的可玩性和可扩展性。",{"type":18,"tag":165,"props":14827,"children":14829},{"id":14828},"城市天际线-1",[14830],{"type":37,"value":14831},"城市：天际线 1",{"type":18,"tag":14593,"props":14833,"children":14835},{":img":14834,"love":3398,"size":14630},"/img/game/9.png",[14836,14841],{"type":18,"tag":40,"props":14837,"children":14838},{},[14839],{"type":37,"value":14840},"一款模拟经营城市的游戏，游戏主打一个「规划」，例如「道路规划」「水利规划」「电力规划」「区域规划」等。稍不留意就会让自己的城市破产，突然感觉上位者还是很有能力的，起码能让一个城市运转起来而不破产，提升市民幸福指数。",{"type":18,"tag":40,"props":14842,"children":14843},{},[14844],{"type":37,"value":14845},"在这款游戏中学习到了很多「规划」的知识，虽然这些知识可能是城市规划与设计、交通工程、环境科学、水资源管理等专业需要接触的，但作为一个玩家，依然可以学习并运用到这些。这款游戏让我记忆深刻的是，其实上位者还是很不错的，起码愿意做事。如果我上位了，不能说造福一方吧，只能说是祸国殃民。",{"type":18,"tag":165,"props":14847,"children":14849},{"id":14848},"far-lone-sails-1",[14850],{"type":37,"value":14851},"FAR: Lone Sails 1",{"type":18,"tag":14593,"props":14853,"children":14855},{":img":14854,"love":3398,"size":14630},"/img/game/10.png",[14856,14861],{"type":18,"tag":40,"props":14857,"children":14858},{},[14859],{"type":37,"value":14860},"中文名叫：“远方孤帆”，是在史低 5CNY 的时候入手的。花了三个多小时完成了一周目，有一说一还是很好玩的，游戏性、交互很不错，关卡的难度我认为是稍微看一眼就理解意图。不是那种可以增加关卡难度的，几乎没有向导和教程，属于是往前冲就行了的。",{"type":18,"tag":40,"props":14862,"children":14863},{},[14864],{"type":37,"value":14865},"游戏的设计性很不错，一看就知道是上了学的。不会让玩家觉得很难，虽然只有一个帆车，但其中有一个情节是利用帆充当船的情节也算是游戏性的一部分。配乐也很贴合场景，其中红帽小女孩看到父亲设计的一个类似大方舟的时候，BGM 和视角变大确实很震撼。貌似还有续作，叫 \"FAR: Changing Tides\" 看起来貌似也很不错，如过史低的时候我会体验一下。",{"type":18,"tag":165,"props":14867,"children":14869},{"id":14868},"岐路旅人-1",[14870],{"type":37,"value":14871},"岐路旅人 1",{"type":18,"tag":14593,"props":14873,"children":14875},{":img":14874,"love":14596,"size":14630},"/img/game/11.png",[14876,14881],{"type":18,"tag":40,"props":14877,"children":14878},{},[14879],{"type":37,"value":14880},"很好的一款角色扮演类的游戏，开屏的 BGM 很震撼，仿佛踏上一个伟大的征程一样。选择一个角色，经历 TA 的一生和故事，然后在旅行的途中还会遇到各种各样的 NPC 结队。经历 NPC 的过往故事，之后这些 NPC 会陪伴旅程一小部分然后分道扬镳。",{"type":18,"tag":40,"props":14882,"children":14883},{},[14884],{"type":37,"value":14885},"每个场景还有时间带变化，在这个场景中会感受时间的飞速流逝，但没有人，只有自己与风景。很符合岐路旅人的这个游戏名字，游戏性也还不错。",{"type":18,"tag":71,"props":14887,"children":14888},{},[],{"type":18,"tag":32,"props":14890,"children":14892},{"id":14891},"看了一场电影-1",[14893],{"type":37,"value":14894},"看了一场电影 1",{"type":18,"tag":27,"props":14896,"children":14898},{"t":14897},"看了一场电影",[],{"type":18,"tag":40,"props":14900,"children":14901},{},[14902],{"type":37,"value":14903},"这些游戏可能并没有那么深刻，但对我来说作为看了一场交互性电影，还是很不错的。",{"type":18,"tag":165,"props":14905,"children":14907},{"id":14906},"仙剑奇侠传七-1",[14908],{"type":37,"value":14909},"仙剑奇侠传七 1",{"type":18,"tag":14593,"props":14911,"children":14913},{":img":14912,"love":3398,"size":14630},"/img/game/12.png",[14914],{"type":18,"tag":40,"props":14915,"children":14916},{},[14917,14919,14924],{"type":37,"value":14918},"剧情上我觉得就是一个 ",{"type":18,"tag":747,"props":14920,"children":14921},{},[14922],{"type":37,"value":14923},"反派做了个正派该做的事情",{"type":37,"value":14925},"，以及一个恋爱脑女主。不过主角团的设计还算是很不错，女主的门派场景设计很有感觉。部分的场景设计很不错，感觉绝大部分的资金都给了女主。",{"type":18,"tag":165,"props":14927,"children":14929},{"id":14928},"轩辕剑柒-1",[14930],{"type":37,"value":14931},"轩辕剑柒 1",{"type":18,"tag":14593,"props":14933,"children":14935},{":img":14934,"love":3336,"size":14630},"/img/game/13.png",[14936],{"type":18,"tag":40,"props":14937,"children":14938},{},[14939,14941,14946],{"type":37,"value":14940},"有一说一所谓的 ",{"type":18,"tag":747,"props":14942,"children":14943},{},[14944],{"type":37,"value":14945},"春秋雅言",{"type":37,"value":14947}," 的配音真的很出戏，关卡也很无语，好像是为了解密而解密一样。游戏体验并不好，剧情也没什么特别独特的。",{"type":18,"tag":165,"props":14949,"children":14951},{"id":14950},"黑神话悟空-1",[14952],{"type":37,"value":14953},"黑神话:悟空 1",{"type":18,"tag":14593,"props":14955,"children":14958},{":img":14956,"love":5037,"size":14957},"/img/game/14.png",120,[14959,14964],{"type":18,"tag":40,"props":14960,"children":14961},{},[14962],{"type":37,"value":14963},"场景，战斗动作、特效以及下一场的 CG 都很不错。我愿意为这几个 CG 打 十分，每个 CG 都很有深意和讽刺意味，符合西游记的设定。",{"type":18,"tag":40,"props":14965,"children":14966},{},[14967],{"type":37,"value":14968},"唯独剧情确实是黑神话无疑，如果喜欢艾尔登法环类似的玩家，应该会喜欢这种类型的游戏。当风景玩也很不错的，但是地形编辑、道路、引导做的不是很好。当然这可能是我不怎么玩类魂游戏的问题，抛开各种 buff 谈，我觉得 IGN 8 分很可观。如果加上 buff，例如 「中国第一款 3A 大作」「中国风场景」「中式审美」「四大名著」「实景采样」「非遗传承」「中国游戏的未来」「玩家之声」「金摇杆」那就必须 10 分。",{"type":18,"tag":71,"props":14970,"children":14971},{},[],{"type":18,"tag":32,"props":14973,"children":14975},{"id":14974},"买了没玩-1",[14976],{"type":37,"value":14977},"买了没玩 1",{"type":18,"tag":27,"props":14979,"children":14981},{":t":14980},"买了没玩",[],{"type":18,"tag":40,"props":14983,"children":14984},{},[14985],{"type":37,"value":14986},"由于我玩游戏是一种“单线程”的心态，所以一款游戏没有玩完我是不会玩另一款游戏的，因此我会有很多感兴趣游玩的游戏还没有玩（在排队阶段）。这些游戏一定有我期待的，或者说感兴趣的点。",{"type":18,"tag":165,"props":14988,"children":14990},{"id":14989},"赛博朋克2077-1",[14991],{"type":37,"value":14992},"赛博朋克2077 1",{"type":18,"tag":27,"props":14994,"children":14996},{":t":14995,"type":311},"赛博朋克 2077",[],{"type":18,"tag":40,"props":14998,"children":14999},{},[15000],{"type":37,"value":15001},"赛博朋克风的游戏，我应该可以在这款游戏中学习到很多类似的风格和运用。听说剧情、场景也很不错，游戏性很足。",{"type":18,"tag":165,"props":15003,"children":15005},{"id":15004},"底特律化身为人-1",[15006],{"type":37,"value":15007},"底特律：化身为人 1",{"type":18,"tag":27,"props":15009,"children":15011},{":t":15010,"type":311},"底特律：化身为人",[],{"type":18,"tag":40,"props":15013,"children":15014},{},[15015],{"type":37,"value":15016},"一款剧情向的游戏，恰逢生成式 AI 爆发的年代，或许我可以从中了解到人工智能的道德设计和人与机器的交互。同时这款游戏的设计资产肯定能让我受益匪浅。",{"type":18,"tag":165,"props":15018,"children":15020},{"id":15019},"看门狗2-1",[15021],{"type":37,"value":15022},"看门狗2 1",{"type":18,"tag":27,"props":15024,"children":15026},{":t":15025,"type":311},"看门狗2",[],{"type":18,"tag":40,"props":15028,"children":15029},{},[15030],{"type":37,"value":15031},"看门狗1 我都没要看完剧情，看门狗 2 估计要很久之后了。就游戏截图来说，我认为比看门狗 1 的 UI 更加炫酷和有更多我值得学的地方。",{"type":18,"tag":165,"props":15033,"children":15035},{"id":15034},"这是我的战争-1",[15036],{"type":37,"value":15037},"这是我的战争 1",{"type":18,"tag":27,"props":15039,"children":15041},{":t":15040,"type":311},"这是我的战争",[],{"type":18,"tag":40,"props":15043,"children":15044},{},[15045],{"type":37,"value":15046},"看了评论是类似在战争发生时，上演人性的扭曲和道德的沦丧的事情，或许可以从游戏中发现自己人性、道德的底线是如何一次一次被拉低的。",{"type":18,"tag":165,"props":15048,"children":15050},{"id":15049},"勇敢的心伟大战争-1",[15051],{"type":37,"value":15052},"勇敢的心：伟大战争 1",{"type":18,"tag":27,"props":15054,"children":15056},{":t":15055,"type":311},"勇敢的心：伟大战争",[],{"type":18,"tag":40,"props":15058,"children":15059},{},[15060],{"type":37,"value":15061},"据说这款游戏的四个角色分别代表了对战争看待的角度，或许我能从中了解到战争的可怕以及为什么要参与这个战争。",{"type":18,"tag":71,"props":15063,"children":15064},{},[],{"type":18,"tag":32,"props":15066,"children":15068},{"id":15067},"最想玩的-1",[15069],{"type":37,"value":15070},"最想玩的 1",{"type":18,"tag":27,"props":15072,"children":15074},{":t":15073},"最想玩的游戏",[],{"type":18,"tag":165,"props":15076,"children":15078},{"id":15077},"使命召唤系列-1",[15079],{"type":37,"value":15080},"使命召唤系列 1",{"type":18,"tag":27,"props":15082,"children":15084},{":t":15083,"type":311},"使命召唤系列",[],{"type":18,"tag":40,"props":15086,"children":15087},{},[15088],{"type":37,"value":15089},"我看过很多类似使命召唤的切片，貌似是一场大型的游戏电影体验。可以看到对于战争、未来战争的幻想和较为先进的技术是如何应用在战场的？",{"type":18,"tag":165,"props":15091,"children":15093},{"id":15092},"梦想屋游戏-1",[15094],{"type":37,"value":15095},"梦想屋游戏 1",{"type":18,"tag":27,"props":15097,"children":15099},{":t":15098,"type":311},"梦想屋游戏",[],{"type":18,"tag":40,"props":15101,"children":15102},{},[15103,15105,15112],{"type":37,"value":15104},"是一款模拟装修的游戏。如果渲染效果不错，且功能也丰富，或许可以当成 ",{"type":18,"tag":193,"props":15106,"children":15109},{"href":15107,"rel":15108},"https://lumion.com/",[197],[15110],{"type":37,"value":15111},"Lumion",{"type":37,"value":15113}," 的游戏平替（因为后者太吃配置了，正版还比较贵)",{"type":18,"tag":165,"props":15115,"children":15117},{"id":15116},"最终幻想系列-1",[15118],{"type":37,"value":15119},"最终幻想系列 1",{"type":18,"tag":27,"props":15121,"children":15123},{":t":15122,"type":311},"最终幻想系列",[],{"type":18,"tag":40,"props":15125,"children":15126},{},[15127],{"type":37,"value":15128},"同样的看过很多最终幻想的切片，看起来动作效果应该会很舒服？虽然我没玩过，但是我知道蒂法？",{"type":18,"tag":165,"props":15130,"children":15132},{"id":15131},"尼尔机械纪元-1",[15133],{"type":37,"value":15134},"尼尔机械纪元 1",{"type":18,"tag":27,"props":15136,"children":15138},{":t":15137,"type":311},"尼尔机械纪元",[],{"type":18,"tag":40,"props":15140,"children":15141},{},[15142],{"type":37,"value":15143},"只看过切片（之前我一直以为这款游戏是 18+ 动漫）",{"type":18,"tag":165,"props":15145,"children":15147},{"id":15146},"古墓丽影系列-1",[15148],{"type":37,"value":15149},"古墓丽影系列 1",{"type":18,"tag":27,"props":15151,"children":15153},{":t":15152,"type":311},"古墓丽影系列",[],{"type":18,"tag":40,"props":15155,"children":15156},{},[15157],{"type":37,"value":15158},"只玩过古墓丽影的第一部（2013）, 全程非常刺激，不是跑路就是枪战。然后在其中还会融入稍微恐怖阴森的遗迹？总之视觉感官很沉浸。",{"title":8,"searchDepth":14369,"depth":14369,"links":15160},[15161,15162,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186],{"id":14588,"depth":14369,"text":14591},{"id":14623,"depth":14369,"text":14626,"children":15163},[15164],{"id":14657,"depth":4058,"text":14660},{"id":14672,"depth":14369,"text":14675},{"id":14688,"depth":14369,"text":14691},{"id":14712,"depth":14369,"text":14715},{"id":14727,"depth":14369,"text":14730},{"id":14754,"depth":14369,"text":14757},{"id":14796,"depth":14369,"text":14799},{"id":14828,"depth":14369,"text":14831},{"id":14848,"depth":14369,"text":14851},{"id":14868,"depth":14369,"text":14871},{"id":14906,"depth":14369,"text":14909},{"id":14928,"depth":14369,"text":14931},{"id":14950,"depth":14369,"text":14953},{"id":14989,"depth":14369,"text":14992},{"id":15004,"depth":14369,"text":15007},{"id":15019,"depth":14369,"text":15022},{"id":15034,"depth":14369,"text":15037},{"id":15049,"depth":14369,"text":15052},{"id":15077,"depth":14369,"text":15080},{"id":15092,"depth":14369,"text":15095},{"id":15116,"depth":14369,"text":15119},{"id":15131,"depth":14369,"text":15134},{"id":15146,"depth":14369,"text":15149},"content:book:game-life.md","book/game-life.md",{"_path":15190,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":15191,"description":8,"director":15192,"time":14462,"img":15193,"plan":15194,"body":15195,"_type":14453,"_id":15884,"_source":14455,"_file":15885,"_extension":14457},"/book/journey-to-the-west","西游记","吴承恩","07/1.png","30,323",{"type":15,"children":15196,"toc":15882},[15197],{"type":18,"tag":19,"props":15198,"children":15199},{":by":21,":img":22,":plan":23,":title":24},[15200,15206,15210,15215,15221,15225,15239,15252,15257,15262,15264,15407,15412,15417,15422,15434,15439,15444,15449,15457,15462,15465,15471,15475,15480,15488,15493,15498,15503,15511,15523,15528,15533,15536,15542,15546,15551,15556,15561,15566,15589,15594,15599,15607,15612,15623,15628,15631,15637,15641,15646,15654,15659,15667,15672,15680,15685,15690,15695,15698,15704,15708,15713,15742,15747,15755,15768,15776,15781,15784,15790,15794,15799,15804,15809,15852,15857,15869,15877],{"type":18,"tag":32,"props":15201,"children":15203},{"id":15202},"四大名著-1",[15204],{"type":37,"value":15205},"四大名著 1",{"type":18,"tag":27,"props":15207,"children":15209},{":t":15208},"终于理解了为什么这几本书是四大名著",[],{"type":18,"tag":40,"props":15211,"children":15212},{},[15213],{"type":37,"value":15214},"在小时候。老师都说三国演义、水浒传、西游记、红楼梦是中国的四大名著。那时候还不解就四本书为什么含金量这么高。过了很多年初到社会再细品这四本书，发现这就是中国社会的缩影，其中不乏对人与人之间，国家运行时的一些隐晦表达，都在这四本书中一一体会。原来是我的打开方式不对，要读懂这几本书，要贴合现实发生的事情，来进行解读，就会发现目前现代社会和几百年前的社会并无不同，人与人和国家的运行时，都与当时大差不差。",{"type":18,"tag":32,"props":15216,"children":15218},{"id":15217},"八十一难-论功行赏-4",[15219],{"type":37,"value":15220},"八十一难 论功行赏 4",{"type":18,"tag":27,"props":15222,"children":15224},{":t":15223},"论功行赏，八戒垫底",[],{"type":18,"tag":40,"props":15226,"children":15227},{},[15228,15230,15237],{"type":37,"value":15229},"如果将西天取经，比作一个项目，一个工程的话。那么取经工程保护、记录、汇报的组织就是",{"type":18,"tag":193,"props":15231,"children":15234},{"href":15232,"rel":15233},"https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%B8%B8%E8%AE%B0%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8#%E5%85%B6%E4%BB%96_2",[197],[15235],{"type":37,"value":15236},"六丁六甲",{"type":37,"value":15238},"，向观音菩萨交法旨，而观音菩萨向如来交旨。观音菩萨开始审阅六丁六甲在西天取经的记录，发现少了一难，只有八十难。",{"type":18,"tag":116,"props":15240,"children":15241},{},[15242,15247],{"type":18,"tag":40,"props":15243,"children":15244},{},[15245],{"type":37,"value":15246},"如来因打发唐僧去后，才散了传经之会。傍又闪上观世音菩萨合掌启佛祖道：“弟子当年领金旨向东土寻取经之人，今已成功，共计得一十四年，乃五千零四十日，还少八日，不合藏数。望我世尊早赐圣僧回东转西，须在八日之内庶完藏数。准弟子缴还金旨。” 如来大喜道：“所言甚当，准缴金旨。” 即叫八大金刚分付道：“汝等快使神威，驾送圣僧回东，把真经传留，即引圣僧西回。须在八日之内，以完一藏之数，勿得迟违。” 金刚随即赶上唐僧，叫道：“取经的，跟我来。” 唐僧等俱身轻体健，荡荡飘飘，随著金刚，驾云而起。这才是：",{"type":18,"tag":40,"props":15248,"children":15249},{},[15250],{"type":37,"value":15251},"大鼋是一只在通天河上的巨鼋，唐僧师徒第一次遇见他时，他载唐僧等人渡河，并希望唐僧能替他问佛祖还需修行多久才能修成正果化身成人。回程的时候大鼋再度载唐僧师徒及经书过河，半途上问起这个承诺，然而早已遗忘此事的唐三藏无言以对，于是不高兴的大鼋身子一翻，把唐僧淹入水中。这个事件是唐僧取经所需历经的八十一难中的最后一难。",{"type":18,"tag":40,"props":15253,"children":15254},{},[15255],{"type":37,"value":15256},"大鼋对唐僧的要求可谓是人之常情，毕竟在通天河上班了很多年，帮助了唐僧；想问问佛祖还有多少年才能退休。但唐僧又没有帮大鼋办事，所以将唐僧摔下。",{"type":18,"tag":40,"props":15258,"children":15259},{},[15260],{"type":37,"value":15261},"到了长安后，取经工程以步入后章。虽然取经计划原定是三年，但经历了十多年后才取回，可谓是历经磨难。虽然时间超出了，但经是取回了。因此李世民撰文《圣教序》为取经工程定性。",{"type":37,"value":15263},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":15265,"children":15266},{},[15267,15293],{"type":18,"tag":395,"props":15268,"children":15269},{},[15270],{"type":18,"tag":399,"props":15271,"children":15272},{},[15273,15278,15283,15288],{"type":18,"tag":403,"props":15274,"children":15275},{},[15276],{"type":37,"value":15277},"名字",{"type":18,"tag":403,"props":15279,"children":15280},{},[15281],{"type":37,"value":15282},"受封",{"type":18,"tag":403,"props":15284,"children":15285},{},[15286],{"type":37,"value":15287},"等级",{"type":18,"tag":403,"props":15289,"children":15290},{},[15291],{"type":37,"value":15292},"作用",{"type":18,"tag":414,"props":15294,"children":15295},{},[15296,15319,15341,15362,15385],{"type":18,"tag":399,"props":15297,"children":15298},{},[15299,15304,15309,15314],{"type":18,"tag":421,"props":15300,"children":15301},{},[15302],{"type":37,"value":15303},"唐僧",{"type":18,"tag":421,"props":15305,"children":15306},{},[15307],{"type":37,"value":15308},"旃檀功德佛",{"type":18,"tag":421,"props":15310,"children":15311},{},[15312],{"type":37,"value":15313},"修成正果",{"type":18,"tag":421,"props":15315,"children":15316},{},[15317],{"type":37,"value":15318},"一人之下万人之上",{"type":18,"tag":399,"props":15320,"children":15321},{},[15322,15327,15332,15337],{"type":18,"tag":421,"props":15323,"children":15324},{},[15325],{"type":37,"value":15326},"孙悟空",{"type":18,"tag":421,"props":15328,"children":15329},{},[15330],{"type":37,"value":15331},"斗战圣佛",{"type":18,"tag":421,"props":15333,"children":15334},{},[15335],{"type":37,"value":15336},"大职正果",{"type":18,"tag":421,"props":15338,"children":15339},{},[15340],{"type":37,"value":15318},{"type":18,"tag":399,"props":15342,"children":15343},{},[15344,15349,15354,15358],{"type":18,"tag":421,"props":15345,"children":15346},{},[15347],{"type":37,"value":15348},"沙僧",{"type":18,"tag":421,"props":15350,"children":15351},{},[15352],{"type":37,"value":15353},"金身罗汉",{"type":18,"tag":421,"props":15355,"children":15356},{},[15357],{"type":37,"value":15336},{"type":18,"tag":421,"props":15359,"children":15360},{},[15361],{"type":37,"value":15318},{"type":18,"tag":399,"props":15363,"children":15364},{},[15365,15370,15375,15380],{"type":18,"tag":421,"props":15366,"children":15367},{},[15368],{"type":37,"value":15369},"小白龙",{"type":18,"tag":421,"props":15371,"children":15372},{},[15373],{"type":37,"value":15374},"八部天龙广力菩萨",{"type":18,"tag":421,"props":15376,"children":15377},{},[15378],{"type":37,"value":15379},"汝职正果",{"type":18,"tag":421,"props":15381,"children":15382},{},[15383],{"type":37,"value":15384},"保护灵山，禁卫军首领",{"type":18,"tag":399,"props":15386,"children":15387},{},[15388,15393,15398,15402],{"type":18,"tag":421,"props":15389,"children":15390},{},[15391],{"type":37,"value":15392},"猪八戒",{"type":18,"tag":421,"props":15394,"children":15395},{},[15396],{"type":37,"value":15397},"净坛使者",{"type":18,"tag":421,"props":15399,"children":15400},{},[15401],{"type":37,"value":15379},{"type":18,"tag":421,"props":15403,"children":15404},{},[15405],{"type":37,"value":15406},"打扫贡品的",{"type":18,"tag":40,"props":15408,"children":15409},{},[15410],{"type":37,"value":15411},"回到灵山后。唐僧是如来的二弟子，但不尊重佛法，投胎至东土大唐。取经修成正果后受封——旃檀功德佛（修成正果）；孙悟空虽大闹天宫，被如来镇压五百年，但取经过程中降妖伏魔受封斗战圣佛（大职正果）；猪八戒是净坛使者（汝职正果）。",{"type":18,"tag":40,"props":15413,"children":15414},{},[15415],{"type":37,"value":15416},"猪八戒对受封不满，于是质问如来被如来狠狠 PUA。说猪八戒由于 “又有顽心，色情未泯”，为如来佛祖的部下，负责享用一切人世间作功德的供品。绝对是 PUA 猪八戒，成佛了想吃什么没有，非要当个打工人吃边角料。虽然净水楼台先得月，但如果成佛了，躺在床上还有人喂这不香吗？",{"type":18,"tag":40,"props":15418,"children":15419},{},[15420],{"type":37,"value":15421},"而到了沙僧，沙僧虽然在蟠桃会上摔杯为号，威胁到了玉帝被贬流沙河。受封金身罗汉（大职正果）；白龙马在取经路上驼经有功，受封八部天龙广力菩萨（汝职正果）",{"type":18,"tag":40,"props":15423,"children":15424},{},[15425,15427,15432],{"type":37,"value":15426},"这种论功行赏，看的是他们背后的势力。唐僧功劳最大，取经团队的主要负责人；孙悟空背后就是道教，佛教，玉帝。谁都搞不死孙悟空，那既然这样不如 ",{"type":18,"tag":747,"props":15428,"children":15429},{},[15430],{"type":37,"value":15431},"请客，斩首，收下当狗",{"type":37,"value":15433}," 你会发现都是这么做的，只不过前期玉帝给的官小了，后面佛祖总结失败经验给了个官大的，成功收下当狗。",{"type":18,"tag":40,"props":15435,"children":15436},{},[15437],{"type":37,"value":15438},"虽然沙僧最后是个菩萨，但人家职级是和孙悟空一样的。而猪八戒虽然也是菩萨，但属于是菩萨里面打杂的；甚至猪八戒不如白龙马等极高，人家起码还能训练下禁卫军，而猪八戒只能吃人家剩下的贡品。沙僧的背后代表的是玉帝；白龙马背后就是龙王家族（婆罗门），四海龙王基本上走到哪都能看到龙王什么海龙王，河龙王，井里面也有龙王，有水的地方都有龙王。",{"type":18,"tag":40,"props":15440,"children":15441},{},[15442],{"type":37,"value":15443},"虽然龙在西游记里面级别比较低，玉帝办一下什么宴会都要有个龙肝凤胆(玉帝最喜欢吃龙王了)，动不动斩个龙王，甚至梦里都要斩个龙王玩玩消遣下工作的劳累。所以小白龙吃唐三藏坐骑给观音菩萨点化完全是偶遇，龙王策划的一个剧本，把小白龙这个富哥塞进去。如果取经成功了就能大大提升龙王家族的影响力，俺们龙王也是能给灵山当禁卫军的了，也算是给赵家人当上狗了。",{"type":18,"tag":40,"props":15445,"children":15446},{},[15447],{"type":37,"value":15448},"为什么小白龙一条龙要幻化成马呢，我比较认同一个观点。作为一个婆罗门一个富哥，尽量低调点，毕竟言多必失。变成马又不用降妖除魔，还不用说话，主打一个陪伴，不容易被人关注，不容易给人开黑料。这要给人曝光出来了，其他家族就来气了，凭什么他能混个编制成为禁卫军首领啊? 所以说龙王家族是真的厉害，基本上整部西游记形形色色的龙王出境率还算是比较高的。连我龙王家的祖传如意金箍棒都给孙悟空了，起码是重仓押注取经团队，不成功便成仁。",{"type":18,"tag":116,"props":15450,"children":15451},{},[15452],{"type":18,"tag":40,"props":15453,"children":15454},{},[15455],{"type":37,"value":15456},"道德天尊又称太上老君，小说中居于离恨天兜率宫（实际上兜率为印度词汇，道教中太上老君居于太清圣境）。孙悟空因大闹天宫，被太上老君的金刚镯打到，因此被捕，后被放于太上老君的八卦炉内焚化，不料非但没有被焚化，反而练就一双 “火眼金睛”，有看穿看透人事物的功力，在取经路途中，凡有妖怪化装成凡人或神仙，都逃不过他的火眼金睛而被拆穿。后来没被焚化的孙悟空出了八卦炉，愤而踢翻，造成八卦炉爆炸，火球与炭灰降于凡间西疆，而成为火焰山。替太上老君看管八卦炉的两名童子下凡作乱，分别自称金角大王和银角大王。太上老君的坐骑是一头青牛精，下凡作乱时自称独角兕大王。",{"type":18,"tag":40,"props":15458,"children":15459},{},[15460],{"type":37,"value":15461},"龙王家族最后变成有钱有势的韩国财阀一样的家族势力。再也不是那个有钱任人宰割的群体了。而猪八戒出身就是道教，道教扛把子就是太上老君，太上老君这个人也可以细细品，基本上西游记上很多妖怪，比如什么独角兕大王、金角大王、银角大王都是太上老君的坐骑什么的。",{"type":18,"tag":71,"props":15463,"children":15464},{},[],{"type":18,"tag":32,"props":15466,"children":15468},{"id":15467},"四十九回-观音地盘-2",[15469],{"type":37,"value":15470},"四十九回 观音地盘 2",{"type":18,"tag":27,"props":15472,"children":15474},{":t":15473},"观音的回旋镖",[],{"type":18,"tag":40,"props":15476,"children":15477},{},[15478],{"type":37,"value":15479},"灵感大王要胁住在河岸的村民每年必须供奉一对童男童女，以保风调雨顺、否则降灾。孙悟空和猪八戒伪装成童男童女并偷袭他，灵感大王不敌孙悟空而躲了起来，孙悟空便找上观音菩萨协助。最后由观音用鱼篮收回妖怪后带回了池塘。",{"type":18,"tag":116,"props":15481,"children":15482},{},[15483],{"type":18,"tag":40,"props":15484,"children":15485},{},[15486],{"type":37,"value":15487},"灵感大王为住在通天河里的妖怪，真实身份为普陀山莲花池的金鱼，因为听了观音说法而有了力量便下凡作恶。能够在一晚之内，将宽度 800 里、长度连孙悟空都看不见尽头的通天河冻成冰河。",{"type":18,"tag":40,"props":15489,"children":15490},{},[15491],{"type":37,"value":15492},"在四十九回时，孙悟空和灵感大王的掰扯。孙悟空可能发现了灵感大王的背后是观音菩萨，于是去找观音收服鲤鱼精。在这个故事中，你会发现。观音来了后将通天河的小鱼小虾都灭口了，就留了个鲤鱼精。",{"type":18,"tag":40,"props":15494,"children":15495},{},[15496],{"type":37,"value":15497},"这原本是观音的地盘，被孙悟空抓住了把柄。于是在八十一难的时候，陈家庄唐僧在此处讲经可以视作为观音将这个地盘让给了取经三人。孙悟空与观音菩萨交易成功。孙悟空之后也没有在玉帝、佛祖跟前给观音菩萨上眼药。",{"type":18,"tag":40,"props":15499,"children":15500},{},[15501],{"type":37,"value":15502},"在现实社会中，这个步骤就很像是观音菩萨贪污了一块地，改造成了个山水庄园。孙悟空误打误撞发现了这块贪污巨款，之后去给观音菩萨上眼药。之后在八十一难中，其实八十难就行了，但因为观音菩萨需要告诉孙悟空，这块地方我不要了，送给你，让你们去看看这块地怎么样，将秘密守护住堵住孙悟空的嘴；让其在论功行赏的时候不要泄露出去。",{"type":18,"tag":116,"props":15504,"children":15505},{},[15506],{"type":18,"tag":40,"props":15507,"children":15508},{},[15509],{"type":37,"value":15510},"紧箍咒是《西游记》中的一个咒语，又名定心真言，由如来发明，经观音菩萨传授给唐僧，用于对其弟子孙悟空的管教。",{"type":18,"tag":40,"props":15512,"children":15513},{},[15514,15516,15521],{"type":37,"value":15515},"孙悟空其实是比较讨厌观音菩萨的，因为紧箍咒就是观音菩萨给他下的套。想拿捏孙悟空，所以在取经工程前期，孙悟空一直被唐僧拿捏。这件事情告诉我们，不幸树敌的时候，可以 ",{"type":18,"tag":747,"props":15517,"children":15518},{},[15519],{"type":37,"value":15520},"捧高",{"type":37,"value":15522}," 下对方，就比如观音在通天河陈家庄那样，给孙悟空，唐僧他们整个供奉，来暗示孙悟空你都成佛了，再计较这些岂不是不符你身份？就当我观音是个小人忘记这些恶心事吧。",{"type":18,"tag":40,"props":15524,"children":15525},{},[15526],{"type":37,"value":15527},"这样孙悟空在论功行赏的时候，就不会打破和谐的气氛，让观音不被反腐。如果没有八十一难，那么孙悟空是会将观音说出去的，因为孙悟空背景很深，背后是道教、佛教、天庭。",{"type":18,"tag":40,"props":15529,"children":15530},{},[15531],{"type":37,"value":15532},"连在灵山唐僧师徒到灵山宝阁取经时，阿难、伽叶作为如来的底子要收取人事。孙悟空都要把索要人事之事捅到如来佛祖那里，佛祖并不觉有何不妥就可以看出，孙悟空是真的敢举报观音贪污的。",{"type":18,"tag":71,"props":15534,"children":15535},{},[],{"type":18,"tag":32,"props":15537,"children":15539},{"id":15538},"九十八回-放水-1",[15540],{"type":37,"value":15541},"九十八回 放水 1",{"type":18,"tag":27,"props":15543,"children":15545},{":t":15544},"放水",[],{"type":18,"tag":40,"props":15547,"children":15548},{},[15549],{"type":37,"value":15550},"如果只看前一部分凌云渡就会发现。取经三人在玉真观的时候，孙悟空之前是来过的，也见到了那个独木桥。但当时孙悟空道心不稳，所以觉得自己道行不够就去继续修炼了。这里很大一部分是如来引动孙悟空一步一步到灵山脚下的，但孙悟空没上勾。",{"type":18,"tag":40,"props":15552,"children":15553},{},[15554],{"type":37,"value":15555},"于是有了灵台方寸山斜月三星洞菩提祖师收孙悟空为徒非法授课，传授他七十二变，长生不老和筋斗云的法门。这就相当于违反了《校外培训行政处罚暂行办法》，而菩提祖师往上追溯可能是如来，这种事情怎么可能让玉帝知道。毕竟孙悟空也是大闹天宫打了玉帝的脸，这要让玉帝知道了估计会挑起佛教和天庭的对立。就从收服孙悟空那一章可以看出，当时的天庭较为薄弱，甚至还要请如来收服孙悟空。",{"type":18,"tag":40,"props":15557,"children":15558},{},[15559],{"type":37,"value":15560},"但到了第二次，孙悟空来到了灵山脚下。已经知道跨过这个独木桥就已经可以成佛成仙了，但唐僧不知道，又不能暗示唐僧通过这条路就已经可以成为人上人了。",{"type":18,"tag":40,"props":15562,"children":15563},{},[15564],{"type":37,"value":15565},"于是金顶大仙、孙悟空、阿弥陀佛轮番疯狂暗示：",{"type":18,"tag":116,"props":15567,"children":15568},{},[15569,15574,15579,15584],{"type":18,"tag":40,"props":15570,"children":15571},{},[15572],{"type":37,"value":15573},"　　“唐僧到玉真观，金顶大仙接着。” 已是到金仙之分，而猿熟马驯，体变纯阳之时矣。故诗云：“炼就长生居胜境，修成永寿脱尘埃” 也。大圣道：“此乃灵山脚下，金顶大仙。” 以见仙即是佛，佛即是仙。仙者，金丹有为之道；佛者，圆觉无为之道。佛不得金丹不能成佛，仙不明圆觉不能成仙，一而二，二而一，灵山雷音即金顶大仙，岂可以仙佛歧而二之乎？",{"type":18,"tag":40,"props":15575,"children":15576},{},[15577],{"type":37,"value":15578},"　　至凌云渡，独木桥，唐僧心惊，以为大仙错指，是猿熟马驯，而不知此脱壳也。行者道：“不差，要从那桥上行过去，方成正果。” 言猿熟马驯，而不可不在此脱壳也。了命之后，不得不了性，了性所以脱壳也。",{"type":18,"tag":40,"props":15580,"children":15581},{},[15582],{"type":37,"value":15583},"　　盖成仙作佛，为天下希有之事，人人所欲得，人人所难能。如凌云之高而难渡，正以难渡者而渡之，则仙矣、佛矣。盖渡之之法有二，一则无为之道，一则有为之道。无为之道，最上一乘之道；有为之道，金丹之道。一乘之道，即独木桥；金丹之道，即无底船。独木桥所以接上智，无底舱所以渡中人。何为独木桥，独木者，一乘也；桥者，梁道也，即最上一乘无为之道。故曰：“从桥上过，方成正果。” 诗云：“单梁细滑浑难渡，除是神仙步彩霞。” 言最上一乘之道，惟上智顿悟者可以行，而下智渐修者则难渡。",{"type":18,"tag":40,"props":15585,"children":15586},{},[15587],{"type":37,"value":15588},"　　三藏心惊道：“这桥不是人走的。” 以见下智者则难渡；行者笑道：“正是路！正是路！” 以见上智者可以行。“行者跳上桥，须臾跑将过去，又从那边跑过来。” 上智之人，本性圆明，不假施为，顿超彼岸，随机应变，遇境而安，出入无碍，来往不拘，无为之用自成，《中庸》所谓 “自诚明，谓之性也。”“唐僧摇手、八戒沙僧咬指道：难！难！难！’” 又曰：“滑！滑！滑！” 下智之人秉性愚鲁，为私欲所蔽，为全缘所诱，忘其本来面目，失其固有天良，着于假相，好生而恶死，不能顿悟圆通，终难归于大觉。若无金丹之道，焉能过得凌云之渡？《中庸》所谓 “自明诚，谓之教也。”《参同》云：“上德无为，不以察求；下德为之，其用不休。” 此无底船之不可无者也。",{"type":18,"tag":40,"props":15590,"children":15591},{},[15592],{"type":37,"value":15593},"唐僧是不敢走过独木桥的，甚至阿弥陀佛去渡船接他们的时候。唐僧也是不敢的，但由于孙悟空提前演示了下，唐僧就敢上渡船了。这个流程就很像 30 天速成 XXX 的赵家人空降。",{"type":18,"tag":40,"props":15595,"children":15596},{},[15597],{"type":37,"value":15598},"这各部分其实就是涉及到了佛教的轮回，六根（眼、耳、鼻、舌、身、意六個識根（感官器官），為二十二根之六）唐僧之所以无法过去。是因为还未自渡，还需他人渡，需要阿弥陀佛的渡船，但唐僧还是不敢。孙悟空只能狠狠的作弊回，当着阿弥陀佛和灵山、天庭的面作弊将唐僧拉上渡船，让唐僧脱离肉体凡胎，将取经工程进行下去。",{"type":18,"tag":116,"props":15600,"children":15601},{},[15602],{"type":18,"tag":40,"props":15603,"children":15604},{},[15605],{"type":37,"value":15606},"那长老手舞足蹈，随著行者，直至雷音寺山门之外。那厢有四大金刚迎住道：“圣僧来耶？” 三藏躬身道：“是，弟子玄奘到了。” 答毕，就欲进门。金刚道：“圣僧少待，容禀过再进。” 那金刚著一个转山门报与二门上四大金刚，说唐僧到了；二门上又传入三门上，说唐僧到了。三山门内原是打供的神僧，闻得唐僧到时，急至大雄殿下，报与如来至尊释迦牟尼文佛说：“唐朝圣僧，到于宝山，取经来了。” 佛爷爷大喜。即召聚八菩萨、四金刚、五百阿罗、三千揭谛、十一大曜、十八伽蓝，两行排列。却传金旨，召唐僧进。那里边一层一节，钦依佛旨，叫：“圣僧进来。” 这唐僧循规蹈矩，同悟空、悟能、悟净，牵马挑担，径入山门。",{"type":18,"tag":40,"props":15608,"children":15609},{},[15610],{"type":37,"value":15611},"有点像是仪仗队礼兵列队欢迎各国元首，然后又整几个礼炮奏乐。原来几百年前的东西一直流行到现在。皇权和大教总是喜欢一些雄伟宏大的建筑以及人性阵列来体现自己的教义覆盖面是多么的广，多么的厉害、多么的威严、充满了神性光辉。",{"type":18,"tag":40,"props":15613,"children":15614},{},[15615,15617,15622],{"type":37,"value":15616},"这也说明了一件事情。就是关于重要的功绩性事件，能放水的就放水。如果没有孙悟空作弊，那大概率唐僧是无法成为佛的，看到了独木桥和无底船就回想回去, 于是在灭法国国王那被砍头，因为灭法国国王曾发誓要杀一万个佛教僧侣，当唐僧师徒四人到达该国时，他已杀死 9996 个僧侣。这说明之前不只唐僧三人去取经，只不过这次是 ",{"type":18,"tag":747,"props":15618,"children":15619},{},[15620],{"type":37,"value":15621},"不惜一切代价，保证取经工程顺利进行",{"type":37,"value":3150},{"type":18,"tag":40,"props":15624,"children":15625},{},[15626],{"type":37,"value":15627},"所以取经团队是这样的：看到独木桥或者无底船就怕了打道回府；-> 遇到寇员外招待劝返 -> 灭法国砍头。你会发现寇员外和灭法国都是一个要招待一万个和尚，另一个是要杀一万个和尚为目标；可谓是一对卧龙凤雏。",{"type":18,"tag":71,"props":15629,"children":15630},{},[],{"type":18,"tag":32,"props":15632,"children":15634},{"id":15633},"九十八回-早期知识付费-2",[15635],{"type":37,"value":15636},"九十八回 早期知识付费 2",{"type":18,"tag":27,"props":15638,"children":15640},{":t":15639},"知识付费",[],{"type":18,"tag":40,"props":15642,"children":15643},{},[15644],{"type":37,"value":15645},"在原著中唐僧第一次白嫖取的是无字真经。白雄尊者让唐僧三人坠机后发现自己拿的竟是无字经书还以为是假的，于是返回灵山。第二次跟着阿难、迦叶去取经书时向唐僧索要人事。通俗来讲就是小费，其实唐僧身上法宝多得很，比如观世音菩萨所赠的九环锡杖和锦斓袈裟。都算上的是极品法宝也不为过。于是唐僧选了一件紫金钵盂作为人事。这钵盂可是太宗皇帝在十二回《唐王秉诚修大会 观音显圣化金蝉》中送与唐僧的：",{"type":18,"tag":116,"props":15647,"children":15648},{},[15649],{"type":18,"tag":40,"props":15650,"children":15651},{},[15652],{"type":37,"value":15653},"朕又有一个紫金钵盂，送你途中化斋而用。再选两个长行的从者。又钦赐你马一匹，送为远行脚力。你可就此行程。” 玄奘大喜，即便谢了恩，领了物事，更无留滞之意。",{"type":18,"tag":40,"props":15655,"children":15656},{},[15657],{"type":37,"value":15658},"之后孙悟空因看了无字经书，此觉得整个灵山简直就是目无法纪，竟然公开受贿。学习借个书都要钱，于是在如来面前控诉。但如来听闻并不觉得有什么奇怪，反而觉得要少了。并澄清无字经书可比有字的之前，是你们道行不够不识货。我们灵山的和尚下去讲经，可都是要送三斗金粒以及好生伺候才行的！",{"type":18,"tag":116,"props":15660,"children":15661},{},[15662],{"type":18,"tag":40,"props":15663,"children":15664},{},[15665],{"type":37,"value":15666},"“如来，我师徒们受了万蜇千魔，千辛万苦，自东土拜到此处，蒙如来分付传经，被阿傩、伽叶掯财不遂，通同作弊，故意将无字的白纸本儿教我们拿去。我们拿他去何用？望如来敕治。” 佛祖笑道：“你且休嚷。他两个问你要人事之情，我已知矣。但只是经不可轻传，亦不可以空取。向时众比丘圣僧下山，曾将此经在舍卫国赵长者家与他诵了一遍，保他家生者安全，亡者超脱，只讨得他三斗三升米粒黄金回来。我还说他们忒卖贱了，教后代儿孙没钱使用。你如今空手来取，是以传了白本。白本者，乃无字真经，倒也是好的。因你那东土众生愚迷不悟，只可以此传之耳。” 即叫：“阿傩、伽叶，快将有字的真经，每部中各检几卷与他，来此报数。”",{"type":18,"tag":40,"props":15668,"children":15669},{},[15670],{"type":37,"value":15671},"于是第二次，唐僧没有再白嫖，狠狠的知识付费了一次，原著是这样写的：",{"type":18,"tag":116,"props":15673,"children":15674},{},[15675],{"type":18,"tag":40,"props":15676,"children":15677},{},[15678],{"type":37,"value":15679},"二尊者复领四众，到珍楼宝阁之下，仍问唐僧要些人事。三藏无物奉承，即命沙僧取出紫金钵盂，双手奉上道：“弟子委是穷寒路遥，不曾备得人事。这钵盂乃唐王亲手所赐，教弟子持此沿路化斋。今特奉上，聊表寸心。万望尊者将此收下，待回朝奏上唐王，定有厚谢。只是以有字真经赐下，庶不孤钦差之意，远涉之劳也。” 那阿傩接了，但微微而笑。",{"type":18,"tag":40,"props":15681,"children":15682},{},[15683],{"type":37,"value":15684},"之所以是无字经，无论是如来还是燃灯古佛，都一致认为无字经才是真的经。《金刚经》有一句特别出名的话可以描述：“一切有为法，如梦幻泡影，如露亦如电，应作如是观” 或者： \"凡所有相，皆是虚妄。若见诸相非相，则见如来\"。因为如果要成佛，就需要六根清净，也就是抛弃肉体凡胎，经历过轮回，那个时候就不需要经书了，我就是经书！还需要你来渡我？",{"type":18,"tag":40,"props":15686,"children":15687},{},[15688],{"type":37,"value":15689},"其实这里还是可以白嫖的，因为取经工程这么大个项目，因为手底下一个小科长受贿就停摆了怎么行。这不是打燃灯古佛、如来、玉帝、观音、天庭的脸吗？就算是白嫖，如果脸皮厚点也是可以的，毕竟赚的可是扩充了佛教的地盘和影响力。",{"type":18,"tag":40,"props":15691,"children":15692},{},[15693],{"type":37,"value":15694},"唐僧几人虽然经历过凌云渡成为了佛，但还是道行不深需要他人渡己，所以看不懂无字经书。我觉得无字经书就是如来手下一大堆老干部拿着自己的意志然后贴一个如来法旨为所欲为。",{"type":18,"tag":71,"props":15696,"children":15697},{},[],{"type":18,"tag":32,"props":15699,"children":15701},{"id":15700},"九十六回-人生的选择-2",[15702],{"type":37,"value":15703},"九十六回 人生的选择 2",{"type":18,"tag":27,"props":15705,"children":15707},{":t":15706},"有时候看似选择很多，实际上只能选一个",[],{"type":18,"tag":40,"props":15709,"children":15710},{},[15711],{"type":37,"value":15712},"如果你取经走到了这里，那么再往前一走就是凌云渡。如果你不敢走独木桥，也不敢走无底船。那么大概率还是要回到寇员外这里的。也就是铜台府地灵县，\n寇员外本命寇洪，40 岁时立誓斋万僧，并在门前挂着 “万僧不阻” 四字大牌。如果要形容寇员外的家，那原文是这样描述的：",{"type":18,"tag":116,"props":15714,"children":15715},{},[15716,15721,15729,15734],{"type":18,"tag":40,"props":15717,"children":15718},{},[15719],{"type":37,"value":15720},"真个是红尘不到赛珍楼，",{"type":18,"tag":1086,"props":15722,"children":15723},{},[15724],{"type":18,"tag":189,"props":15725,"children":15726},{},[15727],{"type":37,"value":15728},"佛堂所在之处的宁静与超脱",{"type":18,"tag":40,"props":15730,"children":15731},{},[15732],{"type":37,"value":15733},"家奉佛堂欺上刹",{"type":18,"tag":1086,"props":15735,"children":15736},{},[15737],{"type":18,"tag":189,"props":15738,"children":15739},{},[15740],{"type":37,"value":15741},"其华丽程度甚至超过了正规的寺庙（“上刹” 指的是高级或有名的佛教寺院）",{"type":18,"tag":40,"props":15743,"children":15744},{},[15745],{"type":37,"value":15746},"非常碰巧的是，寇员外离自己定下的目标还差四位僧人。唐僧一行人正好补全了这个缺口，也就是说在此之前，大唐不仅只派出唐僧一人去完成取经目标：",{"type":18,"tag":116,"props":15748,"children":15749},{},[15750],{"type":18,"tag":40,"props":15751,"children":15752},{},[15753],{"type":37,"value":15754},"“弟子贱名寇洪，字大宽，虚度六十四岁。自四十岁上，许斋万僧，才做圆满。今已斋了二十四年，有一簿斋僧的帐目。连日无事，把斋过的僧名算一算，已斋过九千九百九十六员，止少四众，不得圆满。今日可可的天降老师四位，圆满万僧之数。请留尊讳，好歹宽住月馀，待做了圆满，弟子著轿马送老师上山。此间到灵山只有八百里路，苦不远也。”",{"type":18,"tag":40,"props":15756,"children":15757},{},[15758,15760,15766],{"type":37,"value":15759},"如果你将 ",{"type":18,"tag":268,"props":15761,"children":15763},{"className":15762},[],[15764],{"type":37,"value":15765},"九千九百九十六",{"type":37,"value":15767}," 进行搜索的话，那么你会发现，寇员外竟和灭法国国王重合了",{"type":18,"tag":116,"props":15769,"children":15770},{},[15771],{"type":18,"tag":40,"props":15772,"children":15773},{},[15774],{"type":37,"value":15775},"“那里去有五六里远近，乃是灭法国。那国王前生那世里结下冤仇，今世里无端造罪。二年前许下一个罗天大愿，要杀一万个和尚。这两年陆陆续续，杀够了九千九百九十六个无名和尚，只要等四个有名的和尚，凑成一万，好做圆满哩。你们去，若到城中，都是送命王菩萨。”",{"type":18,"tag":40,"props":15777,"children":15778},{},[15779],{"type":37,"value":15780},"这件事情告诉我们，有些时候。虽然看似机会有很多，大不了可以放弃。但如果真的放弃选择回头，那大概会万劫不复懵懵懂懂平庸的度过这波澜壮阔而又一事无成的一生。就像那些送命的僧人一样，即使从凌云渡退下来回到了地灵县，不听寇员外劝阻依然选择原路返回，到了灭法国了送命。",{"type":18,"tag":71,"props":15782,"children":15783},{},[],{"type":18,"tag":32,"props":15785,"children":15787},{"id":15786},"九十七回-自证陷阱-2",[15788],{"type":37,"value":15789},"九十七回 自证陷阱 2",{"type":18,"tag":27,"props":15791,"children":15793},{":t":15792},"老人被车撞，扶与不扶？",[],{"type":18,"tag":40,"props":15795,"children":15796},{},[15797],{"type":37,"value":15798},"首先我们都能认定的是，我们不是孙悟空。我们没有那种能力在人证物证俱在的情况下，证明自己的清白。哪怕这件事不是自己做的。在这种情况下，无论怎么解释，都会被人下定义，扣帽子，定立场。各种各样的诡辩层出不穷，在这样的环境下，最好的方式就是少说话，不说话。哪怕有人处在危险境地时，也不要轻易伸出援手。",{"type":18,"tag":40,"props":15800,"children":15801},{},[15802],{"type":37,"value":15803},"因为会被他人怀疑是你做的。不是你做的你为什么要帮助对方？你是不是心怀愧意？你是不是另有安排？这是不是你策划的？你有什么目的？你的动机是什么？你取得有关部门许可了吗？他们容许你发了吗？你背后是谁，发这些想做什么？你在讽刺谁？想颠覆什么？破坏什么？影射什么？",{"type":18,"tag":40,"props":15805,"children":15806},{},[15807],{"type":37,"value":15808},"指责和拷问完全不需要证据和理智，甚至不需要逻辑也不需要思考。如果你一一回答了，会被说你急了。也就是现在的网络君子六艺”：典、孝、急、乐、蚌、批、赢、麻：",{"type":18,"tag":116,"props":15810,"children":15811},{},[15812,15817,15822,15827,15832,15837,15842,15847],{"type":18,"tag":40,"props":15813,"children":15814},{},[15815],{"type":37,"value":15816},"当对方陈述观点时，无论观点对错，说“典”",{"type":18,"tag":40,"props":15818,"children":15819},{},[15820],{"type":37,"value":15821},"当对方支持自己不支持的人或事时，说“孝”",{"type":18,"tag":40,"props":15823,"children":15824},{},[15825],{"type":37,"value":15826},"当对方辩论，或是开始细致解说时，说“急”",{"type":18,"tag":40,"props":15828,"children":15829},{},[15830],{"type":37,"value":15831},"当自己难以理解对方表达的观点时，说“乐”",{"type":18,"tag":40,"props":15833,"children":15834},{},[15835],{"type":37,"value":15836},"当对方要求你表达不存在的观点时，说“蚌”",{"type":18,"tag":40,"props":15838,"children":15839},{},[15840],{"type":37,"value":15841},"当对方产生足以称为立场的观点时，说“批”",{"type":18,"tag":40,"props":15843,"children":15844},{},[15845],{"type":37,"value":15846},"当自己说出自认为一针见血的话时，说“赢”",{"type":18,"tag":40,"props":15848,"children":15849},{},[15850],{"type":37,"value":15851},"当无法对对方言论进行有效反驳时，说“麻”",{"type":18,"tag":40,"props":15853,"children":15854},{},[15855],{"type":37,"value":15856},"对于这种现象。并不能怪对方，只能引用《论语·颜渊》的一句话：",{"type":18,"tag":40,"props":15858,"children":15859},{},[15860,15862,15867],{"type":37,"value":15861},"季康子问政于孔子曰：“如杀无道，以就有道，何如？” 孔子对曰：“子为政，焉用杀？子欲善，而民善矣。",{"type":18,"tag":747,"props":15863,"children":15864},{},[15865],{"type":37,"value":15866},"君子之德风，小人之德草。草上之风，必偃。",{"type":37,"value":15868},"”",{"type":18,"tag":1086,"props":15870,"children":15871},{},[15872],{"type":18,"tag":189,"props":15873,"children":15874},{},[15875],{"type":37,"value":15876},"季康子问政：“如果杀掉恶人，延揽好人，怎样？” 孔子说：“您治理国家，怎麽要杀人呢？如果您善良，人民自然也就善良。领导的品德象风，群衆的品德象草，风在草上吹，草必随风倒。”",{"type":18,"tag":40,"props":15878,"children":15879},{},[15880],{"type":37,"value":15881},"哪怕强如孙悟空，都要要精心策划下、动用关系才能从自证陷阱走出。我们普通人没有定身法、也没有七十二变，接触不到玉帝那个层次的关系。也不能畅通 冥府，命地藏王菩萨办事。",{"title":8,"searchDepth":14369,"depth":14369,"links":15883},[],"content:book:journey-to-the-west.md","book/journey-to-the-west.md",{"_path":15887,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":15888,"description":8,"director":14461,"time":14462,"img":15889,"plan":14464,"body":15890,"_type":14453,"_id":16365,"_source":14455,"_file":16366,"_extension":14457},"/book/key-note","快捷键备忘录","10/1.png",{"type":15,"children":15891,"toc":16361},[15892],{"type":18,"tag":19,"props":15893,"children":15894},{":by":21,":img":22,":plan":23,":title":24},[15895,15898,15903,15906,15912,15916,15921,15923,16160,16163,16169,16173,16178,16191,16199,16212,16217,16220,16234,16242,16247,16252,16255,16261,16265,16296,16301,16309,16315,16319,16340,16348,16353],{"type":18,"tag":27,"props":15896,"children":15897},{":t":15888},[],{"type":18,"tag":40,"props":15899,"children":15900},{},[15901],{"type":37,"value":15902},"快捷键是一个非常棒的一个工具，但是我很多时候可能并不会那么经常使用，但又会在需要的时候重新拾起这方面的工作。因此我会将一些比较不常用，但又可能会在未来某个时间段重新使用的快捷键记录下来。",{"type":18,"tag":71,"props":15904,"children":15905},{},[],{"type":18,"tag":32,"props":15907,"children":15909},{"id":15908},"blender-1",[15910],{"type":37,"value":15911},"blender 1",{"type":18,"tag":27,"props":15913,"children":15915},{"t":15914},"Blender",[],{"type":18,"tag":40,"props":15917,"children":15918},{},[15919],{"type":37,"value":15920},"正如你所见这是建模工具，是不是很意外我其实也会建模，有不少项目需要 3D 的设计素材。包括在一些新兴前端项目中，可能会使用类似 Three.js 这样的技术栈，都是需要 blender 来进行配合的，虽然我一般都是 blender to spline。",{"type":37,"value":15922},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":15924,"children":15925},{},[15926,15946],{"type":18,"tag":395,"props":15927,"children":15928},{},[15929],{"type":18,"tag":399,"props":15930,"children":15931},{},[15932,15937,15941],{"type":18,"tag":403,"props":15933,"children":15934},{},[15935],{"type":37,"value":15936},"KEY",{"type":18,"tag":403,"props":15938,"children":15939},{},[15940],{"type":37,"value":3737},{"type":18,"tag":403,"props":15942,"children":15943},{},[15944],{"type":37,"value":15945},"EXP",{"type":18,"tag":414,"props":15947,"children":15948},{},[15949,15965,15981,15997,16013,16029,16045,16061,16077,16092,16110,16128,16145],{"type":18,"tag":399,"props":15950,"children":15951},{},[15952,15957,15962],{"type":18,"tag":421,"props":15953,"children":15954},{},[15955],{"type":37,"value":15956},"Shift+D",{"type":18,"tag":421,"props":15958,"children":15959},{},[15960],{"type":37,"value":15961},"复制对象",{"type":18,"tag":421,"props":15963,"children":15964},{},[],{"type":18,"tag":399,"props":15966,"children":15967},{},[15968,15973,15978],{"type":18,"tag":421,"props":15969,"children":15970},{},[15971],{"type":37,"value":15972},"F2",{"type":18,"tag":421,"props":15974,"children":15975},{},[15976],{"type":37,"value":15977},"重命名",{"type":18,"tag":421,"props":15979,"children":15980},{},[],{"type":18,"tag":399,"props":15982,"children":15983},{},[15984,15989,15994],{"type":18,"tag":421,"props":15985,"children":15986},{},[15987],{"type":37,"value":15988},"Control/Ctrol + I",{"type":18,"tag":421,"props":15990,"children":15991},{},[15992],{"type":37,"value":15993},"遮罩反转",{"type":18,"tag":421,"props":15995,"children":15996},{},[],{"type":18,"tag":399,"props":15998,"children":15999},{},[16000,16005,16010],{"type":18,"tag":421,"props":16001,"children":16002},{},[16003],{"type":37,"value":16004},"M",{"type":18,"tag":421,"props":16006,"children":16007},{},[16008],{"type":37,"value":16009},"遮罩",{"type":18,"tag":421,"props":16011,"children":16012},{},[],{"type":18,"tag":399,"props":16014,"children":16015},{},[16016,16021,16026],{"type":18,"tag":421,"props":16017,"children":16018},{},[16019],{"type":37,"value":16020},"Control/Ctrol + Space",{"type":18,"tag":421,"props":16022,"children":16023},{},[16024],{"type":37,"value":16025},"全屏窗口",{"type":18,"tag":421,"props":16027,"children":16028},{},[],{"type":18,"tag":399,"props":16030,"children":16031},{},[16032,16037,16042],{"type":18,"tag":421,"props":16033,"children":16034},{},[16035],{"type":37,"value":16036},"/",{"type":18,"tag":421,"props":16038,"children":16039},{},[16040],{"type":37,"value":16041},"单独显示当前 3D 资源",{"type":18,"tag":421,"props":16043,"children":16044},{},[],{"type":18,"tag":399,"props":16046,"children":16047},{},[16048,16053,16058],{"type":18,"tag":421,"props":16049,"children":16050},{},[16051],{"type":37,"value":16052},"N",{"type":18,"tag":421,"props":16054,"children":16055},{},[16056],{"type":37,"value":16057},"集合节点命名 tag",{"type":18,"tag":421,"props":16059,"children":16060},{},[],{"type":18,"tag":399,"props":16062,"children":16063},{},[16064,16069,16074],{"type":18,"tag":421,"props":16065,"children":16066},{},[16067],{"type":37,"value":16068},"Control/Ctrol + B",{"type":18,"tag":421,"props":16070,"children":16071},{},[16072],{"type":37,"value":16073},"倒角",{"type":18,"tag":421,"props":16075,"children":16076},{},[],{"type":18,"tag":399,"props":16078,"children":16079},{},[16080,16084,16089],{"type":18,"tag":421,"props":16081,"children":16082},{},[16083],{"type":37,"value":16004},{"type":18,"tag":421,"props":16085,"children":16086},{},[16087],{"type":37,"value":16088},"将选中的对象移动到某个集合中",{"type":18,"tag":421,"props":16090,"children":16091},{},[],{"type":18,"tag":399,"props":16093,"children":16094},{},[16095,16100,16105],{"type":18,"tag":421,"props":16096,"children":16097},{},[16098],{"type":37,"value":16099},"Command+L",{"type":18,"tag":421,"props":16101,"children":16102},{},[16103],{"type":37,"value":16104},"关联/传递数据",{"type":18,"tag":421,"props":16106,"children":16107},{},[16108],{"type":37,"value":16109},"将颜色关联到五个对象中",{"type":18,"tag":399,"props":16111,"children":16112},{},[16113,16118,16123],{"type":18,"tag":421,"props":16114,"children":16115},{},[16116],{"type":37,"value":16117},"Command+a",{"type":18,"tag":421,"props":16119,"children":16120},{},[16121],{"type":37,"value":16122},"应用",{"type":18,"tag":421,"props":16124,"children":16125},{},[16126],{"type":37,"value":16127},"如果改变了大小没有应用缩放，那么可能在 Shading 中无法显示",{"type":18,"tag":399,"props":16129,"children":16130},{},[16131,16135,16140],{"type":18,"tag":421,"props":16132,"children":16133},{},[16134],{"type":37,"value":16036},{"type":18,"tag":421,"props":16136,"children":16137},{},[16138],{"type":37,"value":16139},"单独查看",{"type":18,"tag":421,"props":16141,"children":16142},{},[16143],{"type":37,"value":16144},"如果全选可以全部查看",{"type":18,"tag":399,"props":16146,"children":16147},{},[16148,16152,16157],{"type":18,"tag":421,"props":16149,"children":16150},{},[16151],{"type":37,"value":16052},{"type":18,"tag":421,"props":16153,"children":16154},{},[16155],{"type":37,"value":16156},"显示、隐藏侧栏",{"type":18,"tag":421,"props":16158,"children":16159},{},[],{"type":18,"tag":71,"props":16161,"children":16162},{},[],{"type":18,"tag":32,"props":16164,"children":16166},{"id":16165},"neovim-2",[16167],{"type":37,"value":16168},"neovim 2",{"type":18,"tag":27,"props":16170,"children":16172},{"t":16171},"Neovim",[],{"type":18,"tag":40,"props":16174,"children":16175},{},[16176],{"type":37,"value":16177},"我之所以用 Neovim 当自己主要的编辑器，很大一部分原因是因为：“差生文具多” 这句话。其次是各种 Buff 叠加。自从使用 Neovim 作为主要的 Code 工具后发生了很多改变，比如接触到了很多 LSP，以及 Lua 相关的知识，甚至是 vim （在此之前我几乎认为 vim 只是个臭编辑文件的，没想到他抽象了很多系统层面的东西，可以更好的编写扩展，类似 Low code？）",{"type":18,"tag":40,"props":16179,"children":16180},{},[16181,16183,16189],{"type":37,"value":16182},"其次是记住了很多快捷键，以及命令，确实增加了一些效率。而且赏心悦目。目前我使用的是 Kitty + Neovim。由于 Kitty 不支持 Iterm2 的 Quake (全局热键召唤终端，听起来就很厉害), 所以我也搭配使用了 Hammerspoon，可以通过 ",{"type":18,"tag":268,"props":16184,"children":16186},{"className":16185},[],[16187],{"type":37,"value":16188},"control+a",{"type":37,"value":16190}," 来进行显示和隐藏 kitty，很舒服：",{"type":18,"tag":263,"props":16192,"children":16194},{"code":16193},"hs.hotkey.bind({\"ctrl\"}, \"a\", function()\n    local appName = \"kitty\"\n    local app = hs.application.find(appName)\n\n    if app then\n        if app:isFrontmost() then\n            app:hide()\n        else\n            app:unhide()\n            app:activate()\n        end\n    else\n        hs.application.launchOrFocus(appName)\n    end\nend)\n",[16195],{"type":18,"tag":268,"props":16196,"children":16197},{"__ignoreMap":8},[16198],{"type":37,"value":16193},{"type":18,"tag":40,"props":16200,"children":16201},{},[16202,16204,16210],{"type":37,"value":16203},"同时我还开启了 Kitty 的 ",{"type":18,"tag":268,"props":16205,"children":16207},{"className":16206},[],[16208],{"type":37,"value":16209},"cursor_trail",{"type":37,"value":16211}," ，可以让光标更加的丝滑，动画效果很好看。增加了一些 Buff。我觉得坚持使用 Neovim 的很大一部分原因是叠加了很多 Buff。诸如：Tech style 确实如果要定制一款自己用的舒服的 Neovim 需要一点时间。比如可以了解到 LSP（我理解的就是 Code 补全），以及很系统层面的（做插件需要用到）",{"type":18,"tag":40,"props":16213,"children":16214},{},[16215],{"type":37,"value":16216},"之所以将 Neovim 作为封面，因为似乎我花在上面改颜色的时间很长（当然后面可能会写一些插件，比如将我之前写的插件从支持 vscode 到支持 neovim 也说不定。）总之比我花在 Linux 定制桌面的时间要长（i3 真的很帅，很有一种 Tech style）",{"type":18,"tag":71,"props":16218,"children":16219},{},[],{"type":18,"tag":40,"props":16221,"children":16222},{},[16223,16225,16232],{"type":37,"value":16224},"我 Neovim 的开屏封面是一个 ASCII art 风格的一个曲线。只是随便 copy 的，感觉很有意境？或者很简洁也很好看。但 ",{"type":18,"tag":193,"props":16226,"children":16229},{"href":16227,"rel":16228},"https://github.com/HCHogan",[197],[16230],{"type":37,"value":16231},"Hank",{"type":37,"value":16233}," 说这个曲线很像目前在学的电力系统相关的概念：",{"type":18,"tag":263,"props":16235,"children":16237},{"code":16236},"\n     .-.                                                  \n    /   \\         .-.                                     \n   /     \\       /   \\       .-.     .-.     _  _         \n+-/-------\\-----/-----\\-----/---\\---/---\\---/-\\-/-\\/\\/--- \n /         \\   /       \\   /     '-'     -'               \n/           '-'                                           \n\n",[16238],{"type":18,"tag":268,"props":16239,"children":16240},{"__ignoreMap":8},[16241],{"type":37,"value":16236},{"type":18,"tag":40,"props":16243,"children":16244},{},[16245],{"type":37,"value":16246},"在电力系统中，这个曲线相当于一个 “同步振荡”，这个曲线表示的就是发电机受到干扰以后能不能自己恢复稳态，即：当一个同步发电机受到扰动（如短路、电压跌落或频率波动）后，它的转子角是否能回到一个稳定的平衡位置。",{"type":18,"tag":40,"props":16248,"children":16249},{},[16250],{"type":37,"value":16251},"如果能回到原来的状态，那叫做暂态稳定或小干扰稳定性（small-signal stability）。如果不能，那就是发电机失步（loss of synchronism），系统可能面临崩溃风险。",{"type":18,"tag":71,"props":16253,"children":16254},{},[],{"type":18,"tag":165,"props":16256,"children":16258},{"id":16257},"highlight-2",[16259],{"type":37,"value":16260},"highlight 2",{"type":18,"tag":27,"props":16262,"children":16264},{"t":16263,"type":311},":highlight",[],{"type":18,"tag":40,"props":16266,"children":16267},{},[16268,16270,16277,16279,16285,16287,16294],{"type":37,"value":16269},"虽然 Neovim 本身的配色方案很少，但加入了一些插件，配色方案很容易到 99999, 因此就需要 ",{"type":18,"tag":193,"props":16271,"children":16274},{"href":16272,"rel":16273},"https://neovim.io/doc/user/syntax.html#_13.-highlight-command",[197],[16275],{"type":37,"value":16276},"highlight",{"type":37,"value":16278}," 来查询一些颜色。之后我会用 ",{"type":18,"tag":268,"props":16280,"children":16282},{"className":16281},[],[16283],{"type":37,"value":16284}," vim.api.nvim_set_hl",{"type":37,"value":16286}," 无情的将他替换掉。(因为我使用的是 ",{"type":18,"tag":193,"props":16288,"children":16291},{"href":16289,"rel":16290},"https://github.com/jesseleite/nvim-noirbuddy",[197],[16292],{"type":37,"value":16293},"nvim-noirbuddy",{"type":37,"value":16295}," 也就是极简颜色，就一两个颜色，所以需要一个一个改（相当于自己做了个配色主题？)",{"type":18,"tag":105,"props":16297,"children":16300},{"text":16298,"url":16299},"由于我是双向识别障碍+色盲，所以在颜色很多的地方会感觉大脑凌乱，刚好 nvim-noirbuddy 这种单色的主题可以让我看清楚字。","12/1.png",[],{"type":18,"tag":263,"props":16302,"children":16304},{"code":16303},"local noiropts = {\n  preset = \"minimal\",\n  colors = {\n    primary = \"#00D9BD\",\n    background = \"#000000\",\n  },\n}\n\nreturn {\n  {\n    \"jesseleite/nvim-noirbuddy\",\n    dependencies = {\n      \"tjdevries/colorbuddy.nvim\",\n    },\n    lazy = false,\n    priority = 1000,\n    config = function()\n      require(\"noirbuddy\").setup(noiropts)\n    end,\n  },\n  {\n    \"LazyVim/LazyVim\",\n    opts = {\n      colorscheme = function()\n        require(\"noirbuddy\").setup(noiropts)\n        vim.api.nvim_set_hl(0, \"CursorLineNr\", { fg = \"#00D9BD\", bold = true })\n        vim.api.nvim_set_hl(0, \"WinSeparator\", { fg = \"#323232\", bg = \"NONE\" })\n     end,\n    },\n  },\n}\n",[16305],{"type":18,"tag":268,"props":16306,"children":16307},{"__ignoreMap":8},[16308],{"type":37,"value":16303},{"type":18,"tag":165,"props":16310,"children":16312},{"id":16311},"substitute-2",[16313],{"type":37,"value":16314},"Substitute 2",{"type":18,"tag":27,"props":16316,"children":16318},{"t":16317,"type":311},"Substitute",[],{"type":18,"tag":40,"props":16320,"children":16321},{},[16322,16324,16330,16332,16338],{"type":37,"value":16323},"其实看 ",{"type":18,"tag":193,"props":16325,"children":16328},{"href":16326,"rel":16327},"https://neovim.io/doc/user/change.html#%3Asubstitute",[197],[16329],{"type":37,"value":16317},{"type":37,"value":16331}," 原文就挺好的，但是我太懒了，English 很弱鸡。所以我的理解 ",{"type":18,"tag":268,"props":16333,"children":16335},{"className":16334},[],[16336],{"type":37,"value":16337},":s",{"type":37,"value":16339}," 就是将这个用于全局替换。",{"type":18,"tag":263,"props":16341,"children":16343},{"code":16342},":[range]s[ubstitute]/{pattern}/{string}/[flags] [count]\n",[16344],{"type":18,"tag":268,"props":16345,"children":16346},{"__ignoreMap":8},[16347],{"type":37,"value":16342},{"type":18,"tag":40,"props":16349,"children":16350},{},[16351],{"type":37,"value":16352},"虽然有很多参数，但我常用的就两个：",{"type":18,"tag":263,"props":16354,"children":16356},{"code":16355},":%s/foo/bar/g\n---\n:%g/foo/d\n",[16357],{"type":18,"tag":268,"props":16358,"children":16359},{"__ignoreMap":8},[16360],{"type":37,"value":16355},{"title":8,"searchDepth":14369,"depth":14369,"links":16362},[16363,16364],{"id":16257,"depth":14369,"text":16260},{"id":16311,"depth":14369,"text":16314},"content:book:key-note.md","book/key-note.md",{"_path":16368,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":16369,"description":8,"director":16370,"time":14462,"img":16371,"plan":14464,"body":16372,"_type":14453,"_id":16796,"_source":14455,"_file":16797,"_extension":14457},"/book/spine-2d","Spine 2D","My","15/1.png",{"type":15,"children":16373,"toc":16791},[16374],{"type":18,"tag":19,"props":16375,"children":16376},{":by":21,":img":22,":plan":23,":title":24},[16377,16381,16386,16419,16424,16429,16434,16439,16444,16457,16462,16465,16471,16475,16480,16519,16527,16530,16534,16540,16550,16564,16569,16583,16588,16610,16613,16619,16623,16637,16642,16656,16661,16719,16772,16777],{"type":18,"tag":27,"props":16378,"children":16380},{":t":16379},"为什么是 Spine 2D",[],{"type":18,"tag":40,"props":16382,"children":16383},{},[16384],{"type":37,"value":16385},"市面上同类型的产品有很多，例如 Live 2D、Pixelover、Rive 甚至是 Loongbones。有些效果 Adobe 的 AE 都可以做。但我为什么选择 Spine 2D 呢？无论如何，我看一个产品的角度是很片面的。我会从以下几点看待一个产品的实力：",{"type":18,"tag":185,"props":16387,"children":16388},{},[16389,16394,16399,16404,16409,16414],{"type":18,"tag":189,"props":16390,"children":16391},{},[16392],{"type":37,"value":16393},"官网设计",{"type":18,"tag":189,"props":16395,"children":16396},{},[16397],{"type":37,"value":16398},"公司 Logo",{"type":18,"tag":189,"props":16400,"children":16401},{},[16402],{"type":37,"value":16403},"宣传物料",{"type":18,"tag":189,"props":16405,"children":16406},{},[16407],{"type":37,"value":16408},"产品打磨程度",{"type":18,"tag":189,"props":16410,"children":16411},{},[16412],{"type":37,"value":16413},"定价",{"type":18,"tag":189,"props":16415,"children":16416},{},[16417],{"type":37,"value":16418},"功能",{"type":18,"tag":40,"props":16420,"children":16421},{},[16422],{"type":37,"value":16423},"一般的情况下，我会为设计买单。那么自然淘汰掉了 Loongbones。但根据产品的打磨程度来说，我认为 Spine 2D 是无可厚非的。三年前我有幸接触过 Spine 2D，我甚至没有学过，打开界面的那一刻。我就知道如何操作，如何做出交互、动画，骨骼的绑定。那么自然而然的，Live 2D 和 Spine 2D 会进入到我的决赛圈。",{"type":18,"tag":40,"props":16425,"children":16426},{},[16427],{"type":37,"value":16428},"之所以最后选择了 Spine 2D，更多的是它的 runtime 以及买断的定价、产品的打磨和稳定的 Team。虽然官网不比 Live 2D 的那么商业化，显得很「技术流」。但在游戏领域积攒了很多的口碑（在 YT 和 A 站上看到了很多大佬，🇰🇷 动画真的没的说），以及 4.2 带来的物理效果无非让 Spine 2D 上了一个台阶。无论是生态上、还是定价以及产品的打磨程度。",{"type":18,"tag":40,"props":16430,"children":16431},{},[16432],{"type":37,"value":16433},"Rive 很不错，都是很新的产品链生态，例如 Figma to Rive，而 Spine 还是 PS to Spine。Rive 的整个官网和宣发物料也很用心，特别是大量的案例和 Runtime 展示，而 Spine 有，但是很低调（官网和宣发都很低调，不如 Live 2D 和 Rive 的包装，但产品打磨的很好。）",{"type":18,"tag":40,"props":16435,"children":16436},{},[16437],{"type":37,"value":16438},"但我最后还是选择 Spine 2D（用户体验很好，还是买断制，runtime 也比较用心，虽然不是特别新，但生态和社区还是有点活力的）",{"type":18,"tag":40,"props":16440,"children":16441},{},[16442],{"type":37,"value":16443},"我是愿意为 Spine 2D 付费的。因为我可以做游戏素材，做动画、利用 runtime 做交互甚至是 GAME，可以接触和学习到 U3D\\UE、Godot 方面的技术栈。(虽然看起来是 49 年入国军，但当一个消磨时间的爱好也挺好的，会感觉时间过的很快，在没意思的时候还可以做一些鬼畜的表情取悦自己。)",{"type":18,"tag":1447,"props":16445,"children":16446},{"type":1449},[16447,16452],{"type":18,"tag":40,"props":16448,"children":16449},{},[16450],{"type":37,"value":16451},"不过 Pixelover 好像没有 runtime 只能做动画，但 2D 和 3D 的结合还是很有趣的。",{"type":18,"tag":40,"props":16453,"children":16454},{},[16455],{"type":37,"value":16456},"(2025-6-22 已经买了 Pixelover，看大佬说这个是转成完美像素风图片的，然后还可以做动画，骨骼甚至是 3D，唯一缺点就是有点卡)",{"type":18,"tag":40,"props":16458,"children":16459},{},[16460],{"type":37,"value":16461},"之后如果有机会，我会选择购买并体验下 Pixelover，感觉潜力也是很大的）但像素类型貌似很深受某些公司的喜欢，因为 AI 生成的像素风格会天然的有遮瑕效果，并且规避画师讨伐的风险。",{"type":18,"tag":71,"props":16463,"children":16464},{},[],{"type":18,"tag":32,"props":16466,"children":16468},{"id":16467},"runtime-1",[16469],{"type":37,"value":16470},"runtime 1",{"type":18,"tag":27,"props":16472,"children":16474},{"t":16473},"Spine 2D runtime",[],{"type":18,"tag":40,"props":16476,"children":16477},{},[16478],{"type":37,"value":16479},"在此之前我们需要阅读下一些文档（Spine 2D 本地化做的挺好的，有很多 Lang。）",{"type":18,"tag":185,"props":16481,"children":16482},{},[16483,16495,16507],{"type":18,"tag":189,"props":16484,"children":16485},{},[16486,16493],{"type":18,"tag":193,"props":16487,"children":16490},{"href":16488,"rel":16489},"https://zh.esotericsoftware.com/spine-skeleton-viewer#Skeleton-Viewer",[197],[16491],{"type":37,"value":16492},"Skeleton Viewer",{"type":37,"value":16494},": 测试从Spine导出的skeleton数据",{"type":18,"tag":189,"props":16496,"children":16497},{},[16498,16505],{"type":18,"tag":193,"props":16499,"children":16502},{"href":16500,"rel":16501},"https://zh.esotericsoftware.com/spine-json-format#JSON-%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F",[197],[16503],{"type":37,"value":16504},"JSON 导出文件格式",{"type":37,"value":16506},":  Spine 2D 导出后的 Json 数据格式和介绍",{"type":18,"tag":189,"props":16508,"children":16509},{},[16510,16517],{"type":18,"tag":193,"props":16511,"children":16514},{"href":16512,"rel":16513},"https://github.com/EsotericSoftware/spine-runtimes",[197],[16515],{"type":37,"value":16516},"spine-runtimes examples",{"type":37,"value":16518},": 一些 runtime 例子和 README。",{"type":18,"tag":1447,"props":16520,"children":16521},{"type":1449},[16522],{"type":18,"tag":40,"props":16523,"children":16524},{},[16525],{"type":37,"value":16526},"有一说一 Spine 2D 的 Runtime 是真的丰富哇，注释和文档都很全，很快就能上手了。",{"type":18,"tag":71,"props":16528,"children":16529},{},[],{"type":18,"tag":27,"props":16531,"children":16533},{"t":16532},"bilibili 小电视练习",[],{"type":18,"tag":165,"props":16535,"children":16537},{"id":16536},"bilibili-1",[16538],{"type":37,"value":16539},"bilibili 1",{"type":18,"tag":16541,"props":16542,"children":16549},"iframe",{"width":16543,"height":16544,"src":16545,"frameBorder":5037,"allow":16546,"referrerPolicy":16547,"allowFullScreen":16548},"100%",815,"https://stackblitz.com/edit/stackblitz-starters-b833pmbs?embed=1&file=index.html","accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share","strict-origin-when-cross-origin",true,[],{"type":18,"tag":40,"props":16551,"children":16552},{},[16553,16555,16562],{"type":37,"value":16554},"不要问为什么一个注释都没有，因为我用了 ",{"type":18,"tag":193,"props":16556,"children":16559},{"href":16557,"rel":16558},"https://github.com/jiangxue-analysis/nvim.comment-hide",[197],[16560],{"type":37,"value":16561},"nvim.comment-hide",{"type":37,"value":16563}," 把注释全部去掉了，只有我自己可以看到（Spine 2d 的 runtime 注释是非常多的，很方便学习）之所以是拿 bilibili 的小电视来练习。并不是我多么喜欢，多么高强度在这个地方冲浪。",{"type":18,"tag":105,"props":16565,"children":16568},{"text":16566,"url":16567},"图 1 | Octocats 盯着你的输入框.gif（超级可爱","15/img/1.gif",[],{"type":18,"tag":40,"props":16570,"children":16571},{},[16572,16574,16581],{"type":37,"value":16573},"更多的是看到了 Github 的 Octocats 交互设计，也就是 ",{"type":18,"tag":193,"props":16575,"children":16578},{"href":16576,"rel":16577},"https://github.com/copilot",[197],[16579],{"type":37,"value":16580},"copilot",{"type":37,"value":16582}," 页面下那个小章鱼盯着输入框的交互。当时的我觉得非常震撼，觉得很厉害。于是我买 spine 2D 的出发点也是实现类似的效果。（庆幸的是我实现了）",{"type":18,"tag":105,"props":16584,"children":16587},{"text":16585,"url":16586},"图 2 | 在很多 blog 中很常见的看板娘","15/img/2.gif",[],{"type":18,"tag":40,"props":16589,"children":16590},{},[16591,16593,16600,16602,16608],{"type":37,"value":16592},"当然还有类似的效果，例如 ",{"type":18,"tag":193,"props":16594,"children":16597},{"href":16595,"rel":16596},"https://github.com/stevenjoezhang/live2d-widget",[197],[16598],{"type":37,"value":16599},"看板娘",{"type":37,"value":16601}," 放到 blog，角色的表情，目光跟随鼠标的效果。之前的我看到类似的效果只知道是如何实现的，而不知道是如何做的。经过这次 Spine 2D 的学习，我已经了解了这种效果是如何实现、如果做的。通过 Spine2d runtime 让 Ik 跟随鼠标，如果点击则播放 ",{"type":18,"tag":268,"props":16603,"children":16605},{"className":16604},[],[16606],{"type":37,"value":16607},"blink",{"type":37,"value":16609}," 动画。",{"type":18,"tag":71,"props":16611,"children":16612},{},[],{"type":18,"tag":4071,"props":16614,"children":16616},{"id":16615},"动捕-2",[16617],{"type":37,"value":16618},"动捕 2",{"type":18,"tag":27,"props":16620,"children":16622},{"t":16621},"bilibili 小电视动捕",[],{"type":18,"tag":40,"props":16624,"children":16625},{},[16626,16628,16635],{"type":37,"value":16627},"有一说一上面的那个交互效果就已经回本了，但是我还想要做什么 VTB（没准以后公司倒闭了吃不上饭了还能 VTB 乞讨）利用 spine 的 runtime 是可以实现的，所以需要一个动捕的 package，有很多哇，我选择了 Google 的 ",{"type":18,"tag":193,"props":16629,"children":16632},{"href":16630,"rel":16631},"https://mediapipe-studio.webapps.google.com/demo/face_landmarker",[197],[16633],{"type":37,"value":16634},"mediapipe",{"type":37,"value":16636},"（因为有很多 examples",{"type":18,"tag":105,"props":16638,"children":16641},{"text":16639,"url":16640},"图 3 | Apple Memoji（很掉帧，因为我压缩了\u003Cbr>WSJ NEWS:Memoji:From Old Japan to a Custom Apple Innovation","15/img/3.gif",[],{"type":18,"tag":40,"props":16643,"children":16644},{},[16645,16647,16654],{"type":37,"value":16646},"动捕技术已经非常的流水线了，普通的 project 依赖于大厂的 api 就可以完成很好的动作效果，而且已经常见于生活当中。例如 Apple 的 ",{"type":18,"tag":193,"props":16648,"children":16651},{"href":16649,"rel":16650},"https://support.apple.com/zh-hk/111115",[197],[16652],{"type":37,"value":16653},"Memoji",{"type":37,"value":16655}," 很常见。还是要摸一下类似的 demo 方便我以后做 VTB 的时候自己弄这些，所以就拿 bilibili 小电视练手好了。",{"type":18,"tag":105,"props":16657,"children":16660},{"text":16658,"url":16659},"图 4 | 就单个眨眼的效果（处于静态，就单独眨眼哇），可以看到 eyeBink 的数值的变动 SOURCE | \u003Ca href=\"https://codepen.io/mediapipe-preview/pen/OJBVQJm\">MediaPipe Face Landmarker Task for web\u003C/a>","15/img/4.gif",[],{"type":18,"tag":40,"props":16662,"children":16663},{},[16664,16666,16672,16674,16680,16682,16687,16689,16695,16697,16703,16705,16711,16713,16718],{"type":37,"value":16665},"原理非常简单，还是 ",{"type":18,"tag":268,"props":16667,"children":16669},{"className":16668},[],[16670],{"type":37,"value":16671},"look_main",{"type":37,"value":16673}," skeleton 跟随鼠标移动，但利用的是 ",{"type":18,"tag":268,"props":16675,"children":16677},{"className":16676},[],[16678],{"type":37,"value":16679},"window.electronAPI",{"type":37,"value":16681},"，然后如果眨眼了就执行下 ",{"type":18,"tag":268,"props":16683,"children":16685},{"className":16684},[],[16686],{"type":37,"value":16607},{"type":37,"value":16688}," animationState。动捕方面，假设 ",{"type":18,"tag":268,"props":16690,"children":16692},{"className":16691},[],[16693],{"type":37,"value":16694},"eyeBlinkLeft",{"type":37,"value":16696}," 的数值正常是 ",{"type":18,"tag":268,"props":16698,"children":16700},{"className":16699},[],[16701],{"type":37,"value":16702},"0.3",{"type":37,"value":16704}," 那么如果是 ",{"type":18,"tag":268,"props":16706,"children":16708},{"className":16707},[],[16709],{"type":37,"value":16710},"0.7",{"type":37,"value":16712}," 那就是眨眼的动作，因此执行 ",{"type":18,"tag":268,"props":16714,"children":16716},{"className":16715},[],[16717],{"type":37,"value":16607},{"type":37,"value":3150},{"type":18,"tag":1447,"props":16720,"children":16721},{"type":1449},[16722,16750],{"type":18,"tag":40,"props":16723,"children":16724},{},[16725,16727,16732,16734,16740,16742,16748],{"type":37,"value":16726},"我看有些 vtb 眨眼的时候一个眼睛眨一个眼睛没眨, 估计判断的数值比较多，比如 ",{"type":18,"tag":268,"props":16728,"children":16730},{"className":16729},[],[16731],{"type":37,"value":16694},{"type":37,"value":16733}," and ",{"type":18,"tag":268,"props":16735,"children":16737},{"className":16736},[],[16738],{"type":37,"value":16739},"eyeBlinkRight",{"type":37,"value":16741}," 甚至还有很多 ",{"type":18,"tag":268,"props":16743,"children":16745},{"className":16744},[],[16746],{"type":37,"value":16747},"eyeLook",{"type":37,"value":16749}," 的参数。",{"type":18,"tag":40,"props":16751,"children":16752},{},[16753,16755,16762,16763,16770],{"type":37,"value":16754},"之所以还是面向鼠标，单纯是我懒得写算法，会比较复杂（不适合我这种做个 demo 了解下流程的），选 APi 的时候太快了，应该选择 ",{"type":18,"tag":193,"props":16756,"children":16759},{"href":16757,"rel":16758},"https://mediapipe-studio.webapps.google.com/studio/demo/face_detector",[197],[16760],{"type":37,"value":16761}," Face Detection ",{"type":37,"value":9637},{"type":18,"tag":193,"props":16764,"children":16767},{"href":16765,"rel":16766},"https://mediapipe-studio.webapps.google.com/studio/demo/face_landmarker",[197],[16768],{"type":37,"value":16769}," Face Landmark Detection ",{"type":37,"value":16771}," 太多参数了（",{"type":18,"tag":105,"props":16773,"children":16776},{"text":16774,"url":16775},"图 5 | 最终的实现效果，利用 mediapipe + spine 2d runtime + electron","15/img/5.gif",[],{"type":18,"tag":40,"props":16778,"children":16779},{},[16780,16782,16789],{"type":37,"value":16781},"在众多的跨平台框架中，我选择了 ",{"type":18,"tag":193,"props":16783,"children":16786},{"href":16784,"rel":16785},"https://www.electronjs.org/",[197],[16787],{"type":37,"value":16788},"electronjs",{"type":37,"value":16790},"。不是因为我多喜欢，也不是我之前用过，而是我以前在 Linux 上看到过他们的 Logo。给我留下了深刻的印象。当时并不知道这是什么，只知道 website 和 logo 还挺特别的。多年后我才知道这个是做什么的，算是弥补了童年的遗憾。",{"title":8,"searchDepth":14369,"depth":14369,"links":16792},[16793],{"id":16536,"depth":14369,"text":16539,"children":16794},[16795],{"id":16615,"depth":4058,"text":16618},"content:book:spine-2d.md","book/spine-2d.md",{"_path":16799,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":16800,"description":8,"director":16801,"time":14462,"img":16802,"plan":14464,"body":16803,"_type":14453,"_id":17007,"_source":14455,"_file":17008,"_extension":14457},"/book/system-config","System config","MY","17/1.png",{"type":15,"children":16804,"toc":17005},[16805],{"type":18,"tag":19,"props":16806,"children":16807},{":by":21,":img":22,":plan":23,":title":24},[16808,16812,16818,16850,16864,16877,16880,16888,16889,16980],{"type":18,"tag":27,"props":16809,"children":16811},{"t":16810},"Nix",[],{"type":18,"tag":32,"props":16813,"children":16815},{"id":16814},"为什么用-nix-2",[16816],{"type":37,"value":16817},"为什么用 Nix? 2",{"type":18,"tag":40,"props":16819,"children":16820},{},[16821,16823,16830,16832,16839,16841,16848],{"type":37,"value":16822},"也是视奸 群u萌 看到的，了解了下发现是 2003 年就开始发布，至今已经 22 年了。（第一印象还以为是一个发行版，确实有，",{"type":18,"tag":193,"props":16824,"children":16827},{"href":16825,"rel":16826},"https://nixos.org/",[197],[16828],{"type":37,"value":16829},"NixOS",{"type":37,"value":16831},"）。再看看自己的系统环境确实有点乱，于是就有了重装系统的念头。新的系统毫不犹豫就用上了 Nix，不过我用的是 ",{"type":18,"tag":193,"props":16833,"children":16836},{"href":16834,"rel":16835},"https://github.com/DeterminateSystems/nix-installer",[197],[16837],{"type":37,"value":16838},"DeterminateSystems",{"type":37,"value":16840}," 家的（好像是对 macOS 有优化？）个人感觉 Nix 貌似还挺成熟了，我看很多 community contributor 都是 ",{"type":18,"tag":193,"props":16842,"children":16845},{"href":16843,"rel":16844},"https://www.tweag.io/",[197],[16846],{"type":37,"value":16847},"tweag",{"type":37,"value":16849}," 的员工？",{"type":18,"tag":11610,"props":16851,"children":16853},{"by":14178,"topic":16852},"Haskell Criticism",[16854,16859],{"type":18,"tag":40,"props":16855,"children":16856},{},[16857],{"type":37,"value":16858},"Haskell's build tool, Cabal, has historically been criticized for poorly handling multiple versions of the same library, a problem known as \"Cabal hell\". The Stackage server and Stack build tool were made in response to these criticisms. Cabal has since addressed this problem by borrowing ideas from a package manager named Nix, with the new approach becoming the default in 2019.",{"type":18,"tag":40,"props":16860,"children":16861},{},[16862],{"type":37,"value":16863},"Haskell 的构建工具 Cabal 历来因处理同一库的多个版本不力而受到批评，这个问题被称为“Cabal 地狱”。Stackage 服务器和 Stack 构建工具就是为了回应这些批评而制作的。 此后，Cabal 通过借鉴名为 Nix 的包管理器的想法来解决这个问题， 新方法在 2019 年成为默认方法。",{"type":18,"tag":40,"props":16865,"children":16866},{},[16867,16869,16875],{"type":37,"value":16868},"我发现了很多用 Haskell 的同时也会是 Nix 的使用者。甚至有些给 NixOS contributor 的也会是 Haskell contributor。一开始还不知道为什么，直到看到了 ",{"type":18,"tag":268,"props":16870,"children":16872},{"className":16871},[],[16873],{"type":37,"value":16874},"\"Cabal hell\"",{"type":37,"value":16876}," 这个词才了解到了 Nix 和 Haskell 之间的渊源。",{"type":18,"tag":71,"props":16878,"children":16879},{},[],{"type":18,"tag":1447,"props":16881,"children":16882},{"type":1449},[16883],{"type":18,"tag":40,"props":16884,"children":16885},{},[16886],{"type":37,"value":16887},"记录一些自己常用的（用的时候可以翻翻",{"type":37,"value":5371},{"type":18,"tag":391,"props":16890,"children":16891},{},[16892,16913],{"type":18,"tag":395,"props":16893,"children":16894},{},[16895],{"type":18,"tag":399,"props":16896,"children":16897},{},[16898,16903,16908],{"type":18,"tag":403,"props":16899,"children":16900},{},[16901],{"type":37,"value":16902},"command",{"type":18,"tag":403,"props":16904,"children":16905},{},[16906],{"type":37,"value":16907},"info",{"type":18,"tag":403,"props":16909,"children":16910},{},[16911],{"type":37,"value":16912},"e.g",{"type":18,"tag":414,"props":16914,"children":16915},{},[16916,16939],{"type":18,"tag":399,"props":16917,"children":16918},{},[16919,16924,16934],{"type":18,"tag":421,"props":16920,"children":16921},{},[16922],{"type":37,"value":16923},"nix-shell",{"type":18,"tag":421,"props":16925,"children":16926},{},[16927,16929],{"type":37,"value":16928},"创建一个隔离环境 或是 ",{"type":18,"tag":747,"props":16930,"children":16931},{},[16932],{"type":37,"value":16933},"以使用声明式配置文件创建可重现的 shell 环境",{"type":18,"tag":421,"props":16935,"children":16936},{},[16937],{"type":37,"value":16938},"nix-shell -p nodejs --run 'node -v'",{"type":18,"tag":399,"props":16940,"children":16941},{},[16942,16947,16959],{"type":18,"tag":421,"props":16943,"children":16944},{},[16945],{"type":37,"value":16946},"nix-collect-garbage -d",{"type":18,"tag":421,"props":16948,"children":16949},{},[16950,16952,16957],{"type":37,"value":16951},"快速清理环境(但下次再进到 ",{"type":18,"tag":268,"props":16953,"children":16955},{"className":16954},[],[16956],{"type":37,"value":16923},{"type":37,"value":16958}," 环境下载有点慢)",{"type":18,"tag":421,"props":16960,"children":16961},{},[16962,16964,16970,16972,16978],{"type":37,"value":16963},"有点像是 ",{"type":18,"tag":268,"props":16965,"children":16967},{"className":16966},[],[16968],{"type":37,"value":16969},"nix-env",{"type":37,"value":16971}," & ",{"type":18,"tag":268,"props":16973,"children":16975},{"className":16974},[],[16976],{"type":37,"value":16977},"nix-store",{"type":37,"value":16979}," 的结合体哈哈好爽。",{"type":18,"tag":40,"props":16981,"children":16982},{},[16983,16985,16990,16992,16997,16999],{"type":37,"value":16984},"不过对我来说 ",{"type":18,"tag":268,"props":16986,"children":16988},{"className":16987},[],[16989],{"type":37,"value":16923},{"type":37,"value":16991}," 貌似就很满足我的需求了。剩下的 ",{"type":18,"tag":268,"props":16993,"children":16995},{"className":16994},[],[16996],{"type":37,"value":16969},{"type":37,"value":16998},"（升级/卸载）只是 ​​在借阅记录（profile generation）中划掉某本书的名字​​，但书（包）仍然放在书架上 ",{"type":18,"tag":268,"props":17000,"children":17002},{"className":17001},[],[17003],{"type":37,"value":17004},"（/nix/store）",{"title":8,"searchDepth":14369,"depth":14369,"links":17006},[],"content:book:system-config.md","book/system-config.md",{"_path":17010,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":17011,"description":8,"director":17012,"time":14462,"img":17013,"plan":17014,"body":17015,"_type":14453,"_id":18204,"_source":14455,"_file":18205,"_extension":14457},"/book/unicode-explained","Unicode Explained","Jukka K. Korpela","11/1.png","0,71",{"type":15,"children":17016,"toc":18201},[17017],{"type":18,"tag":19,"props":17018,"children":17019},{":by":21,":img":22,":plan":23,":title":24},[17020,17024,17066,17074,17088,17091,17097,17101,17153,17165,17179,17194,17197,17203,17207,17240,17248,17278,17286,17291,17299,17300,17618,17666,17687,17695,17698,17704,17708,17709,17984,17989,17997,18020,18021,18108,18121,18129,18134,18149,18173],{"type":18,"tag":27,"props":17021,"children":17023},{"t":17022},"为什么要看这本书？",[],{"type":18,"tag":40,"props":17025,"children":17026},{},[17027,17029,17035,17037,17043,17045,17051,17053,17058,17060],{"type":37,"value":17028},"起因是在 neovim 群中看到了群友的名字是 ",{"type":18,"tag":268,"props":17030,"children":17032},{"className":17031},[],[17033],{"type":37,"value":17034},"panic!(\"\")",{"type":37,"value":17036}," 每次 @ 他的时候文字都会被 ",{"type":18,"tag":268,"props":17038,"children":17040},{"className":17039},[],[17041],{"type":37,"value":17042},"\"\"",{"type":37,"value":17044}," 包裹起来。",{"type":18,"tag":268,"props":17046,"children":17048},{"className":17047},[],[17049],{"type":37,"value":17050},"@panic!(\"类似你看到的这个情况，这个问题不仅是在群组，就算在浏览器、终端环境下都是存在的。\")",{"type":37,"value":17052}," 实际上我并没有将文字写在 ",{"type":18,"tag":268,"props":17054,"children":17056},{"className":17055},[],[17057],{"type":37,"value":17042},{"type":37,"value":17059}," 中，而是默认这样的，这个用到的就是 ",{"type":18,"tag":268,"props":17061,"children":17063},{"className":17062},[],[17064],{"type":37,"value":17065},"U+2067",{"type":18,"tag":263,"props":17067,"children":17069},{"code":17068},"panic!(\"\\U+2067\")\n",[17070],{"type":18,"tag":268,"props":17071,"children":17072},{"__ignoreMap":8},[17073],{"type":37,"value":17068},{"type":18,"tag":40,"props":17075,"children":17076},{},[17077,17079,17086],{"type":37,"value":17078},"不过 unicode 在日常生活中是经常应用的, 比如在 bilibili 就经常有用 Unicode 字符来弄一些标题，例如: 𝑾𝒆 𝑨𝒓𝒆 𝑳𝒐𝒔𝒆𝒓、𝓦𝓮 𝓐𝓻𝓮 𝓛𝓸𝓼𝓮𝓻 显得与众不同，有时候也会有歌名用 unicode 字符显得比较独特。这些都可以通过 ",{"type":18,"tag":193,"props":17080,"children":17083},{"href":17081,"rel":17082},"https://qaz.wtf/u/convert.cgi?text=We+Are+Loser",[197],[17084],{"type":37,"value":17085},"Unicode Text Converter",{"type":37,"value":17087}," 来进行生成和转换。",{"type":18,"tag":71,"props":17089,"children":17090},{},[],{"type":18,"tag":32,"props":17092,"children":17094},{"id":17093},"trojan-source-1",[17095],{"type":37,"value":17096},"Trojan Source 1",{"type":18,"tag":27,"props":17098,"children":17100},{"t":17099},"Trojan Source",[],{"type":18,"tag":40,"props":17102,"children":17103},{},[17104,17106,17113,17115,17120,17122,17129,17131,17138,17140,17145,17147,17152],{"type":37,"value":17105},"所以我尝试 Google 了很多次，但都是搜索不到相关的，更多的是 rust 和 go 相关的结果。之后",{"type":18,"tag":193,"props":17107,"children":17110},{"href":17108,"rel":17109},"https://github.com/liinyun",[197],[17111],{"type":37,"value":17112},"灵云",{"type":37,"value":17114},"说这是 ",{"type":18,"tag":747,"props":17116,"children":17117},{},[17118],{"type":37,"value":17119},"UTF-8的奇妙魔力",{"type":37,"value":17121},"，我才详细的了解了 unicode。并且找到了一个非常有趣的 CVE 编号，即 ",{"type":18,"tag":193,"props":17123,"children":17126},{"href":17124,"rel":17125},"https://nvd.nist.gov/vuln/detail/CVE-2021-42574",[197],[17127],{"type":37,"value":17128},"CVE-2021-42574",{"type":37,"value":17130}," 这种类似的缺陷叫作 ",{"type":18,"tag":193,"props":17132,"children":17135},{"href":17133,"rel":17134},"https://en.wikipedia.org/wiki/Trojan_Source",[197],[17136],{"type":37,"value":17137},"\"Trojan Source\"",{"type":37,"value":17139},"，中文直译就是 ",{"type":18,"tag":747,"props":17141,"children":17142},{},[17143],{"type":37,"value":17144},"木马来源",{"type":37,"value":17146},"，泛指 ",{"type":18,"tag":747,"props":17148,"children":17149},{},[17150],{"type":37,"value":17151},"不可见的漏洞",{"type":37,"value":3150},{"type":18,"tag":40,"props":17154,"children":17155},{},[17156,17158,17163],{"type":37,"value":17157},"维基百科的解释是：\"它滥用 Unicode 的双向字符来显示源代码 ，而不是源代码的实际执行。",{"type":18,"tag":747,"props":17159,"children":17160},{},[17161],{"type":37,"value":17162},"该漏洞利用了不同阅读方向的书写脚本在计算机上的显示和编码方式。",{"type":37,"value":17164},"\" 根据维基百科提供的详细信息，貌似可以快速入门 unicode。但我的计划是先阅读这本书，了解 unicode 做什么，有什么用在进一步学习。",{"type":18,"tag":40,"props":17166,"children":17167},{},[17168,17170,17177],{"type":37,"value":17169},"最近有了一个利用 unicode 进行供应链攻击的例子，攻击者利用 Unicode 字符插入不可见的数据，但在 Github 中看起来是和原来一样的，只是不可见。详情可以阅读 ",{"type":18,"tag":193,"props":17171,"children":17174},{"href":17172,"rel":17173},"https://github.blog/changelog/2025-05-01-github-now-provides-a-warning-about-hidden-unicode-text/",[197],[17175],{"type":37,"value":17176},"GitHub now provides a warning about hidden Unicode text",{"type":37,"value":17178},"\n有趣的是，这一问题导致了 Github 所有使用 Unicode 特殊字符的提交被严格限制，如果提交的信息包含 unicode code，那么会有一个警告：",{"type":18,"tag":116,"props":17180,"children":17181},{"type":2162},[17182],{"type":18,"tag":40,"props":17183,"children":17184},{},[17185,17187],{"type":37,"value":17186},"This diff contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. ",{"type":18,"tag":193,"props":17188,"children":17191},{"href":17189,"rel":17190},"https://github.blog/changelog/2021-10-31-warning-about-bidirectional-unicode-text/",[197],[17192],{"type":37,"value":17193},"Learn more about bidirectional Unicode characters",{"type":18,"tag":71,"props":17195,"children":17196},{},[],{"type":18,"tag":32,"props":17198,"children":17200},{"id":17199},"转义-3",[17201],{"type":37,"value":17202},"转义 3",{"type":18,"tag":27,"props":17204,"children":17206},{"t":17205},"Unicode 转义序列",[],{"type":18,"tag":40,"props":17208,"children":17209},{},[17210,17212,17219,17220,17225,17227,17238],{"type":37,"value":17211},"Unicode 转义序列又称之为 Escaped Unicode characters, 可以参考 ",{"type":18,"tag":193,"props":17213,"children":17216},{"href":17214,"rel":17215},"https://en.wikipedia.org/wiki/Escape_character",[197],[17217],{"type":37,"value":17218},"Escape character ",{"type":37,"value":2888},{"type":18,"tag":747,"props":17221,"children":17222},{},[17223],{"type":37,"value":17224},"。就是说将一个字符转义成另一个编码",{"type":37,"value":17226}," 的过程, 基于 Unicode 的各种编码，可以做很多事情。这也意味着需要做很多类似转义的操作，可以用在线工具或 code lang 来完成这个过程，如使用 PY 的 ",{"type":18,"tag":193,"props":17228,"children":17231},{"href":17229,"rel":17230},"https://docs.python.org/3/howto/unicode.html",[197],[17232],{"type":18,"tag":268,"props":17233,"children":17235},{"className":17234},[],[17236],{"type":37,"value":17237},"s.encode",{"type":37,"value":17239}," 对象方法：",{"type":18,"tag":263,"props":17241,"children":17243},{"code":17242},"s = '你好'\nunicode_str = s.encode('unicode_escape').decode()\nprint(unicode_str)  # 输出: \\u4f60\\u597d\n",[17244],{"type":18,"tag":268,"props":17245,"children":17246},{"__ignoreMap":8},[17247],{"type":37,"value":17242},{"type":18,"tag":40,"props":17249,"children":17250},{},[17251,17253,17259,17261,17268,17270,17276],{"type":37,"value":17252},"之后，我们拿到 ",{"type":18,"tag":268,"props":17254,"children":17256},{"className":17255},[],[17257],{"type":37,"value":17258},"\\u4f60\\u597d",{"type":37,"value":17260}," 到 ",{"type":18,"tag":193,"props":17262,"children":17265},{"href":17263,"rel":17264},"https://gchq.github.io/CyberChef/",[197],[17266],{"type":37,"value":17267},"CyberChef",{"type":37,"value":17269}," 来进行添加 Unicode 字符，之后将 output 结果 copy 到剪贴板中即可使用（需要添加 ",{"type":18,"tag":268,"props":17271,"children":17273},{"className":17272},[],[17274],{"type":37,"value":17275},"Unescape string",{"type":37,"value":17277}," 模块）例如：",{"type":18,"tag":263,"props":17279,"children":17281},{"code":17280},"\\u5b87\\u5b99\\u65e0\\u654c\\u67e0\\u6aac\\u738b\\u2067\\uD83C\\uDF4B\n",[17282],{"type":18,"tag":268,"props":17283,"children":17284},{"__ignoreMap":8},[17285],{"type":37,"value":17280},{"type":18,"tag":40,"props":17287,"children":17288},{},[17289],{"type":37,"value":17290},"这是是一串 Unicode 字符，转义成字符串就是：",{"type":18,"tag":263,"props":17292,"children":17294},{"code":17293},"宇宙无敌柠檬王⁧🍋\n",[17295],{"type":18,"tag":268,"props":17296,"children":17297},{"__ignoreMap":8},[17298],{"type":37,"value":17293},{"type":37,"value":15922},{"type":18,"tag":391,"props":17301,"children":17302},{},[17303,17332],{"type":18,"tag":395,"props":17304,"children":17305},{},[17306],{"type":18,"tag":399,"props":17307,"children":17308},{},[17309,17314,17318,17322,17327],{"type":18,"tag":403,"props":17310,"children":17311},{},[17312],{"type":37,"value":17313},"字符",{"type":18,"tag":403,"props":17315,"children":17316},{},[17317],{"type":37,"value":3320},{"type":18,"tag":403,"props":17319,"children":17320},{},[17321],{"type":37,"value":1596},{"type":18,"tag":403,"props":17323,"children":17324},{},[17325],{"type":37,"value":17326},"bidi 类别",{"type":18,"tag":403,"props":17328,"children":17329},{},[17330],{"type":37,"value":17331},"简介说明",{"type":18,"tag":414,"props":17333,"children":17334},{},[17335,17363,17398,17431,17465,17498,17525,17558,17591],{"type":18,"tag":399,"props":17336,"children":17337},{},[17338,17343,17348,17353,17358],{"type":18,"tag":421,"props":17339,"children":17340},{},[17341],{"type":37,"value":17342},"u+200e",{"type":18,"tag":421,"props":17344,"children":17345},{},[17346],{"type":37,"value":17347},"left-to-right mark (lrm)",{"type":18,"tag":421,"props":17349,"children":17350},{},[17351],{"type":37,"value":17352},"cf",{"type":18,"tag":421,"props":17354,"children":17355},{},[17356],{"type":37,"value":17357},"l",{"type":18,"tag":421,"props":17359,"children":17360},{},[17361],{"type":37,"value":17362},"插入一个不可见的 ltr 方向提示符",{"type":18,"tag":399,"props":17364,"children":17365},{},[17366,17371,17376,17380,17385],{"type":18,"tag":421,"props":17367,"children":17368},{},[17369],{"type":37,"value":17370},"u+202a",{"type":18,"tag":421,"props":17372,"children":17373},{},[17374],{"type":37,"value":17375},"left-to-right embedding (lre)",{"type":18,"tag":421,"props":17377,"children":17378},{},[17379],{"type":37,"value":17352},{"type":18,"tag":421,"props":17381,"children":17382},{},[17383],{"type":37,"value":17384},"lre",{"type":18,"tag":421,"props":17386,"children":17387},{},[17388,17390,17396],{"type":37,"value":17389},"开始一个嵌入式 ltr 片段，需 ",{"type":18,"tag":268,"props":17391,"children":17393},{"className":17392},[],[17394],{"type":37,"value":17395},"pdf",{"type":37,"value":17397}," 结束",{"type":18,"tag":399,"props":17399,"children":17400},{},[17401,17406,17411,17415,17420],{"type":18,"tag":421,"props":17402,"children":17403},{},[17404],{"type":37,"value":17405},"u+202d",{"type":18,"tag":421,"props":17407,"children":17408},{},[17409],{"type":37,"value":17410},"left-to-right override (lro)",{"type":18,"tag":421,"props":17412,"children":17413},{},[17414],{"type":37,"value":17352},{"type":18,"tag":421,"props":17416,"children":17417},{},[17418],{"type":37,"value":17419},"lro",{"type":18,"tag":421,"props":17421,"children":17422},{},[17423,17425,17430],{"type":37,"value":17424},"强制后续文本以 ltr 显示，需 ",{"type":18,"tag":268,"props":17426,"children":17428},{"className":17427},[],[17429],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17432,"children":17433},{},[17434,17439,17444,17448,17453],{"type":18,"tag":421,"props":17435,"children":17436},{},[17437],{"type":37,"value":17438},"u+2066",{"type":18,"tag":421,"props":17440,"children":17441},{},[17442],{"type":37,"value":17443},"left-to-right isolate (lri)",{"type":18,"tag":421,"props":17445,"children":17446},{},[17447],{"type":37,"value":17352},{"type":18,"tag":421,"props":17449,"children":17450},{},[17451],{"type":37,"value":17452},"lri",{"type":18,"tag":421,"props":17454,"children":17455},{},[17456,17458,17464],{"type":37,"value":17457},"开始 ltr 隔离段，推荐用法，需 ",{"type":18,"tag":268,"props":17459,"children":17461},{"className":17460},[],[17462],{"type":37,"value":17463},"pdi",{"type":37,"value":17397},{"type":18,"tag":399,"props":17466,"children":17467},{},[17468,17473,17478,17482,17487],{"type":18,"tag":421,"props":17469,"children":17470},{},[17471],{"type":37,"value":17472},"u+2067",{"type":18,"tag":421,"props":17474,"children":17475},{},[17476],{"type":37,"value":17477},"right-to-left isolate (rli)",{"type":18,"tag":421,"props":17479,"children":17480},{},[17481],{"type":37,"value":17352},{"type":18,"tag":421,"props":17483,"children":17484},{},[17485],{"type":37,"value":17486},"rli",{"type":18,"tag":421,"props":17488,"children":17489},{},[17490,17492,17497],{"type":37,"value":17491},"开始 rtl 隔离段，推荐用法，需 ",{"type":18,"tag":268,"props":17493,"children":17495},{"className":17494},[],[17496],{"type":37,"value":17463},{"type":37,"value":17397},{"type":18,"tag":399,"props":17499,"children":17500},{},[17501,17506,17511,17515,17520],{"type":18,"tag":421,"props":17502,"children":17503},{},[17504],{"type":37,"value":17505},"u+200f",{"type":18,"tag":421,"props":17507,"children":17508},{},[17509],{"type":37,"value":17510},"right-to-left mark (rlm)",{"type":18,"tag":421,"props":17512,"children":17513},{},[17514],{"type":37,"value":17352},{"type":18,"tag":421,"props":17516,"children":17517},{},[17518],{"type":37,"value":17519},"r",{"type":18,"tag":421,"props":17521,"children":17522},{},[17523],{"type":37,"value":17524},"插入一个不可见的 rtl 方向提示符",{"type":18,"tag":399,"props":17526,"children":17527},{},[17528,17533,17538,17542,17547],{"type":18,"tag":421,"props":17529,"children":17530},{},[17531],{"type":37,"value":17532},"u+202b",{"type":18,"tag":421,"props":17534,"children":17535},{},[17536],{"type":37,"value":17537},"right-to-left embedding (rle)",{"type":18,"tag":421,"props":17539,"children":17540},{},[17541],{"type":37,"value":17352},{"type":18,"tag":421,"props":17543,"children":17544},{},[17545],{"type":37,"value":17546},"rle",{"type":18,"tag":421,"props":17548,"children":17549},{},[17550,17552,17557],{"type":37,"value":17551},"开始一个嵌入式 rtl 片段，需 ",{"type":18,"tag":268,"props":17553,"children":17555},{"className":17554},[],[17556],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17559,"children":17560},{},[17561,17566,17571,17575,17580],{"type":18,"tag":421,"props":17562,"children":17563},{},[17564],{"type":37,"value":17565},"u+202e",{"type":18,"tag":421,"props":17567,"children":17568},{},[17569],{"type":37,"value":17570},"right-to-left override (rlo)",{"type":18,"tag":421,"props":17572,"children":17573},{},[17574],{"type":37,"value":17352},{"type":18,"tag":421,"props":17576,"children":17577},{},[17578],{"type":37,"value":17579},"rlo",{"type":18,"tag":421,"props":17581,"children":17582},{},[17583,17585,17590],{"type":37,"value":17584},"强制后续文本以 rtl 显示，需 ",{"type":18,"tag":268,"props":17586,"children":17588},{"className":17587},[],[17589],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17592,"children":17593},{},[17594,17599,17604,17609,17613],{"type":18,"tag":421,"props":17595,"children":17596},{},[17597],{"type":37,"value":17598},"u+1bc77",{"type":18,"tag":421,"props":17600,"children":17601},{},[17602],{"type":37,"value":17603},"duployan affix attached... (略)",{"type":18,"tag":421,"props":17605,"children":17606},{},[17607],{"type":37,"value":17608},"lo",{"type":18,"tag":421,"props":17610,"children":17611},{},[17612],{"type":37,"value":17357},{"type":18,"tag":421,"props":17614,"children":17615},{},[17616],{"type":37,"value":17617},"杜波洛扬速记字符，天然 ltr，可显示",{"type":18,"tag":40,"props":17619,"children":17620},{},[17621,17623,17629,17631,17638,17640,17646,17648,17655,17657,17664],{"type":37,"value":17622},"像是 ",{"type":18,"tag":268,"props":17624,"children":17626},{"className":17625},[],[17627],{"type":37,"value":17628},"\\u5b87",{"type":37,"value":17630}," 这种的，一般称之为 ",{"type":18,"tag":193,"props":17632,"children":17635},{"href":17633,"rel":17634},"https://en.wikipedia.org/wiki/UTF-16",[197],[17636],{"type":37,"value":17637},"UTF-16",{"type":37,"value":17639},",在上面的 Unicode 字符中，",{"type":18,"tag":268,"props":17641,"children":17643},{"className":17642},[],[17644],{"type":37,"value":17645},"u2066",{"type":37,"value":17647}," 这个系 ",{"type":18,"tag":193,"props":17649,"children":17652},{"href":17650,"rel":17651},"https://www.compart.com/en/unicode/U+2066#UNC_DB",[197],[17653],{"type":37,"value":17654},"LEFT-TO-RIGHT",{"type":37,"value":17656}," 这个序列的，根据维基百科 ",{"type":18,"tag":193,"props":17658,"children":17661},{"href":17659,"rel":17660},"https://en.wikipedia.org/wiki/Bidirectional_text",[197],[17662],{"type":37,"value":17663},"Bidirectional text",{"type":37,"value":17665}," 的介绍，这种被称之为 “双向文本”, 用于波斯语和阿拉伯语甚至是数学表达式。",{"type":18,"tag":40,"props":17667,"children":17668},{},[17669,17671,17677,17679,17685],{"type":37,"value":17670},"由于用了 ",{"type":18,"tag":268,"props":17672,"children":17674},{"className":17673},[],[17675],{"type":37,"value":17676},"u2067",{"type":37,"value":17678},", 这会导致渲染的时候会隔断 ",{"type":18,"tag":268,"props":17680,"children":17682},{"className":17681},[],[17683],{"type":37,"value":17684},"🍋",{"type":37,"value":17686},"，别人 @ 我的时候就会夹着消息，比如 @ 我的时候输入 Hello 就会变成：",{"type":18,"tag":263,"props":17688,"children":17690},{"code":17689},"@宇宙无敌柠檬王 Hello 🍋\n---如果是正常的\n@宇宙无敌柠檬王🍋 Hello\n",[17691],{"type":18,"tag":268,"props":17692,"children":17693},{"__ignoreMap":8},[17694],{"type":37,"value":17689},{"type":18,"tag":71,"props":17696,"children":17697},{},[],{"type":18,"tag":165,"props":17699,"children":17701},{"id":17700},"字符格式-2",[17702],{"type":37,"value":17703},"字符格式 2",{"type":18,"tag":27,"props":17705,"children":17707},{"t":17706},"字符格式",[],{"type":37,"value":15922},{"type":18,"tag":391,"props":17710,"children":17711},{},[17712,17738],{"type":18,"tag":395,"props":17713,"children":17714},{},[17715],{"type":18,"tag":399,"props":17716,"children":17717},{},[17718,17722,17726,17730,17734],{"type":18,"tag":403,"props":17719,"children":17720},{},[17721],{"type":37,"value":17313},{"type":18,"tag":403,"props":17723,"children":17724},{},[17725],{"type":37,"value":3320},{"type":18,"tag":403,"props":17727,"children":17728},{},[17729],{"type":37,"value":1596},{"type":18,"tag":403,"props":17731,"children":17732},{},[17733],{"type":37,"value":17326},{"type":18,"tag":403,"props":17735,"children":17736},{},[17737],{"type":37,"value":17331},{"type":18,"tag":414,"props":17739,"children":17740},{},[17741,17764,17793,17822,17851,17880,17903,17932,17961],{"type":18,"tag":399,"props":17742,"children":17743},{},[17744,17748,17752,17756,17760],{"type":18,"tag":421,"props":17745,"children":17746},{},[17747],{"type":37,"value":17342},{"type":18,"tag":421,"props":17749,"children":17750},{},[17751],{"type":37,"value":17347},{"type":18,"tag":421,"props":17753,"children":17754},{},[17755],{"type":37,"value":17352},{"type":18,"tag":421,"props":17757,"children":17758},{},[17759],{"type":37,"value":17357},{"type":18,"tag":421,"props":17761,"children":17762},{},[17763],{"type":37,"value":17362},{"type":18,"tag":399,"props":17765,"children":17766},{},[17767,17771,17775,17779,17783],{"type":18,"tag":421,"props":17768,"children":17769},{},[17770],{"type":37,"value":17370},{"type":18,"tag":421,"props":17772,"children":17773},{},[17774],{"type":37,"value":17375},{"type":18,"tag":421,"props":17776,"children":17777},{},[17778],{"type":37,"value":17352},{"type":18,"tag":421,"props":17780,"children":17781},{},[17782],{"type":37,"value":17384},{"type":18,"tag":421,"props":17784,"children":17785},{},[17786,17787,17792],{"type":37,"value":17389},{"type":18,"tag":268,"props":17788,"children":17790},{"className":17789},[],[17791],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17794,"children":17795},{},[17796,17800,17804,17808,17812],{"type":18,"tag":421,"props":17797,"children":17798},{},[17799],{"type":37,"value":17405},{"type":18,"tag":421,"props":17801,"children":17802},{},[17803],{"type":37,"value":17410},{"type":18,"tag":421,"props":17805,"children":17806},{},[17807],{"type":37,"value":17352},{"type":18,"tag":421,"props":17809,"children":17810},{},[17811],{"type":37,"value":17419},{"type":18,"tag":421,"props":17813,"children":17814},{},[17815,17816,17821],{"type":37,"value":17424},{"type":18,"tag":268,"props":17817,"children":17819},{"className":17818},[],[17820],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17823,"children":17824},{},[17825,17829,17833,17837,17841],{"type":18,"tag":421,"props":17826,"children":17827},{},[17828],{"type":37,"value":17438},{"type":18,"tag":421,"props":17830,"children":17831},{},[17832],{"type":37,"value":17443},{"type":18,"tag":421,"props":17834,"children":17835},{},[17836],{"type":37,"value":17352},{"type":18,"tag":421,"props":17838,"children":17839},{},[17840],{"type":37,"value":17452},{"type":18,"tag":421,"props":17842,"children":17843},{},[17844,17845,17850],{"type":37,"value":17457},{"type":18,"tag":268,"props":17846,"children":17848},{"className":17847},[],[17849],{"type":37,"value":17463},{"type":37,"value":17397},{"type":18,"tag":399,"props":17852,"children":17853},{},[17854,17858,17862,17866,17870],{"type":18,"tag":421,"props":17855,"children":17856},{},[17857],{"type":37,"value":17472},{"type":18,"tag":421,"props":17859,"children":17860},{},[17861],{"type":37,"value":17477},{"type":18,"tag":421,"props":17863,"children":17864},{},[17865],{"type":37,"value":17352},{"type":18,"tag":421,"props":17867,"children":17868},{},[17869],{"type":37,"value":17486},{"type":18,"tag":421,"props":17871,"children":17872},{},[17873,17874,17879],{"type":37,"value":17491},{"type":18,"tag":268,"props":17875,"children":17877},{"className":17876},[],[17878],{"type":37,"value":17463},{"type":37,"value":17397},{"type":18,"tag":399,"props":17881,"children":17882},{},[17883,17887,17891,17895,17899],{"type":18,"tag":421,"props":17884,"children":17885},{},[17886],{"type":37,"value":17505},{"type":18,"tag":421,"props":17888,"children":17889},{},[17890],{"type":37,"value":17510},{"type":18,"tag":421,"props":17892,"children":17893},{},[17894],{"type":37,"value":17352},{"type":18,"tag":421,"props":17896,"children":17897},{},[17898],{"type":37,"value":17519},{"type":18,"tag":421,"props":17900,"children":17901},{},[17902],{"type":37,"value":17524},{"type":18,"tag":399,"props":17904,"children":17905},{},[17906,17910,17914,17918,17922],{"type":18,"tag":421,"props":17907,"children":17908},{},[17909],{"type":37,"value":17532},{"type":18,"tag":421,"props":17911,"children":17912},{},[17913],{"type":37,"value":17537},{"type":18,"tag":421,"props":17915,"children":17916},{},[17917],{"type":37,"value":17352},{"type":18,"tag":421,"props":17919,"children":17920},{},[17921],{"type":37,"value":17546},{"type":18,"tag":421,"props":17923,"children":17924},{},[17925,17926,17931],{"type":37,"value":17551},{"type":18,"tag":268,"props":17927,"children":17929},{"className":17928},[],[17930],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17933,"children":17934},{},[17935,17939,17943,17947,17951],{"type":18,"tag":421,"props":17936,"children":17937},{},[17938],{"type":37,"value":17565},{"type":18,"tag":421,"props":17940,"children":17941},{},[17942],{"type":37,"value":17570},{"type":18,"tag":421,"props":17944,"children":17945},{},[17946],{"type":37,"value":17352},{"type":18,"tag":421,"props":17948,"children":17949},{},[17950],{"type":37,"value":17579},{"type":18,"tag":421,"props":17952,"children":17953},{},[17954,17955,17960],{"type":37,"value":17584},{"type":18,"tag":268,"props":17956,"children":17958},{"className":17957},[],[17959],{"type":37,"value":17395},{"type":37,"value":17397},{"type":18,"tag":399,"props":17962,"children":17963},{},[17964,17968,17972,17976,17980],{"type":18,"tag":421,"props":17965,"children":17966},{},[17967],{"type":37,"value":17598},{"type":18,"tag":421,"props":17969,"children":17970},{},[17971],{"type":37,"value":17603},{"type":18,"tag":421,"props":17973,"children":17974},{},[17975],{"type":37,"value":17608},{"type":18,"tag":421,"props":17977,"children":17978},{},[17979],{"type":37,"value":17357},{"type":18,"tag":421,"props":17981,"children":17982},{},[17983],{"type":37,"value":17617},{"type":18,"tag":40,"props":17985,"children":17986},{},[17987],{"type":37,"value":17988},"如果只看上面的这些描述，或者说 Unicode 的标准原文。那您肯定有很多疑惑，看不懂各种缩写，感觉超级高端和高攀不起。上面图表的原文是：",{"type":18,"tag":263,"props":17990,"children":17992},{"code":17991},"--- LEFT-TO-RIGHT\n200E;LEFT-TO-RIGHT MARK;Cf;0;L;;;;;N;;;;;\n202A;LEFT-TO-RIGHT EMBEDDING;Cf;0;LRE;;;;;N;;;;;\n202D;LEFT-TO-RIGHT OVERRIDE;Cf;0;LRO;;;;;N;;;;;\n2066;LEFT-TO-RIGHT ISOLATE;Cf;0;LRI;;;;;N;;;;;\n1BC77;DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT;Lo;0;L;;;;;N;;;;;\n\n--- RIGHT-TO-LEFT\n2067;RIGHT-TO-LEFT ISOLATE;Cf;0;RLI;;;;;N;;;;;\n200F;RIGHT-TO-LEFT MARK;Cf;0;R;;;;;N;;;;;\n202B;RIGHT-TO-LEFT EMBEDDING;Cf;0;RLE;;;;;N;;;;;\n202E;RIGHT-TO-LEFT OVERRIDE;Cf;0;RLO;;;;;N;;;;;\n",[17993],{"type":18,"tag":268,"props":17994,"children":17995},{"__ignoreMap":8},[17996],{"type":37,"value":17991},{"type":18,"tag":40,"props":17998,"children":17999},{},[18000,18002,18009,18011,18018],{"type":37,"value":18001},"这些数据来自 ",{"type":18,"tag":193,"props":18003,"children":18006},{"href":18004,"rel":18005},"https://www.unicode.org/Public/UNIDATA/UnicodeData.txt",[197],[18007],{"type":37,"value":18008},"Unicode Character Database",{"type":37,"value":18010}," 也就是 Unicode 字符库。这些字段结构在 ",{"type":18,"tag":193,"props":18012,"children":18015},{"href":18013,"rel":18014},"https://www.unicode.org/reports/tr44/#UnicodeData.txt",[197],[18016],{"type":37,"value":18017},"UDC:Unicode® Standard Annex #44",{"type":37,"value":18019}," 中皆有说明（除非是 Unicode 相关行业的，否则需要一个一个对照。或许我会写一个转换器？)",{"type":37,"value":3828},{"type":18,"tag":391,"props":18022,"children":18023},{},[18024,18044],{"type":18,"tag":395,"props":18025,"children":18026},{},[18027],{"type":18,"tag":399,"props":18028,"children":18029},{},[18030,18035,18039],{"type":18,"tag":403,"props":18031,"children":18032},{},[18033],{"type":37,"value":18034},"Project",{"type":18,"tag":403,"props":18036,"children":18037},{},[18038],{"type":37,"value":3032},{"type":18,"tag":403,"props":18040,"children":18041},{},[18042],{"type":37,"value":18043},"Title",{"type":18,"tag":414,"props":18045,"children":18046},{},[18047,18063,18085],{"type":18,"tag":399,"props":18048,"children":18049},{},[18050,18055,18060],{"type":18,"tag":421,"props":18051,"children":18052},{},[18053],{"type":37,"value":18054},"数据来源",{"type":18,"tag":421,"props":18056,"children":18057},{},[18058],{"type":37,"value":18059},"UnicodeData.txt",{"type":18,"tag":421,"props":18061,"children":18062},{},[],{"type":18,"tag":399,"props":18064,"children":18065},{},[18066,18071,18080],{"type":18,"tag":421,"props":18067,"children":18068},{},[18069],{"type":37,"value":18070},"格式说明",{"type":18,"tag":421,"props":18072,"children":18073},{},[18074],{"type":18,"tag":193,"props":18075,"children":18077},{"href":18013,"rel":18076},[197],[18078],{"type":37,"value":18079},"Unicode® Standard Annex #44",{"type":18,"tag":421,"props":18081,"children":18082},{},[18083],{"type":37,"value":18084},"看懂 Unicode 的神奇魔法",{"type":18,"tag":399,"props":18086,"children":18087},{},[18088,18093,18103],{"type":18,"tag":421,"props":18089,"children":18090},{},[18091],{"type":37,"value":18092},"Bidi 类别",{"type":18,"tag":421,"props":18094,"children":18095},{},[18096],{"type":18,"tag":193,"props":18097,"children":18100},{"href":18098,"rel":18099},"https://www.unicode.org/reports/tr9/",[197],[18101],{"type":37,"value":18102},"Unicode® Standard Annex #9",{"type":18,"tag":421,"props":18104,"children":18105},{},[18106],{"type":37,"value":18107},"Unicode Bidirectional Algorithm 双向算法: 如何正确的显示从左还是从右到左的内容",{"type":18,"tag":40,"props":18109,"children":18110},{},[18111,18113,18119],{"type":37,"value":18112},"由于实在是太多了，以 ",{"type":18,"tag":268,"props":18114,"children":18116},{"className":18115},[],[18117],{"type":37,"value":18118},"200E;LEFT-TO-RIGHT MARK;Cf;0;L;;;;;N;;;;;",{"type":37,"value":18120}," 为例，如果要读懂，先拆分以更好的理解：",{"type":18,"tag":263,"props":18122,"children":18124},{"code":18123},"                                   200E;LEFT-TO-RIGHT MARK;Cf;0;L;;;;;N;;;;;\n                      Code Point-> |  200E;                                 \n      Implicit Directional Marks-> +---->  LEFT-TO-RIGHT MARK;              \n         General_Category Values-> +---->  Cf;                              \nCanonical Combining Class Values-> +---->  0;                               \n   Bidirectional Character Types->-+--+->  L;;;;;                           \n                        Bidi_Mirrored +->  N;;;;;                           \n",[18125],{"type":18,"tag":268,"props":18126,"children":18127},{"__ignoreMap":8},[18128],{"type":37,"value":18123},{"type":18,"tag":40,"props":18130,"children":18131},{},[18132],{"type":37,"value":18133},"一般需要将 #44 和 #9 切换起来查询才能理解，所以真的很需要一个转义的工具（我打算自己写一个），上面列出了一个字符格式的拆分，以及这些缩写属于那些部分的内容。一句话概述这个字符那就是：",{"type":18,"tag":116,"props":18135,"children":18136},{"type":2162},[18137],{"type":18,"tag":40,"props":18138,"children":18139},{},[18140,18142,18147],{"type":37,"value":18141},"U200E 是一个",{"type":18,"tag":10656,"props":18143,"children":18144},{},[18145],{"type":37,"value":18146},"从左到右的(格式控制字符)",{"type":37,"value":18148}," 尽管自身并不显示",{"type":18,"tag":1447,"props":18150,"children":18151},{"type":1449},[18152,18165],{"type":18,"tag":40,"props":18153,"children":18154},{},[18155,18157,18160,18163],{"type":37,"value":18156},"数据文件 UnicodeData.txt 在每条记录中定义了多个属性值。\n当某个字段为空（即两个分号之间没有值）时，表示该属性使用该码点的默认值。",{"type":18,"tag":1504,"props":18158,"children":18159},{},[],{"type":18,"tag":1504,"props":18161,"children":18162},{},[],{"type":37,"value":18164},"\nThe data file UnicodeData.txt defines many property values in each record.\nWhen a field in a data line for a code point is empty, that indicates that the property takes the default value for that code point.\nFor example:",{"type":18,"tag":40,"props":18166,"children":18167},{},[18168],{"type":18,"tag":268,"props":18169,"children":18170},{},[18171],{"type":37,"value":18172},"0022;QUOTATION MARK;Po;0;ON;;;;;N;;;;;",{"type":18,"tag":40,"props":18174,"children":18175},{},[18176,18178,18184,18186,18192,18194,18199],{"type":37,"value":18177},"我知道你肯定会在意 ",{"type":18,"tag":268,"props":18179,"children":18181},{"className":18180},[],[18182],{"type":37,"value":18183},"L;;;;;",{"type":37,"value":18185}," 中为什么这么多 ",{"type":18,"tag":268,"props":18187,"children":18189},{"className":18188},[],[18190],{"type":37,"value":18191},";;;",{"type":37,"value":18193}," 是不是有什么特殊含义？在 #44 中的 Empty Fields 部分说明了一些愿意，也就是说这些 ",{"type":18,"tag":268,"props":18195,"children":18197},{"className":18196},[],[18198],{"type":37,"value":18191},{"type":37,"value":18200}," 空的字段默认值：",{"title":8,"searchDepth":14369,"depth":14369,"links":18202},[18203],{"id":17700,"depth":14369,"text":17703},"content:book:unicode-explained.md","book/unicode-explained.md",{"_path":18207,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":18208,"description":8,"director":18209,"time":14462,"img":18210,"plan":14464,"body":18211,"_type":14453,"_id":18981,"_source":14455,"_file":18982,"_extension":14457},"/book/wise-saying","WISE SAYING","my friend","16/1.png",{"type":15,"children":18212,"toc":18976},[18213],{"type":18,"tag":19,"props":18214,"children":18215},{":by":21,":img":22,":plan":23,":title":24},[18216,18220,18225,18228,18234,18238,18248,18258,18268,18278,18427,18452,18455,18461,18465,18474,18489,18492,18498,18502,18508,18511,18542,18635,18680,18724,18744,18780,18787,18798,18813,18817,18823,18833,18915,18918,18924,18928],{"type":18,"tag":27,"props":18217,"children":18219},{"t":18218},"Wise Saying",[],{"type":18,"tag":40,"props":18221,"children":18222},{},[18223],{"type":37,"value":18224},"科学理论的优越性不在于它是否新颖，而在于它能否以统一的机制解释广泛的生物学事实。我们之所以接受自然选择，是因为它不仅能解释物种适应性，还能涵盖系统发生、群体遗传等多个层面；而仅能解释局部现象的假说，往往无法在证据积累中维持其解释力。因此，在科学共同体中，理论的竞争终将归结为“解释范围”与“逻辑经济性”的胜负。",{"type":18,"tag":71,"props":18226,"children":18227},{},[],{"type":18,"tag":32,"props":18229,"children":18231},{"id":18230},"群u萌-2",[18232],{"type":37,"value":18233},"群u萌 2",{"type":18,"tag":27,"props":18235,"children":18237},{"t":18236},"群友",[],{"type":18,"tag":11610,"props":18239,"children":18242},{"by":18240,"topic":18241},"沃夏·边德","话题：现代编程语言的演进",[18243],{"type":18,"tag":40,"props":18244,"children":18245},{},[18246],{"type":37,"value":18247},"工业就是这样从学术里汲取力量的，学术的东西大部分都晦涩难懂，但是提取它很小一部分简单易用的东西就能给工业带来很大的提升",{"type":18,"tag":11610,"props":18249,"children":18252},{"by":18250,"topic":18251},"栗子","话题：要不要买 700 CNY 的三星显示器",[18253],{"type":18,"tag":40,"props":18254,"children":18255},{},[18256],{"type":37,"value":18257},"贵的可以无脑三星, 便宜的不行。大厂不会去好好弄便宜的",{"type":18,"tag":11610,"props":18259,"children":18262},{"by":18260,"topic":18261},"皮埃吃·艾斯","话题：为什么 AI 代替我绘画，不应该是替代重复性劳动吗?",[18263],{"type":18,"tag":40,"props":18264,"children":18265},{},[18266],{"type":37,"value":18267},"绘画不是重复性工作的一种吗？",{"type":18,"tag":11610,"props":18269,"children":18272},{"by":18270,"topic":18271},"马卡姆","捞钱的必要因素",[18273],{"type":18,"tag":40,"props":18274,"children":18275},{},[18276],{"type":37,"value":18277},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":18,"tag":11610,"props":18279,"children":18282},{"by":18280,"topic":18281},"佚名","话题：愿世间再无内耗",[18283,18296,18312,18338,18354,18362,18383,18409],{"type":18,"tag":40,"props":18284,"children":18285},{},[18286,18288,18291,18293],{"type":37,"value":18287},"很多时候，我们无法追求真正的“完美”。",{"type":18,"tag":1504,"props":18289,"children":18290},{},[],{"type":37,"value":18292},"\n哪怕是久负盛名的开源社区项目，也难逃 CVE 的阴影。",{"type":18,"tag":1504,"props":18294,"children":18295},{},[],{"type":18,"tag":40,"props":18297,"children":18298},{},[18299,18301,18304,18306,18309],{"type":37,"value":18300},"传世名作，如《蒙娜丽莎》，至今仍因其神秘微笑而引发争议，有人说那是达·芬奇未竟的笔触，是他对“完美”的一次迟疑。",{"type":18,"tag":1504,"props":18302,"children":18303},{},[],{"type":37,"value":18305},"\n伟大的作品尚且如此，缺陷并非失败，而是时间给予的一种温柔。",{"type":18,"tag":1504,"props":18307,"children":18308},{},[],{"type":18,"tag":1504,"props":18310,"children":18311},{},[],{"type":18,"tag":40,"props":18313,"children":18314},{},[18315,18317,18320,18322,18325,18327,18330,18332,18335],{"type":37,"value":18316},"权倾天下的贵族，终有一日会在史册中只剩一行注脚；",{"type":18,"tag":1504,"props":18318,"children":18319},{},[],{"type":37,"value":18321},"\n一时无双的冠军，也终将尘封在旧报纸泛黄的边角；",{"type":18,"tag":1504,"props":18323,"children":18324},{},[],{"type":37,"value":18326},"\n编程语言如风潮变幻，曾经主宰一代技术的范式，也会被新思想轻轻覆盖；",{"type":18,"tag":1504,"props":18328,"children":18329},{},[],{"type":37,"value":18331},"\n曾苦练棋艺、誓问巅峰的少年，也终会在 AI 面前低头、叹息。",{"type":18,"tag":1504,"props":18333,"children":18334},{},[],{"type":18,"tag":1504,"props":18336,"children":18337},{},[],{"type":18,"tag":40,"props":18339,"children":18340},{},[18341,18343,18346,18348,18351],{"type":37,"value":18342},"就连大学中的传经授道者，也未必皆为君子；行不耻之事者，不在少数。",{"type":18,"tag":1504,"props":18344,"children":18345},{},[],{"type":37,"value":18347},"\n若无自省之明德，安得以为人师？“大学之道，在明明德，在亲民，在止于至善。”",{"type":18,"tag":1504,"props":18349,"children":18350},{},[],{"type":18,"tag":1504,"props":18352,"children":18353},{},[],{"type":18,"tag":40,"props":18355,"children":18356},{},[18357,18359],{"type":37,"value":18358},"——但这一切，都不应成为止步不前的理由。",{"type":18,"tag":1504,"props":18360,"children":18361},{},[],{"type":18,"tag":40,"props":18363,"children":18364},{},[18365,18367,18370,18372,18375,18377,18380],{"type":37,"value":18366},"迈出第一步，无论多么蹒跚，都是对自我的一次超越。",{"type":18,"tag":1504,"props":18368,"children":18369},{},[],{"type":37,"value":18371},"\n哪怕做得不够好，也值得喝彩。",{"type":18,"tag":1504,"props":18373,"children":18374},{},[],{"type":37,"value":18376},"\n至少你有勇气面对未知，有意志向前踏出。",{"type":18,"tag":1504,"props":18378,"children":18379},{},[],{"type":18,"tag":1504,"props":18381,"children":18382},{},[],{"type":18,"tag":40,"props":18384,"children":18385},{},[18386,18388,18391,18393,18396,18398,18401,18403,18406],{"type":37,"value":18387},"真正应当被质疑的，是那些困守舒适区、拒绝改变的人；",{"type":18,"tag":1504,"props":18389,"children":18390},{},[],{"type":37,"value":18392},"\n是那些声名赫赫，却止步于昨日荣光的创作者。",{"type":18,"tag":1504,"props":18394,"children":18395},{},[],{"type":37,"value":18397},"\n艺术也好，技术也罢，生命的本质从不是“完美”，而是不断尝试、不断修正。",{"type":18,"tag":1504,"props":18399,"children":18400},{},[],{"type":37,"value":18402},"\n正如达·芬奇在画布上涂抹无数次，才留下那抹令世人千年沉醉的微笑。",{"type":18,"tag":1504,"props":18404,"children":18405},{},[],{"type":18,"tag":1504,"props":18407,"children":18408},{},[],{"type":18,"tag":40,"props":18410,"children":18411},{},[18412,18414,18417,18419,18422,18424],{"type":37,"value":18413},"你可以嘲笑那些踉跄起步的人，",{"type":18,"tag":1504,"props":18415,"children":18416},{},[],{"type":37,"value":18418},"\n但别忘了，总有人正以你未曾察觉的高度，",{"type":18,"tag":1504,"props":18420,"children":18421},{},[],{"type":37,"value":18423},"\n嘲笑着停留在原地的你。",{"type":18,"tag":1504,"props":18425,"children":18426},{},[],{"type":18,"tag":11610,"props":18428,"children":18431},{"by":18429,"topic":18430},"伟大的独角兽","话题：哲学",[18432,18442],{"type":18,"tag":40,"props":18433,"children":18434},{},[18435,18437,18440],{"type":37,"value":18436},"群友A:",{"type":18,"tag":1504,"props":18438,"children":18439},{},[],{"type":37,"value":18441},"\n学哲学可以时时刻刻对抗虚无主义和生存危机，让你每天活在惊心动魄的精神世界大战中。",{"type":18,"tag":40,"props":18443,"children":18444},{},[18445,18447,18450],{"type":37,"value":18446},"群友B:",{"type":18,"tag":1504,"props":18448,"children":18449},{},[],{"type":37,"value":18451},"\n内耗包装的这么好",{"type":18,"tag":71,"props":18453,"children":18454},{},[],{"type":18,"tag":32,"props":18456,"children":18458},{"id":18457},"广为流传-2",[18459],{"type":37,"value":18460},"广为流传 2",{"type":18,"tag":27,"props":18462,"children":18464},{"t":18463},"广为流传的一些鸡汤或句子",[],{"type":18,"tag":11610,"props":18466,"children":18468},{"by":18280,"topic":18467},"话题：这个行业不赚钱了，快跑！",[18469],{"type":18,"tag":40,"props":18470,"children":18471},{},[18472],{"type":37,"value":18473},"最好的世道是，我喜欢做饭才去做厨师，我喜欢教书育人才去当老师，我认可公平正义才去当律师，我想要救人性命才去当医生。而不是我因为xx赚钱，我为了赚钱才去当xx",{"type":18,"tag":11610,"props":18475,"children":18478},{"by":18476,"topic":18477},"季康子问政于孔子","话题：如杀无道，以就有道，何如？",[18479],{"type":18,"tag":40,"props":18480,"children":18481},{},[18482,18484,18487],{"type":37,"value":18483},"季康子问政于孔子曰：“如杀无道，以就有道，何如？”",{"type":18,"tag":1504,"props":18485,"children":18486},{},[],{"type":37,"value":18488}," 孔子对曰：“子为政，焉用杀？子欲善，而民善矣。君子之德风，小人之德草。草上之风，必偃。”",{"type":18,"tag":71,"props":18490,"children":18491},{},[],{"type":18,"tag":32,"props":18493,"children":18495},{"id":18494},"摘抄-2",[18496],{"type":37,"value":18497},"摘抄 2",{"type":18,"tag":27,"props":18499,"children":18501},{"t":18500},"从各种地方看到的",[],{"type":18,"tag":165,"props":18503,"children":18505},{"id":18504},"tech-1",[18506],{"type":37,"value":18507},"Tech 1",{"type":18,"tag":27,"props":18509,"children":18510},{"t":10734},[],{"type":18,"tag":11610,"props":18512,"children":18515},{"by":18513,"topic":18514},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[18516,18532],{"type":18,"tag":40,"props":18517,"children":18518},{},[18519,18521,18524,18526,18529],{"type":37,"value":18520},"Some of those people dont't do a lot",{"type":18,"tag":1504,"props":18522,"children":18523},{},[],{"type":37,"value":18525},"\nThere's a lot of people who make small,small changes,",{"type":18,"tag":1504,"props":18527,"children":18528},{},[],{"type":18,"tag":1504,"props":18530,"children":18531},{},[],{"type":18,"tag":40,"props":18533,"children":18534},{},[18535,18537,18540],{"type":37,"value":18536},"有些人并没有做太多改变",{"type":18,"tag":1504,"props":18538,"children":18539},{},[],{"type":37,"value":18541},"\n还有很多人只是做了一些很小的改变",{"type":18,"tag":11610,"props":18543,"children":18546},{"by":18544,"topic":18545},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[18547,18591],{"type":18,"tag":40,"props":18548,"children":18549},{},[18550,18552,18555,18557,18560,18562,18565,18567,18570,18573,18575,18578,18580,18583,18585,18588],{"type":37,"value":18551},"but that's not everybody,",{"type":18,"tag":1504,"props":18553,"children":18554},{},[],{"type":37,"value":18556},"\ni care about the thechnology",{"type":18,"tag":1504,"props":18558,"children":18559},{},[],{"type":37,"value":18561},"\nthere are people who care about the ui",{"type":18,"tag":1504,"props":18563,"children":18564},{},[],{"type":37,"value":18566},"\ni can't do ui to save my life.",{"type":18,"tag":1504,"props":18568,"children":18569},{},[],{"type":18,"tag":1504,"props":18571,"children":18572},{},[],{"type":37,"value":18574},"\ni mean, if i was stranded on an island,",{"type":18,"tag":1504,"props":18576,"children":18577},{},[],{"type":37,"value":18579},"\nand the only way to get off that island was the make a pretty ui,",{"type":18,"tag":1504,"props":18581,"children":18582},{},[],{"type":37,"value":18584},"\ni'd die there.",{"type":18,"tag":1504,"props":18586,"children":18587},{},[],{"type":18,"tag":1504,"props":18589,"children":18590},{},[],{"type":18,"tag":40,"props":18592,"children":18593},{},[18594,18596,18599,18601,18604,18606,18609,18611,18614,18617,18619,18622,18624,18627,18629,18632],{"type":37,"value":18595},"但并非所有人都如此，",{"type":18,"tag":1504,"props":18597,"children":18598},{},[],{"type":37,"value":18600},"\n我关心的是技术",{"type":18,"tag":1504,"props":18602,"children":18603},{},[],{"type":37,"value":18605},"\n有些人关心的是用户界面",{"type":18,"tag":1504,"props":18607,"children":18608},{},[],{"type":37,"value":18610},"\n我做用户界面根本救不了我。",{"type":18,"tag":1504,"props":18612,"children":18613},{},[],{"type":18,"tag":1504,"props":18615,"children":18616},{},[],{"type":37,"value":18618},"\n我的意思是，如果我被困在一个岛上，",{"type":18,"tag":1504,"props":18620,"children":18621},{},[],{"type":37,"value":18623},"\n而离开那个岛的唯一方法就是制作一个漂亮的用户界面，",{"type":18,"tag":1504,"props":18625,"children":18626},{},[],{"type":37,"value":18628},"\n我会死在那里。",{"type":18,"tag":1504,"props":18630,"children":18631},{},[],{"type":18,"tag":1504,"props":18633,"children":18634},{},[],{"type":18,"tag":11610,"props":18636,"children":18637},{"by":10,"topic":9},[18638,18646,18654,18665],{"type":18,"tag":40,"props":18639,"children":18640},{},[18641,18643],{"type":37,"value":18642},"Each language has its own set of idioms, its strengths, and its weak- nesses. By learning several different programming languages, you will be able to see which language is best suited to the kinds of problems that interest you most.",{"type":18,"tag":1504,"props":18644,"children":18645},{},[],{"type":18,"tag":40,"props":18647,"children":18648},{},[18649,18651],{"type":37,"value":18650},"Ultimately, programming is about understanding, and understanding is about ideas.",{"type":18,"tag":1504,"props":18652,"children":18653},{},[],{"type":18,"tag":40,"props":18655,"children":18656},{},[18657,18659,18662],{"type":37,"value":18658},"So, exposure to new ideas is essential to a deeper understanding of what program- ming is all about.",{"type":18,"tag":1504,"props":18660,"children":18661},{},[],{"type":18,"tag":1504,"props":18663,"children":18664},{},[],{"type":18,"tag":40,"props":18666,"children":18667},{},[18668,18670,18673,18675,18678],{"type":37,"value":18669},"每种语言都有其独特的语法、优势和劣势。通过学习几种不同的编程语言，你将能够找到最适合你最感兴趣的问题的语言。",{"type":18,"tag":1504,"props":18671,"children":18672},{},[],{"type":37,"value":18674},"\n归根结底，编程关乎理解，而理解关乎理念。",{"type":18,"tag":1504,"props":18676,"children":18677},{},[],{"type":37,"value":18679},"\n因此，接触新理念对于更深入地理解编程的本质至关重要。",{"type":18,"tag":11610,"props":18681,"children":18684},{"by":18682,"topic":18683},"joe armstrong, creator of erlang","Seven languages in seven weeks",[18685,18693,18701,18712,18716,18720],{"type":18,"tag":40,"props":18686,"children":18687},{},[18688,18690],{"type":37,"value":18689},"A Zen master might tell you that to be better at mathematics you’d better study Latin. Thus it is with programming. To better understand the essence of OO programming, you should study logic or functional programming (FP). To be better at FP, you should study Assembler.",{"type":18,"tag":1504,"props":18691,"children":18692},{},[],{"type":18,"tag":40,"props":18694,"children":18695},{},[18696,18698],{"type":37,"value":18697},"Books on comparative programming languages were popular when I grew up as a programmer, but most of these were academic tomes that gave little practical guidance to how to actually go about using a lan- guage. This reflected the technology of the age. You could read about the ideas in a language, but actually trying it out was virtually impos- sible.",{"type":18,"tag":1504,"props":18699,"children":18700},{},[],{"type":18,"tag":40,"props":18702,"children":18703},{},[18704,18706,18709],{"type":37,"value":18705},"Today, not only can we read about the ideas, but we can try them in practice. This makes the difference between standing on the poolside wondering whether it would be nice to swim and diving in and enjoying the water.",{"type":18,"tag":1504,"props":18707,"children":18708},{},[],{"type":18,"tag":1504,"props":18710,"children":18711},{},[],{"type":18,"tag":40,"props":18713,"children":18714},{},[18715],{"type":37,"value":1463},{"type":18,"tag":40,"props":18717,"children":18718},{},[18719],{"type":37,"value":1476},{"type":18,"tag":40,"props":18721,"children":18722},{},[18723],{"type":37,"value":1489},{"type":18,"tag":11610,"props":18725,"children":18728},{"by":18726,"topic":18727},"Adrian Banner","普林斯顿微积分",[18729,18739],{"type":18,"tag":40,"props":18730,"children":18731},{},[18732,18734,18737],{"type":37,"value":18733},"Trying to do calculus without using functions would be one of the most pointless things you could do.",{"type":18,"tag":1504,"props":18735,"children":18736},{},[],{"type":37,"value":18738},"\nIf calculus had an ingredients list, functions would\nbe first on it, and by some margin too.",{"type":18,"tag":40,"props":18740,"children":18741},{},[18742],{"type":37,"value":18743},"不借助函数却想去做微积分，这无疑会是你所能做的最无意义的事。\n如果说微积分也有营养成分表，那么函数肯定会排在最前面。",{"type":18,"tag":11610,"props":18745,"children":18746},{"by":18682,"topic":18683},[18747,18755,18760,18765,18770,18775],{"type":18,"tag":40,"props":18748,"children":18749},{},[18750,18752],{"type":37,"value":18751},"As requirements for computer programs get more complex, languages,\ntoo, must evolve. Every twenty years or so, the old paradigms become\ninadequate to handle the new demands for organizing and expressing\nideas. New paradigms must emerge, but the process is not a simple one.",{"type":18,"tag":1504,"props":18753,"children":18754},{},[],{"type":18,"tag":40,"props":18756,"children":18757},{},[18758],{"type":37,"value":18759},"Each new programming paradigm ushers in a wave of programming\nlanguages, not just one. The initial language is often strikingly pro-\nductive and wildly impractical.",{"type":18,"tag":40,"props":18761,"children":18762},{},[18763],{"type":37,"value":18764},"Think Smalltalk for objects or Lisp for\nfunctional languages. Then, languages from other paradigms build in\nfeatures that allow people to absorb the new concepts while users can\nlive safely within the old paradigm.",{"type":18,"tag":40,"props":18766,"children":18767},{},[18768],{"type":37,"value":18769},"Ada, for example, allowed some\ncore object-oriented ideas such as encapsulation to exist within a pro-\ncedural language. At some point, some hybrid language offers just the\nright practical bridge between the old paradigm and the new, such as\na C++.",{"type":18,"tag":40,"props":18771,"children":18772},{},[18773],{"type":37,"value":18774},"Next, we see a commercially adoptable language, such as Java\nor C#. Finally, we see some mature, pure implementations of the new\nparadigm.",{"type":18,"tag":40,"props":18776,"children":18777},{},[18778],{"type":37,"value":18779},"随着程序需求的增加，编程语言也在不断进化。每二十年左右，旧的编程范式无法满足新的需求，新的范式必须出现。每个新的范式都会诞生一批编程语言，最初可能效率高但不实用（如 Smalltalk 和 Lisp）。最终，某些混合语言（如 C++）成为“桥梁”，然后是商业化语言（如 Java 或 C#），最终成熟的语言会实现新的范式。",{"type":18,"tag":11610,"props":18781,"children":18782},{"by":587,"topic":11674},[18783],{"type":18,"tag":40,"props":18784,"children":18785},{},[18786],{"type":37,"value":11680},{"type":18,"tag":11610,"props":18788,"children":18789},{"by":11843,"topic":11844},[18790],{"type":18,"tag":40,"props":18791,"children":18792},{},[18793,18794,18797],{"type":37,"value":11850},{"type":18,"tag":1504,"props":18795,"children":18796},{},[],{"type":37,"value":11855},{"type":18,"tag":11610,"props":18799,"children":18802},{"by":18800,"topic":18801},"James Forshaw","Attacking Network Protocols",[18803],{"type":18,"tag":40,"props":18804,"children":18805},{},[18806,18808,18811],{"type":37,"value":18807},"There is nothing new under the sun",{"type":18,"tag":1504,"props":18809,"children":18810},{},[],{"type":37,"value":18812},"\n太阳底下没有新鲜事",{"type":18,"tag":27,"props":18814,"children":18816},{"t":18815},"Life",[],{"type":18,"tag":165,"props":18818,"children":18820},{"id":18819},"life-2",[18821],{"type":37,"value":18822},"Life 2",{"type":18,"tag":11610,"props":18824,"children":18827},{"by":18825,"topic":18826},"髹饰录","漆器工艺专著",[18828],{"type":18,"tag":40,"props":18829,"children":18830},{},[18831],{"type":37,"value":18832},"可巧手以继拙作，不可庸工以当精制",{"type":18,"tag":11610,"props":18834,"children":18837},{"by":18835,"topic":18836},"鲍鹏山","充满正义感的理想主义者极其愚昧。",[18838,18856,18869,18887,18900,18910],{"type":18,"tag":40,"props":18839,"children":18840},{},[18841,18843,18846,18848,18851,18853],{"type":37,"value":18842},"这个世界上最可怕的人，不是心里知道自己是坏人的人。",{"type":18,"tag":1504,"props":18844,"children":18845},{},[],{"type":37,"value":18847},"\n因为他知道自己是坏人",{"type":18,"tag":1504,"props":18849,"children":18850},{},[],{"type":37,"value":18852},"\n他知道自己做坏事，总会恐惧、总会有点内疚。",{"type":18,"tag":1504,"props":18854,"children":18855},{},[],{"type":18,"tag":40,"props":18857,"children":18858},{},[18859,18861,18864,18866],{"type":37,"value":18860},"什么样的人把坏事做的堂堂正正",{"type":18,"tag":1504,"props":18862,"children":18863},{},[],{"type":37,"value":18865},"\n做的义愤填膺、做的慷慨激昂呢？",{"type":18,"tag":1504,"props":18867,"children":18868},{},[],{"type":18,"tag":40,"props":18870,"children":18871},{},[18872,18874,18877,18879,18882,18884],{"type":37,"value":18873},"是自以为自己做好事的人。",{"type":18,"tag":1504,"props":18875,"children":18876},{},[],{"type":37,"value":18878},"\n冲着一个伟大的理想去做事，",{"type":18,"tag":1504,"props":18880,"children":18881},{},[],{"type":37,"value":18883},"\n但事实是他搞错了。",{"type":18,"tag":1504,"props":18885,"children":18886},{},[],{"type":18,"tag":40,"props":18888,"children":18889},{},[18890,18892,18895,18897],{"type":37,"value":18891},"但是他心目中又觉得自己做好事、做一个伟大的理想。",{"type":18,"tag":1504,"props":18893,"children":18894},{},[],{"type":37,"value":18896},"\n所以他一定会把他做的还坏事，做的慷慨激昂、做的一往无前、做的义无反顾。",{"type":18,"tag":1504,"props":18898,"children":18899},{},[],{"type":18,"tag":40,"props":18901,"children":18902},{},[18903,18905,18908],{"type":37,"value":18904},"这个世界上给人类造成最大灾难的。",{"type":18,"tag":1504,"props":18906,"children":18907},{},[],{"type":37,"value":18909},"\n都不是认识到自己是坏人的人。",{"type":18,"tag":40,"props":18911,"children":18912},{},[18913],{"type":37,"value":18914},"而恰恰是那些充满正义感的理想主义者。",{"type":18,"tag":71,"props":18916,"children":18917},{},[],{"type":18,"tag":165,"props":18919,"children":18921},{"id":18920},"audiovisual-1",[18922],{"type":37,"value":18923},"Audiovisual 1",{"type":18,"tag":27,"props":18925,"children":18927},{"t":18926},"Audiovisual",[],{"type":18,"tag":11610,"props":18929,"children":18932},{"by":18930,"topic":18931},"心灵捕手","知识与体验的区别",[18933,18938,18946,18951,18956,18961,18966,18971],{"type":18,"tag":40,"props":18934,"children":18935},{},[18936],{"type":37,"value":18937},"You've never been out of Boston.",{"type":18,"tag":12980,"props":18939,"children":18940},{},[18941],{"type":18,"tag":40,"props":18942,"children":18943},{},[18944],{"type":37,"value":18945},"Nope",{"type":18,"tag":40,"props":18947,"children":18948},{},[18949],{"type":37,"value":18950},"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written",{"type":18,"tag":40,"props":18952,"children":18953},{},[18954],{"type":37,"value":18955},"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope.",{"type":18,"tag":40,"props":18957,"children":18958},{},[18959],{"type":37,"value":18960},"Sexual orientation. the whole works, right?",{"type":18,"tag":40,"props":18962,"children":18963},{},[18964],{"type":37,"value":18965},"I bet you can't tell me what it smells like\nin the Sistione Chapel",{"type":18,"tag":40,"props":18967,"children":18968},{},[18969],{"type":37,"value":18970},"You never actually stood there\nlooked up ar that beautiful ceiling.",{"type":18,"tag":40,"props":18972,"children":18973},{},[18974],{"type":37,"value":18975},"Seen that",{"title":8,"searchDepth":14369,"depth":14369,"links":18977},[18978,18979,18980],{"id":18504,"depth":14369,"text":18507},{"id":18819,"depth":14369,"text":18822},{"id":18920,"depth":14369,"text":18923},"content:book:wise-saying.md","book/wise-saying.md",{"_path":18984,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":18985,"description":8,"director":18986,"time":18987,"img":18988,"plan":18989,"body":18990,"_type":14453,"_id":19386,"_source":14455,"_file":19387,"_extension":14457},"/book/criminal_minds","Criminal Minds","R/N","2024.10.11","06/1.png","1,100",{"type":15,"children":18991,"toc":19381},[18992],{"type":18,"tag":19,"props":18993,"children":18994},{":by":21,":img":22,":plan":23,":title":24},[18995,18999,19005,19010,19018,19024,19029,19046,19051,19054,19058,19063,19067,19073,19079,19084,19246,19257,19260,19266,19270,19275],{"type":18,"tag":27,"props":18996,"children":18998},{":t":18997},"第一季",[],{"type":18,"tag":32,"props":19000,"children":19002},{"id":19001},"行为分析小组-0",[19003],{"type":37,"value":19004},"行为分析小组 0",{"type":18,"tag":40,"props":19006,"children":19007},{},[19008],{"type":37,"value":19009},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":18,"tag":116,"props":19011,"children":19012},{},[19013],{"type":18,"tag":40,"props":19014,"children":19015},{},[19016],{"type":37,"value":19017},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":18,"tag":165,"props":19019,"children":19021},{"id":19020},"历史学院与教会对情报工作的帮助-1",[19022],{"type":37,"value":19023},"历史学院与教会对情报工作的帮助 1",{"type":18,"tag":40,"props":19025,"children":19026},{},[19027],{"type":37,"value":19028},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":18,"tag":116,"props":19030,"children":19031},{},[19032],{"type":18,"tag":40,"props":19033,"children":19034},{},[19035,19037,19044],{"type":37,"value":19036},"比如 ",{"type":18,"tag":193,"props":19038,"children":19041},{"href":19039,"rel":19040},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[197],[19042],{"type":37,"value":19043},"洪博培",{"type":37,"value":19045}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":18,"tag":40,"props":19047,"children":19048},{},[19049],{"type":37,"value":19050},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"type":18,"tag":71,"props":19052,"children":19053},{},[],{"type":18,"tag":27,"props":19055,"children":19057},{":t":19056},"菜鸟老警",[],{"type":18,"tag":40,"props":19059,"children":19060},{},[19061],{"type":37,"value":19062},"有一说一这些美警剧集都挺多的，比如芝加哥警署、FBI 调查局、菜鸟老警这些。其中最直观的体现就是老人带新人，一个团队里三个老人两个新人。通过这种老人带新人的方式来培养接班人，并塑造荣誉感然后灌输理想使命。",{"type":18,"tag":27,"props":19064,"children":19066},{":t":19065,"type":311},"DEAR 在心理学的应用",[],{"type":18,"tag":32,"props":19068,"children":19070},{"id":19069},"dear-方法-2",[19071],{"type":37,"value":19072},"DEAR 方法 2",{"type":18,"tag":165,"props":19074,"children":19076},{"id":19075},"心理学-1",[19077],{"type":37,"value":19078},"心理学 1",{"type":18,"tag":40,"props":19080,"children":19081},{},[19082],{"type":37,"value":19083},"在心理学中，DEAR 分为了：",{"type":18,"tag":185,"props":19085,"children":19086},{},[19087,19121,19163,19211],{"type":18,"tag":189,"props":19088,"children":19089},{},[19090,19092,19097],{"type":37,"value":19091},"D – Describe ",{"type":18,"tag":747,"props":19093,"children":19094},{},[19095],{"type":37,"value":19096},"（描述）",{"type":18,"tag":1086,"props":19098,"children":19099},{},[19100,19111,19116],{"type":18,"tag":189,"props":19101,"children":19102},{},[19103,19105,19110],{"type":37,"value":19104},"客观地描述发生的事情，",{"type":18,"tag":747,"props":19106,"children":19107},{},[19108],{"type":37,"value":19109},"不带情绪、不指责。只陈述事实，避免夸大或主观推测",{"type":37,"value":3150},{"type":18,"tag":189,"props":19112,"children":19113},{},[19114],{"type":37,"value":19115},"❌：「你根本不在乎我！」",{"type":18,"tag":189,"props":19117,"children":19118},{},[19119],{"type":37,"value":19120},"✅：「我们约好了 7 点见面，但你 8 点才到，没有提前告诉我。」",{"type":18,"tag":189,"props":19122,"children":19123},{},[19124,19126,19131],{"type":37,"value":19125},"E – Express ",{"type":18,"tag":747,"props":19127,"children":19128},{},[19129],{"type":37,"value":19130},"（表达感受）",{"type":18,"tag":1086,"props":19132,"children":19133},{},[19134,19153,19158],{"type":18,"tag":189,"props":19135,"children":19136},{},[19137,19139,19144,19146,19151],{"type":37,"value":19138},"用\"",{"type":18,"tag":747,"props":19140,"children":19141},{},[19142],{"type":37,"value":19143},"我",{"type":37,"value":19145},"\"开头，表达自己的感受，而",{"type":18,"tag":747,"props":19147,"children":19148},{},[19149],{"type":37,"value":19150},"不是指责对方",{"type":37,"value":19152},"。 诚实、直接地告诉对方你的感受或想法。",{"type":18,"tag":189,"props":19154,"children":19155},{},[19156],{"type":37,"value":19157},"❌：「你总是不通知我，太自私了！」",{"type":18,"tag":189,"props":19159,"children":19160},{},[19161],{"type":37,"value":19162},"✅：「当你迟到又不通知时，我会感到被忽视和不受重视。」",{"type":18,"tag":189,"props":19164,"children":19165},{},[19166,19168,19173],{"type":37,"value":19167},"A – Assert ",{"type":18,"tag":747,"props":19169,"children":19170},{},[19171],{"type":37,"value":19172},"（主张需求）",{"type":18,"tag":1086,"props":19174,"children":19175},{},[19176,19201,19206],{"type":18,"tag":189,"props":19177,"children":19178},{},[19179,19181,19186,19188,19193,19195,19200],{"type":37,"value":19180},"清楚地表达你",{"type":18,"tag":747,"props":19182,"children":19183},{},[19184],{"type":37,"value":19185},"希望对方做什么",{"type":37,"value":19187},"，而",{"type":18,"tag":747,"props":19189,"children":19190},{},[19191],{"type":37,"value":19192},"不是让对方猜测",{"type":37,"value":19194},"。语气坚定但",{"type":18,"tag":747,"props":19196,"children":19197},{},[19198],{"type":37,"value":19199},"不攻击",{"type":37,"value":3150},{"type":18,"tag":189,"props":19202,"children":19203},{},[19204],{"type":37,"value":19205},"❌：「你应该知道这样做不对！」",{"type":18,"tag":189,"props":19207,"children":19208},{},[19209],{"type":37,"value":19210},"✅: 「如果你会迟到，请提前告诉我，这样我就能调整安排。」",{"type":18,"tag":189,"props":19212,"children":19213},{},[19214,19216,19221],{"type":37,"value":19215},"R - R – Reinforce ",{"type":18,"tag":747,"props":19217,"children":19218},{},[19219],{"type":37,"value":19220},"（强化关系）",{"type":18,"tag":1086,"props":19222,"children":19223},{},[19224,19236,19241],{"type":18,"tag":189,"props":19225,"children":19226},{},[19227,19229,19234],{"type":37,"value":19228},"说明这样做的好处，强化对方遵循你的请求的动机。可以强调",{"type":18,"tag":747,"props":19230,"children":19231},{},[19232],{"type":37,"value":19233},"双赢",{"type":37,"value":19235},"，或者提醒对方维持良好关系的重要性。",{"type":18,"tag":189,"props":19237,"children":19238},{},[19239],{"type":37,"value":19240},"❌：「你要是不改，我们就别做朋友了。」",{"type":18,"tag":189,"props":19242,"children":19243},{},[19244],{"type":37,"value":19245},"✅：「如果我们能更好地沟通，我相信我们的关系会更愉快。」",{"type":18,"tag":40,"props":19247,"children":19248},{},[19249,19251,19256],{"type":37,"value":19250},"这个属于辩证行为疗法，主要解决类似 ",{"type":18,"tag":747,"props":19252,"children":19253},{},[19254],{"type":37,"value":19255},"人际关系，情感调解，边缘型人格障碍",{"type":37,"value":3150},{"type":18,"tag":71,"props":19258,"children":19259},{},[],{"type":18,"tag":165,"props":19261,"children":19263},{"id":19262},"犯罪分析-2",[19264],{"type":37,"value":19265},"犯罪分析 2",{"type":18,"tag":27,"props":19267,"children":19269},{":t":19268,"type":311},"DEAR 在犯罪分析的应用",[],{"type":18,"tag":40,"props":19271,"children":19272},{},[19273],{"type":37,"value":19274},"在 DEAR 中，藏匿一个物品有四个原则，分别是：",{"type":18,"tag":185,"props":19276,"children":19277},{},[19278,19301,19329,19355],{"type":18,"tag":189,"props":19279,"children":19280},{},[19281,19283,19288],{"type":37,"value":19282},"D - Deception ",{"type":18,"tag":747,"props":19284,"children":19285},{},[19286],{"type":37,"value":19287},"（骗局）",{"type":18,"tag":1086,"props":19289,"children":19290},{},[19291,19296],{"type":18,"tag":189,"props":19292,"children":19293},{},[19294],{"type":37,"value":19295},"让你将一个东西理解成另外一个东西",{"type":18,"tag":189,"props":19297,"children":19298},{},[19299],{"type":37,"value":19300},"例如易拉罐里面是重要资料。",{"type":18,"tag":189,"props":19302,"children":19303},{},[19304,19306,19311],{"type":37,"value":19305},"E - Elusive ",{"type":18,"tag":747,"props":19307,"children":19308},{},[19309],{"type":37,"value":19310},"（不易记住）",{"type":18,"tag":1086,"props":19312,"children":19313},{},[19314,19324],{"type":18,"tag":189,"props":19315,"children":19316},{},[19317,19319],{"type":37,"value":19318},"看似",{"type":18,"tag":747,"props":19320,"children":19321},{},[19322],{"type":37,"value":19323},"没有用的东西很有用",{"type":18,"tag":189,"props":19325,"children":19326},{},[19327],{"type":37,"value":19328},"例如带宽接口里面别有洞天",{"type":18,"tag":189,"props":19330,"children":19331},{},[19332,19334,19339],{"type":37,"value":19333},"A - Access ",{"type":18,"tag":747,"props":19335,"children":19336},{},[19337],{"type":37,"value":19338},"（难以接近）",{"type":18,"tag":1086,"props":19340,"children":19341},{},[19342,19350],{"type":18,"tag":189,"props":19343,"children":19344},{},[19345],{"type":18,"tag":747,"props":19346,"children":19347},{},[19348],{"type":37,"value":19349},"高处、低处",{"type":18,"tag":189,"props":19351,"children":19352},{},[19353],{"type":37,"value":19354},"例如吊灯，地板第四个间隔",{"type":18,"tag":189,"props":19356,"children":19357},{},[19358,19360,19365],{"type":37,"value":19359},"R - Repulsive ",{"type":18,"tag":747,"props":19361,"children":19362},{},[19363],{"type":37,"value":19364},"（令人恶心的东西）",{"type":18,"tag":1086,"props":19366,"children":19367},{},[19368,19376],{"type":18,"tag":189,"props":19369,"children":19370},{},[19371],{"type":18,"tag":747,"props":19372,"children":19373},{},[19374],{"type":37,"value":19375},"厕所，垃圾桶，情趣玩具",{"type":18,"tag":189,"props":19377,"children":19378},{},[19379],{"type":37,"value":19380},"藏在令人作呕的地方。",{"title":8,"searchDepth":14369,"depth":14369,"links":19382},[19383,19384,19385],{"id":19020,"depth":14369,"text":19023},{"id":19075,"depth":14369,"text":19078},{"id":19262,"depth":14369,"text":19265},"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":19389,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":19390,"description":8,"director":18986,"time":19391,"img":19392,"plan":19393,"body":19394,"_type":14453,"_id":19603,"_source":14455,"_file":19604,"_extension":14457},"/book/24-hour","24 hour","2024.7.22","05/1.png","50,100",{"type":15,"children":19395,"toc":19601},[19396],{"type":18,"tag":19,"props":19397,"children":19398},{":by":21,":img":22,":plan":23,":title":24},[19399,19403,19409,19414,19419,19424,19429,19434,19439,19444,19449,19454,19459,19463,19469,19517,19518,19596],{"type":18,"tag":27,"props":19400,"children":19402},{":t":19401},"1~3 季",[],{"type":18,"tag":32,"props":19404,"children":19406},{"id":19405},"_13-季不要内耗-1",[19407],{"type":37,"value":19408},"1~3 季：不要内耗 1",{"type":18,"tag":40,"props":19410,"children":19411},{},[19412],{"type":37,"value":19413},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":18,"tag":40,"props":19415,"children":19416},{},[19417],{"type":37,"value":19418},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":18,"tag":40,"props":19420,"children":19421},{},[19422],{"type":37,"value":19423},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":18,"tag":40,"props":19425,"children":19426},{},[19427],{"type":37,"value":19428},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":18,"tag":40,"props":19430,"children":19431},{},[19432],{"type":37,"value":19433},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":18,"tag":40,"props":19435,"children":19436},{},[19437],{"type":37,"value":19438},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":18,"tag":40,"props":19440,"children":19441},{},[19442],{"type":37,"value":19443},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":18,"tag":40,"props":19445,"children":19446},{},[19447],{"type":37,"value":19448},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":18,"tag":40,"props":19450,"children":19451},{},[19452],{"type":37,"value":19453},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":18,"tag":40,"props":19455,"children":19456},{},[19457],{"type":37,"value":19458},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":18,"tag":27,"props":19460,"children":19462},{":t":19461},"Subchannel chip",[],{"type":18,"tag":32,"props":19464,"children":19466},{"id":19465},"子通道芯片-subchannel-chip-2",[19467],{"type":37,"value":19468},"子通道芯片: Subchannel chip 2",{"type":18,"tag":40,"props":19470,"children":19471},{},[19472,19474,19481,19483,19490,19491,19498,19499,19506,19508,19515],{"type":37,"value":19473},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":18,"tag":193,"props":19475,"children":19478},{"href":19476,"rel":19477},"https://24.fandom.com/wiki/Subchannel_chip",[197],[19479],{"type":37,"value":19480},"24 Wiki",{"type":37,"value":19482}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":18,"tag":193,"props":19484,"children":19487},{"href":19485,"rel":19486},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[197],[19488],{"type":37,"value":19489},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":37,"value":1962},{"type":18,"tag":193,"props":19492,"children":19495},{"href":19493,"rel":19494},"https://en.wikipedia.org/wiki/Ultra-wideband#",[197],[19496],{"type":37,"value":19497},"超宽频(UWB, Ultra-wideband)",{"type":37,"value":6012},{"type":18,"tag":193,"props":19500,"children":19503},{"href":19501,"rel":19502},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[197],[19504],{"type":37,"value":19505},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":37,"value":19507}," 所常用的 ",{"type":18,"tag":193,"props":19509,"children":19512},{"href":19510,"rel":19511},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[197],[19513],{"type":37,"value":19514},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":37,"value":19516}," 协议。",{"type":37,"value":3828},{"type":18,"tag":391,"props":19519,"children":19520},{},[19521,19540],{"type":18,"tag":395,"props":19522,"children":19523},{},[19524],{"type":18,"tag":399,"props":19525,"children":19526},{},[19527,19531,19535],{"type":18,"tag":403,"props":19528,"children":19529},{},[19530],{"type":37,"value":3320},{"type":18,"tag":403,"props":19532,"children":19533},{},[19534],{"type":37,"value":4369},{"type":18,"tag":403,"props":19536,"children":19537},{},[19538],{"type":37,"value":19539},"领域",{"type":18,"tag":414,"props":19541,"children":19542},{},[19543,19561,19578],{"type":18,"tag":399,"props":19544,"children":19545},{},[19546,19551,19556],{"type":18,"tag":421,"props":19547,"children":19548},{},[19549],{"type":37,"value":19550},"FHSS",{"type":18,"tag":421,"props":19552,"children":19553},{},[19554],{"type":37,"value":19555},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":18,"tag":421,"props":19557,"children":19558},{},[19559],{"type":37,"value":19560},"无线电",{"type":18,"tag":399,"props":19562,"children":19563},{},[19564,19569,19574],{"type":18,"tag":421,"props":19565,"children":19566},{},[19567],{"type":37,"value":19568},"UWB",{"type":18,"tag":421,"props":19570,"children":19571},{},[19572],{"type":37,"value":19573},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":18,"tag":421,"props":19575,"children":19576},{},[19577],{"type":37,"value":19560},{"type":18,"tag":399,"props":19579,"children":19580},{},[19581,19586,19591],{"type":18,"tag":421,"props":19582,"children":19583},{},[19584],{"type":37,"value":19585},"NB-IoT",{"type":18,"tag":421,"props":19587,"children":19588},{},[19589],{"type":37,"value":19590},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":18,"tag":421,"props":19592,"children":19593},{},[19594],{"type":37,"value":19595},"无线电与物联网",{"type":18,"tag":40,"props":19597,"children":19598},{},[19599],{"type":37,"value":19600},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":14369,"depth":14369,"links":19602},[],"content:book:24-hour.md","book/24-hour.md",{"_path":19606,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":19607,"description":8,"director":18800,"time":19608,"img":19609,"plan":14464,"body":19610,"_type":14453,"_id":20700,"_source":14455,"_file":20701,"_extension":14457},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","2024","01/1.png",{"type":15,"children":19611,"toc":20698},[19612],{"type":18,"tag":19,"props":19613,"children":19614},{":by":21,":img":22,":plan":23,":title":24},[19615,19619,19625,19646,19647,19722,19736,19744,19758,19771,19774,19779,19784,19787,19791,19795,19800,19805,19810,19811,19909,19914,19924,19925,19990,19995,20003,20008,20011,20015,20021,20026,20027,20087,20092,20105,20110,20114,20119,20121,20266,20274,20279,20287,20292,20296,20319,20343,20348,20352,20353,20432,20450,20455,20458,20463,20469,20473,20478,20482,20487,20488,20618,20631,20639,20647,20652,20660,20664,20669,20681,20693],{"type":18,"tag":27,"props":19616,"children":19618},{":t":19617},"Google Project Zero",[],{"type":18,"tag":32,"props":19620,"children":19622},{"id":19621},"作者-1",[19623],{"type":37,"value":19624},"作者 1",{"type":18,"tag":40,"props":19626,"children":19627},{},[19628,19630,19636,19638,19644],{"type":37,"value":19629},"本书的作者是 ",{"type":18,"tag":193,"props":19631,"children":19634},{"href":19632,"rel":19633},"https://github.com/tyranid",[197],[19635],{"type":37,"value":18800},{"type":37,"value":19637},"，也是著名的 ",{"type":18,"tag":193,"props":19639,"children":19642},{"href":19640,"rel":19641},"https://googleprojectzero.blogspot.com/",[197],[19643],{"type":37,"value":19617},{"type":37,"value":19645}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":37,"value":2273},{"type":18,"tag":391,"props":19648,"children":19649},{},[19650,19665],{"type":18,"tag":395,"props":19651,"children":19652},{},[19653],{"type":18,"tag":399,"props":19654,"children":19655},{},[19656,19661],{"type":18,"tag":403,"props":19657,"children":19658},{},[19659],{"type":37,"value":19660},"会议",{"type":18,"tag":403,"props":19662,"children":19663},{},[19664],{"type":37,"value":4369},{"type":18,"tag":414,"props":19666,"children":19667},{},[19668,19686,19704],{"type":18,"tag":399,"props":19669,"children":19670},{},[19671,19681],{"type":18,"tag":421,"props":19672,"children":19673},{},[19674],{"type":18,"tag":193,"props":19675,"children":19678},{"href":19676,"rel":19677},"https://www.blackhat.com/",[197],[19679],{"type":37,"value":19680},"BlackHat",{"type":18,"tag":421,"props":19682,"children":19683},{},[19684],{"type":37,"value":19685},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":18,"tag":399,"props":19687,"children":19688},{},[19689,19699],{"type":18,"tag":421,"props":19690,"children":19691},{},[19692],{"type":18,"tag":193,"props":19693,"children":19696},{"href":19694,"rel":19695},"https://www.secwest.net/",[197],[19697],{"type":37,"value":19698},"CanSecWest",{"type":18,"tag":421,"props":19700,"children":19701},{},[19702],{"type":37,"value":19703},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":18,"tag":399,"props":19705,"children":19706},{},[19707,19717],{"type":18,"tag":421,"props":19708,"children":19709},{},[19710],{"type":18,"tag":193,"props":19711,"children":19714},{"href":19712,"rel":19713},"https://events.ccc.de/",[197],[19715],{"type":37,"value":19716},"Chaos Computer Conference",{"type":18,"tag":421,"props":19718,"children":19719},{},[19720],{"type":37,"value":19721},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":18,"tag":40,"props":19723,"children":19724},{},[19725,19727,19734],{"type":37,"value":19726},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":18,"tag":193,"props":19728,"children":19731},{"href":19729,"rel":19730},"https://en.wikipedia.org/wiki/Line_management",[197],[19732],{"type":37,"value":19733},"Leader(line manager)",{"type":37,"value":19735}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":18,"tag":116,"props":19737,"children":19738},{},[19739],{"type":18,"tag":40,"props":19740,"children":19741},{},[19742],{"type":37,"value":19743},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":18,"tag":40,"props":19745,"children":19746},{},[19747,19749,19756],{"type":37,"value":19748},"在规划职业路径阶段认识了 ",{"type":18,"tag":193,"props":19750,"children":19753},{"href":19751,"rel":19752},"https://www.linkedin.com/in/mike-jordon-72193719/",[197],[19754],{"type":37,"value":19755},"Mike Jordon",{"type":37,"value":19757}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":18,"tag":116,"props":19759,"children":19760},{},[19761,19766],{"type":18,"tag":40,"props":19762,"children":19763},{},[19764],{"type":37,"value":19765},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":18,"tag":40,"props":19767,"children":19768},{},[19769],{"type":37,"value":19770},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":18,"tag":71,"props":19772,"children":19773},{},[],{"type":18,"tag":40,"props":19775,"children":19776},{},[19777],{"type":37,"value":19778},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":18,"tag":40,"props":19780,"children":19781},{},[19782],{"type":37,"value":19783},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":18,"tag":71,"props":19785,"children":19786},{},[],{"type":18,"tag":27,"props":19788,"children":19790},{":t":19789},"协议是一切的基础",[],{"type":18,"tag":32,"props":19792,"children":19793},{"id":2253},[19794],{"type":37,"value":2256},{"type":18,"tag":40,"props":19796,"children":19797},{},[19798],{"type":37,"value":19799},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":18,"tag":40,"props":19801,"children":19802},{},[19803],{"type":37,"value":19804},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":18,"tag":40,"props":19806,"children":19807},{},[19808],{"type":37,"value":19809},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":37,"value":389},{"type":18,"tag":391,"props":19812,"children":19813},{},[19814,19828],{"type":18,"tag":395,"props":19815,"children":19816},{},[19817],{"type":18,"tag":399,"props":19818,"children":19819},{},[19820,19824],{"type":18,"tag":403,"props":19821,"children":19822},{},[19823],{"type":37,"value":16418},{"type":18,"tag":403,"props":19825,"children":19826},{},[19827],{"type":37,"value":4369},{"type":18,"tag":414,"props":19829,"children":19830},{},[19831,19844,19857,19870,19883,19896],{"type":18,"tag":399,"props":19832,"children":19833},{},[19834,19839],{"type":18,"tag":421,"props":19835,"children":19836},{},[19837],{"type":37,"value":19838},"维护会话状态",{"type":18,"tag":421,"props":19840,"children":19841},{},[19842],{"type":37,"value":19843},"创建新的连接或终止连接",{"type":18,"tag":399,"props":19845,"children":19846},{},[19847,19852],{"type":18,"tag":421,"props":19848,"children":19849},{},[19850],{"type":37,"value":19851},"通过寻址识别节点",{"type":18,"tag":421,"props":19853,"children":19854},{},[19855],{"type":37,"value":19856},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":18,"tag":399,"props":19858,"children":19859},{},[19860,19865],{"type":18,"tag":421,"props":19861,"children":19862},{},[19863],{"type":37,"value":19864},"控制流量",{"type":18,"tag":421,"props":19866,"children":19867},{},[19868],{"type":37,"value":19869},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":18,"tag":399,"props":19871,"children":19872},{},[19873,19878],{"type":18,"tag":421,"props":19874,"children":19875},{},[19876],{"type":37,"value":19877},"保证传输数据的顺序",{"type":18,"tag":421,"props":19879,"children":19880},{},[19881],{"type":37,"value":19882},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":18,"tag":399,"props":19884,"children":19885},{},[19886,19891],{"type":18,"tag":421,"props":19887,"children":19888},{},[19889],{"type":37,"value":19890},"检测和纠正错误",{"type":18,"tag":421,"props":19892,"children":19893},{},[19894],{"type":37,"value":19895},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":18,"tag":399,"props":19897,"children":19898},{},[19899,19904],{"type":18,"tag":421,"props":19900,"children":19901},{},[19902],{"type":37,"value":19903},"格式化和编码数据",{"type":18,"tag":421,"props":19905,"children":19906},{},[19907],{"type":37,"value":19908},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":18,"tag":40,"props":19910,"children":19911},{},[19912],{"type":37,"value":19913},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":18,"tag":263,"props":19915,"children":19919},{"code":19916,"language":37,"meta":8,"className":19917},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[19918],"language-text",[19920],{"type":18,"tag":268,"props":19921,"children":19922},{"__ignoreMap":8},[19923],{"type":37,"value":19916},{"type":37,"value":2273},{"type":18,"tag":391,"props":19926,"children":19927},{},[19928,19943],{"type":18,"tag":395,"props":19929,"children":19930},{},[19931],{"type":18,"tag":399,"props":19932,"children":19933},{},[19934,19939],{"type":18,"tag":403,"props":19935,"children":19936},{},[19937],{"type":37,"value":19938},"协议模型",{"type":18,"tag":403,"props":19940,"children":19941},{},[19942],{"type":37,"value":4369},{"type":18,"tag":414,"props":19944,"children":19945},{},[19946,19959,19972],{"type":18,"tag":399,"props":19947,"children":19948},{},[19949,19954],{"type":18,"tag":421,"props":19950,"children":19951},{},[19952],{"type":37,"value":19953},"内容层 (文件请求)",{"type":18,"tag":421,"props":19955,"children":19956},{},[19957],{"type":37,"value":19958},"我想要一个 image.png 图片",{"type":18,"tag":399,"props":19960,"children":19961},{},[19962,19967],{"type":18,"tag":421,"props":19963,"children":19964},{},[19965],{"type":37,"value":19966},"编码层 (HTTP)",{"type":18,"tag":421,"props":19968,"children":19969},{},[19970],{"type":37,"value":19971},"GET /image.png HTTP/1.1",{"type":18,"tag":399,"props":19973,"children":19974},{},[19975,19980],{"type":18,"tag":421,"props":19976,"children":19977},{},[19978],{"type":37,"value":19979},"传输层 (TCP/IP)",{"type":18,"tag":421,"props":19981,"children":19982},{},[19983,19985,19988],{"type":37,"value":19984},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":18,"tag":1504,"props":19986,"children":19987},{},[],{"type":37,"value":19989}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":18,"tag":40,"props":19991,"children":19992},{},[19993],{"type":37,"value":19994},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":18,"tag":116,"props":19996,"children":19997},{},[19998],{"type":18,"tag":40,"props":19999,"children":20000},{},[20001],{"type":37,"value":20002},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":18,"tag":40,"props":20004,"children":20005},{},[20006],{"type":37,"value":20007},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":18,"tag":71,"props":20009,"children":20010},{},[],{"type":18,"tag":27,"props":20012,"children":20014},{":t":20013},"流量捕获",[],{"type":18,"tag":32,"props":20016,"children":20018},{"id":20017},"捕获-2",[20019],{"type":37,"value":20020},"捕获 2",{"type":18,"tag":40,"props":20022,"children":20023},{},[20024],{"type":37,"value":20025},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":37,"value":5371},{"type":18,"tag":391,"props":20028,"children":20029},{},[20030,20048],{"type":18,"tag":395,"props":20031,"children":20032},{},[20033],{"type":18,"tag":399,"props":20034,"children":20035},{},[20036,20040,20044],{"type":18,"tag":403,"props":20037,"children":20038},{},[20039],{"type":37,"value":3320},{"type":18,"tag":403,"props":20041,"children":20042},{},[20043],{"type":37,"value":4369},{"type":18,"tag":403,"props":20045,"children":20046},{},[20047],{"type":37,"value":2287},{"type":18,"tag":414,"props":20049,"children":20050},{},[20051,20069],{"type":18,"tag":399,"props":20052,"children":20053},{},[20054,20059,20064],{"type":18,"tag":421,"props":20055,"children":20056},{},[20057],{"type":37,"value":20058},"被动捕获",{"type":18,"tag":421,"props":20060,"children":20061},{},[20062],{"type":37,"value":20063},"在线路上传输时提取数据，如 Wireshark",{"type":18,"tag":421,"props":20065,"children":20066},{},[20067],{"type":37,"value":20068},"不直接与流量交互",{"type":18,"tag":399,"props":20070,"children":20071},{},[20072,20077,20082],{"type":18,"tag":421,"props":20073,"children":20074},{},[20075],{"type":37,"value":20076},"主动捕获",{"type":18,"tag":421,"props":20078,"children":20079},{},[20080],{"type":37,"value":20081},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":18,"tag":421,"props":20083,"children":20084},{},[20085],{"type":37,"value":20086},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":18,"tag":40,"props":20088,"children":20089},{},[20090],{"type":37,"value":20091},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":18,"tag":185,"props":20093,"children":20094},{},[20095,20100],{"type":18,"tag":189,"props":20096,"children":20097},{},[20098],{"type":37,"value":20099},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":18,"tag":189,"props":20101,"children":20102},{},[20103],{"type":37,"value":20104},"只查看正在测试的应用程序的流量",{"type":18,"tag":40,"props":20106,"children":20107},{},[20108],{"type":37,"value":20109},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":18,"tag":27,"props":20111,"children":20113},{":t":20112,":type":311},"系统调用跟踪",[],{"type":18,"tag":40,"props":20115,"children":20116},{},[20117],{"type":37,"value":20118},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":37,"value":20120},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":391,"props":20122,"children":20123},{},[20124,20143],{"type":18,"tag":395,"props":20125,"children":20126},{},[20127],{"type":18,"tag":399,"props":20128,"children":20129},{},[20130,20135,20139],{"type":18,"tag":403,"props":20131,"children":20132},{},[20133],{"type":37,"value":20134},"模式",{"type":18,"tag":403,"props":20136,"children":20137},{},[20138],{"type":37,"value":4369},{"type":18,"tag":403,"props":20140,"children":20141},{},[20142],{"type":37,"value":2287},{"type":18,"tag":414,"props":20144,"children":20145},{},[20146,20164,20178,20192,20206,20224,20238,20252],{"type":18,"tag":399,"props":20147,"children":20148},{},[20149,20154,20159],{"type":18,"tag":421,"props":20150,"children":20151},{},[20152],{"type":37,"value":20153},"用户模式",{"type":18,"tag":421,"props":20155,"children":20156},{},[20157],{"type":37,"value":20158},"操作系统普通应用程序和用户空间进程运行的模式",{"type":18,"tag":421,"props":20160,"children":20161},{},[20162],{"type":37,"value":20163},"权限限制",{"type":18,"tag":399,"props":20165,"children":20166},{},[20167,20170,20173],{"type":18,"tag":421,"props":20168,"children":20169},{},[],{"type":18,"tag":421,"props":20171,"children":20172},{},[],{"type":18,"tag":421,"props":20174,"children":20175},{},[20176],{"type":37,"value":20177},"隔离",{"type":18,"tag":399,"props":20179,"children":20180},{},[20181,20184,20187],{"type":18,"tag":421,"props":20182,"children":20183},{},[],{"type":18,"tag":421,"props":20185,"children":20186},{},[],{"type":18,"tag":421,"props":20188,"children":20189},{},[20190],{"type":37,"value":20191},"限制对系统资源的直接访问",{"type":18,"tag":399,"props":20193,"children":20194},{},[20195,20198,20201],{"type":18,"tag":421,"props":20196,"children":20197},{},[],{"type":18,"tag":421,"props":20199,"children":20200},{},[],{"type":18,"tag":421,"props":20202,"children":20203},{},[20204],{"type":37,"value":20205},"日常应用程序的运行",{"type":18,"tag":399,"props":20207,"children":20208},{},[20209,20214,20219],{"type":18,"tag":421,"props":20210,"children":20211},{},[20212],{"type":37,"value":20213},"内核模式",{"type":18,"tag":421,"props":20215,"children":20216},{},[20217],{"type":37,"value":20218},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":18,"tag":421,"props":20220,"children":20221},{},[20222],{"type":37,"value":20223},"完全权限",{"type":18,"tag":399,"props":20225,"children":20226},{},[20227,20230,20233],{"type":18,"tag":421,"props":20228,"children":20229},{},[],{"type":18,"tag":421,"props":20231,"children":20232},{},[],{"type":18,"tag":421,"props":20234,"children":20235},{},[20236],{"type":37,"value":20237},"关键操作",{"type":18,"tag":399,"props":20239,"children":20240},{},[20241,20244,20247],{"type":18,"tag":421,"props":20242,"children":20243},{},[],{"type":18,"tag":421,"props":20245,"children":20246},{},[],{"type":18,"tag":421,"props":20248,"children":20249},{},[20250],{"type":37,"value":20251},"直接访问和控制系统资源",{"type":18,"tag":399,"props":20253,"children":20254},{},[20255,20258,20261],{"type":18,"tag":421,"props":20256,"children":20257},{},[],{"type":18,"tag":421,"props":20259,"children":20260},{},[],{"type":18,"tag":421,"props":20262,"children":20263},{},[20264],{"type":37,"value":20265},"系统级调用",{"type":18,"tag":116,"props":20267,"children":20268},{},[20269],{"type":18,"tag":40,"props":20270,"children":20271},{},[20272],{"type":37,"value":20273},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":18,"tag":40,"props":20275,"children":20276},{},[20277],{"type":37,"value":20278},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":18,"tag":263,"props":20280,"children":20282},{"code":20281},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[20283],{"type":18,"tag":268,"props":20284,"children":20285},{"__ignoreMap":8},[20286],{"type":37,"value":20281},{"type":18,"tag":40,"props":20288,"children":20289},{},[20290],{"type":37,"value":20291},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":18,"tag":27,"props":20293,"children":20295},{":t":20294,":type":311},"网络编程的基础",[],{"type":18,"tag":40,"props":20297,"children":20298},{},[20299,20301,20308,20310,20317],{"type":37,"value":20300},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":18,"tag":193,"props":20302,"children":20305},{"href":20303,"rel":20304},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[197],[20306],{"type":37,"value":20307},"Berkeley Software Distribution（BSD）",{"type":37,"value":20309}," 完成的。因此在网络通信领域中，就离不开 ",{"type":18,"tag":193,"props":20311,"children":20314},{"href":20312,"rel":20313},"https://en.wikipedia.org/wiki/Berkeley_sockets",[197],[20315],{"type":37,"value":20316},"Berkeley Sockets",{"type":37,"value":20318},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":18,"tag":116,"props":20320,"children":20321},{},[20322],{"type":18,"tag":40,"props":20323,"children":20324},{},[20325,20327,20333,20335,20341],{"type":37,"value":20326},"如果你是类 Unix 系统，可以在终端输入 ",{"type":18,"tag":268,"props":20328,"children":20330},{"className":20329},[],[20331],{"type":37,"value":20332},"man 2 syscall_name",{"type":37,"value":20334}," 在终端中查看手册，比如 ",{"type":18,"tag":268,"props":20336,"children":20338},{"className":20337},[],[20339],{"type":37,"value":20340},"man 2 open",{"type":37,"value":20342}," 就可以查看系统调用第二章有关 open 的内容。",{"type":18,"tag":40,"props":20344,"children":20345},{},[20346],{"type":37,"value":20347},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":18,"tag":27,"props":20349,"children":20351},{":t":20350,":type":311},"不同平台之间的捕获",[],{"type":37,"value":3828},{"type":18,"tag":391,"props":20354,"children":20355},{},[20356,20375],{"type":18,"tag":395,"props":20357,"children":20358},{},[20359],{"type":18,"tag":399,"props":20360,"children":20361},{},[20362,20367,20371],{"type":18,"tag":403,"props":20363,"children":20364},{},[20365],{"type":37,"value":20366},"平台",{"type":18,"tag":403,"props":20368,"children":20369},{},[20370],{"type":37,"value":16122},{"type":18,"tag":403,"props":20372,"children":20373},{},[20374],{"type":37,"value":4369},{"type":18,"tag":414,"props":20376,"children":20377},{},[20378,20396,20414],{"type":18,"tag":399,"props":20379,"children":20380},{},[20381,20386,20391],{"type":18,"tag":421,"props":20382,"children":20383},{},[20384],{"type":37,"value":20385},"Linux",{"type":18,"tag":421,"props":20387,"children":20388},{},[20389],{"type":37,"value":20390},"Strace",{"type":18,"tag":421,"props":20392,"children":20393},{},[20394],{"type":37,"value":20395},"跟踪系统调用和信号",{"type":18,"tag":399,"props":20397,"children":20398},{},[20399,20404,20409],{"type":18,"tag":421,"props":20400,"children":20401},{},[20402],{"type":37,"value":20403},"macOS",{"type":18,"tag":421,"props":20405,"children":20406},{},[20407],{"type":37,"value":20408},"DTrace",{"type":18,"tag":421,"props":20410,"children":20411},{},[20412],{"type":37,"value":20413},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":18,"tag":399,"props":20415,"children":20416},{},[20417,20422,20427],{"type":18,"tag":421,"props":20418,"children":20419},{},[20420],{"type":37,"value":20421},"Windows",{"type":18,"tag":421,"props":20423,"children":20424},{},[20425],{"type":37,"value":20426},"Process Monitor",{"type":18,"tag":421,"props":20428,"children":20429},{},[20430],{"type":37,"value":20431},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":18,"tag":116,"props":20433,"children":20434},{},[20435,20440,20445],{"type":18,"tag":40,"props":20436,"children":20437},{},[20438],{"type":37,"value":20439},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":18,"tag":40,"props":20441,"children":20442},{},[20443],{"type":37,"value":20444},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":18,"tag":40,"props":20446,"children":20447},{},[20448],{"type":37,"value":20449},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":18,"tag":40,"props":20451,"children":20452},{},[20453],{"type":37,"value":20454},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":18,"tag":27,"props":20456,"children":20457},{":t":20076,":type":311},[],{"type":18,"tag":40,"props":20459,"children":20460},{},[20461],{"type":37,"value":20462},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":18,"tag":32,"props":20464,"children":20466},{"id":20465},"太阳底下没有新鲜事-3",[20467],{"type":37,"value":20468},"太阳底下没有新鲜事 3",{"type":18,"tag":27,"props":20470,"children":20472},{":t":20471},"太阳底下没有新鲜事",[],{"type":18,"tag":40,"props":20474,"children":20475},{},[20476],{"type":37,"value":20477},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":18,"tag":27,"props":20479,"children":20481},{":t":20480,":type":311},"一些进制的基础",[],{"type":18,"tag":40,"props":20483,"children":20484},{},[20485],{"type":37,"value":20486},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":37,"value":11879},{"type":18,"tag":391,"props":20489,"children":20490},{},[20491,20509],{"type":18,"tag":395,"props":20492,"children":20493},{},[20494],{"type":18,"tag":399,"props":20495,"children":20496},{},[20497,20501,20505],{"type":18,"tag":403,"props":20498,"children":20499},{},[20500],{"type":37,"value":1596},{"type":18,"tag":403,"props":20502,"children":20503},{},[20504],{"type":37,"value":4369},{"type":18,"tag":403,"props":20506,"children":20507},{},[20508],{"type":37,"value":2287},{"type":18,"tag":414,"props":20510,"children":20511},{},[20512,20530,20544,20558,20572,20590,20604],{"type":18,"tag":399,"props":20513,"children":20514},{},[20515,20520,20525],{"type":18,"tag":421,"props":20516,"children":20517},{},[20518],{"type":37,"value":20519},"二进制协议",{"type":18,"tag":421,"props":20521,"children":20522},{},[20523],{"type":37,"value":20524},"以二进制格式传输数据",{"type":18,"tag":421,"props":20526,"children":20527},{},[20528],{"type":37,"value":20529},"高效性",{"type":18,"tag":399,"props":20531,"children":20532},{},[20533,20536,20539],{"type":18,"tag":421,"props":20534,"children":20535},{},[],{"type":18,"tag":421,"props":20537,"children":20538},{},[],{"type":18,"tag":421,"props":20540,"children":20541},{},[20542],{"type":37,"value":20543},"紧凑性",{"type":18,"tag":399,"props":20545,"children":20546},{},[20547,20550,20553],{"type":18,"tag":421,"props":20548,"children":20549},{},[],{"type":18,"tag":421,"props":20551,"children":20552},{},[],{"type":18,"tag":421,"props":20554,"children":20555},{},[20556],{"type":37,"value":20557},"复杂性",{"type":18,"tag":399,"props":20559,"children":20560},{},[20561,20564,20567],{"type":18,"tag":421,"props":20562,"children":20563},{},[],{"type":18,"tag":421,"props":20565,"children":20566},{},[],{"type":18,"tag":421,"props":20568,"children":20569},{},[20570],{"type":37,"value":20571},"依赖性",{"type":18,"tag":399,"props":20573,"children":20574},{},[20575,20580,20585],{"type":18,"tag":421,"props":20576,"children":20577},{},[20578],{"type":37,"value":20579},"文本协议",{"type":18,"tag":421,"props":20581,"children":20582},{},[20583],{"type":37,"value":20584},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":18,"tag":421,"props":20586,"children":20587},{},[20588],{"type":37,"value":20589},"可读性",{"type":18,"tag":399,"props":20591,"children":20592},{},[20593,20596,20599],{"type":18,"tag":421,"props":20594,"children":20595},{},[],{"type":18,"tag":421,"props":20597,"children":20598},{},[],{"type":18,"tag":421,"props":20600,"children":20601},{},[20602],{"type":37,"value":20603},"效率低",{"type":18,"tag":399,"props":20605,"children":20606},{},[20607,20610,20613],{"type":18,"tag":421,"props":20608,"children":20609},{},[],{"type":18,"tag":421,"props":20611,"children":20612},{},[],{"type":18,"tag":421,"props":20614,"children":20615},{},[20616],{"type":37,"value":20617},"灵活性（容错性和可扩展性）",{"type":18,"tag":40,"props":20619,"children":20620},{},[20621,20623,20629],{"type":37,"value":20622},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":18,"tag":268,"props":20624,"children":20626},{"className":20625},[],[20627],{"type":37,"value":20628},"octet",{"type":37,"value":20630}," 来确保每个单位确实是 8 位。",{"type":18,"tag":116,"props":20632,"children":20633},{},[20634],{"type":18,"tag":40,"props":20635,"children":20636},{},[20637],{"type":37,"value":20638},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":18,"tag":263,"props":20640,"children":20642},{"code":20641},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[20643],{"type":18,"tag":268,"props":20644,"children":20645},{"__ignoreMap":8},[20646],{"type":37,"value":20641},{"type":18,"tag":40,"props":20648,"children":20649},{},[20650],{"type":37,"value":20651},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":18,"tag":116,"props":20653,"children":20654},{},[20655],{"type":18,"tag":40,"props":20656,"children":20657},{},[20658],{"type":37,"value":20659},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":18,"tag":27,"props":20661,"children":20663},{":t":20662,":type":311},"数值数据",[],{"type":18,"tag":40,"props":20665,"children":20666},{},[20667],{"type":37,"value":20668},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":18,"tag":40,"props":20670,"children":20671},{},[20672,20674,20679],{"type":37,"value":20673},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":18,"tag":747,"props":20675,"children":20676},{},[20677],{"type":37,"value":20678},"协议结构",{"type":37,"value":20680}," 与逆向。",{"type":18,"tag":40,"props":20682,"children":20683},{},[20684,20686,20691],{"type":37,"value":20685},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":18,"tag":747,"props":20687,"children":20688},{},[20689],{"type":37,"value":20690},"握手过程",{"type":37,"value":20692}," 来识别出加密套件。",{"type":18,"tag":40,"props":20694,"children":20695},{},[20696],{"type":37,"value":20697},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 The IDA Pro Book 这本书中找到我想要的。",{"title":8,"searchDepth":14369,"depth":14369,"links":20699},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":20703,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":20704,"description":8,"director":20705,"time":19608,"img":20706,"plan":14464,"body":20707,"_type":14453,"_id":20860,"_source":14455,"_file":20861,"_extension":14457},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":15,"children":20708,"toc":20858},[20709],{"type":18,"tag":19,"props":20710,"children":20711},{":by":21,":img":22,":plan":23,":title":24},[20712,20718,20722,20727,20732,20737,20742,20765,20779,20787,20792,20797,20835,20838,20844,20848,20853],{"type":18,"tag":32,"props":20713,"children":20715},{"id":20714},"理念-1",[20716],{"type":37,"value":20717},"理念 1",{"type":18,"tag":27,"props":20719,"children":20721},{":t":20720},"为什么看这本回忆录？",[],{"type":18,"tag":40,"props":20723,"children":20724},{},[20725],{"type":37,"value":20726},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":18,"tag":40,"props":20728,"children":20729},{},[20730],{"type":37,"value":20731},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":18,"tag":40,"props":20733,"children":20734},{},[20735],{"type":37,"value":20736},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":18,"tag":40,"props":20738,"children":20739},{},[20740],{"type":37,"value":20741},"以打开网站的第一版为例；",{"type":18,"tag":185,"props":20743,"children":20744},{},[20745,20750,20755,20760],{"type":18,"tag":189,"props":20746,"children":20747},{},[20748],{"type":37,"value":20749},"有的政府官网，显示的是当权者的讲话和文件；",{"type":18,"tag":189,"props":20751,"children":20752},{},[20753],{"type":37,"value":20754},"有的政府官网，是一些便民的工具；",{"type":18,"tag":189,"props":20756,"children":20757},{},[20758],{"type":37,"value":20759},"有的政府官网，是国家的景色，旅游信息；",{"type":18,"tag":189,"props":20761,"children":20762},{},[20763],{"type":37,"value":20764},"有的政府官网，是一些数据，一些便民信息；",{"type":18,"tag":40,"props":20766,"children":20767},{},[20768,20770,20777],{"type":37,"value":20769},"打开 ",{"type":18,"tag":193,"props":20771,"children":20774},{"href":20772,"rel":20773},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[197],[20775],{"type":37,"value":20776},"https://www.president.go.kr/",{"type":37,"value":20778}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":18,"tag":116,"props":20780,"children":20781},{},[20782],{"type":18,"tag":40,"props":20783,"children":20784},{},[20785],{"type":37,"value":20786},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":18,"tag":40,"props":20788,"children":20789},{},[20790],{"type":37,"value":20791},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":18,"tag":105,"props":20793,"children":20796},{"text":20794,"url":20795},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":18,"tag":116,"props":20798,"children":20799},{},[20800,20805,20810,20815,20820,20825,20830],{"type":18,"tag":40,"props":20801,"children":20802},{},[20803],{"type":37,"value":20804},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":18,"tag":40,"props":20806,"children":20807},{},[20808],{"type":37,"value":20809},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":18,"tag":40,"props":20811,"children":20812},{},[20813],{"type":37,"value":20814},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":18,"tag":40,"props":20816,"children":20817},{},[20818],{"type":37,"value":20819},"希望公民，与此同时和我一起走出这段历史。",{"type":18,"tag":40,"props":20821,"children":20822},{},[20823],{"type":37,"value":20824},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":18,"tag":40,"props":20826,"children":20827},{},[20828],{"type":37,"value":20829},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":18,"tag":40,"props":20831,"children":20832},{},[20833],{"type":37,"value":20834},"——文在寅",{"type":18,"tag":71,"props":20836,"children":20837},{},[],{"type":18,"tag":32,"props":20839,"children":20841},{"id":20840},"检察官-2",[20842],{"type":37,"value":20843},"检察官 2",{"type":18,"tag":27,"props":20845,"children":20847},{":t":20846},"青瓦台魔咒",[],{"type":18,"tag":40,"props":20849,"children":20850},{},[20851],{"type":37,"value":20852},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":18,"tag":40,"props":20854,"children":20855},{},[20856],{"type":37,"value":20857},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":14369,"depth":14369,"links":20859},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1757439900636]