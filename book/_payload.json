[{"data":1,"prerenderedAt":3084},["Reactive",2],{"equalBook":3},[4,1008,1520,1585,1807,2923],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"plan":13,"body":14,"_type":1003,"_id":1004,"_source":1005,"_file":1006,"_extension":1007},"/book/seven-languages-in-seven-weeks-bruce-a-tate","book",false,"","Seven Languages in Seven Weeks","Bruce A. Tate","2025.01.08","08/1.png","01",{"type":15,"children":16,"toc":1000},"root",[17],{"type":18,"tag":19,"props":20,"children":25},"element","book-content",{":by":21,":img":22,":plan":23,":title":24},"director","img","plan","title",[26,31,39,45,50,55,60,65,70,86,91,95,99,105,110,115,120,133,142,147,152,157,162,170,175,178,182,187,195,266,271,281,294,308,311,316,350,355,360,368,373,381,386,388,494,497,511,519,542,595,600,603,608,616,652,655,678,692,700,719,727,745,758,766,784,789,797,825,860,863,904,912,917,925,930,938],{"type":18,"tag":27,"props":28,"children":30},"text-title",{":t":29},"回顾下自己的十年经历",[],{"type":18,"tag":32,"props":33,"children":35},"h1",{"id":34},"总结自己-0",[36],{"type":37,"value":38},"text","总结自己 0",{"type":18,"tag":40,"props":41,"children":42},"p",{},[43],{"type":37,"value":44},"如果从 2015 那个对计算机懵懂的我来说，到 2025 年已经过了十年。可以说对计算机方面拥有了十年的兴趣。假如从 2018 我第一个漏洞算起，至今已经过了七年。再从 2020 我打算学习设计开始，已经过了五年。",{"type":18,"tag":40,"props":46,"children":47},{},[48],{"type":37,"value":49},"我觉得自己有很大的缺陷，基础不是特别牢固。之前做全栈的时候就有朋友指出我的基础不是特别好，最常说的话就是：“基础不牢，地动山摇”。做出的项目只是看起来很不错，但如果深挖细节，性能的处理就有一小部分的问题。虽然我总以 \"安全爱好者\" 作为 title，但我貌似并没有发现过比较知名且威胁较大的漏洞。",{"type":18,"tag":40,"props":51,"children":52},{},[53],{"type":37,"value":54},"更不用说什么 EDUSRC、MSRC、TSRC 这些了，仅仅是公益 SRC 和 CNVD 以及 Hackerone 这些，我所发现到的或提交的更多是大佬吃剩的边角料，甚至是不屑一顾的。但我之前缺奉为瑰宝，以筑起我那脆弱且不堪一击的自信。",{"type":18,"tag":40,"props":56,"children":57},{},[58],{"type":37,"value":59},"我还是比较庆幸自己无论做什么起码都能有一点成就的。虽然这个成就不高，但足以出去找个班上不至于饿死。做设计会有很多朋友支援下我;做安全拿到了漏洞赏金（虽然不多）;做全栈起码能混到小公司 offer；做舆情分析的时候，能被专业的人发现，引导我继续做下去。所以我还是比较幸运的，起码有点东西，虽然不多。",{"type":18,"tag":40,"props":61,"children":62},{},[63],{"type":37,"value":64},"看完这本书后，我觉得是时候筹备下我的代表作了。因为之前很多人觉得我是臭做设计的，甚至还有人说我是个臭美工！完全无视掉了我全栈和安全架构方面的才华。所以在这之后，我会筹备一个全栈的代表作；另一个是安全架构的代表作。至于设计的代表作已经有了，再往后无非是作品。我觉得代表作这个东西首先是能给人用的，其次才是给人看的；这样说服力大一点。",{"type":18,"tag":40,"props":66,"children":67},{},[68],{"type":37,"value":69},"之所以看这本书。首先是我觉得自己 Code 方面还是比较有问题，写 Code 总是很磨叽，和那种一写 code 就是写一天的有很大的差距。其次是我承认是被这本书的标题所吸引，作者懂不懂语言不重要，但他一定懂营销。我还不知道这本书有没有被 Percipio 收入，反正我 ACM 会员资格是到期了。这里我想吐槽下 ACM 的续费规则，我有钱的时候是想提前续费的，但 ACM 只能是快过期的时候才能续费。等真快过期的时候，我反而没钱续费了。",{"type":18,"tag":40,"props":71,"children":72},{},[73,75,84],{"type":37,"value":74},"无奈只能找盗版 PDF 来看。这里强烈推荐 ",{"type":18,"tag":76,"props":77,"children":81},"a",{"href":78,"rel":79},"https://skim-app.sourceforge.io/",[80],"nofollow",[82],{"type":37,"value":83},"Skip",{"type":37,"value":85}," 我觉得作为一款 PDF 阅读器来说，做到了快、文字能复制、复制的文字和 PDF 内容是一样的这种难度比较高的水准。甚至还是开源的，简直真的是太伟大了。我用过比较多的 PDF 阅读器，比如 Adobe Acrobat、PDF Expert。甚至是 福昕 PDF ，WPS PDF，给我的感觉都是卡顿还有比较大的复制问题，就是复制的文字和 PDF 里面的文字不一样。",{"type":18,"tag":40,"props":87,"children":88},{},[89],{"type":37,"value":90},"和 Chrome 等浏览器自带的 PDF 阅读器比我认为无非是多了个签名和画线、笔记类的扩充。忘记了阅读的这第一要素，特别是像我这种 English 比较差需要 Copy 文字翻译的，比较不由好。所以对于 Skip 我是强烈推荐的。",{"type":18,"tag":92,"props":93,"children":94},"hr",{},[],{"type":18,"tag":27,"props":96,"children":98},{":t":97},"作者致谢",[],{"type":18,"tag":32,"props":100,"children":102},{"id":101},"致谢-2",[103],{"type":37,"value":104},"致谢 2",{"type":18,"tag":40,"props":106,"children":107},{},[108],{"type":37,"value":109},"又到了一个非常具有代表性的篇幅，也就是：“What Readers Are Saying About Seven Languages in Seven Weeks” 你会看到国内那种类似 xxx 专家，xxx 公司 xxx 总监 xxx 团队 xxx 实验室对某本书的友情肯定和推荐。你别说你还真别说，如果这本书讲的是思维逻辑和拆解，那确实是很不错的。但如果是技术性的，那可能从 2010 年发售至今 2025 年历经十多年的发展，技术也可能会淘汰，语法可能会变，但逻辑和思维，依然是那套惯式。",{"type":18,"tag":40,"props":111,"children":112},{},[113],{"type":37,"value":114},"在这本书的前言中，作者透露出在 2009~2010 的时间段经历了很多人生的体验。例如他那 40 多岁的弟弟经历了心脏搭桥手术；三月底，他的妹妹确诊的乳腺癌；同月，他的母亲确诊晚期癌症。短短几天就去世了。",{"type":18,"tag":40,"props":116,"children":117},{},[118],{"type":37,"value":119},"在这期间内，作者虽然伤心欲绝。但他回想起母亲的点点滴滴，与母亲的每次相处，特别是在作者离家前上了母亲的几节美术课，虽然作者的画很糟糕。但母亲总能将破碎不堪的画幅玩就回来成为一件精美的艺术作品。这需要天赋和经验才能将一副处在崩溃边缘的画作挽救回来。",{"type":18,"tag":40,"props":121,"children":122},{},[123,125,131],{"type":37,"value":124},"不知你是否接触过绘画、美术。在我初中最后一年时，我因成绩垫底转到了美术班，我比较遗憾没有接触到绘画的全过程。绘画这门艺术，你需要经历过前期的 ",{"type":18,"tag":126,"props":127,"children":128},"strong",{},[129],{"type":37,"value":130},"构图、草稿、描边、上色、光影",{"type":37,"value":132}," 如果你是素描类的作品，还需要经历前期的封边到最后将美纹纸胶带撕下的过程。在作画前期，你需要构思好要画什么，然后通过一些技巧完成构图。比如透视、人体结构等。然后就是用铅笔打草稿，打草稿的过程要求一笔带过，如果不能一笔，那就需要勤加练习。所以在美术课中你会看到一开始要求画线，无论板绘还是素描都是这样。",{"type":18,"tag":134,"props":135,"children":136},"text-tip",{},[137],{"type":18,"tag":40,"props":138,"children":139},{},[140],{"type":37,"value":141},"美术一般讲究人较多，水彩纸要用 Arches、素描纸要用 Canson、铅笔要用 Marie's，高级点的铅笔还有 Derwent。水彩颜料要用 Winsor & Newton、白夜，一张不起眼的纸每张也许都是几块钱的。",{"type":18,"tag":40,"props":143,"children":144},{},[145],{"type":37,"value":146},"学会画线后，就需要学会光影。光的照射范围和影子，在素描中，只有黑色和白色，因此需要用到擦纸笔甚至可塑橡皮来实现。当然有些功力比较深的喜欢用手进行擦来延续黑色。",{"type":18,"tag":40,"props":148,"children":149},{},[150],{"type":37,"value":151},"如果你是走那种水彩、或者板绘，数字传媒的。可能会经历构图、草稿、描边的这个过程。然后就是上色、光影的应用。所以这个阶段，就和开发很类似。前期实现一个功能，然后用一个简陋的 GUi 进行交互。后期再将 GUi 进行美化和布局的排列。那么恭喜你，你已经成为了一个优秀的 Web 开发工程师，俗称前端。",{"type":18,"tag":40,"props":153,"children":154},{},[155],{"type":37,"value":156},"但对于后端，更多的是 code 和 code 之间功能的划分，每个 code 负责不同的功能，最后连点成线，打通 API 和 GUI 之间的联系。组成一个能跑的 base 或 GUI 程序，或者输出一个接口作为 API。那么恭喜你，你成为了软件开发工程师或后端工程师。",{"type":18,"tag":40,"props":158,"children":159},{},[160],{"type":37,"value":161},"一个简简单单的前言，就透露出作者对于软件设计和软件工程的功底。即使过了十多年，这套逻辑和拆解也亦然可以套在现代软件工程中，如果读者理解过 MVC 架构，那简直就是异曲同工。",{"type":18,"tag":134,"props":163,"children":164},{},[165],{"type":18,"tag":40,"props":166,"children":167},{},[168],{"type":37,"value":169},"When I told my mother that I would dedicate this book to her, she\nsaid that she would like that, but she had nothing to do with com-\nputers. That is true enough. The very thought of Windows would leave\nher helpless. But Mom, you have had everything to do with me. Your\nwell-timed words of encouragement inspired me, your love of creativity\nshaped me, and your enthusiasm and love of life guide me even now.\nAs I think about these experiences, I can’t help but feel a little better\nand a little stronger because I, too, am a canvas shaped by the master.\nThis book is dedicated with love to Lynda Lyle Tate, 1936–2010.",{"type":18,"tag":40,"props":171,"children":172},{},[173],{"type":37,"value":174},"所以在前沿的结尾，作者说母亲对作者的影响很大。这无关他的目前连 Windows 都不会用，而是传授给了儿子拆解的艺术。看一个产品如果从成品看肯定是高攀不起的，但如果一步一步的拆解，一个一个的功能实现，就会发现也不是那么的特别高攀不起。",{"type":18,"tag":92,"props":176,"children":177},{},[],{"type":18,"tag":27,"props":179,"children":181},{":t":180},"作者的致谢",[],{"type":18,"tag":40,"props":183,"children":184},{},[185],{"type":37,"value":186},"在致谢阶段，作者展示出了这本书的含金量，甚至比开篇那几位挂名推荐的还重量级。首先映入眼帘的是 Ruby community：",{"type":18,"tag":134,"props":188,"children":189},{},[190],{"type":18,"tag":40,"props":191,"children":192},{},[193],{"type":37,"value":194},"*相信能在 Wikipedia 中留名的实力。",{"type":18,"tag":196,"props":197,"children":198},"ol",{},[199,212,233,254],{"type":18,"tag":200,"props":201,"children":202},"li",{},[203,210],{"type":18,"tag":76,"props":204,"children":207},{"href":205,"rel":206},"https://ja.wikipedia.org/wiki/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D",[80],[208],{"type":37,"value":209},"松本行弘(Matz)",{"type":37,"value":211}," 他最著名的是 Ruby 编程语言及其原始参考实现 Matz 的 Ruby 解释器的首席设计师；",{"type":18,"tag":200,"props":213,"children":214},{},[215,222,224,231],{"type":18,"tag":76,"props":216,"children":219},{"href":217,"rel":218},"https://github.com/headius",[80],[220],{"type":37,"value":221},"Charles Nutter",{"type":37,"value":223},": ",{"type":18,"tag":76,"props":225,"children":228},{"href":226,"rel":227},"https://en.wikipedia.org/wiki/JRuby",[80],[229],{"type":37,"value":230},"Jruby",{"type":37,"value":232}," 的作者之一，能在 Java 和 Ruby 代码之间进行完全双向访问（类似于 Python 语言的 Jython ）。",{"type":18,"tag":200,"props":234,"children":235},{},[236,243,245,252],{"type":18,"tag":76,"props":237,"children":240},{"href":238,"rel":239},"https://github.com/evanphx",[80],[241],{"type":37,"value":242},"Evan Phoenix",{"type":37,"value":244}," : ",{"type":18,"tag":76,"props":246,"children":249},{"href":247,"rel":248},"https://en.wikipedia.org/wiki/Rubinius",[80],[250],{"type":37,"value":251},"Rubinius",{"type":37,"value":253}," 的作者；旨在 “为运行 Ruby 代码提供丰富、高性能的环境”",{"type":18,"tag":200,"props":255,"children":256},{},[257,264],{"type":18,"tag":76,"props":258,"children":261},{"href":259,"rel":260},"https://en.wikipedia.org/wiki/Tim_Bray",[80],[262],{"type":37,"value":263},"Tim Bray",{"type":37,"value":265},": 原始 XML 规范的共同作者之一;",{"type":18,"tag":40,"props":267,"children":268},{},[269],{"type":37,"value":270},"Ruby 以完全面向对象、可读性和简洁性、灵活性而知名。例如灵活的语法与动态特性：",{"type":18,"tag":272,"props":273,"children":275},"pre",{"code":274},"class Greeter\n  def initialize(name)\n    @name = name.capitalize\n  end\nend\n\n# 动态添加方法\nGreeter.define_method(:greet) do\n  \"Hello, #{@name}!\"\nend\n\ng = Greeter.new(\"ruby\")\nputs g.greet\n# 输出：Hello, Ruby!\n",[276],{"type":18,"tag":277,"props":278,"children":279},"code",{"__ignoreMap":8},[280],{"type":37,"value":274},{"type":18,"tag":40,"props":282,"children":283},{},[284,286,292],{"type":37,"value":285},"但看输出 ",{"type":18,"tag":277,"props":287,"children":289},{"className":288},[],[290],{"type":37,"value":291},"Hello, Ruby!",{"type":37,"value":293}," 的这个过程就感觉元编程也是 ruby 的特点之一。",{"type":18,"tag":40,"props":295,"children":296},{},[297,299,306],{"type":37,"value":298},"我之前浏览过 ",{"type":18,"tag":76,"props":300,"children":303},{"href":301,"rel":302},"https://ruby-china.org/",[80],[304],{"type":37,"value":305},"Ruby China",{"type":37,"value":307},"，那时候我有一个对 Ruby 的问题。但 Ruby China community 有一个会员限制。注册完需要三个月后才能发帖或发消息，结果就是一天后我的问题被我自己解决了，之后我就再也没有浏览过这个社区。",{"type":18,"tag":92,"props":309,"children":310},{},[],{"type":18,"tag":40,"props":312,"children":313},{},[314],{"type":37,"value":315},"接下来的就是 Io community, 并不是信息学奥林匹克竞赛 (英语：Olympiad in Informatics，简称：OI) 的那个 IO。而是 Io Programming Language：",{"type":18,"tag":196,"props":317,"children":318},{},[319,338],{"type":18,"tag":200,"props":320,"children":321},{},[322,329,330,336],{"type":18,"tag":76,"props":323,"children":326},{"href":324,"rel":325},"https://github.com/jeremytregunna",[80],[327],{"type":37,"value":328},"Jeremy Tregunna",{"type":37,"value":223},{"type":18,"tag":76,"props":331,"children":333},{"href":324,"rel":332},[80],[334],{"type":37,"value":335},"ioLang",{"type":37,"value":337}," 的作者之一;Io 的目标是探索概念统一和动态语言，因此权衡往往倾向于简单性和灵活性而不是性能。",{"type":18,"tag":200,"props":339,"children":340},{},[341,348],{"type":18,"tag":76,"props":342,"children":345},{"href":343,"rel":344},"https://github.com/stevedekorte",[80],[346],{"type":37,"value":347},"Steve Dekorte",{"type":37,"value":349},": Iolang 的作者之一；Iolang 于 2002 年创建，当时他试图用他的语言 Cel 来帮助朋友 Dru Nelson。他发现自己确实不太了解语言的工作原理，并开始编写一种小型语言来更好地理解问题。(ps: 我什么时候才能拥有这样的好朋友)",{"type":18,"tag":40,"props":351,"children":352},{},[353],{"type":37,"value":354},"光从描述，我已经对 Iolang 开始有兴趣了，特别句尾处的: \"You captured the imagination of the beta readers and cre-\nated the favorite language of many of them.(你激发并测试了读者的想象力，同时创造了许多人最喜欢的语言。)\"",{"type":18,"tag":40,"props":356,"children":357},{},[358],{"type":37,"value":359},"Iolang 作为动态语言，在类型阶段就比较宽松，比较灵活，例如:",{"type":18,"tag":272,"props":361,"children":363},{"code":362},"x = 42        # 整数\nx = \"Hello\"   # 重新赋值为字符串\n",[364],{"type":18,"tag":277,"props":365,"children":366},{"__ignoreMap":8},[367],{"type":37,"value":362},{"type":18,"tag":40,"props":369,"children":370},{},[371],{"type":37,"value":372},"而静态语言呢，类似 Typescript 这种类型比较强硬的：",{"type":18,"tag":272,"props":374,"children":376},{"code":375},"let x: number = 42;\nx = \"Hello\"; // 编译错误：类型不匹配\n",[377],{"type":18,"tag":277,"props":378,"children":379},{"__ignoreMap":8},[380],{"type":37,"value":375},{"type":18,"tag":40,"props":382,"children":383},{},[384],{"type":37,"value":385},"当然他们各具特点，灵活性、性能各有千秋，适应的项目需求也不同，有的适合大型的，多人合作开发，有的适合写个脚本或前期功能论证阶段的原型设计。动态语言的刻板印象就是 易上手、Code 简洁、类型宽松、快速开发、运行时发现等作为优点。我们列举几个常见的静态和动态语言：",{"type":37,"value":387},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":390,"children":391},"table",{},[392,411],{"type":18,"tag":393,"props":394,"children":395},"thead",{},[396],{"type":18,"tag":397,"props":398,"children":399},"tr",{},[400,406],{"type":18,"tag":401,"props":402,"children":403},"th",{},[404],{"type":37,"value":405},"动态语言",{"type":18,"tag":401,"props":407,"children":408},{},[409],{"type":37,"value":410},"静态语言",{"type":18,"tag":412,"props":413,"children":414},"tbody",{},[415,429,442,455,468,481],{"type":18,"tag":397,"props":416,"children":417},{},[418,424],{"type":18,"tag":419,"props":420,"children":421},"td",{},[422],{"type":37,"value":423},"Python",{"type":18,"tag":419,"props":425,"children":426},{},[427],{"type":37,"value":428},"C/C++",{"type":18,"tag":397,"props":430,"children":431},{},[432,437],{"type":18,"tag":419,"props":433,"children":434},{},[435],{"type":37,"value":436},"Ruby",{"type":18,"tag":419,"props":438,"children":439},{},[440],{"type":37,"value":441},"Java",{"type":18,"tag":397,"props":443,"children":444},{},[445,450],{"type":18,"tag":419,"props":446,"children":447},{},[448],{"type":37,"value":449},"JavaScript",{"type":18,"tag":419,"props":451,"children":452},{},[453],{"type":37,"value":454},"Go",{"type":18,"tag":397,"props":456,"children":457},{},[458,463],{"type":18,"tag":419,"props":459,"children":460},{},[461],{"type":37,"value":462},"PHP",{"type":18,"tag":419,"props":464,"children":465},{},[466],{"type":37,"value":467},"TypeScript",{"type":18,"tag":397,"props":469,"children":470},{},[471,476],{"type":18,"tag":419,"props":472,"children":473},{},[474],{"type":37,"value":475},"Lua",{"type":18,"tag":419,"props":477,"children":478},{},[479],{"type":37,"value":480},"Rust",{"type":18,"tag":397,"props":482,"children":483},{},[484,489],{"type":18,"tag":419,"props":485,"children":486},{},[487],{"type":37,"value":488},"Io",{"type":18,"tag":419,"props":490,"children":491},{},[492],{"type":37,"value":493},"Swift",{"type":18,"tag":92,"props":495,"children":496},{},[],{"type":18,"tag":40,"props":498,"children":499},{},[500,502,509],{"type":37,"value":501},"再然后就是 ",{"type":18,"tag":76,"props":503,"children":506},{"href":504,"rel":505},"https://en.wikipedia.org/wiki/Prolog",[80],[507],{"type":37,"value":508},"Prolog community(Programming in Logic community)",{"type":37,"value":510},"，这是一种逻辑编程语言。这种类型的我还没有接触过，他更像是数学中的逻辑推理。他的基础是一阶逻辑(First-order logic) 其核心的写法和经常接触到的语言有很大的不同。他的语法例如：",{"type":18,"tag":272,"props":512,"children":514},{"code":513},"grandparent(X, Z) :- parent(X, Y), parent(Y, Z).\n父母关系：如果 X 是 Y 的父母，且 Y 是 Z 的父母，则 X 是 Z 的祖父母。\n",[515],{"type":18,"tag":277,"props":516,"children":517},{"__ignoreMap":8},[518],{"type":37,"value":513},{"type":18,"tag":40,"props":520,"children":521},{},[522,524,531,533,540],{"type":37,"value":523},"在一些大学中，会将 Prolog 放到",{"type":18,"tag":76,"props":525,"children":528},{"href":526,"rel":527},"https://en.wikipedia.org/wiki/Logic_programming",[80],[529],{"type":37,"value":530},"逻辑编程课",{"type":37,"value":532}," 中。如果很不幸你没有上过（ps: 我也没上过）那可以蹭一下 The University of Texas at Dallas(德克萨斯大学达拉斯分校) 的课件 ",{"type":18,"tag":76,"props":534,"children":537},{"href":535,"rel":536},"https://personal.utdallas.edu/~hamlen/cs6371sp14/lecture21.pdf",[80],[538],{"type":37,"value":539},"Logic Programming:CS 6371: Advanced Programming Languages",{"type":37,"value":541},"；如果要介绍 Prolong 那就需要介绍一阶逻辑和逻辑连接词、谓词逻辑、量词等。所以我会将这部分的介绍放到 Prolog 那一章节中，这里我们就介绍作者致谢的大佬。",{"type":18,"tag":196,"props":543,"children":544},{},[545,566],{"type":18,"tag":200,"props":546,"children":547},{},[548,555,557,564],{"type":18,"tag":76,"props":549,"children":552},{"href":550,"rel":551},"https://aws.amazon.com/cn/developer/community/heroes/brian-tarbox/",[80],[553],{"type":37,"value":554},"Brian Tarbox",{"type":37,"value":556},": 通过 Prolong 进行建模，用于模拟和分析海豚在实验中的思维模式，非常有趣。可以前往他的个人 ",{"type":18,"tag":76,"props":558,"children":561},{"href":559,"rel":560},"https://briantarbox.com/",[80],[562],{"type":37,"value":563},"blog",{"type":37,"value":565}," 了解更多",{"type":18,"tag":200,"props":567,"children":568},{},[569,576,577,584,586,593],{"type":18,"tag":76,"props":570,"children":573},{"href":571,"rel":572},"https://en.wikipedia.org/wiki/Joe_Armstrong_(programmer)",[80],[574],{"type":37,"value":575},"Joe Armstrong",{"type":37,"value":223},{"type":18,"tag":76,"props":578,"children":581},{"href":579,"rel":580},"https://en.wikipedia.org/wiki/Erlang_(programming_language)",[80],[582],{"type":37,"value":583},"Erlang",{"type":37,"value":585}," 设计者之一。这是一种并发、分布式、容错的编程语言，",{"type":18,"tag":76,"props":587,"children":590},{"href":588,"rel":589},"https://en.wikipedia.org/wiki/Elixir_(programming_language)",[80],[591],{"type":37,"value":592},"Elixir",{"type":37,"value":594}," 就是构建在 Erlang 之上。",{"type":18,"tag":40,"props":596,"children":597},{},[598],{"type":37,"value":599},"作为以分布式、多线程而闻名的语言。“Let it crash（让它崩溃）” 是 Erlang 语言的一种设计哲学。当一个进程发生错误或异常时，不必尝试捕获和处理错误，而是让该进程崩溃，然后通过其他机制（如重启或恢复）来恢复系统的正常运行。",{"type":18,"tag":92,"props":601,"children":602},{},[],{"type":18,"tag":40,"props":604,"children":605},{},[606],{"type":37,"value":607},"接下来轮到了 Scala community 登场。该语言旨在解决 对 Java 的批评，一句话就以证明其含金量。他是一种 强大的静态类型高级通用编程语言，支持面向对象编程和函数式编程。",{"type":18,"tag":272,"props":609,"children":611},{"code":610},"import java.time.LocalDate as Date\nimport Payment.*\n\nval name = \"Bib Fortuna\"\nval digits = 1983_0525_0000_0000L\nval expires = Date.of(1983, 5, 25)\n\nenum Payment:\n  case Card(name: String, digits: Long, expires: Date)\n  case PayPal(email: String)\n\ndef process(kind: Payment) = kind match\n  case Card(name, digits, expires) =>\n    s\"Processing credit card $name, $digits, $expires\"\n  case PayPal(email) =>\n    s\"Processing PayPal account $email\"\n\nprocess(Card(name, digits, expires))\n",[612],{"type":18,"tag":277,"props":613,"children":614},{"__ignoreMap":8},[615],{"type":37,"value":610},{"type":18,"tag":196,"props":617,"children":618},{},[619,640],{"type":18,"tag":200,"props":620,"children":621},{},[622,629,631,638],{"type":18,"tag":76,"props":623,"children":626},{"href":624,"rel":625},"https://dev.java/author/VenkatSubramaniam/",[80],[627],{"type":37,"value":628},"Venkat Subramaniam ",{"type":37,"value":630},": ACM 高级会员，",{"type":18,"tag":76,"props":632,"children":635},{"href":633,"rel":634},"https://pragprog.com/titles/vsscala2/pragmatic-scala/",[80],[636],{"type":37,"value":637},"Programming Scala",{"type":37,"value":639}," 一书作者。",{"type":18,"tag":200,"props":641,"children":642},{},[643,650],{"type":18,"tag":76,"props":644,"children":647},{"href":645,"rel":646},"https://en.wikipedia.org/wiki/Martin_Odersky",[80],[648],{"type":37,"value":649},"Martin Odersky",{"type":37,"value":651},": 他设计了 Scala。",{"type":18,"tag":92,"props":653,"children":654},{},[],{"type":18,"tag":40,"props":656,"children":657},{},[658,660,667,669,676],{"type":37,"value":659},"还有 ",{"type":18,"tag":76,"props":661,"children":664},{"href":662,"rel":663},"https://en.wikipedia.org/wiki/Clojure",[80],[665],{"type":37,"value":666},"Clojure community",{"type":37,"value":668},"。Clojure 是 ",{"type":18,"tag":76,"props":670,"children":673},{"href":671,"rel":672},"https://en.wikipedia.org/wiki/Lisp_(programming_language)",[80],[674],{"type":37,"value":675},"lisp",{"type":37,"value":677}," 家族的一部分，或者说他是 Lisp 的现代化变体。他继承了 lisp 的特性。同时在并在并发和不变数据结构上做出了优化（Lisp 是可变的）",{"type":18,"tag":40,"props":679,"children":680},{},[681,683,690],{"type":37,"value":682},"Lisp 发明和推广的 ",{"type":18,"tag":76,"props":684,"children":687},{"href":685,"rel":686},"https://en.wikipedia.org/wiki/S-expression",[80],[688],{"type":37,"value":689},"S 表达式(S-expression)",{"type":37,"value":691}," 还是很有特点的，例如一个计算式子：",{"type":18,"tag":272,"props":693,"children":695},{"code":694},"(* (+ 1 2) (+ 3 4))\n\n  + 1 2：表示加法操作，等于 3。\n  + 3 4：表示加法操作，等于 7。\n  *：表示乘法操作，将 3 和 7 相乘，结果是 21。\n  \n  如果是 Python 式子就是：\n\nresult = (1 + 2) * (3 + 4)\nprint(result)\n",[696],{"type":18,"tag":277,"props":697,"children":698},{"__ignoreMap":8},[699],{"type":37,"value":694},{"type":18,"tag":40,"props":701,"children":702},{},[703,705,712,714],{"type":37,"value":704},"到这里可能 Python 的式子比 S-expression 更接近传统的数学表达式。如果看到这那就可能认为 Lisp 还是不行，不如去学 Python。但 Lisp 还有一个特点是 ",{"type":18,"tag":76,"props":706,"children":709},{"href":707,"rel":708},"https://en.wikipedia.org/wiki/Metaprogramming#:~:text=Metaprogramming%20is%20a%20computer%20programming,even%20modify%20itself%2C%20while%20running.",[80],[710],{"type":37,"value":711},"元编程（Metaprogramming）能力",{"type":37,"value":713}," 指编写可以操作、生成、或修改程序代码的程序的能力。也就是 ",{"type":18,"tag":126,"props":715,"children":716},{},[717],{"type":37,"value":718},"——把代码当作数据来处理，从而实现动态的行为和更高的灵活性。",{"type":18,"tag":272,"props":720,"children":722},{"code":721},";; 定义一个宏，用来生成“加法函数”\n(defmacro make-adder (n)\n  `(lambda (x) (+ x ,n)))\n\n;; 使用宏生成一个加法函数\n(defparameter add-five (make-adder 5))\n\n;; 测试生成的函数\n(format t \"Result: ~A~%\" (funcall add-five 10))  ; 输出 \"Result: 15\"\n",[723],{"type":18,"tag":277,"props":724,"children":725},{"__ignoreMap":8},[726],{"type":37,"value":721},{"type":18,"tag":196,"props":728,"children":729},{},[730,735,740],{"type":18,"tag":200,"props":731,"children":732},{},[733],{"type":37,"value":734},"make-adder 是一个宏，它接收参数 n，并返回一个 新的函数代码：(lambda (x) (+ x ,n))。注意，这里返回的是代码，而不是一个值。",{"type":18,"tag":200,"props":736,"children":737},{},[738],{"type":37,"value":739},"宏的作用是在 编译时生成或修改代码，而不是像 Python 闭包那样只是生成行为。",{"type":18,"tag":200,"props":741,"children":742},{},[743],{"type":37,"value":744},"宏展开时，(make-adder 5) 会变成 (lambda (x) (+ x 5))，并且这个生成的函数将在运行时执行。",{"type":18,"tag":40,"props":746,"children":747},{},[748,750,756],{"type":37,"value":749},"在上面这个例子中，",{"type":18,"tag":277,"props":751,"children":753},{"className":752},[],[754],{"type":37,"value":755},"宏的定义实际上是操作代码的模板，生成新的 Code。",{"type":37,"value":757}," 如果是 Python，那么可以通过函数来生成一个加法函数：",{"type":18,"tag":272,"props":759,"children":761},{"code":760},"def make_adder(n):\n    return lambda x: x + n\n\n# 使用函数生成一个加法函数\nadd_five = make_adder(5)\n\n# 测试生成的函数\nprint(f\"Result: {add_five(10)}\")  # 输出 \"Result: 15\"\n",[762],{"type":18,"tag":277,"props":763,"children":764},{"__ignoreMap":8},[765],{"type":37,"value":760},{"type":18,"tag":196,"props":767,"children":768},{},[769,774,779],{"type":18,"tag":200,"props":770,"children":771},{},[772],{"type":37,"value":773},"make_adder 函数返回了一个新的函数（lambda x: x + n）。",{"type":18,"tag":200,"props":775,"children":776},{},[777],{"type":37,"value":778},"n 被捕获在闭包中，生成了一个 “动态的行为”：返回的函数始终会把输入值 x 加上 n。",{"type":18,"tag":200,"props":780,"children":781},{},[782],{"type":37,"value":783},"这只是动态生成了一个函数，而 没有生成或修改代码。我们只是定义了一个行为，而不是在代码层面进行操作。",{"type":18,"tag":40,"props":785,"children":786},{},[787],{"type":37,"value":788},"Lisp、Clojure、Scheme 等语言通过其 S-expression 和宏系统提供强大的元编程能力。特点是代码即数据（homoiconicity），天然支持元编程；而 Python 通过反射和动态代码生成支持元编程，他的运行时动态性强，支持动态类型，如果要展示不可变结构，那下面的例子就很贴合：",{"type":18,"tag":272,"props":790,"children":792},{"code":791},"(defn transform [person]\n   (update (assoc person :hair-color :gray) :age inc))\n\n(transform {:name \"Socrates\", :age 39})\n;; => {:name \"Socrates\", :age 40, :hair-color :gray}\n",[793],{"type":18,"tag":277,"props":794,"children":795},{"__ignoreMap":8},[796],{"type":37,"value":791},{"type":18,"tag":40,"props":798,"children":799},{},[800,802,808,810,816,818,823],{"type":37,"value":801},"最后输出的还是 40，因为在这个过程中 ",{"type":18,"tag":277,"props":803,"children":805},{"className":804},[],[806],{"type":37,"value":807},"age",{"type":37,"value":809}," 通过 ",{"type":18,"tag":277,"props":811,"children":813},{"className":812},[],[814],{"type":37,"value":815},"inc",{"type":37,"value":817}," 函数进行了递增操作，所以是 40 而不是 39。这展示了 Clojure 的不可变结构的特性。所以，我们花了几个部分了解 Lisp 和 Clojure，不仅是处于了解，而是对 ",{"type":18,"tag":126,"props":819,"children":820},{},[821],{"type":37,"value":822},"一个具有悠久历史和独特的、完全括号的前缀表示法的编程语言家族。",{"type":37,"value":824}," 的敬意。",{"type":18,"tag":196,"props":826,"children":827},{},[828,848],{"type":18,"tag":200,"props":829,"children":830},{},[831,838,840,847],{"type":18,"tag":76,"props":832,"children":835},{"href":833,"rel":834},"https://github.com/stuarthalloway",[80],[836],{"type":37,"value":837},"Stuart Halloway",{"type":37,"value":839},": Clojure 协作者; ",{"type":18,"tag":76,"props":841,"children":844},{"href":842,"rel":843},"https://pragprog.com/titles/shcloj3/programming-clojure-third-edition/",[80],[845],{"type":37,"value":846},"Programming Clojure",{"type":37,"value":639},{"type":18,"tag":200,"props":849,"children":850},{},[851,858],{"type":18,"tag":76,"props":852,"children":855},{"href":853,"rel":854},"https://en.wikipedia.org/wiki/Rich_Hickey",[80],[856],{"type":37,"value":857},"Rich Hickey ",{"type":37,"value":859},": Clojure 创建者。",{"type":18,"tag":92,"props":861,"children":862},{},[],{"type":18,"tag":40,"props":864,"children":865},{},[866,868,875,877,884,886,893,895,902],{"type":37,"value":867},"还还还有 ",{"type":18,"tag":76,"props":869,"children":872},{"href":870,"rel":871},"https://en.wikipedia.org/wiki/Haskell",[80],[873],{"type":37,"value":874},"Haskell community",{"type":37,"value":876},"，Haskell 专为教学、研究和工业应用而设计。以逻辑学家",{"type":18,"tag":76,"props":878,"children":881},{"href":879,"rel":880},"https://en.wikipedia.org/wiki/Haskell_Curry",[80],[882],{"type":37,"value":883},"哈斯克尔・柯里 (Haskell Curry) ",{"type":37,"value":885}," 的名字命名，他的 ",{"type":18,"tag":76,"props":887,"children":890},{"href":888,"rel":889},"https://en.wikipedia.org/wiki/Lambda_calculus",[80],[891],{"type":37,"value":892},"Lambda 演算（Lambda Calculus）",{"type":37,"value":894}," 是函数式编程的基础，以及他对 ",{"type":18,"tag":76,"props":896,"children":899},{"href":897,"rel":898},"https://en.wikipedia.org/wiki/Currying",[80],[900],{"type":37,"value":901},"Currying",{"type":37,"value":903}," 的贡献。",{"type":18,"tag":272,"props":905,"children":907},{"code":906},"•   在 Haskell 诞生之前，函数式编程语言如 Lisp、ML 等已经存在，但它们没有完全基于纯函数式的理念。\n•   Haskell 作为一门“纯函数式编程语言”，其命名体现了其与数学逻辑和 Lambda 演算的深厚联系。\n",[908],{"type":18,"tag":277,"props":909,"children":910},{"__ignoreMap":8},[911],{"type":37,"value":906},{"type":18,"tag":40,"props":913,"children":914},{},[915],{"type":37,"value":916},"所以，作为一个纯函数式的编程语言，它的式子是这样的：",{"type":18,"tag":272,"props":918,"children":920},{"code":919},"-- 纯函数：输入相同，输出总是相同\nadd :: Int -> Int -> Int\nadd x y = x + y\n\n-- 调用\nmain = print (add 3 5)  -- 输出 8\n",[921],{"type":18,"tag":277,"props":922,"children":923},{"__ignoreMap":8},[924],{"type":37,"value":919},{"type":18,"tag":40,"props":926,"children":927},{},[928],{"type":37,"value":929},"那么不是纯函数的是这样的：",{"type":18,"tag":272,"props":931,"children":933},{"code":932},"counter = 0\n\ndef increment():\n    global counter\n    counter += 1\n    return counter\n",[934],{"type":18,"tag":277,"props":935,"children":936},{"__ignoreMap":8},[937],{"type":37,"value":932},{"type":18,"tag":196,"props":939,"children":940},{},[941,962],{"type":18,"tag":200,"props":942,"children":943},{},[944,951,953,960],{"type":18,"tag":76,"props":945,"children":948},{"href":946,"rel":947},"https://en.wikipedia.org/wiki/Philip_Wadler",[80],[949],{"type":37,"value":950},"Phillip Wadler",{"type":37,"value":952},": 创造的 ",{"type":18,"tag":76,"props":954,"children":957},{"href":955,"rel":956},"https://en.wikipedia.org/wiki/Orwell_(programming_language)",[80],[958],{"type":37,"value":959},"Orwell",{"type":37,"value":961}," 被认为是 Haskell 的先驱; Haskell 设计者之一。推动了函数式编程从理论研究到实际应用的转变。",{"type":18,"tag":200,"props":963,"children":964},{},[965,972,973,980,982,989,991,998],{"type":18,"tag":76,"props":966,"children":969},{"href":967,"rel":968},"https://en.wikipedia.org/wiki/Simon_Peyton_Jones",[80],[970],{"type":37,"value":971},"Simon Peyton Jones",{"type":37,"value":223},{"type":18,"tag":76,"props":974,"children":977},{"href":975,"rel":976},"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler",[80],[978],{"type":37,"value":979},"GHC(The Glasgow Haskell Compiler, Haskell 编译器) ",{"type":37,"value":981}," 开发者之一，他推动了 ",{"type":18,"tag":76,"props":983,"children":986},{"href":984,"rel":985},"https://en.wikipedia.org/wiki/Type_inference",[80],[987],{"type":37,"value":988},"类型推导",{"type":37,"value":990}," 和 ",{"type":18,"tag":76,"props":992,"children":995},{"href":993,"rel":994},"https://en.wikipedia.org/wiki/Type_safety",[80],[996],{"type":37,"value":997},"类型安全",{"type":37,"value":999}," 的概念",{"title":8,"searchDepth":1001,"depth":1001,"links":1002},2,[],"markdown","content:book:seven-languages-in-seven-weeks---bruce-a-tate.md","content","book/seven-languages-in-seven-weeks---bruce-a-tate.md","md",{"_path":1009,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1010,"description":8,"director":1011,"time":1012,"img":1013,"body":1014,"_type":1003,"_id":1518,"_source":1005,"_file":1519,"_extension":1007},"/book/journey-to-the-west","西游记","吴承恩","2025","07/1.png",{"type":15,"children":1015,"toc":1516},[1016],{"type":18,"tag":19,"props":1017,"children":1019},{":by":21,":img":22,":plan":1018,":title":24},"100",[1020,1026,1030,1035,1041,1045,1059,1072,1077,1082,1084,1227,1232,1237,1242,1254,1259,1264,1269,1277,1282,1285,1291,1295,1300,1308,1313,1318,1323,1331,1343,1348,1353,1356,1362,1366,1371,1376,1381,1386,1409,1414,1419,1427,1432,1444,1449,1452,1458,1462,1467,1475,1480,1488,1493,1501,1506,1511],{"type":18,"tag":32,"props":1021,"children":1023},{"id":1022},"四大名著-1",[1024],{"type":37,"value":1025},"四大名著 1",{"type":18,"tag":27,"props":1027,"children":1029},{":t":1028},"终于理解了为什么这几本书是四大名著",[],{"type":18,"tag":40,"props":1031,"children":1032},{},[1033],{"type":37,"value":1034},"在小时候。老师都说三国演义、水浒传、西游记、红楼梦是中国的四大名著。那时候还不解就四本书为什么含金量这么高。过了很多年初到社会再细品这四本书，发现这就是中国社会的缩影，其中不乏对人与人之间，国家运行时的一些隐晦表达，都在这四本书中一一体会。原来是我的打开方式不对，要读懂这几本书，要贴合现实发生的事情，来进行解读，就会发现目前现代社会和几百年前的社会并无不同，人与人和国家的运行时，都与当时大差不差。",{"type":18,"tag":32,"props":1036,"children":1038},{"id":1037},"八十一难-论功行赏-1",[1039],{"type":37,"value":1040},"八十一难 论功行赏 1",{"type":18,"tag":27,"props":1042,"children":1044},{":t":1043},"论功行赏，八戒垫底",[],{"type":18,"tag":40,"props":1046,"children":1047},{},[1048,1050,1057],{"type":37,"value":1049},"如果将西天取经，比作一个项目，一个工程的话。那么取经工程保护、记录、汇报的组织就是",{"type":18,"tag":76,"props":1051,"children":1054},{"href":1052,"rel":1053},"https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%B8%B8%E8%AE%B0%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8#%E5%85%B6%E4%BB%96_2",[80],[1055],{"type":37,"value":1056},"六丁六甲",{"type":37,"value":1058},"，向观音菩萨交法旨，而观音菩萨向如来交旨。观音菩萨开始审阅六丁六甲在西天取经的记录，发现少了一难，只有八十难。",{"type":18,"tag":134,"props":1060,"children":1061},{},[1062,1067],{"type":18,"tag":40,"props":1063,"children":1064},{},[1065],{"type":37,"value":1066},"如来因打发唐僧去后，才散了传经之会。傍又闪上观世音菩萨合掌启佛祖道：“弟子当年领金旨向东土寻取经之人，今已成功，共计得一十四年，乃五千零四十日，还少八日，不合藏数。望我世尊早赐圣僧回东转西，须在八日之内庶完藏数。准弟子缴还金旨。” 如来大喜道：“所言甚当，准缴金旨。” 即叫八大金刚分付道：“汝等快使神威，驾送圣僧回东，把真经传留，即引圣僧西回。须在八日之内，以完一藏之数，勿得迟违。” 金刚随即赶上唐僧，叫道：“取经的，跟我来。” 唐僧等俱身轻体健，荡荡飘飘，随著金刚，驾云而起。这才是：",{"type":18,"tag":40,"props":1068,"children":1069},{},[1070],{"type":37,"value":1071},"大鼋是一只在通天河上的巨鼋，唐僧师徒第一次遇见他时，他载唐僧等人渡河，并希望唐僧能替他问佛祖还需修行多久才能修成正果化身成人。回程的时候大鼋再度载唐僧师徒及经书过河，半途上问起这个承诺，然而早已遗忘此事的唐三藏无言以对，于是不高兴的大鼋身子一翻，把唐僧淹入水中。这个事件是唐僧取经所需历经的八十一难中的最后一难。",{"type":18,"tag":40,"props":1073,"children":1074},{},[1075],{"type":37,"value":1076},"大鼋对唐僧的要求可谓是人之常情，毕竟在通天河上班了很多年，帮助了唐僧；想问问佛祖还有多少年才能退休。但唐僧又没有帮大鼋办事，所以将唐僧摔下。",{"type":18,"tag":40,"props":1078,"children":1079},{},[1080],{"type":37,"value":1081},"到了长安后，取经工程以步入后章。虽然取经计划原定是三年，但经历了十多年后才取回，可谓是历经磨难。虽然时间超出了，但经是取回了。因此李世民撰文《圣教序》为取经工程定性。",{"type":37,"value":1083},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":1085,"children":1086},{},[1087,1113],{"type":18,"tag":393,"props":1088,"children":1089},{},[1090],{"type":18,"tag":397,"props":1091,"children":1092},{},[1093,1098,1103,1108],{"type":18,"tag":401,"props":1094,"children":1095},{},[1096],{"type":37,"value":1097},"名字",{"type":18,"tag":401,"props":1099,"children":1100},{},[1101],{"type":37,"value":1102},"受封",{"type":18,"tag":401,"props":1104,"children":1105},{},[1106],{"type":37,"value":1107},"等级",{"type":18,"tag":401,"props":1109,"children":1110},{},[1111],{"type":37,"value":1112},"作用",{"type":18,"tag":412,"props":1114,"children":1115},{},[1116,1139,1161,1182,1205],{"type":18,"tag":397,"props":1117,"children":1118},{},[1119,1124,1129,1134],{"type":18,"tag":419,"props":1120,"children":1121},{},[1122],{"type":37,"value":1123},"唐僧",{"type":18,"tag":419,"props":1125,"children":1126},{},[1127],{"type":37,"value":1128},"旃檀功德佛",{"type":18,"tag":419,"props":1130,"children":1131},{},[1132],{"type":37,"value":1133},"修成正果",{"type":18,"tag":419,"props":1135,"children":1136},{},[1137],{"type":37,"value":1138},"一人之下万人之上",{"type":18,"tag":397,"props":1140,"children":1141},{},[1142,1147,1152,1157],{"type":18,"tag":419,"props":1143,"children":1144},{},[1145],{"type":37,"value":1146},"孙悟空",{"type":18,"tag":419,"props":1148,"children":1149},{},[1150],{"type":37,"value":1151},"斗战圣佛",{"type":18,"tag":419,"props":1153,"children":1154},{},[1155],{"type":37,"value":1156},"大职正果",{"type":18,"tag":419,"props":1158,"children":1159},{},[1160],{"type":37,"value":1138},{"type":18,"tag":397,"props":1162,"children":1163},{},[1164,1169,1174,1178],{"type":18,"tag":419,"props":1165,"children":1166},{},[1167],{"type":37,"value":1168},"沙僧",{"type":18,"tag":419,"props":1170,"children":1171},{},[1172],{"type":37,"value":1173},"金身罗汉",{"type":18,"tag":419,"props":1175,"children":1176},{},[1177],{"type":37,"value":1156},{"type":18,"tag":419,"props":1179,"children":1180},{},[1181],{"type":37,"value":1138},{"type":18,"tag":397,"props":1183,"children":1184},{},[1185,1190,1195,1200],{"type":18,"tag":419,"props":1186,"children":1187},{},[1188],{"type":37,"value":1189},"小白龙",{"type":18,"tag":419,"props":1191,"children":1192},{},[1193],{"type":37,"value":1194},"八部天龙广力菩萨",{"type":18,"tag":419,"props":1196,"children":1197},{},[1198],{"type":37,"value":1199},"汝职正果",{"type":18,"tag":419,"props":1201,"children":1202},{},[1203],{"type":37,"value":1204},"保护灵山，禁卫军首领",{"type":18,"tag":397,"props":1206,"children":1207},{},[1208,1213,1218,1222],{"type":18,"tag":419,"props":1209,"children":1210},{},[1211],{"type":37,"value":1212},"猪八戒",{"type":18,"tag":419,"props":1214,"children":1215},{},[1216],{"type":37,"value":1217},"净坛使者",{"type":18,"tag":419,"props":1219,"children":1220},{},[1221],{"type":37,"value":1199},{"type":18,"tag":419,"props":1223,"children":1224},{},[1225],{"type":37,"value":1226},"打扫贡品的",{"type":18,"tag":40,"props":1228,"children":1229},{},[1230],{"type":37,"value":1231},"回到灵山后。唐僧是如来的二弟子，但不尊重佛法，投胎至东土大唐。取经修成正果后受封——旃檀功德佛（修成正果）；孙悟空虽大闹天宫，被如来镇压五百年，但取经过程中降妖伏魔受封斗战圣佛（大职正果）；猪八戒是净坛使者（汝职正果）。",{"type":18,"tag":40,"props":1233,"children":1234},{},[1235],{"type":37,"value":1236},"猪八戒对受封不满，于是质问如来被如来狠狠 PUA。说猪八戒由于 “又有顽心，色情未泯”，为如来佛祖的部下，负责享用一切人世间作功德的供品。绝对是 PUA 猪八戒，成佛了想吃什么没有，非要当个打工人吃边角料。虽然净水楼台先得月，但如果成佛了，躺在床上还有人喂这不香吗？",{"type":18,"tag":40,"props":1238,"children":1239},{},[1240],{"type":37,"value":1241},"而到了沙僧，沙僧虽然在蟠桃会上摔杯为号，威胁到了玉帝被贬流沙河。受封金身罗汉（大职正果）；白龙马在取经路上驼经有功，受封八部天龙广力菩萨（汝职正果）",{"type":18,"tag":40,"props":1243,"children":1244},{},[1245,1247,1252],{"type":37,"value":1246},"这种论功行赏，看的是他们背后的势力。唐僧功劳最大，取经团队的主要负责人；孙悟空背后就是道教，佛教，玉帝。谁都搞不死孙悟空，那既然这样不如 ",{"type":18,"tag":126,"props":1248,"children":1249},{},[1250],{"type":37,"value":1251},"请客，斩首，收下当狗",{"type":37,"value":1253}," 你会发现都是这么做的，只不过前期玉帝给的官小了，后面佛祖总结失败经验给了个官大的，成功收下当狗。",{"type":18,"tag":40,"props":1255,"children":1256},{},[1257],{"type":37,"value":1258},"虽然沙僧最后是个菩萨，但人家职级是和孙悟空一样的。而猪八戒虽然也是菩萨，但属于是菩萨里面打杂的；甚至猪八戒不如白龙马等极高，人家起码还能训练下禁卫军，而猪八戒只能吃人家剩下的贡品。沙僧的背后代表的是玉帝；白龙马背后就是龙王家族（婆罗门），四海龙王基本上走到哪都能看到龙王什么海龙王，河龙王，井里面也有龙王，有水的地方都有龙王。",{"type":18,"tag":40,"props":1260,"children":1261},{},[1262],{"type":37,"value":1263},"虽然龙在西游记里面级别比较低，玉帝办一下什么宴会都要有个龙肝凤胆(玉帝最喜欢吃龙王了)，动不动斩个龙王，甚至梦里都要斩个龙王玩玩消遣下工作的劳累。所以小白龙吃唐三藏坐骑给观音菩萨点化完全是偶遇，龙王策划的一个剧本，把小白龙这个富哥塞进去。如果取经成功了就能大大提升龙王家族的影响力，俺们龙王也是能给灵山当禁卫军的了，也算是给赵家人当上狗了。",{"type":18,"tag":40,"props":1265,"children":1266},{},[1267],{"type":37,"value":1268},"为什么小白龙一条龙要幻化成马呢，我比较认同一个观点。作为一个婆罗门一个富哥，尽量低调点，毕竟言多必失。变成马又不用降妖除魔，还不用说话，主打一个陪伴，不容易被人关注，不容易给人开黑料。这要给人曝光出来了，其他家族就来气了，凭什么他能混个编制成为禁卫军首领啊? 所以说龙王家族是真的厉害，基本上整部西游记形形色色的龙王出境率还算是比较高的。连我龙王家的祖传如意金箍棒都给孙悟空了，起码是重仓押注取经团队，不成功便成仁。",{"type":18,"tag":134,"props":1270,"children":1271},{},[1272],{"type":18,"tag":40,"props":1273,"children":1274},{},[1275],{"type":37,"value":1276},"道德天尊又称太上老君，小说中居于离恨天兜率宫（实际上兜率为印度词汇，道教中太上老君居于太清圣境）。孙悟空因大闹天宫，被太上老君的金刚镯打到，因此被捕，后被放于太上老君的八卦炉内焚化，不料非但没有被焚化，反而练就一双 “火眼金睛”，有看穿看透人事物的功力，在取经路途中，凡有妖怪化装成凡人或神仙，都逃不过他的火眼金睛而被拆穿。后来没被焚化的孙悟空出了八卦炉，愤而踢翻，造成八卦炉爆炸，火球与炭灰降于凡间西疆，而成为火焰山。替太上老君看管八卦炉的两名童子下凡作乱，分别自称金角大王和银角大王。太上老君的坐骑是一头青牛精，下凡作乱时自称独角兕大王。",{"type":18,"tag":40,"props":1278,"children":1279},{},[1280],{"type":37,"value":1281},"龙王家族最后变成有钱有势的韩国财阀一样的家族势力。再也不是那个有钱任人宰割的群体了。而猪八戒出身就是道教，道教扛把子就是太上老君，太上老君这个人也可以细细品，基本上西游记上很多妖怪，比如什么独角兕大王、金角大王、银角大王都是太上老君的坐骑什么的。",{"type":18,"tag":92,"props":1283,"children":1284},{},[],{"type":18,"tag":32,"props":1286,"children":1288},{"id":1287},"四十九回-观音地盘-2",[1289],{"type":37,"value":1290},"四十九回 观音地盘 2",{"type":18,"tag":27,"props":1292,"children":1294},{":t":1293},"观音的回旋镖",[],{"type":18,"tag":40,"props":1296,"children":1297},{},[1298],{"type":37,"value":1299},"灵感大王要胁住在河岸的村民每年必须供奉一对童男童女，以保风调雨顺、否则降灾。孙悟空和猪八戒伪装成童男童女并偷袭他，灵感大王不敌孙悟空而躲了起来，孙悟空便找上观音菩萨协助。最后由观音用鱼篮收回妖怪后带回了池塘。",{"type":18,"tag":134,"props":1301,"children":1302},{},[1303],{"type":18,"tag":40,"props":1304,"children":1305},{},[1306],{"type":37,"value":1307},"灵感大王为住在通天河里的妖怪，真实身份为普陀山莲花池的金鱼，因为听了观音说法而有了力量便下凡作恶。能够在一晚之内，将宽度 800 里、长度连孙悟空都看不见尽头的通天河冻成冰河。",{"type":18,"tag":40,"props":1309,"children":1310},{},[1311],{"type":37,"value":1312},"在四十九回时，孙悟空和灵感大王的掰扯。孙悟空可能发现了灵感大王的背后是观音菩萨，于是去找观音收服鲤鱼精。在这个故事中，你会发现。观音来了后将通天河的小鱼小虾都灭口了，就留了个鲤鱼精。",{"type":18,"tag":40,"props":1314,"children":1315},{},[1316],{"type":37,"value":1317},"这原本是观音的地盘，被孙悟空抓住了把柄。于是在八十一难的时候，陈家庄唐僧在此处讲经可以视作为观音将这个地盘让给了取经三人。孙悟空与观音菩萨交易成功。孙悟空之后也没有在玉帝、佛祖跟前给观音菩萨上眼药。",{"type":18,"tag":40,"props":1319,"children":1320},{},[1321],{"type":37,"value":1322},"在现实社会中，这个步骤就很像是观音菩萨贪污了一块地，改造成了个山水庄园。孙悟空误打误撞发现了这块贪污巨款，之后去给观音菩萨上眼药。之后在八十一难中，其实八十难就行了，但因为观音菩萨需要告诉孙悟空，这块地方我不要了，送给你，让你们去看看这块地怎么样，将秘密守护住堵住孙悟空的嘴；让其在论功行赏的时候不要泄露出去。",{"type":18,"tag":134,"props":1324,"children":1325},{},[1326],{"type":18,"tag":40,"props":1327,"children":1328},{},[1329],{"type":37,"value":1330},"紧箍咒是《西游记》中的一个咒语，又名定心真言，由如来发明，经观音菩萨传授给唐僧，用于对其弟子孙悟空的管教。",{"type":18,"tag":40,"props":1332,"children":1333},{},[1334,1336,1341],{"type":37,"value":1335},"孙悟空其实是比较讨厌观音菩萨的，因为紧箍咒就是观音菩萨给他下的套。想拿捏孙悟空，所以在取经工程前期，孙悟空一直被唐僧拿捏。这件事情告诉我们，不幸树敌的时候，可以 ",{"type":18,"tag":126,"props":1337,"children":1338},{},[1339],{"type":37,"value":1340},"捧高",{"type":37,"value":1342}," 下对方，就比如观音在通天河陈家庄那样，给孙悟空，唐僧他们整个供奉，来暗示孙悟空你都成佛了，再计较这些岂不是不符你身份？就当我观音是个小人忘记这些恶心事吧。",{"type":18,"tag":40,"props":1344,"children":1345},{},[1346],{"type":37,"value":1347},"这样孙悟空在论功行赏的时候，就不会打破和谐的气氛，让观音不被反腐。如果没有八十一难，那么孙悟空是会将观音说出去的，因为孙悟空背景很深，背后是道教、佛教、天庭。",{"type":18,"tag":40,"props":1349,"children":1350},{},[1351],{"type":37,"value":1352},"连在灵山唐僧师徒到灵山宝阁取经时，阿难、伽叶作为如来的底子要收取人事。孙悟空都要把索要人事之事捅到如来佛祖那里，佛祖并不觉有何不妥就可以看出，孙悟空是真的敢举报观音贪污的。",{"type":18,"tag":92,"props":1354,"children":1355},{},[],{"type":18,"tag":32,"props":1357,"children":1359},{"id":1358},"第九十八回-放水-1",[1360],{"type":37,"value":1361},"第九十八回 放水 1",{"type":18,"tag":27,"props":1363,"children":1365},{":t":1364},"放水",[],{"type":18,"tag":40,"props":1367,"children":1368},{},[1369],{"type":37,"value":1370},"如果只看前一部分凌云渡就会发现。取经三人在玉真观的时候，孙悟空之前是来过的，也见到了那个独木桥。但当时孙悟空道心不稳，所以觉得自己道行不够就去继续修炼了。这里很大一部分是如来引动孙悟空一步一步到灵山脚下的，但孙悟空没上勾。",{"type":18,"tag":40,"props":1372,"children":1373},{},[1374],{"type":37,"value":1375},"于是有了灵台方寸山斜月三星洞菩提祖师收孙悟空为徒非法授课，传授他七十二变，长生不老和筋斗云的法门。这就相当于违反了《校外培训行政处罚暂行办法》，而菩提祖师往上追溯可能是如来，这种事情怎么可能让玉帝知道。毕竟孙悟空也是大闹天宫打了玉帝的脸，这要让玉帝知道了估计会挑起佛教和天庭的对立。就从收服孙悟空那一章可以看出，当时的天庭较为薄弱，甚至还要请如来收服孙悟空。",{"type":18,"tag":40,"props":1377,"children":1378},{},[1379],{"type":37,"value":1380},"但到了第二次，孙悟空来到了灵山脚下。已经知道跨过这个独木桥就已经可以成佛成仙了，但唐僧不知道，又不能暗示唐僧通过这条路就已经可以成为人上人了。",{"type":18,"tag":40,"props":1382,"children":1383},{},[1384],{"type":37,"value":1385},"于是金顶大仙、孙悟空、阿弥陀佛轮番疯狂暗示：",{"type":18,"tag":134,"props":1387,"children":1388},{},[1389,1394,1399,1404],{"type":18,"tag":40,"props":1390,"children":1391},{},[1392],{"type":37,"value":1393},"　　“唐僧到玉真观，金顶大仙接着。” 已是到金仙之分，而猿熟马驯，体变纯阳之时矣。故诗云：“炼就长生居胜境，修成永寿脱尘埃” 也。大圣道：“此乃灵山脚下，金顶大仙。” 以见仙即是佛，佛即是仙。仙者，金丹有为之道；佛者，圆觉无为之道。佛不得金丹不能成佛，仙不明圆觉不能成仙，一而二，二而一，灵山雷音即金顶大仙，岂可以仙佛歧而二之乎？",{"type":18,"tag":40,"props":1395,"children":1396},{},[1397],{"type":37,"value":1398},"　　至凌云渡，独木桥，唐僧心惊，以为大仙错指，是猿熟马驯，而不知此脱壳也。行者道：“不差，要从那桥上行过去，方成正果。” 言猿熟马驯，而不可不在此脱壳也。了命之后，不得不了性，了性所以脱壳也。",{"type":18,"tag":40,"props":1400,"children":1401},{},[1402],{"type":37,"value":1403},"　　盖成仙作佛，为天下希有之事，人人所欲得，人人所难能。如凌云之高而难渡，正以难渡者而渡之，则仙矣、佛矣。盖渡之之法有二，一则无为之道，一则有为之道。无为之道，最上一乘之道；有为之道，金丹之道。一乘之道，即独木桥；金丹之道，即无底船。独木桥所以接上智，无底舱所以渡中人。何为独木桥，独木者，一乘也；桥者，梁道也，即最上一乘无为之道。故曰：“从桥上过，方成正果。” 诗云：“单梁细滑浑难渡，除是神仙步彩霞。” 言最上一乘之道，惟上智顿悟者可以行，而下智渐修者则难渡。",{"type":18,"tag":40,"props":1405,"children":1406},{},[1407],{"type":37,"value":1408},"　　三藏心惊道：“这桥不是人走的。” 以见下智者则难渡；行者笑道：“正是路！正是路！” 以见上智者可以行。“行者跳上桥，须臾跑将过去，又从那边跑过来。” 上智之人，本性圆明，不假施为，顿超彼岸，随机应变，遇境而安，出入无碍，来往不拘，无为之用自成，《中庸》所谓 “自诚明，谓之性也。”“唐僧摇手、八戒沙僧咬指道：难！难！难！’” 又曰：“滑！滑！滑！” 下智之人秉性愚鲁，为私欲所蔽，为全缘所诱，忘其本来面目，失其固有天良，着于假相，好生而恶死，不能顿悟圆通，终难归于大觉。若无金丹之道，焉能过得凌云之渡？《中庸》所谓 “自明诚，谓之教也。”《参同》云：“上德无为，不以察求；下德为之，其用不休。” 此无底船之不可无者也。",{"type":18,"tag":40,"props":1410,"children":1411},{},[1412],{"type":37,"value":1413},"唐僧是不敢走过独木桥的，甚至阿弥陀佛去渡船接他们的时候。唐僧也是不敢的，但由于孙悟空提前演示了下，唐僧就敢上渡船了。这个流程就很像 30 天速成 XXX 的赵家人空降。",{"type":18,"tag":40,"props":1415,"children":1416},{},[1417],{"type":37,"value":1418},"这各部分其实就是涉及到了佛教的轮回，六根（眼、耳、鼻、舌、身、意六個識根（感官器官），為二十二根之六）唐僧之所以无法过去。是因为还未自渡，还需他人渡，需要阿弥陀佛的渡船，但唐僧还是不敢。孙悟空只能狠狠的作弊回，当着阿弥陀佛和灵山、天庭的面作弊将唐僧拉上渡船，让唐僧脱离肉体凡胎，将取经工程进行下去。",{"type":18,"tag":134,"props":1420,"children":1421},{},[1422],{"type":18,"tag":40,"props":1423,"children":1424},{},[1425],{"type":37,"value":1426},"那长老手舞足蹈，随著行者，直至雷音寺山门之外。那厢有四大金刚迎住道：“圣僧来耶？” 三藏躬身道：“是，弟子玄奘到了。” 答毕，就欲进门。金刚道：“圣僧少待，容禀过再进。” 那金刚著一个转山门报与二门上四大金刚，说唐僧到了；二门上又传入三门上，说唐僧到了。三山门内原是打供的神僧，闻得唐僧到时，急至大雄殿下，报与如来至尊释迦牟尼文佛说：“唐朝圣僧，到于宝山，取经来了。” 佛爷爷大喜。即召聚八菩萨、四金刚、五百阿罗、三千揭谛、十一大曜、十八伽蓝，两行排列。却传金旨，召唐僧进。那里边一层一节，钦依佛旨，叫：“圣僧进来。” 这唐僧循规蹈矩，同悟空、悟能、悟净，牵马挑担，径入山门。",{"type":18,"tag":40,"props":1428,"children":1429},{},[1430],{"type":37,"value":1431},"有点像是仪仗队礼兵列队欢迎各国元首，然后又整几个礼炮奏乐。原来几百年前的东西一直流行到现在。皇权和大教总是喜欢一些雄伟宏大的建筑以及人性阵列来体现自己的教义覆盖面是多么的广，多么的厉害、多么的威严、充满了神性光辉。",{"type":18,"tag":40,"props":1433,"children":1434},{},[1435,1437,1442],{"type":37,"value":1436},"这也说明了一件事情。就是关于重要的功绩性事件，能放水的就放水。如果没有孙悟空作弊，那大概率唐僧是无法成为佛的，看到了独木桥和无底船就回想回去, 于是在灭法国国王那被砍头，因为灭法国国王曾发誓要杀一万个佛教僧侣，当唐僧师徒四人到达该国时，他已杀死 9996 个僧侣。这说明之前不只唐僧三人去取经，只不过这次是 ",{"type":18,"tag":126,"props":1438,"children":1439},{},[1440],{"type":37,"value":1441},"不惜一切代价，保证取经工程顺利进行",{"type":37,"value":1443},"。",{"type":18,"tag":40,"props":1445,"children":1446},{},[1447],{"type":37,"value":1448},"所以取经团队是这样的：看到独木桥或者无底船就怕了打道回府；-> 遇到寇员外招待劝返 -> 灭法国砍头。你会发现寇员外和灭法国都是一个要招待一万个和尚，另一个是要杀一万个和尚为目标；可谓是一对卧龙凤雏。",{"type":18,"tag":92,"props":1450,"children":1451},{},[],{"type":18,"tag":32,"props":1453,"children":1455},{"id":1454},"第九十八回-早期知识付费-2",[1456],{"type":37,"value":1457},"第九十八回 早期知识付费 2",{"type":18,"tag":27,"props":1459,"children":1461},{":t":1460},"知识付费",[],{"type":18,"tag":40,"props":1463,"children":1464},{},[1465],{"type":37,"value":1466},"在原著中唐僧第一次白嫖取的是无字真经。白雄尊者让唐僧三人坠机后发现自己拿的竟是无字经书还以为是假的，于是返回灵山。第二次跟着阿难、迦叶去取经书时向唐僧索要人事。通俗来讲就是小费，其实唐僧身上法宝多得很，比如观世音菩萨所赠的九环锡杖和锦斓袈裟。都算上的是极品法宝也不为过。于是唐僧选了一件紫金钵盂作为人事。这钵盂可是太宗皇帝在十二回《唐王秉诚修大会 观音显圣化金蝉》中送与唐僧的：",{"type":18,"tag":134,"props":1468,"children":1469},{},[1470],{"type":18,"tag":40,"props":1471,"children":1472},{},[1473],{"type":37,"value":1474},"朕又有一个紫金钵盂，送你途中化斋而用。再选两个长行的从者。又钦赐你马一匹，送为远行脚力。你可就此行程。” 玄奘大喜，即便谢了恩，领了物事，更无留滞之意。",{"type":18,"tag":40,"props":1476,"children":1477},{},[1478],{"type":37,"value":1479},"之后孙悟空因看了无字经书，此觉得整个灵山简直就是目无法纪，竟然公开受贿。学习借个书都要钱，于是在如来面前控诉。但如来听闻并不觉得有什么奇怪，反而觉得要少了。并澄清无字经书可比有字的之前，是你们道行不够不识货。我们灵山的和尚下去讲经，可都是要送三斗金粒以及好生伺候才行的！",{"type":18,"tag":134,"props":1481,"children":1482},{},[1483],{"type":18,"tag":40,"props":1484,"children":1485},{},[1486],{"type":37,"value":1487},"“如来，我师徒们受了万蜇千魔，千辛万苦，自东土拜到此处，蒙如来分付传经，被阿傩、伽叶掯财不遂，通同作弊，故意将无字的白纸本儿教我们拿去。我们拿他去何用？望如来敕治。” 佛祖笑道：“你且休嚷。他两个问你要人事之情，我已知矣。但只是经不可轻传，亦不可以空取。向时众比丘圣僧下山，曾将此经在舍卫国赵长者家与他诵了一遍，保他家生者安全，亡者超脱，只讨得他三斗三升米粒黄金回来。我还说他们忒卖贱了，教后代儿孙没钱使用。你如今空手来取，是以传了白本。白本者，乃无字真经，倒也是好的。因你那东土众生愚迷不悟，只可以此传之耳。” 即叫：“阿傩、伽叶，快将有字的真经，每部中各检几卷与他，来此报数。”",{"type":18,"tag":40,"props":1489,"children":1490},{},[1491],{"type":37,"value":1492},"于是第二次，唐僧没有再白嫖，狠狠的知识付费了一次，原著是这样写的：",{"type":18,"tag":134,"props":1494,"children":1495},{},[1496],{"type":18,"tag":40,"props":1497,"children":1498},{},[1499],{"type":37,"value":1500},"二尊者复领四众，到珍楼宝阁之下，仍问唐僧要些人事。三藏无物奉承，即命沙僧取出紫金钵盂，双手奉上道：“弟子委是穷寒路遥，不曾备得人事。这钵盂乃唐王亲手所赐，教弟子持此沿路化斋。今特奉上，聊表寸心。万望尊者将此收下，待回朝奏上唐王，定有厚谢。只是以有字真经赐下，庶不孤钦差之意，远涉之劳也。” 那阿傩接了，但微微而笑。",{"type":18,"tag":40,"props":1502,"children":1503},{},[1504],{"type":37,"value":1505},"之所以是无字经，无论是如来还是燃灯古佛，都一致认为无字经才是真的经。《金刚经》有一句特别出名的话可以描述：“一切有为法，如梦幻泡影，如露亦如电，应作如是观” 或者： \"凡所有相，皆是虚妄。若见诸相非相，则见如来\"。因为如果要成佛，就需要六根清净，也就是抛弃肉体凡胎，经历过轮回，那个时候就不需要经书了，我就是经书！还需要你来渡我？",{"type":18,"tag":40,"props":1507,"children":1508},{},[1509],{"type":37,"value":1510},"其实这里还是可以白嫖的，因为取经工程这么大个项目，因为手底下一个小科长受贿就停摆了怎么行。这不是打燃灯古佛、如来、玉帝、观音、天庭的脸吗？就算是白嫖，如果脸皮厚点也是可以的，毕竟赚的可是扩充了佛教的地盘和影响力。",{"type":18,"tag":40,"props":1512,"children":1513},{},[1514],{"type":37,"value":1515},"唐僧几人虽然经历过凌云渡成为了佛，但还是道行不深需要他人渡己，所以看不懂无字经书。我觉得无字经书就是如来手下一大堆老干部拿着自己的意志然后贴一个如来法旨为所欲为。",{"title":8,"searchDepth":1001,"depth":1001,"links":1517},[],"content:book:journey-to-the-west.md","book/journey-to-the-west.md",{"_path":1521,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1522,"description":8,"director":1523,"time":1524,"img":1525,"plan":13,"body":1526,"_type":1003,"_id":1583,"_source":1005,"_file":1584,"_extension":1007},"/book/criminal_minds","Criminal Minds","R/N","2024.10.11","06/1.png",{"type":15,"children":1527,"toc":1581},[1528],{"type":18,"tag":19,"props":1529,"children":1530},{":by":21,":img":22,":plan":23,":title":24},[1531,1535,1541,1546,1554,1559,1576],{"type":18,"tag":27,"props":1532,"children":1534},{":t":1533},"第一季",[],{"type":18,"tag":32,"props":1536,"children":1538},{"id":1537},"行为分析小组-0",[1539],{"type":37,"value":1540},"行为分析小组 0",{"type":18,"tag":40,"props":1542,"children":1543},{},[1544],{"type":37,"value":1545},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":18,"tag":134,"props":1547,"children":1548},{},[1549],{"type":18,"tag":40,"props":1550,"children":1551},{},[1552],{"type":37,"value":1553},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":18,"tag":40,"props":1555,"children":1556},{},[1557],{"type":37,"value":1558},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":18,"tag":134,"props":1560,"children":1561},{},[1562],{"type":18,"tag":40,"props":1563,"children":1564},{},[1565,1567,1574],{"type":37,"value":1566},"比如 ",{"type":18,"tag":76,"props":1568,"children":1571},{"href":1569,"rel":1570},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[80],[1572],{"type":37,"value":1573},"洪博培",{"type":37,"value":1575}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":18,"tag":40,"props":1577,"children":1578},{},[1579],{"type":37,"value":1580},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"title":8,"searchDepth":1001,"depth":1001,"links":1582},[],"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":1586,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1587,"description":8,"director":1523,"time":1588,"img":1589,"plan":1590,"body":1591,"_type":1003,"_id":1805,"_source":1005,"_file":1806,"_extension":1007},"/book/24-hour","24 hour","2024.7.22","05/1.png","30",{"type":15,"children":1592,"toc":1803},[1593],{"type":18,"tag":19,"props":1594,"children":1595},{":by":21,":img":22,":plan":23,":title":24},[1596,1600,1606,1611,1616,1621,1626,1631,1636,1641,1646,1651,1656,1660,1666,1716,1718,1798],{"type":18,"tag":27,"props":1597,"children":1599},{":t":1598},"1~3 季",[],{"type":18,"tag":32,"props":1601,"children":1603},{"id":1602},"_13-季不要内耗-1",[1604],{"type":37,"value":1605},"1~3 季：不要内耗 1",{"type":18,"tag":40,"props":1607,"children":1608},{},[1609],{"type":37,"value":1610},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":18,"tag":40,"props":1612,"children":1613},{},[1614],{"type":37,"value":1615},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":18,"tag":40,"props":1617,"children":1618},{},[1619],{"type":37,"value":1620},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":18,"tag":40,"props":1622,"children":1623},{},[1624],{"type":37,"value":1625},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":18,"tag":40,"props":1627,"children":1628},{},[1629],{"type":37,"value":1630},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":18,"tag":40,"props":1632,"children":1633},{},[1634],{"type":37,"value":1635},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":18,"tag":40,"props":1637,"children":1638},{},[1639],{"type":37,"value":1640},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":18,"tag":40,"props":1642,"children":1643},{},[1644],{"type":37,"value":1645},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":18,"tag":40,"props":1647,"children":1648},{},[1649],{"type":37,"value":1650},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":18,"tag":40,"props":1652,"children":1653},{},[1654],{"type":37,"value":1655},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":18,"tag":27,"props":1657,"children":1659},{":t":1658},"Subchannel chip",[],{"type":18,"tag":32,"props":1661,"children":1663},{"id":1662},"子通道芯片-subchannel-chip-2",[1664],{"type":37,"value":1665},"子通道芯片: Subchannel chip 2",{"type":18,"tag":40,"props":1667,"children":1668},{},[1669,1671,1678,1680,1687,1689,1696,1698,1705,1707,1714],{"type":37,"value":1670},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":18,"tag":76,"props":1672,"children":1675},{"href":1673,"rel":1674},"https://24.fandom.com/wiki/Subchannel_chip",[80],[1676],{"type":37,"value":1677},"24 Wiki",{"type":37,"value":1679}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":18,"tag":76,"props":1681,"children":1684},{"href":1682,"rel":1683},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[80],[1685],{"type":37,"value":1686},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":37,"value":1688},"、",{"type":18,"tag":76,"props":1690,"children":1693},{"href":1691,"rel":1692},"https://en.wikipedia.org/wiki/Ultra-wideband#",[80],[1694],{"type":37,"value":1695},"超宽频(UWB, Ultra-wideband)",{"type":37,"value":1697},"，",{"type":18,"tag":76,"props":1699,"children":1702},{"href":1700,"rel":1701},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[80],[1703],{"type":37,"value":1704},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":37,"value":1706}," 所常用的 ",{"type":18,"tag":76,"props":1708,"children":1711},{"href":1709,"rel":1710},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[80],[1712],{"type":37,"value":1713},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":37,"value":1715}," 协议。",{"type":37,"value":1717},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":1719,"children":1720},{},[1721,1742],{"type":18,"tag":393,"props":1722,"children":1723},{},[1724],{"type":18,"tag":397,"props":1725,"children":1726},{},[1727,1732,1737],{"type":18,"tag":401,"props":1728,"children":1729},{},[1730],{"type":37,"value":1731},"名称",{"type":18,"tag":401,"props":1733,"children":1734},{},[1735],{"type":37,"value":1736},"描述",{"type":18,"tag":401,"props":1738,"children":1739},{},[1740],{"type":37,"value":1741},"领域",{"type":18,"tag":412,"props":1743,"children":1744},{},[1745,1763,1780],{"type":18,"tag":397,"props":1746,"children":1747},{},[1748,1753,1758],{"type":18,"tag":419,"props":1749,"children":1750},{},[1751],{"type":37,"value":1752},"FHSS",{"type":18,"tag":419,"props":1754,"children":1755},{},[1756],{"type":37,"value":1757},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":18,"tag":419,"props":1759,"children":1760},{},[1761],{"type":37,"value":1762},"无线电",{"type":18,"tag":397,"props":1764,"children":1765},{},[1766,1771,1776],{"type":18,"tag":419,"props":1767,"children":1768},{},[1769],{"type":37,"value":1770},"UWB",{"type":18,"tag":419,"props":1772,"children":1773},{},[1774],{"type":37,"value":1775},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":18,"tag":419,"props":1777,"children":1778},{},[1779],{"type":37,"value":1762},{"type":18,"tag":397,"props":1781,"children":1782},{},[1783,1788,1793],{"type":18,"tag":419,"props":1784,"children":1785},{},[1786],{"type":37,"value":1787},"NB-IoT",{"type":18,"tag":419,"props":1789,"children":1790},{},[1791],{"type":37,"value":1792},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":18,"tag":419,"props":1794,"children":1795},{},[1796],{"type":37,"value":1797},"无线电与物联网",{"type":18,"tag":40,"props":1799,"children":1800},{},[1801],{"type":37,"value":1802},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":1001,"depth":1001,"links":1804},[],"content:book:24-hour.md","book/24-hour.md",{"_path":1808,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1809,"description":8,"director":1810,"time":1811,"img":1812,"plan":1813,"body":1814,"_type":1003,"_id":2921,"_source":1005,"_file":2922,"_extension":1007},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","1",{"type":15,"children":1815,"toc":2919},[1816],{"type":18,"tag":19,"props":1817,"children":1818},{":by":21,":img":22,":plan":23,":title":24},[1819,1823,1829,1850,1852,1927,1941,1949,1963,1976,1979,1984,1989,1992,1996,2002,2007,2012,2017,2018,2117,2122,2132,2133,2199,2204,2212,2217,2220,2224,2230,2235,2237,2298,2303,2316,2321,2326,2331,2333,2478,2486,2491,2499,2504,2508,2531,2555,2560,2564,2565,2645,2663,2668,2671,2676,2682,2686,2691,2695,2700,2702,2833,2846,2854,2862,2867,2875,2879,2884,2896,2908],{"type":18,"tag":27,"props":1820,"children":1822},{":t":1821},"Google Project Zero",[],{"type":18,"tag":32,"props":1824,"children":1826},{"id":1825},"作者-1",[1827],{"type":37,"value":1828},"作者 1",{"type":18,"tag":40,"props":1830,"children":1831},{},[1832,1834,1840,1842,1848],{"type":37,"value":1833},"本书的作者是 ",{"type":18,"tag":76,"props":1835,"children":1838},{"href":1836,"rel":1837},"https://github.com/tyranid",[80],[1839],{"type":37,"value":1810},{"type":37,"value":1841},"，也是著名的 ",{"type":18,"tag":76,"props":1843,"children":1846},{"href":1844,"rel":1845},"https://googleprojectzero.blogspot.com/",[80],[1847],{"type":37,"value":1821},{"type":37,"value":1849}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":37,"value":1851},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":1853,"children":1854},{},[1855,1870],{"type":18,"tag":393,"props":1856,"children":1857},{},[1858],{"type":18,"tag":397,"props":1859,"children":1860},{},[1861,1866],{"type":18,"tag":401,"props":1862,"children":1863},{},[1864],{"type":37,"value":1865},"会议",{"type":18,"tag":401,"props":1867,"children":1868},{},[1869],{"type":37,"value":1736},{"type":18,"tag":412,"props":1871,"children":1872},{},[1873,1891,1909],{"type":18,"tag":397,"props":1874,"children":1875},{},[1876,1886],{"type":18,"tag":419,"props":1877,"children":1878},{},[1879],{"type":18,"tag":76,"props":1880,"children":1883},{"href":1881,"rel":1882},"https://www.blackhat.com/",[80],[1884],{"type":37,"value":1885},"BlackHat",{"type":18,"tag":419,"props":1887,"children":1888},{},[1889],{"type":37,"value":1890},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":18,"tag":397,"props":1892,"children":1893},{},[1894,1904],{"type":18,"tag":419,"props":1895,"children":1896},{},[1897],{"type":18,"tag":76,"props":1898,"children":1901},{"href":1899,"rel":1900},"https://www.secwest.net/",[80],[1902],{"type":37,"value":1903},"CanSecWest",{"type":18,"tag":419,"props":1905,"children":1906},{},[1907],{"type":37,"value":1908},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":18,"tag":397,"props":1910,"children":1911},{},[1912,1922],{"type":18,"tag":419,"props":1913,"children":1914},{},[1915],{"type":18,"tag":76,"props":1916,"children":1919},{"href":1917,"rel":1918},"https://events.ccc.de/",[80],[1920],{"type":37,"value":1921},"Chaos Computer Conference",{"type":18,"tag":419,"props":1923,"children":1924},{},[1925],{"type":37,"value":1926},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":18,"tag":40,"props":1928,"children":1929},{},[1930,1932,1939],{"type":37,"value":1931},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":18,"tag":76,"props":1933,"children":1936},{"href":1934,"rel":1935},"https://en.wikipedia.org/wiki/Line_management",[80],[1937],{"type":37,"value":1938},"Leader(line manager)",{"type":37,"value":1940}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":18,"tag":134,"props":1942,"children":1943},{},[1944],{"type":18,"tag":40,"props":1945,"children":1946},{},[1947],{"type":37,"value":1948},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":18,"tag":40,"props":1950,"children":1951},{},[1952,1954,1961],{"type":37,"value":1953},"在规划职业路径阶段认识了 ",{"type":18,"tag":76,"props":1955,"children":1958},{"href":1956,"rel":1957},"https://www.linkedin.com/in/mike-jordon-72193719/",[80],[1959],{"type":37,"value":1960},"Mike Jordon",{"type":37,"value":1962}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":18,"tag":134,"props":1964,"children":1965},{},[1966,1971],{"type":18,"tag":40,"props":1967,"children":1968},{},[1969],{"type":37,"value":1970},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":18,"tag":40,"props":1972,"children":1973},{},[1974],{"type":37,"value":1975},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":18,"tag":92,"props":1977,"children":1978},{},[],{"type":18,"tag":40,"props":1980,"children":1981},{},[1982],{"type":37,"value":1983},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":18,"tag":40,"props":1985,"children":1986},{},[1987],{"type":37,"value":1988},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":18,"tag":92,"props":1990,"children":1991},{},[],{"type":18,"tag":27,"props":1993,"children":1995},{":t":1994},"协议是一切的基础",[],{"type":18,"tag":32,"props":1997,"children":1999},{"id":1998},"基础-2",[2000],{"type":37,"value":2001},"基础 2",{"type":18,"tag":40,"props":2003,"children":2004},{},[2005],{"type":37,"value":2006},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":18,"tag":40,"props":2008,"children":2009},{},[2010],{"type":37,"value":2011},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":18,"tag":40,"props":2013,"children":2014},{},[2015],{"type":37,"value":2016},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":37,"value":387},{"type":18,"tag":389,"props":2019,"children":2020},{},[2021,2036],{"type":18,"tag":393,"props":2022,"children":2023},{},[2024],{"type":18,"tag":397,"props":2025,"children":2026},{},[2027,2032],{"type":18,"tag":401,"props":2028,"children":2029},{},[2030],{"type":37,"value":2031},"功能",{"type":18,"tag":401,"props":2033,"children":2034},{},[2035],{"type":37,"value":1736},{"type":18,"tag":412,"props":2037,"children":2038},{},[2039,2052,2065,2078,2091,2104],{"type":18,"tag":397,"props":2040,"children":2041},{},[2042,2047],{"type":18,"tag":419,"props":2043,"children":2044},{},[2045],{"type":37,"value":2046},"维护会话状态",{"type":18,"tag":419,"props":2048,"children":2049},{},[2050],{"type":37,"value":2051},"创建新的连接或终止连接",{"type":18,"tag":397,"props":2053,"children":2054},{},[2055,2060],{"type":18,"tag":419,"props":2056,"children":2057},{},[2058],{"type":37,"value":2059},"通过寻址识别节点",{"type":18,"tag":419,"props":2061,"children":2062},{},[2063],{"type":37,"value":2064},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":18,"tag":397,"props":2066,"children":2067},{},[2068,2073],{"type":18,"tag":419,"props":2069,"children":2070},{},[2071],{"type":37,"value":2072},"控制流量",{"type":18,"tag":419,"props":2074,"children":2075},{},[2076],{"type":37,"value":2077},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":18,"tag":397,"props":2079,"children":2080},{},[2081,2086],{"type":18,"tag":419,"props":2082,"children":2083},{},[2084],{"type":37,"value":2085},"保证传输数据的顺序",{"type":18,"tag":419,"props":2087,"children":2088},{},[2089],{"type":37,"value":2090},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":18,"tag":397,"props":2092,"children":2093},{},[2094,2099],{"type":18,"tag":419,"props":2095,"children":2096},{},[2097],{"type":37,"value":2098},"检测和纠正错误",{"type":18,"tag":419,"props":2100,"children":2101},{},[2102],{"type":37,"value":2103},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":18,"tag":397,"props":2105,"children":2106},{},[2107,2112],{"type":18,"tag":419,"props":2108,"children":2109},{},[2110],{"type":37,"value":2111},"格式化和编码数据",{"type":18,"tag":419,"props":2113,"children":2114},{},[2115],{"type":37,"value":2116},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":18,"tag":40,"props":2118,"children":2119},{},[2120],{"type":37,"value":2121},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":18,"tag":272,"props":2123,"children":2127},{"code":2124,"language":37,"meta":8,"className":2125},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[2126],"language-text",[2128],{"type":18,"tag":277,"props":2129,"children":2130},{"__ignoreMap":8},[2131],{"type":37,"value":2124},{"type":37,"value":1851},{"type":18,"tag":389,"props":2134,"children":2135},{},[2136,2151],{"type":18,"tag":393,"props":2137,"children":2138},{},[2139],{"type":18,"tag":397,"props":2140,"children":2141},{},[2142,2147],{"type":18,"tag":401,"props":2143,"children":2144},{},[2145],{"type":37,"value":2146},"协议模型",{"type":18,"tag":401,"props":2148,"children":2149},{},[2150],{"type":37,"value":1736},{"type":18,"tag":412,"props":2152,"children":2153},{},[2154,2167,2180],{"type":18,"tag":397,"props":2155,"children":2156},{},[2157,2162],{"type":18,"tag":419,"props":2158,"children":2159},{},[2160],{"type":37,"value":2161},"内容层 (文件请求)",{"type":18,"tag":419,"props":2163,"children":2164},{},[2165],{"type":37,"value":2166},"我想要一个 image.png 图片",{"type":18,"tag":397,"props":2168,"children":2169},{},[2170,2175],{"type":18,"tag":419,"props":2171,"children":2172},{},[2173],{"type":37,"value":2174},"编码层 (HTTP)",{"type":18,"tag":419,"props":2176,"children":2177},{},[2178],{"type":37,"value":2179},"GET /image.png HTTP/1.1",{"type":18,"tag":397,"props":2181,"children":2182},{},[2183,2188],{"type":18,"tag":419,"props":2184,"children":2185},{},[2186],{"type":37,"value":2187},"传输层 (TCP/IP)",{"type":18,"tag":419,"props":2189,"children":2190},{},[2191,2193,2197],{"type":37,"value":2192},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":18,"tag":2194,"props":2195,"children":2196},"br",{},[],{"type":37,"value":2198}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":18,"tag":40,"props":2200,"children":2201},{},[2202],{"type":37,"value":2203},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":18,"tag":134,"props":2205,"children":2206},{},[2207],{"type":18,"tag":40,"props":2208,"children":2209},{},[2210],{"type":37,"value":2211},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":18,"tag":40,"props":2213,"children":2214},{},[2215],{"type":37,"value":2216},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":18,"tag":92,"props":2218,"children":2219},{},[],{"type":18,"tag":27,"props":2221,"children":2223},{":t":2222},"流量捕获",[],{"type":18,"tag":32,"props":2225,"children":2227},{"id":2226},"捕获-2",[2228],{"type":37,"value":2229},"捕获 2",{"type":18,"tag":40,"props":2231,"children":2232},{},[2233],{"type":37,"value":2234},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":37,"value":2236},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":2238,"children":2239},{},[2240,2259],{"type":18,"tag":393,"props":2241,"children":2242},{},[2243],{"type":18,"tag":397,"props":2244,"children":2245},{},[2246,2250,2254],{"type":18,"tag":401,"props":2247,"children":2248},{},[2249],{"type":37,"value":1731},{"type":18,"tag":401,"props":2251,"children":2252},{},[2253],{"type":37,"value":1736},{"type":18,"tag":401,"props":2255,"children":2256},{},[2257],{"type":37,"value":2258},"特点",{"type":18,"tag":412,"props":2260,"children":2261},{},[2262,2280],{"type":18,"tag":397,"props":2263,"children":2264},{},[2265,2270,2275],{"type":18,"tag":419,"props":2266,"children":2267},{},[2268],{"type":37,"value":2269},"被动捕获",{"type":18,"tag":419,"props":2271,"children":2272},{},[2273],{"type":37,"value":2274},"在线路上传输时提取数据，如 Wireshark",{"type":18,"tag":419,"props":2276,"children":2277},{},[2278],{"type":37,"value":2279},"不直接与流量交互",{"type":18,"tag":397,"props":2281,"children":2282},{},[2283,2288,2293],{"type":18,"tag":419,"props":2284,"children":2285},{},[2286],{"type":37,"value":2287},"主动捕获",{"type":18,"tag":419,"props":2289,"children":2290},{},[2291],{"type":37,"value":2292},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":18,"tag":419,"props":2294,"children":2295},{},[2296],{"type":37,"value":2297},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":18,"tag":40,"props":2299,"children":2300},{},[2301],{"type":37,"value":2302},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":18,"tag":196,"props":2304,"children":2305},{},[2306,2311],{"type":18,"tag":200,"props":2307,"children":2308},{},[2309],{"type":37,"value":2310},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":18,"tag":200,"props":2312,"children":2313},{},[2314],{"type":37,"value":2315},"只查看正在测试的应用程序的流量",{"type":18,"tag":40,"props":2317,"children":2318},{},[2319],{"type":37,"value":2320},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":18,"tag":27,"props":2322,"children":2325},{":t":2323,":type":2324},"系统调用跟踪","2",[],{"type":18,"tag":40,"props":2327,"children":2328},{},[2329],{"type":37,"value":2330},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":37,"value":2332},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":2334,"children":2335},{},[2336,2355],{"type":18,"tag":393,"props":2337,"children":2338},{},[2339],{"type":18,"tag":397,"props":2340,"children":2341},{},[2342,2347,2351],{"type":18,"tag":401,"props":2343,"children":2344},{},[2345],{"type":37,"value":2346},"模式",{"type":18,"tag":401,"props":2348,"children":2349},{},[2350],{"type":37,"value":1736},{"type":18,"tag":401,"props":2352,"children":2353},{},[2354],{"type":37,"value":2258},{"type":18,"tag":412,"props":2356,"children":2357},{},[2358,2376,2390,2404,2418,2436,2450,2464],{"type":18,"tag":397,"props":2359,"children":2360},{},[2361,2366,2371],{"type":18,"tag":419,"props":2362,"children":2363},{},[2364],{"type":37,"value":2365},"用户模式",{"type":18,"tag":419,"props":2367,"children":2368},{},[2369],{"type":37,"value":2370},"操作系统普通应用程序和用户空间进程运行的模式",{"type":18,"tag":419,"props":2372,"children":2373},{},[2374],{"type":37,"value":2375},"权限限制",{"type":18,"tag":397,"props":2377,"children":2378},{},[2379,2382,2385],{"type":18,"tag":419,"props":2380,"children":2381},{},[],{"type":18,"tag":419,"props":2383,"children":2384},{},[],{"type":18,"tag":419,"props":2386,"children":2387},{},[2388],{"type":37,"value":2389},"隔离",{"type":18,"tag":397,"props":2391,"children":2392},{},[2393,2396,2399],{"type":18,"tag":419,"props":2394,"children":2395},{},[],{"type":18,"tag":419,"props":2397,"children":2398},{},[],{"type":18,"tag":419,"props":2400,"children":2401},{},[2402],{"type":37,"value":2403},"限制对系统资源的直接访问",{"type":18,"tag":397,"props":2405,"children":2406},{},[2407,2410,2413],{"type":18,"tag":419,"props":2408,"children":2409},{},[],{"type":18,"tag":419,"props":2411,"children":2412},{},[],{"type":18,"tag":419,"props":2414,"children":2415},{},[2416],{"type":37,"value":2417},"日常应用程序的运行",{"type":18,"tag":397,"props":2419,"children":2420},{},[2421,2426,2431],{"type":18,"tag":419,"props":2422,"children":2423},{},[2424],{"type":37,"value":2425},"内核模式",{"type":18,"tag":419,"props":2427,"children":2428},{},[2429],{"type":37,"value":2430},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":18,"tag":419,"props":2432,"children":2433},{},[2434],{"type":37,"value":2435},"完全权限",{"type":18,"tag":397,"props":2437,"children":2438},{},[2439,2442,2445],{"type":18,"tag":419,"props":2440,"children":2441},{},[],{"type":18,"tag":419,"props":2443,"children":2444},{},[],{"type":18,"tag":419,"props":2446,"children":2447},{},[2448],{"type":37,"value":2449},"关键操作",{"type":18,"tag":397,"props":2451,"children":2452},{},[2453,2456,2459],{"type":18,"tag":419,"props":2454,"children":2455},{},[],{"type":18,"tag":419,"props":2457,"children":2458},{},[],{"type":18,"tag":419,"props":2460,"children":2461},{},[2462],{"type":37,"value":2463},"直接访问和控制系统资源",{"type":18,"tag":397,"props":2465,"children":2466},{},[2467,2470,2473],{"type":18,"tag":419,"props":2468,"children":2469},{},[],{"type":18,"tag":419,"props":2471,"children":2472},{},[],{"type":18,"tag":419,"props":2474,"children":2475},{},[2476],{"type":37,"value":2477},"系统级调用",{"type":18,"tag":134,"props":2479,"children":2480},{},[2481],{"type":18,"tag":40,"props":2482,"children":2483},{},[2484],{"type":37,"value":2485},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":18,"tag":40,"props":2487,"children":2488},{},[2489],{"type":37,"value":2490},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":18,"tag":272,"props":2492,"children":2494},{"code":2493},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[2495],{"type":18,"tag":277,"props":2496,"children":2497},{"__ignoreMap":8},[2498],{"type":37,"value":2493},{"type":18,"tag":40,"props":2500,"children":2501},{},[2502],{"type":37,"value":2503},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":18,"tag":27,"props":2505,"children":2507},{":t":2506,":type":2324},"网络编程的基础",[],{"type":18,"tag":40,"props":2509,"children":2510},{},[2511,2513,2520,2522,2529],{"type":37,"value":2512},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":18,"tag":76,"props":2514,"children":2517},{"href":2515,"rel":2516},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[80],[2518],{"type":37,"value":2519},"Berkeley Software Distribution（BSD）",{"type":37,"value":2521}," 完成的。因此在网络通信领域中，就离不开 ",{"type":18,"tag":76,"props":2523,"children":2526},{"href":2524,"rel":2525},"https://en.wikipedia.org/wiki/Berkeley_sockets",[80],[2527],{"type":37,"value":2528},"Berkeley Sockets",{"type":37,"value":2530},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":18,"tag":134,"props":2532,"children":2533},{},[2534],{"type":18,"tag":40,"props":2535,"children":2536},{},[2537,2539,2545,2547,2553],{"type":37,"value":2538},"如果你是类 Unix 系统，可以在终端输入 ",{"type":18,"tag":277,"props":2540,"children":2542},{"className":2541},[],[2543],{"type":37,"value":2544},"man 2 syscall_name",{"type":37,"value":2546}," 在终端中查看手册，比如 ",{"type":18,"tag":277,"props":2548,"children":2550},{"className":2549},[],[2551],{"type":37,"value":2552},"man 2 open",{"type":37,"value":2554}," 就可以查看系统调用第二章有关 open 的内容。",{"type":18,"tag":40,"props":2556,"children":2557},{},[2558],{"type":37,"value":2559},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":18,"tag":27,"props":2561,"children":2563},{":t":2562,":type":2324},"不同平台之间的捕获",[],{"type":37,"value":1717},{"type":18,"tag":389,"props":2566,"children":2567},{},[2568,2588],{"type":18,"tag":393,"props":2569,"children":2570},{},[2571],{"type":18,"tag":397,"props":2572,"children":2573},{},[2574,2579,2584],{"type":18,"tag":401,"props":2575,"children":2576},{},[2577],{"type":37,"value":2578},"平台",{"type":18,"tag":401,"props":2580,"children":2581},{},[2582],{"type":37,"value":2583},"应用",{"type":18,"tag":401,"props":2585,"children":2586},{},[2587],{"type":37,"value":1736},{"type":18,"tag":412,"props":2589,"children":2590},{},[2591,2609,2627],{"type":18,"tag":397,"props":2592,"children":2593},{},[2594,2599,2604],{"type":18,"tag":419,"props":2595,"children":2596},{},[2597],{"type":37,"value":2598},"Linux",{"type":18,"tag":419,"props":2600,"children":2601},{},[2602],{"type":37,"value":2603},"Strace",{"type":18,"tag":419,"props":2605,"children":2606},{},[2607],{"type":37,"value":2608},"跟踪系统调用和信号",{"type":18,"tag":397,"props":2610,"children":2611},{},[2612,2617,2622],{"type":18,"tag":419,"props":2613,"children":2614},{},[2615],{"type":37,"value":2616},"macOS",{"type":18,"tag":419,"props":2618,"children":2619},{},[2620],{"type":37,"value":2621},"DTrace",{"type":18,"tag":419,"props":2623,"children":2624},{},[2625],{"type":37,"value":2626},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":18,"tag":397,"props":2628,"children":2629},{},[2630,2635,2640],{"type":18,"tag":419,"props":2631,"children":2632},{},[2633],{"type":37,"value":2634},"Windows",{"type":18,"tag":419,"props":2636,"children":2637},{},[2638],{"type":37,"value":2639},"Process Monitor",{"type":18,"tag":419,"props":2641,"children":2642},{},[2643],{"type":37,"value":2644},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":18,"tag":134,"props":2646,"children":2647},{},[2648,2653,2658],{"type":18,"tag":40,"props":2649,"children":2650},{},[2651],{"type":37,"value":2652},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":18,"tag":40,"props":2654,"children":2655},{},[2656],{"type":37,"value":2657},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":18,"tag":40,"props":2659,"children":2660},{},[2661],{"type":37,"value":2662},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":18,"tag":40,"props":2664,"children":2665},{},[2666],{"type":37,"value":2667},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":18,"tag":27,"props":2669,"children":2670},{":t":2287,":type":2324},[],{"type":18,"tag":40,"props":2672,"children":2673},{},[2674],{"type":37,"value":2675},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":18,"tag":32,"props":2677,"children":2679},{"id":2678},"太阳底下没有新鲜事-3",[2680],{"type":37,"value":2681},"太阳底下没有新鲜事 3",{"type":18,"tag":27,"props":2683,"children":2685},{":t":2684},"太阳底下没有新鲜事",[],{"type":18,"tag":40,"props":2687,"children":2688},{},[2689],{"type":37,"value":2690},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":18,"tag":27,"props":2692,"children":2694},{":t":2693,":type":2324},"一些进制的基础",[],{"type":18,"tag":40,"props":2696,"children":2697},{},[2698],{"type":37,"value":2699},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":37,"value":2701},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":389,"props":2703,"children":2704},{},[2705,2724],{"type":18,"tag":393,"props":2706,"children":2707},{},[2708],{"type":18,"tag":397,"props":2709,"children":2710},{},[2711,2716,2720],{"type":18,"tag":401,"props":2712,"children":2713},{},[2714],{"type":37,"value":2715},"类型",{"type":18,"tag":401,"props":2717,"children":2718},{},[2719],{"type":37,"value":1736},{"type":18,"tag":401,"props":2721,"children":2722},{},[2723],{"type":37,"value":2258},{"type":18,"tag":412,"props":2725,"children":2726},{},[2727,2745,2759,2773,2787,2805,2819],{"type":18,"tag":397,"props":2728,"children":2729},{},[2730,2735,2740],{"type":18,"tag":419,"props":2731,"children":2732},{},[2733],{"type":37,"value":2734},"二进制协议",{"type":18,"tag":419,"props":2736,"children":2737},{},[2738],{"type":37,"value":2739},"以二进制格式传输数据",{"type":18,"tag":419,"props":2741,"children":2742},{},[2743],{"type":37,"value":2744},"高效性",{"type":18,"tag":397,"props":2746,"children":2747},{},[2748,2751,2754],{"type":18,"tag":419,"props":2749,"children":2750},{},[],{"type":18,"tag":419,"props":2752,"children":2753},{},[],{"type":18,"tag":419,"props":2755,"children":2756},{},[2757],{"type":37,"value":2758},"紧凑性",{"type":18,"tag":397,"props":2760,"children":2761},{},[2762,2765,2768],{"type":18,"tag":419,"props":2763,"children":2764},{},[],{"type":18,"tag":419,"props":2766,"children":2767},{},[],{"type":18,"tag":419,"props":2769,"children":2770},{},[2771],{"type":37,"value":2772},"复杂性",{"type":18,"tag":397,"props":2774,"children":2775},{},[2776,2779,2782],{"type":18,"tag":419,"props":2777,"children":2778},{},[],{"type":18,"tag":419,"props":2780,"children":2781},{},[],{"type":18,"tag":419,"props":2783,"children":2784},{},[2785],{"type":37,"value":2786},"依赖性",{"type":18,"tag":397,"props":2788,"children":2789},{},[2790,2795,2800],{"type":18,"tag":419,"props":2791,"children":2792},{},[2793],{"type":37,"value":2794},"文本协议",{"type":18,"tag":419,"props":2796,"children":2797},{},[2798],{"type":37,"value":2799},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":18,"tag":419,"props":2801,"children":2802},{},[2803],{"type":37,"value":2804},"可读性",{"type":18,"tag":397,"props":2806,"children":2807},{},[2808,2811,2814],{"type":18,"tag":419,"props":2809,"children":2810},{},[],{"type":18,"tag":419,"props":2812,"children":2813},{},[],{"type":18,"tag":419,"props":2815,"children":2816},{},[2817],{"type":37,"value":2818},"效率低",{"type":18,"tag":397,"props":2820,"children":2821},{},[2822,2825,2828],{"type":18,"tag":419,"props":2823,"children":2824},{},[],{"type":18,"tag":419,"props":2826,"children":2827},{},[],{"type":18,"tag":419,"props":2829,"children":2830},{},[2831],{"type":37,"value":2832},"灵活性（容错性和可扩展性）",{"type":18,"tag":40,"props":2834,"children":2835},{},[2836,2838,2844],{"type":37,"value":2837},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":18,"tag":277,"props":2839,"children":2841},{"className":2840},[],[2842],{"type":37,"value":2843},"octet",{"type":37,"value":2845}," 来确保每个单位确实是 8 位。",{"type":18,"tag":134,"props":2847,"children":2848},{},[2849],{"type":18,"tag":40,"props":2850,"children":2851},{},[2852],{"type":37,"value":2853},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":18,"tag":272,"props":2855,"children":2857},{"code":2856},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[2858],{"type":18,"tag":277,"props":2859,"children":2860},{"__ignoreMap":8},[2861],{"type":37,"value":2856},{"type":18,"tag":40,"props":2863,"children":2864},{},[2865],{"type":37,"value":2866},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":18,"tag":134,"props":2868,"children":2869},{},[2870],{"type":18,"tag":40,"props":2871,"children":2872},{},[2873],{"type":37,"value":2874},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":18,"tag":27,"props":2876,"children":2878},{":t":2877,":type":2324},"数值数据",[],{"type":18,"tag":40,"props":2880,"children":2881},{},[2882],{"type":37,"value":2883},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":18,"tag":40,"props":2885,"children":2886},{},[2887,2889,2894],{"type":37,"value":2888},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":18,"tag":126,"props":2890,"children":2891},{},[2892],{"type":37,"value":2893},"协议结构",{"type":37,"value":2895}," 与逆向。",{"type":18,"tag":40,"props":2897,"children":2898},{},[2899,2901,2906],{"type":37,"value":2900},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":18,"tag":126,"props":2902,"children":2903},{},[2904],{"type":37,"value":2905},"握手过程",{"type":37,"value":2907}," 来识别出加密套件。",{"type":18,"tag":40,"props":2909,"children":2910},{},[2911,2913],{"type":37,"value":2912},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":18,"tag":2914,"props":2915,"children":2916},"the",{"ida":8,"pro":8,"book":8},[2917],{"type":37,"value":2918}," 找到我想要的。",{"title":8,"searchDepth":1001,"depth":1001,"links":2920},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":2924,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":2925,"description":8,"director":2926,"time":1811,"img":2927,"body":2928,"_type":1003,"_id":3082,"_source":1005,"_file":3083,"_extension":1007},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":15,"children":2929,"toc":3080},[2930],{"type":18,"tag":19,"props":2931,"children":2932},{":by":21,":img":22,":plan":1018,":title":24},[2933,2939,2943,2948,2953,2958,2963,2986,3000,3008,3013,3019,3057,3060,3066,3070,3075],{"type":18,"tag":32,"props":2934,"children":2936},{"id":2935},"理念-1",[2937],{"type":37,"value":2938},"理念 1",{"type":18,"tag":27,"props":2940,"children":2942},{":t":2941},"为什么看这本回忆录？",[],{"type":18,"tag":40,"props":2944,"children":2945},{},[2946],{"type":37,"value":2947},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":18,"tag":40,"props":2949,"children":2950},{},[2951],{"type":37,"value":2952},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":18,"tag":40,"props":2954,"children":2955},{},[2956],{"type":37,"value":2957},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":18,"tag":40,"props":2959,"children":2960},{},[2961],{"type":37,"value":2962},"以打开网站的第一版为例；",{"type":18,"tag":196,"props":2964,"children":2965},{},[2966,2971,2976,2981],{"type":18,"tag":200,"props":2967,"children":2968},{},[2969],{"type":37,"value":2970},"有的政府官网，显示的是当权者的讲话和文件；",{"type":18,"tag":200,"props":2972,"children":2973},{},[2974],{"type":37,"value":2975},"有的政府官网，是一些便民的工具；",{"type":18,"tag":200,"props":2977,"children":2978},{},[2979],{"type":37,"value":2980},"有的政府官网，是国家的景色，旅游信息；",{"type":18,"tag":200,"props":2982,"children":2983},{},[2984],{"type":37,"value":2985},"有的政府官网，是一些数据，一些便民信息；",{"type":18,"tag":40,"props":2987,"children":2988},{},[2989,2991,2998],{"type":37,"value":2990},"打开 ",{"type":18,"tag":76,"props":2992,"children":2995},{"href":2993,"rel":2994},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[80],[2996],{"type":37,"value":2997},"https://www.president.go.kr/",{"type":37,"value":2999}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":18,"tag":134,"props":3001,"children":3002},{},[3003],{"type":18,"tag":40,"props":3004,"children":3005},{},[3006],{"type":37,"value":3007},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":18,"tag":40,"props":3009,"children":3010},{},[3011],{"type":37,"value":3012},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":18,"tag":3014,"props":3015,"children":3018},"img-tip",{"text":3016,"url":3017},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":18,"tag":134,"props":3020,"children":3021},{},[3022,3027,3032,3037,3042,3047,3052],{"type":18,"tag":40,"props":3023,"children":3024},{},[3025],{"type":37,"value":3026},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":18,"tag":40,"props":3028,"children":3029},{},[3030],{"type":37,"value":3031},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":18,"tag":40,"props":3033,"children":3034},{},[3035],{"type":37,"value":3036},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":18,"tag":40,"props":3038,"children":3039},{},[3040],{"type":37,"value":3041},"希望公民，与此同时和我一起走出这段历史。",{"type":18,"tag":40,"props":3043,"children":3044},{},[3045],{"type":37,"value":3046},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":18,"tag":40,"props":3048,"children":3049},{},[3050],{"type":37,"value":3051},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":18,"tag":40,"props":3053,"children":3054},{},[3055],{"type":37,"value":3056},"——文在寅",{"type":18,"tag":92,"props":3058,"children":3059},{},[],{"type":18,"tag":32,"props":3061,"children":3063},{"id":3062},"检察官-2",[3064],{"type":37,"value":3065},"检察官 2",{"type":18,"tag":27,"props":3067,"children":3069},{":t":3068},"青瓦台魔咒",[],{"type":18,"tag":40,"props":3071,"children":3072},{},[3073],{"type":37,"value":3074},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":18,"tag":40,"props":3076,"children":3077},{},[3078],{"type":37,"value":3079},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":1001,"depth":1001,"links":3081},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1736477101586]