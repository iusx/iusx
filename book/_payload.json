[{"data":1,"prerenderedAt":1947},["Reactive",2],{"equalBook":3},[4,376,443,665,1786],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"body":13,"_type":371,"_id":372,"_source":373,"_file":374,"_extension":375},"/book/journey-to-the-west","book",false,"","西游记","吴承恩","2025","07/1.png",{"type":14,"children":15,"toc":368},"root",[16],{"type":17,"tag":18,"props":19,"children":24},"element","book-content",{":by":20,":img":21,":plan":22,":title":23},"director","img","100","title",[25,33,38,44,50,54,70,79,84,89,91,240,245,250,255,268,273,278,283,291,296,300,306,310,315,323,328,333,338,346,358,363],{"type":17,"tag":26,"props":27,"children":29},"h1",{"id":28},"四大名著-1",[30],{"type":31,"value":32},"text","四大名著 1",{"type":17,"tag":34,"props":35,"children":37},"text-title",{":t":36},"终于理解了为什么这几本书是四大名著",[],{"type":17,"tag":39,"props":40,"children":41},"p",{},[42],{"type":31,"value":43},"在小时候。老师都说三国演义、水浒传、西游记、红楼梦是中国的四大名著。那时候还不解就四本书为什么含金量这么高。过了很多年初到社会再细品这四本书，发现这就是中国社会的缩影，其中不乏对人与人之间，国家运行时的一些隐晦表达，都在这四本书中一一体会。原来是我的打开方式不对，要读懂这几本书，要贴合现实发生的事情，来进行解读，就会发现目前现代社会和几百年前的社会并无不同，人与人和国家的运行时，都与当时大差不差。",{"type":17,"tag":26,"props":45,"children":47},{"id":46},"八十一难-论功行赏-1",[48],{"type":31,"value":49},"八十一难 论功行赏 1",{"type":17,"tag":34,"props":51,"children":53},{":t":52},"论功行赏，八戒垫底",[],{"type":17,"tag":39,"props":55,"children":56},{},[57,59,68],{"type":31,"value":58},"如果将西天取经，比作一个项目，一个工程的话。那么取经工程保护、记录、汇报的组织就是",{"type":17,"tag":60,"props":61,"children":65},"a",{"href":62,"rel":63},"https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%B8%B8%E8%AE%B0%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8#%E5%85%B6%E4%BB%96_2",[64],"nofollow",[66],{"type":31,"value":67},"六丁六甲",{"type":31,"value":69},"，向观音菩萨交法旨，而观音菩萨向如来交旨。观音菩萨开始审阅六丁六甲在西天取经的记录，发现少了一难，只有八十难。",{"type":17,"tag":71,"props":72,"children":73},"text-tip",{},[74],{"type":17,"tag":39,"props":75,"children":76},{},[77],{"type":31,"value":78},"大鼋是一只在通天河上的巨鼋，唐僧师徒第一次遇见他时，他载唐僧等人渡河，并希望唐僧能替他问佛祖还需修行多久才能修成正果化身成人。回程的时候大鼋再度载唐僧师徒及经书过河，半途上问起这个承诺，然而早已遗忘此事的唐三藏无言以对，于是不高兴的大鼋身子一翻，把唐僧淹入水中。这个事件是唐僧取经所需历经的八十一难中的最后一难。",{"type":17,"tag":39,"props":80,"children":81},{},[82],{"type":31,"value":83},"大鼋对唐僧的要求可谓是人之常情，毕竟在通天河上班了很多年，帮助了唐僧；想问问佛祖还有多少年才能退休。但唐僧又没有帮大鼋办事，所以将唐僧摔下。",{"type":17,"tag":39,"props":85,"children":86},{},[87],{"type":31,"value":88},"到了长安后，取经工程以步入后章。虽然取经计划原定是三年，但经历了十多年后才取回，可谓是历经磨难。虽然时间超出了，但经是取回了。因此李世民撰文《圣教序》为取经工程定性。",{"type":31,"value":90},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":93,"children":94},"table",{},[95,124],{"type":17,"tag":96,"props":97,"children":98},"thead",{},[99],{"type":17,"tag":100,"props":101,"children":102},"tr",{},[103,109,114,119],{"type":17,"tag":104,"props":105,"children":106},"th",{},[107],{"type":31,"value":108},"名字",{"type":17,"tag":104,"props":110,"children":111},{},[112],{"type":31,"value":113},"受封",{"type":17,"tag":104,"props":115,"children":116},{},[117],{"type":31,"value":118},"等级",{"type":17,"tag":104,"props":120,"children":121},{},[122],{"type":31,"value":123},"作用",{"type":17,"tag":125,"props":126,"children":127},"tbody",{},[128,152,174,195,218],{"type":17,"tag":100,"props":129,"children":130},{},[131,137,142,147],{"type":17,"tag":132,"props":133,"children":134},"td",{},[135],{"type":31,"value":136},"唐僧",{"type":17,"tag":132,"props":138,"children":139},{},[140],{"type":31,"value":141},"旃檀功德佛",{"type":17,"tag":132,"props":143,"children":144},{},[145],{"type":31,"value":146},"修成正果",{"type":17,"tag":132,"props":148,"children":149},{},[150],{"type":31,"value":151},"一人之下万人之上",{"type":17,"tag":100,"props":153,"children":154},{},[155,160,165,170],{"type":17,"tag":132,"props":156,"children":157},{},[158],{"type":31,"value":159},"孙悟空",{"type":17,"tag":132,"props":161,"children":162},{},[163],{"type":31,"value":164},"斗战圣佛",{"type":17,"tag":132,"props":166,"children":167},{},[168],{"type":31,"value":169},"大职正果",{"type":17,"tag":132,"props":171,"children":172},{},[173],{"type":31,"value":151},{"type":17,"tag":100,"props":175,"children":176},{},[177,182,187,191],{"type":17,"tag":132,"props":178,"children":179},{},[180],{"type":31,"value":181},"沙僧",{"type":17,"tag":132,"props":183,"children":184},{},[185],{"type":31,"value":186},"金身罗汉",{"type":17,"tag":132,"props":188,"children":189},{},[190],{"type":31,"value":169},{"type":17,"tag":132,"props":192,"children":193},{},[194],{"type":31,"value":151},{"type":17,"tag":100,"props":196,"children":197},{},[198,203,208,213],{"type":17,"tag":132,"props":199,"children":200},{},[201],{"type":31,"value":202},"小白龙",{"type":17,"tag":132,"props":204,"children":205},{},[206],{"type":31,"value":207},"八部天龙广力菩萨",{"type":17,"tag":132,"props":209,"children":210},{},[211],{"type":31,"value":212},"汝职正果",{"type":17,"tag":132,"props":214,"children":215},{},[216],{"type":31,"value":217},"保护灵山，禁卫军首领",{"type":17,"tag":100,"props":219,"children":220},{},[221,226,231,235],{"type":17,"tag":132,"props":222,"children":223},{},[224],{"type":31,"value":225},"猪八戒",{"type":17,"tag":132,"props":227,"children":228},{},[229],{"type":31,"value":230},"净坛使者",{"type":17,"tag":132,"props":232,"children":233},{},[234],{"type":31,"value":212},{"type":17,"tag":132,"props":236,"children":237},{},[238],{"type":31,"value":239},"打扫贡品的",{"type":17,"tag":39,"props":241,"children":242},{},[243],{"type":31,"value":244},"回到灵山后。唐僧是如来的二弟子，但不尊重佛法，投胎至东土大唐。取经修成正果后受封——旃檀功德佛（修成正果）；孙悟空虽大闹天宫，被如来镇压五百年，但取经过程中降妖伏魔受封斗战圣佛（大职正果）；猪八戒是净坛使者（汝职正果）。",{"type":17,"tag":39,"props":246,"children":247},{},[248],{"type":31,"value":249},"猪八戒对受封不满，于是质问如来被如来狠狠 PUA。说猪八戒由于 “又有顽心，色情未泯”，为如来佛祖的部下，负责享用一切人世间作功德的供品。绝对是 PUA 猪八戒，成佛了想吃什么没有，非要当个打工人吃边角料。虽然净水楼台先得月，但如果成佛了，躺在床上还有人喂这不香吗？",{"type":17,"tag":39,"props":251,"children":252},{},[253],{"type":31,"value":254},"而到了沙僧，沙僧虽然在蟠桃会上摔杯为号，威胁到了玉帝被贬流沙河。受封金身罗汉（大职正果）；白龙马在取经路上驼经有功，受封八部天龙广力菩萨（汝职正果）",{"type":17,"tag":39,"props":256,"children":257},{},[258,260,266],{"type":31,"value":259},"这种论功行赏，看的是他们背后的势力。唐僧功劳最大，取经团队的主要负责人；孙悟空背后就是道教，佛教，玉帝。谁都搞不死孙悟空，那既然这样不如 ",{"type":17,"tag":261,"props":262,"children":263},"strong",{},[264],{"type":31,"value":265},"请客，斩首，收下当狗",{"type":31,"value":267}," 你会发现都是这么做的，只不过前期玉帝给的官小了，后面佛祖总结失败经验给了个官大的，成功收下当狗。",{"type":17,"tag":39,"props":269,"children":270},{},[271],{"type":31,"value":272},"虽然沙僧最后是个菩萨，但人家职级是和孙悟空一样的。而猪八戒虽然也是菩萨，但属于是菩萨里面打杂的；甚至猪八戒不如白龙马等极高，人家起码还能训练下禁卫军，而猪八戒只能吃人家剩下的贡品。沙僧的背后代表的是玉帝；白龙马背后就是龙王家族（婆罗门），四海龙王基本上走到哪都能看到龙王什么海龙王，河龙王，井里面也有龙王，有水的地方都有龙王。",{"type":17,"tag":39,"props":274,"children":275},{},[276],{"type":31,"value":277},"虽然龙在西游记里面级别比较低，玉帝办一下什么宴会都要有个龙肝凤胆(玉帝最喜欢吃龙王了)，动不动斩个龙王，甚至梦里都要斩个龙王玩玩消遣下工作的劳累。所以小白龙吃唐三藏坐骑给观音菩萨点化完全是偶遇，龙王策划的一个剧本，把小白龙这个富哥塞进去。如果取经成功了就能大大提升龙王家族的影响力，俺们龙王也是能给灵山当禁卫军的了，也算是给赵家人当上狗了。",{"type":17,"tag":39,"props":279,"children":280},{},[281],{"type":31,"value":282},"为什么小白龙一条龙要幻化成马呢，我比较认同一个观点。作为一个婆罗门一个富哥，尽量低调点，毕竟言多必失。变成马又不用降妖除魔，还不用说话，主打一个陪伴，不容易被人关注，不容易给人开黑料。这要给人曝光出来了，其他家族就来气了，凭什么他能混个编制成为禁卫军首领啊? 所以说龙王家族是真的厉害，基本上整部西游记形形色色的龙王出境率还算是比较高的。连我龙王家的祖传如意金箍棒都给孙悟空了，起码是重仓押注取经团队，不成功便成仁。",{"type":17,"tag":71,"props":284,"children":285},{},[286],{"type":17,"tag":39,"props":287,"children":288},{},[289],{"type":31,"value":290},"道德天尊又称太上老君，小说中居于离恨天兜率宫（实际上兜率为印度词汇，道教中太上老君居于太清圣境）。孙悟空因大闹天宫，被太上老君的金刚镯打到，因此被捕，后被放于太上老君的八卦炉内焚化，不料非但没有被焚化，反而练就一双 “火眼金睛”，有看穿看透人事物的功力，在取经路途中，凡有妖怪化装成凡人或神仙，都逃不过他的火眼金睛而被拆穿。后来没被焚化的孙悟空出了八卦炉，愤而踢翻，造成八卦炉爆炸，火球与炭灰降于凡间西疆，而成为火焰山。替太上老君看管八卦炉的两名童子下凡作乱，分别自称金角大王和银角大王。太上老君的坐骑是一头青牛精，下凡作乱时自称独角兕大王。",{"type":17,"tag":39,"props":292,"children":293},{},[294],{"type":31,"value":295},"最后的结果也很不错，龙王家族最后变成有钱有势的韩国财阀一样的家族势力。再也不是那个有钱任人宰割的群体了。而猪八戒出身就是道教，道教扛把子就是太上老君，太上老君这个人也可以细细品，基本上西游记上很多妖怪，比如什么独角兕大王、金角大王、银角大王都是太上老君的坐骑什么的。",{"type":17,"tag":297,"props":298,"children":299},"hr",{},[],{"type":17,"tag":26,"props":301,"children":303},{"id":302},"四十九回-观音地盘-2",[304],{"type":31,"value":305},"四十九回 观音地盘 2",{"type":17,"tag":34,"props":307,"children":309},{":t":308},"观音的回旋镖",[],{"type":17,"tag":39,"props":311,"children":312},{},[313],{"type":31,"value":314},"灵感大王要胁住在河岸的村民每年必须供奉一对童男童女，以保风调雨顺、否则降灾。孙悟空和猪八戒伪装成童男童女并偷袭他，灵感大王不敌孙悟空而躲了起来，孙悟空便找上观音菩萨协助。最后由观音用鱼篮收回妖怪后带回了池塘。",{"type":17,"tag":71,"props":316,"children":317},{},[318],{"type":17,"tag":39,"props":319,"children":320},{},[321],{"type":31,"value":322},"灵感大王为住在通天河里的妖怪，真实身份为普陀山莲花池的金鱼，因为听了观音说法而有了力量便下凡作恶。能够在一晚之内，将宽度 800 里、长度连孙悟空都看不见尽头的通天河冻成冰河。",{"type":17,"tag":39,"props":324,"children":325},{},[326],{"type":31,"value":327},"在四十九回时，孙悟空和灵感大王的掰扯。孙悟空可能发现了灵感大王的背后是观音菩萨，于是去找观音收服鲤鱼精。在这个故事中，你会发现。观音来了后将通天河的小鱼小虾都灭口了，就留了个鲤鱼精。",{"type":17,"tag":39,"props":329,"children":330},{},[331],{"type":31,"value":332},"这原本是观音的地盘，被孙悟空抓住了把柄。于是在八十一难的时候，陈家庄唐僧在此处讲经可以视作为观音将这个地盘让给了取经三人。孙悟空与观音菩萨交易成功。孙悟空之后也没有在玉帝、佛祖跟前给观音菩萨上眼药。",{"type":17,"tag":39,"props":334,"children":335},{},[336],{"type":31,"value":337},"在现实社会中，这个步骤就很像是观音菩萨贪污了一块地，改造成了个山水庄园。孙悟空误打误撞发现了这块贪污巨款，之后去给观音菩萨上眼药。之后在八十一难中，其实八十难就行了，但因为观音菩萨需要告诉孙悟空，这块地方我不要了，送给你，让你们去看看这块地怎么样，将秘密守护住堵住孙悟空的嘴；让其在论功行赏的时候不要泄露出去。",{"type":17,"tag":71,"props":339,"children":340},{},[341],{"type":17,"tag":39,"props":342,"children":343},{},[344],{"type":31,"value":345},"紧箍咒是《西游记》中的一个咒语，又名定心真言，由如来发明，经观音菩萨传授给唐僧，用于对其弟子孙悟空的管教。",{"type":17,"tag":39,"props":347,"children":348},{},[349,351,356],{"type":31,"value":350},"孙悟空其实是比较讨厌观音菩萨的，因为紧箍咒就是观音菩萨给他下的套。想拿捏孙悟空，所以在取经工程前期，孙悟空一直被唐僧拿捏。这件事情告诉我们，不幸树敌的时候，可以 ",{"type":17,"tag":261,"props":352,"children":353},{},[354],{"type":31,"value":355},"捧高",{"type":31,"value":357}," 下对方，就比如观音在通天河陈家庄那样，给孙悟空，唐僧他们整个供奉，来暗示孙悟空你都成佛了，再计较这些岂不是不符你身份？就当我观音是个小人忘记这些恶心事吧。",{"type":17,"tag":39,"props":359,"children":360},{},[361],{"type":31,"value":362},"这样孙悟空在论功行赏的时候，就不会打破和谐的气氛，让观音不被反腐。如果没有八十一难，那么孙悟空是会将观音说出去的，因为孙悟空背景很深，背后是道教、佛教、天庭。",{"type":17,"tag":39,"props":364,"children":365},{},[366],{"type":31,"value":367},"连在灵山唐僧师徒到灵山宝阁取经时，阿难、伽叶作为如来的底子要收取人事。孙悟空都要把索要人事之事捅到如来佛祖那里，佛祖并不觉有何不妥就可以看出，孙悟空是真的敢举报观音贪污的。",{"title":8,"searchDepth":369,"depth":369,"links":370},2,[],"markdown","content:book:journey-to-the-west.md","content","book/journey-to-the-west.md","md",{"_path":377,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":378,"description":8,"director":379,"time":380,"img":381,"plan":382,"body":383,"_type":371,"_id":441,"_source":373,"_file":442,"_extension":375},"/book/criminal_minds","Criminal Minds","R/N","2024.10.11","06/1.png","01",{"type":14,"children":384,"toc":439},[385],{"type":17,"tag":18,"props":386,"children":388},{":by":20,":img":21,":plan":387,":title":23},"plan",[389,393,399,404,412,417,434],{"type":17,"tag":34,"props":390,"children":392},{":t":391},"第一季",[],{"type":17,"tag":26,"props":394,"children":396},{"id":395},"行为分析小组-0",[397],{"type":31,"value":398},"行为分析小组 0",{"type":17,"tag":39,"props":400,"children":401},{},[402],{"type":31,"value":403},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":17,"tag":71,"props":405,"children":406},{},[407],{"type":17,"tag":39,"props":408,"children":409},{},[410],{"type":31,"value":411},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":17,"tag":39,"props":413,"children":414},{},[415],{"type":31,"value":416},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":17,"tag":71,"props":418,"children":419},{},[420],{"type":17,"tag":39,"props":421,"children":422},{},[423,425,432],{"type":31,"value":424},"比如 ",{"type":17,"tag":60,"props":426,"children":429},{"href":427,"rel":428},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[64],[430],{"type":31,"value":431},"洪博培",{"type":31,"value":433}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":17,"tag":39,"props":435,"children":436},{},[437],{"type":31,"value":438},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"title":8,"searchDepth":369,"depth":369,"links":440},[],"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":444,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":445,"description":8,"director":379,"time":446,"img":447,"plan":448,"body":449,"_type":371,"_id":663,"_source":373,"_file":664,"_extension":375},"/book/24-hour","24 hour","2024.7.22","05/1.png","30",{"type":14,"children":450,"toc":661},[451],{"type":17,"tag":18,"props":452,"children":453},{":by":20,":img":21,":plan":387,":title":23},[454,458,464,469,474,479,484,489,494,499,504,509,514,518,524,574,576,656],{"type":17,"tag":34,"props":455,"children":457},{":t":456},"1~3 季",[],{"type":17,"tag":26,"props":459,"children":461},{"id":460},"_13-季不要内耗-1",[462],{"type":31,"value":463},"1~3 季：不要内耗 1",{"type":17,"tag":39,"props":465,"children":466},{},[467],{"type":31,"value":468},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":17,"tag":39,"props":470,"children":471},{},[472],{"type":31,"value":473},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":17,"tag":39,"props":475,"children":476},{},[477],{"type":31,"value":478},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":17,"tag":39,"props":480,"children":481},{},[482],{"type":31,"value":483},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":17,"tag":39,"props":485,"children":486},{},[487],{"type":31,"value":488},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":17,"tag":39,"props":490,"children":491},{},[492],{"type":31,"value":493},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":17,"tag":39,"props":495,"children":496},{},[497],{"type":31,"value":498},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":17,"tag":39,"props":500,"children":501},{},[502],{"type":31,"value":503},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":17,"tag":39,"props":505,"children":506},{},[507],{"type":31,"value":508},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":17,"tag":39,"props":510,"children":511},{},[512],{"type":31,"value":513},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":17,"tag":34,"props":515,"children":517},{":t":516},"Subchannel chip",[],{"type":17,"tag":26,"props":519,"children":521},{"id":520},"子通道芯片-subchannel-chip-2",[522],{"type":31,"value":523},"子通道芯片: Subchannel chip 2",{"type":17,"tag":39,"props":525,"children":526},{},[527,529,536,538,545,547,554,556,563,565,572],{"type":31,"value":528},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":17,"tag":60,"props":530,"children":533},{"href":531,"rel":532},"https://24.fandom.com/wiki/Subchannel_chip",[64],[534],{"type":31,"value":535},"24 Wiki",{"type":31,"value":537}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":17,"tag":60,"props":539,"children":542},{"href":540,"rel":541},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[64],[543],{"type":31,"value":544},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":31,"value":546},"、",{"type":17,"tag":60,"props":548,"children":551},{"href":549,"rel":550},"https://en.wikipedia.org/wiki/Ultra-wideband#",[64],[552],{"type":31,"value":553},"超宽频(UWB, Ultra-wideband)",{"type":31,"value":555},"，",{"type":17,"tag":60,"props":557,"children":560},{"href":558,"rel":559},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[64],[561],{"type":31,"value":562},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":31,"value":564}," 所常用的 ",{"type":17,"tag":60,"props":566,"children":569},{"href":567,"rel":568},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[64],[570],{"type":31,"value":571},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":31,"value":573}," 协议。",{"type":31,"value":575},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":577,"children":578},{},[579,600],{"type":17,"tag":96,"props":580,"children":581},{},[582],{"type":17,"tag":100,"props":583,"children":584},{},[585,590,595],{"type":17,"tag":104,"props":586,"children":587},{},[588],{"type":31,"value":589},"名称",{"type":17,"tag":104,"props":591,"children":592},{},[593],{"type":31,"value":594},"描述",{"type":17,"tag":104,"props":596,"children":597},{},[598],{"type":31,"value":599},"领域",{"type":17,"tag":125,"props":601,"children":602},{},[603,621,638],{"type":17,"tag":100,"props":604,"children":605},{},[606,611,616],{"type":17,"tag":132,"props":607,"children":608},{},[609],{"type":31,"value":610},"FHSS",{"type":17,"tag":132,"props":612,"children":613},{},[614],{"type":31,"value":615},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":17,"tag":132,"props":617,"children":618},{},[619],{"type":31,"value":620},"无线电",{"type":17,"tag":100,"props":622,"children":623},{},[624,629,634],{"type":17,"tag":132,"props":625,"children":626},{},[627],{"type":31,"value":628},"UWB",{"type":17,"tag":132,"props":630,"children":631},{},[632],{"type":31,"value":633},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":17,"tag":132,"props":635,"children":636},{},[637],{"type":31,"value":620},{"type":17,"tag":100,"props":639,"children":640},{},[641,646,651],{"type":17,"tag":132,"props":642,"children":643},{},[644],{"type":31,"value":645},"NB-IoT",{"type":17,"tag":132,"props":647,"children":648},{},[649],{"type":31,"value":650},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":17,"tag":132,"props":652,"children":653},{},[654],{"type":31,"value":655},"无线电与物联网",{"type":17,"tag":39,"props":657,"children":658},{},[659],{"type":31,"value":660},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":369,"depth":369,"links":662},[],"content:book:24-hour.md","book/24-hour.md",{"_path":666,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":667,"description":8,"director":668,"time":669,"img":670,"plan":671,"body":672,"_type":371,"_id":1784,"_source":373,"_file":1785,"_extension":375},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","1",{"type":14,"children":673,"toc":1782},[674],{"type":17,"tag":18,"props":675,"children":676},{":by":20,":img":21,":plan":387,":title":23},[677,681,687,708,710,785,799,807,821,834,837,842,847,850,854,860,865,870,875,877,976,981,993,994,1060,1065,1073,1078,1081,1085,1091,1096,1098,1159,1164,1179,1184,1189,1194,1196,1341,1349,1354,1362,1367,1371,1394,1418,1423,1427,1428,1508,1526,1531,1534,1539,1545,1549,1554,1558,1563,1565,1696,1709,1717,1725,1730,1738,1742,1747,1759,1771],{"type":17,"tag":34,"props":678,"children":680},{":t":679},"Google Project Zero",[],{"type":17,"tag":26,"props":682,"children":684},{"id":683},"作者-1",[685],{"type":31,"value":686},"作者 1",{"type":17,"tag":39,"props":688,"children":689},{},[690,692,698,700,706],{"type":31,"value":691},"本书的作者是 ",{"type":17,"tag":60,"props":693,"children":696},{"href":694,"rel":695},"https://github.com/tyranid",[64],[697],{"type":31,"value":668},{"type":31,"value":699},"，也是著名的 ",{"type":17,"tag":60,"props":701,"children":704},{"href":702,"rel":703},"https://googleprojectzero.blogspot.com/",[64],[705],{"type":31,"value":679},{"type":31,"value":707}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":31,"value":709},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":711,"children":712},{},[713,728],{"type":17,"tag":96,"props":714,"children":715},{},[716],{"type":17,"tag":100,"props":717,"children":718},{},[719,724],{"type":17,"tag":104,"props":720,"children":721},{},[722],{"type":31,"value":723},"会议",{"type":17,"tag":104,"props":725,"children":726},{},[727],{"type":31,"value":594},{"type":17,"tag":125,"props":729,"children":730},{},[731,749,767],{"type":17,"tag":100,"props":732,"children":733},{},[734,744],{"type":17,"tag":132,"props":735,"children":736},{},[737],{"type":17,"tag":60,"props":738,"children":741},{"href":739,"rel":740},"https://www.blackhat.com/",[64],[742],{"type":31,"value":743},"BlackHat",{"type":17,"tag":132,"props":745,"children":746},{},[747],{"type":31,"value":748},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":17,"tag":100,"props":750,"children":751},{},[752,762],{"type":17,"tag":132,"props":753,"children":754},{},[755],{"type":17,"tag":60,"props":756,"children":759},{"href":757,"rel":758},"https://www.secwest.net/",[64],[760],{"type":31,"value":761},"CanSecWest",{"type":17,"tag":132,"props":763,"children":764},{},[765],{"type":31,"value":766},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":17,"tag":100,"props":768,"children":769},{},[770,780],{"type":17,"tag":132,"props":771,"children":772},{},[773],{"type":17,"tag":60,"props":774,"children":777},{"href":775,"rel":776},"https://events.ccc.de/",[64],[778],{"type":31,"value":779},"Chaos Computer Conference",{"type":17,"tag":132,"props":781,"children":782},{},[783],{"type":31,"value":784},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":17,"tag":39,"props":786,"children":787},{},[788,790,797],{"type":31,"value":789},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":17,"tag":60,"props":791,"children":794},{"href":792,"rel":793},"https://en.wikipedia.org/wiki/Line_management",[64],[795],{"type":31,"value":796},"Leader(line manager)",{"type":31,"value":798}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":17,"tag":71,"props":800,"children":801},{},[802],{"type":17,"tag":39,"props":803,"children":804},{},[805],{"type":31,"value":806},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":17,"tag":39,"props":808,"children":809},{},[810,812,819],{"type":31,"value":811},"在规划职业路径阶段认识了 ",{"type":17,"tag":60,"props":813,"children":816},{"href":814,"rel":815},"https://www.linkedin.com/in/mike-jordon-72193719/",[64],[817],{"type":31,"value":818},"Mike Jordon",{"type":31,"value":820}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":17,"tag":71,"props":822,"children":823},{},[824,829],{"type":17,"tag":39,"props":825,"children":826},{},[827],{"type":31,"value":828},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":17,"tag":39,"props":830,"children":831},{},[832],{"type":31,"value":833},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":17,"tag":297,"props":835,"children":836},{},[],{"type":17,"tag":39,"props":838,"children":839},{},[840],{"type":31,"value":841},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":17,"tag":39,"props":843,"children":844},{},[845],{"type":31,"value":846},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":17,"tag":297,"props":848,"children":849},{},[],{"type":17,"tag":34,"props":851,"children":853},{":t":852},"协议是一切的基础",[],{"type":17,"tag":26,"props":855,"children":857},{"id":856},"基础-2",[858],{"type":31,"value":859},"基础 2",{"type":17,"tag":39,"props":861,"children":862},{},[863],{"type":31,"value":864},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":17,"tag":39,"props":866,"children":867},{},[868],{"type":31,"value":869},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":17,"tag":39,"props":871,"children":872},{},[873],{"type":31,"value":874},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":31,"value":876},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":878,"children":879},{},[880,895],{"type":17,"tag":96,"props":881,"children":882},{},[883],{"type":17,"tag":100,"props":884,"children":885},{},[886,891],{"type":17,"tag":104,"props":887,"children":888},{},[889],{"type":31,"value":890},"功能",{"type":17,"tag":104,"props":892,"children":893},{},[894],{"type":31,"value":594},{"type":17,"tag":125,"props":896,"children":897},{},[898,911,924,937,950,963],{"type":17,"tag":100,"props":899,"children":900},{},[901,906],{"type":17,"tag":132,"props":902,"children":903},{},[904],{"type":31,"value":905},"维护会话状态",{"type":17,"tag":132,"props":907,"children":908},{},[909],{"type":31,"value":910},"创建新的连接或终止连接",{"type":17,"tag":100,"props":912,"children":913},{},[914,919],{"type":17,"tag":132,"props":915,"children":916},{},[917],{"type":31,"value":918},"通过寻址识别节点",{"type":17,"tag":132,"props":920,"children":921},{},[922],{"type":31,"value":923},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":17,"tag":100,"props":925,"children":926},{},[927,932],{"type":17,"tag":132,"props":928,"children":929},{},[930],{"type":31,"value":931},"控制流量",{"type":17,"tag":132,"props":933,"children":934},{},[935],{"type":31,"value":936},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":17,"tag":100,"props":938,"children":939},{},[940,945],{"type":17,"tag":132,"props":941,"children":942},{},[943],{"type":31,"value":944},"保证传输数据的顺序",{"type":17,"tag":132,"props":946,"children":947},{},[948],{"type":31,"value":949},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":17,"tag":100,"props":951,"children":952},{},[953,958],{"type":17,"tag":132,"props":954,"children":955},{},[956],{"type":31,"value":957},"检测和纠正错误",{"type":17,"tag":132,"props":959,"children":960},{},[961],{"type":31,"value":962},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":17,"tag":100,"props":964,"children":965},{},[966,971],{"type":17,"tag":132,"props":967,"children":968},{},[969],{"type":31,"value":970},"格式化和编码数据",{"type":17,"tag":132,"props":972,"children":973},{},[974],{"type":31,"value":975},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":17,"tag":39,"props":977,"children":978},{},[979],{"type":31,"value":980},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":17,"tag":982,"props":983,"children":987},"pre",{"code":984,"language":31,"meta":8,"className":985},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[986],"language-text",[988],{"type":17,"tag":989,"props":990,"children":991},"code",{"__ignoreMap":8},[992],{"type":31,"value":984},{"type":31,"value":709},{"type":17,"tag":92,"props":995,"children":996},{},[997,1012],{"type":17,"tag":96,"props":998,"children":999},{},[1000],{"type":17,"tag":100,"props":1001,"children":1002},{},[1003,1008],{"type":17,"tag":104,"props":1004,"children":1005},{},[1006],{"type":31,"value":1007},"协议模型",{"type":17,"tag":104,"props":1009,"children":1010},{},[1011],{"type":31,"value":594},{"type":17,"tag":125,"props":1013,"children":1014},{},[1015,1028,1041],{"type":17,"tag":100,"props":1016,"children":1017},{},[1018,1023],{"type":17,"tag":132,"props":1019,"children":1020},{},[1021],{"type":31,"value":1022},"内容层 (文件请求)",{"type":17,"tag":132,"props":1024,"children":1025},{},[1026],{"type":31,"value":1027},"我想要一个 image.png 图片",{"type":17,"tag":100,"props":1029,"children":1030},{},[1031,1036],{"type":17,"tag":132,"props":1032,"children":1033},{},[1034],{"type":31,"value":1035},"编码层 (HTTP)",{"type":17,"tag":132,"props":1037,"children":1038},{},[1039],{"type":31,"value":1040},"GET /image.png HTTP/1.1",{"type":17,"tag":100,"props":1042,"children":1043},{},[1044,1049],{"type":17,"tag":132,"props":1045,"children":1046},{},[1047],{"type":31,"value":1048},"传输层 (TCP/IP)",{"type":17,"tag":132,"props":1050,"children":1051},{},[1052,1054,1058],{"type":31,"value":1053},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":17,"tag":1055,"props":1056,"children":1057},"br",{},[],{"type":31,"value":1059}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":17,"tag":39,"props":1061,"children":1062},{},[1063],{"type":31,"value":1064},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":17,"tag":71,"props":1066,"children":1067},{},[1068],{"type":17,"tag":39,"props":1069,"children":1070},{},[1071],{"type":31,"value":1072},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":17,"tag":39,"props":1074,"children":1075},{},[1076],{"type":31,"value":1077},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":17,"tag":297,"props":1079,"children":1080},{},[],{"type":17,"tag":34,"props":1082,"children":1084},{":t":1083},"流量捕获",[],{"type":17,"tag":26,"props":1086,"children":1088},{"id":1087},"捕获-2",[1089],{"type":31,"value":1090},"捕获 2",{"type":17,"tag":39,"props":1092,"children":1093},{},[1094],{"type":31,"value":1095},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":31,"value":1097},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":1099,"children":1100},{},[1101,1120],{"type":17,"tag":96,"props":1102,"children":1103},{},[1104],{"type":17,"tag":100,"props":1105,"children":1106},{},[1107,1111,1115],{"type":17,"tag":104,"props":1108,"children":1109},{},[1110],{"type":31,"value":589},{"type":17,"tag":104,"props":1112,"children":1113},{},[1114],{"type":31,"value":594},{"type":17,"tag":104,"props":1116,"children":1117},{},[1118],{"type":31,"value":1119},"特点",{"type":17,"tag":125,"props":1121,"children":1122},{},[1123,1141],{"type":17,"tag":100,"props":1124,"children":1125},{},[1126,1131,1136],{"type":17,"tag":132,"props":1127,"children":1128},{},[1129],{"type":31,"value":1130},"被动捕获",{"type":17,"tag":132,"props":1132,"children":1133},{},[1134],{"type":31,"value":1135},"在线路上传输时提取数据，如 Wireshark",{"type":17,"tag":132,"props":1137,"children":1138},{},[1139],{"type":31,"value":1140},"不直接与流量交互",{"type":17,"tag":100,"props":1142,"children":1143},{},[1144,1149,1154],{"type":17,"tag":132,"props":1145,"children":1146},{},[1147],{"type":31,"value":1148},"主动捕获",{"type":17,"tag":132,"props":1150,"children":1151},{},[1152],{"type":31,"value":1153},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":17,"tag":132,"props":1155,"children":1156},{},[1157],{"type":31,"value":1158},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":17,"tag":39,"props":1160,"children":1161},{},[1162],{"type":31,"value":1163},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":17,"tag":1165,"props":1166,"children":1167},"ol",{},[1168,1174],{"type":17,"tag":1169,"props":1170,"children":1171},"li",{},[1172],{"type":31,"value":1173},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":17,"tag":1169,"props":1175,"children":1176},{},[1177],{"type":31,"value":1178},"只查看正在测试的应用程序的流量",{"type":17,"tag":39,"props":1180,"children":1181},{},[1182],{"type":31,"value":1183},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":17,"tag":34,"props":1185,"children":1188},{":t":1186,":type":1187},"系统调用跟踪","2",[],{"type":17,"tag":39,"props":1190,"children":1191},{},[1192],{"type":31,"value":1193},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":31,"value":1195},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":1197,"children":1198},{},[1199,1218],{"type":17,"tag":96,"props":1200,"children":1201},{},[1202],{"type":17,"tag":100,"props":1203,"children":1204},{},[1205,1210,1214],{"type":17,"tag":104,"props":1206,"children":1207},{},[1208],{"type":31,"value":1209},"模式",{"type":17,"tag":104,"props":1211,"children":1212},{},[1213],{"type":31,"value":594},{"type":17,"tag":104,"props":1215,"children":1216},{},[1217],{"type":31,"value":1119},{"type":17,"tag":125,"props":1219,"children":1220},{},[1221,1239,1253,1267,1281,1299,1313,1327],{"type":17,"tag":100,"props":1222,"children":1223},{},[1224,1229,1234],{"type":17,"tag":132,"props":1225,"children":1226},{},[1227],{"type":31,"value":1228},"用户模式",{"type":17,"tag":132,"props":1230,"children":1231},{},[1232],{"type":31,"value":1233},"操作系统普通应用程序和用户空间进程运行的模式",{"type":17,"tag":132,"props":1235,"children":1236},{},[1237],{"type":31,"value":1238},"权限限制",{"type":17,"tag":100,"props":1240,"children":1241},{},[1242,1245,1248],{"type":17,"tag":132,"props":1243,"children":1244},{},[],{"type":17,"tag":132,"props":1246,"children":1247},{},[],{"type":17,"tag":132,"props":1249,"children":1250},{},[1251],{"type":31,"value":1252},"隔离",{"type":17,"tag":100,"props":1254,"children":1255},{},[1256,1259,1262],{"type":17,"tag":132,"props":1257,"children":1258},{},[],{"type":17,"tag":132,"props":1260,"children":1261},{},[],{"type":17,"tag":132,"props":1263,"children":1264},{},[1265],{"type":31,"value":1266},"限制对系统资源的直接访问",{"type":17,"tag":100,"props":1268,"children":1269},{},[1270,1273,1276],{"type":17,"tag":132,"props":1271,"children":1272},{},[],{"type":17,"tag":132,"props":1274,"children":1275},{},[],{"type":17,"tag":132,"props":1277,"children":1278},{},[1279],{"type":31,"value":1280},"日常应用程序的运行",{"type":17,"tag":100,"props":1282,"children":1283},{},[1284,1289,1294],{"type":17,"tag":132,"props":1285,"children":1286},{},[1287],{"type":31,"value":1288},"内核模式",{"type":17,"tag":132,"props":1290,"children":1291},{},[1292],{"type":31,"value":1293},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":17,"tag":132,"props":1295,"children":1296},{},[1297],{"type":31,"value":1298},"完全权限",{"type":17,"tag":100,"props":1300,"children":1301},{},[1302,1305,1308],{"type":17,"tag":132,"props":1303,"children":1304},{},[],{"type":17,"tag":132,"props":1306,"children":1307},{},[],{"type":17,"tag":132,"props":1309,"children":1310},{},[1311],{"type":31,"value":1312},"关键操作",{"type":17,"tag":100,"props":1314,"children":1315},{},[1316,1319,1322],{"type":17,"tag":132,"props":1317,"children":1318},{},[],{"type":17,"tag":132,"props":1320,"children":1321},{},[],{"type":17,"tag":132,"props":1323,"children":1324},{},[1325],{"type":31,"value":1326},"直接访问和控制系统资源",{"type":17,"tag":100,"props":1328,"children":1329},{},[1330,1333,1336],{"type":17,"tag":132,"props":1331,"children":1332},{},[],{"type":17,"tag":132,"props":1334,"children":1335},{},[],{"type":17,"tag":132,"props":1337,"children":1338},{},[1339],{"type":31,"value":1340},"系统级调用",{"type":17,"tag":71,"props":1342,"children":1343},{},[1344],{"type":17,"tag":39,"props":1345,"children":1346},{},[1347],{"type":31,"value":1348},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":17,"tag":39,"props":1350,"children":1351},{},[1352],{"type":31,"value":1353},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":17,"tag":982,"props":1355,"children":1357},{"code":1356},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[1358],{"type":17,"tag":989,"props":1359,"children":1360},{"__ignoreMap":8},[1361],{"type":31,"value":1356},{"type":17,"tag":39,"props":1363,"children":1364},{},[1365],{"type":31,"value":1366},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":17,"tag":34,"props":1368,"children":1370},{":t":1369,":type":1187},"网络编程的基础",[],{"type":17,"tag":39,"props":1372,"children":1373},{},[1374,1376,1383,1385,1392],{"type":31,"value":1375},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":17,"tag":60,"props":1377,"children":1380},{"href":1378,"rel":1379},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[64],[1381],{"type":31,"value":1382},"Berkeley Software Distribution（BSD）",{"type":31,"value":1384}," 完成的。因此在网络通信领域中，就离不开 ",{"type":17,"tag":60,"props":1386,"children":1389},{"href":1387,"rel":1388},"https://en.wikipedia.org/wiki/Berkeley_sockets",[64],[1390],{"type":31,"value":1391},"Berkeley Sockets",{"type":31,"value":1393},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":17,"tag":71,"props":1395,"children":1396},{},[1397],{"type":17,"tag":39,"props":1398,"children":1399},{},[1400,1402,1408,1410,1416],{"type":31,"value":1401},"如果你是类 Unix 系统，可以在终端输入 ",{"type":17,"tag":989,"props":1403,"children":1405},{"className":1404},[],[1406],{"type":31,"value":1407},"man 2 syscall_name",{"type":31,"value":1409}," 在终端中查看手册，比如 ",{"type":17,"tag":989,"props":1411,"children":1413},{"className":1412},[],[1414],{"type":31,"value":1415},"man 2 open",{"type":31,"value":1417}," 就可以查看系统调用第二章有关 open 的内容。",{"type":17,"tag":39,"props":1419,"children":1420},{},[1421],{"type":31,"value":1422},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":17,"tag":34,"props":1424,"children":1426},{":t":1425,":type":1187},"不同平台之间的捕获",[],{"type":31,"value":575},{"type":17,"tag":92,"props":1429,"children":1430},{},[1431,1451],{"type":17,"tag":96,"props":1432,"children":1433},{},[1434],{"type":17,"tag":100,"props":1435,"children":1436},{},[1437,1442,1447],{"type":17,"tag":104,"props":1438,"children":1439},{},[1440],{"type":31,"value":1441},"平台",{"type":17,"tag":104,"props":1443,"children":1444},{},[1445],{"type":31,"value":1446},"应用",{"type":17,"tag":104,"props":1448,"children":1449},{},[1450],{"type":31,"value":594},{"type":17,"tag":125,"props":1452,"children":1453},{},[1454,1472,1490],{"type":17,"tag":100,"props":1455,"children":1456},{},[1457,1462,1467],{"type":17,"tag":132,"props":1458,"children":1459},{},[1460],{"type":31,"value":1461},"Linux",{"type":17,"tag":132,"props":1463,"children":1464},{},[1465],{"type":31,"value":1466},"Strace",{"type":17,"tag":132,"props":1468,"children":1469},{},[1470],{"type":31,"value":1471},"跟踪系统调用和信号",{"type":17,"tag":100,"props":1473,"children":1474},{},[1475,1480,1485],{"type":17,"tag":132,"props":1476,"children":1477},{},[1478],{"type":31,"value":1479},"macOS",{"type":17,"tag":132,"props":1481,"children":1482},{},[1483],{"type":31,"value":1484},"DTrace",{"type":17,"tag":132,"props":1486,"children":1487},{},[1488],{"type":31,"value":1489},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":17,"tag":100,"props":1491,"children":1492},{},[1493,1498,1503],{"type":17,"tag":132,"props":1494,"children":1495},{},[1496],{"type":31,"value":1497},"Windows",{"type":17,"tag":132,"props":1499,"children":1500},{},[1501],{"type":31,"value":1502},"Process Monitor",{"type":17,"tag":132,"props":1504,"children":1505},{},[1506],{"type":31,"value":1507},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":17,"tag":71,"props":1509,"children":1510},{},[1511,1516,1521],{"type":17,"tag":39,"props":1512,"children":1513},{},[1514],{"type":31,"value":1515},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":17,"tag":39,"props":1517,"children":1518},{},[1519],{"type":31,"value":1520},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":17,"tag":39,"props":1522,"children":1523},{},[1524],{"type":31,"value":1525},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":17,"tag":39,"props":1527,"children":1528},{},[1529],{"type":31,"value":1530},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":17,"tag":34,"props":1532,"children":1533},{":t":1148,":type":1187},[],{"type":17,"tag":39,"props":1535,"children":1536},{},[1537],{"type":31,"value":1538},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":17,"tag":26,"props":1540,"children":1542},{"id":1541},"太阳底下没有新鲜事-3",[1543],{"type":31,"value":1544},"太阳底下没有新鲜事 3",{"type":17,"tag":34,"props":1546,"children":1548},{":t":1547},"太阳底下没有新鲜事",[],{"type":17,"tag":39,"props":1550,"children":1551},{},[1552],{"type":31,"value":1553},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":17,"tag":34,"props":1555,"children":1557},{":t":1556,":type":1187},"一些进制的基础",[],{"type":17,"tag":39,"props":1559,"children":1560},{},[1561],{"type":31,"value":1562},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":31,"value":1564},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":92,"props":1566,"children":1567},{},[1568,1587],{"type":17,"tag":96,"props":1569,"children":1570},{},[1571],{"type":17,"tag":100,"props":1572,"children":1573},{},[1574,1579,1583],{"type":17,"tag":104,"props":1575,"children":1576},{},[1577],{"type":31,"value":1578},"类型",{"type":17,"tag":104,"props":1580,"children":1581},{},[1582],{"type":31,"value":594},{"type":17,"tag":104,"props":1584,"children":1585},{},[1586],{"type":31,"value":1119},{"type":17,"tag":125,"props":1588,"children":1589},{},[1590,1608,1622,1636,1650,1668,1682],{"type":17,"tag":100,"props":1591,"children":1592},{},[1593,1598,1603],{"type":17,"tag":132,"props":1594,"children":1595},{},[1596],{"type":31,"value":1597},"二进制协议",{"type":17,"tag":132,"props":1599,"children":1600},{},[1601],{"type":31,"value":1602},"以二进制格式传输数据",{"type":17,"tag":132,"props":1604,"children":1605},{},[1606],{"type":31,"value":1607},"高效性",{"type":17,"tag":100,"props":1609,"children":1610},{},[1611,1614,1617],{"type":17,"tag":132,"props":1612,"children":1613},{},[],{"type":17,"tag":132,"props":1615,"children":1616},{},[],{"type":17,"tag":132,"props":1618,"children":1619},{},[1620],{"type":31,"value":1621},"紧凑性",{"type":17,"tag":100,"props":1623,"children":1624},{},[1625,1628,1631],{"type":17,"tag":132,"props":1626,"children":1627},{},[],{"type":17,"tag":132,"props":1629,"children":1630},{},[],{"type":17,"tag":132,"props":1632,"children":1633},{},[1634],{"type":31,"value":1635},"复杂性",{"type":17,"tag":100,"props":1637,"children":1638},{},[1639,1642,1645],{"type":17,"tag":132,"props":1640,"children":1641},{},[],{"type":17,"tag":132,"props":1643,"children":1644},{},[],{"type":17,"tag":132,"props":1646,"children":1647},{},[1648],{"type":31,"value":1649},"依赖性",{"type":17,"tag":100,"props":1651,"children":1652},{},[1653,1658,1663],{"type":17,"tag":132,"props":1654,"children":1655},{},[1656],{"type":31,"value":1657},"文本协议",{"type":17,"tag":132,"props":1659,"children":1660},{},[1661],{"type":31,"value":1662},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":17,"tag":132,"props":1664,"children":1665},{},[1666],{"type":31,"value":1667},"可读性",{"type":17,"tag":100,"props":1669,"children":1670},{},[1671,1674,1677],{"type":17,"tag":132,"props":1672,"children":1673},{},[],{"type":17,"tag":132,"props":1675,"children":1676},{},[],{"type":17,"tag":132,"props":1678,"children":1679},{},[1680],{"type":31,"value":1681},"效率低",{"type":17,"tag":100,"props":1683,"children":1684},{},[1685,1688,1691],{"type":17,"tag":132,"props":1686,"children":1687},{},[],{"type":17,"tag":132,"props":1689,"children":1690},{},[],{"type":17,"tag":132,"props":1692,"children":1693},{},[1694],{"type":31,"value":1695},"灵活性（容错性和可扩展性）",{"type":17,"tag":39,"props":1697,"children":1698},{},[1699,1701,1707],{"type":31,"value":1700},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":17,"tag":989,"props":1702,"children":1704},{"className":1703},[],[1705],{"type":31,"value":1706},"octet",{"type":31,"value":1708}," 来确保每个单位确实是 8 位。",{"type":17,"tag":71,"props":1710,"children":1711},{},[1712],{"type":17,"tag":39,"props":1713,"children":1714},{},[1715],{"type":31,"value":1716},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":17,"tag":982,"props":1718,"children":1720},{"code":1719},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[1721],{"type":17,"tag":989,"props":1722,"children":1723},{"__ignoreMap":8},[1724],{"type":31,"value":1719},{"type":17,"tag":39,"props":1726,"children":1727},{},[1728],{"type":31,"value":1729},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":17,"tag":71,"props":1731,"children":1732},{},[1733],{"type":17,"tag":39,"props":1734,"children":1735},{},[1736],{"type":31,"value":1737},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":17,"tag":34,"props":1739,"children":1741},{":t":1740,":type":1187},"数值数据",[],{"type":17,"tag":39,"props":1743,"children":1744},{},[1745],{"type":31,"value":1746},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":17,"tag":39,"props":1748,"children":1749},{},[1750,1752,1757],{"type":31,"value":1751},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":17,"tag":261,"props":1753,"children":1754},{},[1755],{"type":31,"value":1756},"协议结构",{"type":31,"value":1758}," 与逆向。",{"type":17,"tag":39,"props":1760,"children":1761},{},[1762,1764,1769],{"type":31,"value":1763},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":17,"tag":261,"props":1765,"children":1766},{},[1767],{"type":31,"value":1768},"握手过程",{"type":31,"value":1770}," 来识别出加密套件。",{"type":17,"tag":39,"props":1772,"children":1773},{},[1774,1776],{"type":31,"value":1775},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":17,"tag":1777,"props":1778,"children":1779},"the",{"ida":8,"pro":8,"book":8},[1780],{"type":31,"value":1781}," 找到我想要的。",{"title":8,"searchDepth":369,"depth":369,"links":1783},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":1787,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1788,"description":8,"director":1789,"time":669,"img":1790,"body":1791,"_type":371,"_id":1945,"_source":373,"_file":1946,"_extension":375},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":14,"children":1792,"toc":1943},[1793],{"type":17,"tag":18,"props":1794,"children":1795},{":by":20,":img":21,":plan":22,":title":23},[1796,1802,1806,1811,1816,1821,1826,1849,1863,1871,1876,1882,1920,1923,1929,1933,1938],{"type":17,"tag":26,"props":1797,"children":1799},{"id":1798},"理念-1",[1800],{"type":31,"value":1801},"理念 1",{"type":17,"tag":34,"props":1803,"children":1805},{":t":1804},"为什么看这本回忆录？",[],{"type":17,"tag":39,"props":1807,"children":1808},{},[1809],{"type":31,"value":1810},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":17,"tag":39,"props":1812,"children":1813},{},[1814],{"type":31,"value":1815},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":17,"tag":39,"props":1817,"children":1818},{},[1819],{"type":31,"value":1820},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":17,"tag":39,"props":1822,"children":1823},{},[1824],{"type":31,"value":1825},"以打开网站的第一版为例；",{"type":17,"tag":1165,"props":1827,"children":1828},{},[1829,1834,1839,1844],{"type":17,"tag":1169,"props":1830,"children":1831},{},[1832],{"type":31,"value":1833},"有的政府官网，显示的是当权者的讲话和文件；",{"type":17,"tag":1169,"props":1835,"children":1836},{},[1837],{"type":31,"value":1838},"有的政府官网，是一些便民的工具；",{"type":17,"tag":1169,"props":1840,"children":1841},{},[1842],{"type":31,"value":1843},"有的政府官网，是国家的景色，旅游信息；",{"type":17,"tag":1169,"props":1845,"children":1846},{},[1847],{"type":31,"value":1848},"有的政府官网，是一些数据，一些便民信息；",{"type":17,"tag":39,"props":1850,"children":1851},{},[1852,1854,1861],{"type":31,"value":1853},"打开 ",{"type":17,"tag":60,"props":1855,"children":1858},{"href":1856,"rel":1857},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[64],[1859],{"type":31,"value":1860},"https://www.president.go.kr/",{"type":31,"value":1862}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":17,"tag":71,"props":1864,"children":1865},{},[1866],{"type":17,"tag":39,"props":1867,"children":1868},{},[1869],{"type":31,"value":1870},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":17,"tag":39,"props":1872,"children":1873},{},[1874],{"type":31,"value":1875},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":17,"tag":1877,"props":1878,"children":1881},"img-tip",{"text":1879,"url":1880},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":17,"tag":71,"props":1883,"children":1884},{},[1885,1890,1895,1900,1905,1910,1915],{"type":17,"tag":39,"props":1886,"children":1887},{},[1888],{"type":31,"value":1889},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":17,"tag":39,"props":1891,"children":1892},{},[1893],{"type":31,"value":1894},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":17,"tag":39,"props":1896,"children":1897},{},[1898],{"type":31,"value":1899},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":17,"tag":39,"props":1901,"children":1902},{},[1903],{"type":31,"value":1904},"希望公民，与此同时和我一起走出这段历史。",{"type":17,"tag":39,"props":1906,"children":1907},{},[1908],{"type":31,"value":1909},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":17,"tag":39,"props":1911,"children":1912},{},[1913],{"type":31,"value":1914},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":17,"tag":39,"props":1916,"children":1917},{},[1918],{"type":31,"value":1919},"——文在寅",{"type":17,"tag":297,"props":1921,"children":1922},{},[],{"type":17,"tag":26,"props":1924,"children":1926},{"id":1925},"检察官-2",[1927],{"type":31,"value":1928},"检察官 2",{"type":17,"tag":34,"props":1930,"children":1932},{":t":1931},"青瓦台魔咒",[],{"type":17,"tag":39,"props":1934,"children":1935},{},[1936],{"type":31,"value":1937},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":17,"tag":39,"props":1939,"children":1940},{},[1941],{"type":31,"value":1942},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":369,"depth":369,"links":1944},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1736272266770]