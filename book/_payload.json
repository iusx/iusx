[{"data":1,"prerenderedAt":1604},["Reactive",2],{"equalBook":3},[4,91,319,1442],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"plan":13,"body":14,"_type":86,"_id":87,"_source":88,"_file":89,"_extension":90},"/book/criminal_minds","book",false,"","Criminal Minds","R/N","2024.10.11","06/1.png","01",{"type":15,"children":16,"toc":83},"root",[17],{"type":18,"tag":19,"props":20,"children":25},"element","book-content",{":by":21,":img":22,":plan":23,":title":24},"director","img","plan","title",[26,31,39,45,54,59,78],{"type":18,"tag":27,"props":28,"children":30},"text-title",{":t":29},"第一季",[],{"type":18,"tag":32,"props":33,"children":35},"h1",{"id":34},"行为分析小组-0",[36],{"type":37,"value":38},"text","行为分析小组 0",{"type":18,"tag":40,"props":41,"children":42},"p",{},[43],{"type":37,"value":44},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":18,"tag":46,"props":47,"children":48},"text-tip",{},[49],{"type":18,"tag":40,"props":50,"children":51},{},[52],{"type":37,"value":53},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":18,"tag":40,"props":55,"children":56},{},[57],{"type":37,"value":58},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":18,"tag":46,"props":60,"children":61},{},[62],{"type":18,"tag":40,"props":63,"children":64},{},[65,67,76],{"type":37,"value":66},"比如 ",{"type":18,"tag":68,"props":69,"children":73},"a",{"href":70,"rel":71},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[72],"nofollow",[74],{"type":37,"value":75},"洪博培",{"type":37,"value":77}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":18,"tag":40,"props":79,"children":80},{},[81],{"type":37,"value":82},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"title":8,"searchDepth":84,"depth":84,"links":85},2,[],"markdown","content:book:Criminal_Minds.md","content","book/Criminal_Minds.md","md",{"_path":92,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":93,"description":8,"director":10,"time":94,"img":95,"plan":96,"body":97,"_type":86,"_id":317,"_source":88,"_file":318,"_extension":90},"/book/24-hour","24 hour","2024.7.22","05/1.png","30",{"type":15,"children":98,"toc":315},[99],{"type":18,"tag":19,"props":100,"children":101},{":by":21,":img":22,":plan":23,":title":24},[102,106,112,117,122,127,132,137,142,147,152,157,162,166,172,222,224,310],{"type":18,"tag":27,"props":103,"children":105},{":t":104},"1~3 季",[],{"type":18,"tag":32,"props":107,"children":109},{"id":108},"_13-季不要内耗-1",[110],{"type":37,"value":111},"1~3 季：不要内耗 1",{"type":18,"tag":40,"props":113,"children":114},{},[115],{"type":37,"value":116},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":18,"tag":40,"props":118,"children":119},{},[120],{"type":37,"value":121},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":18,"tag":40,"props":123,"children":124},{},[125],{"type":37,"value":126},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":18,"tag":40,"props":128,"children":129},{},[130],{"type":37,"value":131},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":18,"tag":40,"props":133,"children":134},{},[135],{"type":37,"value":136},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":18,"tag":40,"props":138,"children":139},{},[140],{"type":37,"value":141},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":18,"tag":40,"props":143,"children":144},{},[145],{"type":37,"value":146},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":18,"tag":40,"props":148,"children":149},{},[150],{"type":37,"value":151},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":18,"tag":40,"props":153,"children":154},{},[155],{"type":37,"value":156},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":18,"tag":40,"props":158,"children":159},{},[160],{"type":37,"value":161},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":18,"tag":27,"props":163,"children":165},{":t":164},"Subchannel chip",[],{"type":18,"tag":32,"props":167,"children":169},{"id":168},"子通道芯片-subchannel-chip-2",[170],{"type":37,"value":171},"子通道芯片: Subchannel chip 2",{"type":18,"tag":40,"props":173,"children":174},{},[175,177,184,186,193,195,202,204,211,213,220],{"type":37,"value":176},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":18,"tag":68,"props":178,"children":181},{"href":179,"rel":180},"https://24.fandom.com/wiki/Subchannel_chip",[72],[182],{"type":37,"value":183},"24 Wiki",{"type":37,"value":185}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":18,"tag":68,"props":187,"children":190},{"href":188,"rel":189},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[72],[191],{"type":37,"value":192},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":37,"value":194},"、",{"type":18,"tag":68,"props":196,"children":199},{"href":197,"rel":198},"https://en.wikipedia.org/wiki/Ultra-wideband#",[72],[200],{"type":37,"value":201},"超宽频(UWB, Ultra-wideband)",{"type":37,"value":203},"，",{"type":18,"tag":68,"props":205,"children":208},{"href":206,"rel":207},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[72],[209],{"type":37,"value":210},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":37,"value":212}," 所常用的 ",{"type":18,"tag":68,"props":214,"children":217},{"href":215,"rel":216},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[72],[218],{"type":37,"value":219},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":37,"value":221}," 协议。",{"type":37,"value":223},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":225,"props":226,"children":227},"table",{},[228,252],{"type":18,"tag":229,"props":230,"children":231},"thead",{},[232],{"type":18,"tag":233,"props":234,"children":235},"tr",{},[236,242,247],{"type":18,"tag":237,"props":238,"children":239},"th",{},[240],{"type":37,"value":241},"名称",{"type":18,"tag":237,"props":243,"children":244},{},[245],{"type":37,"value":246},"描述",{"type":18,"tag":237,"props":248,"children":249},{},[250],{"type":37,"value":251},"领域",{"type":18,"tag":253,"props":254,"children":255},"tbody",{},[256,275,292],{"type":18,"tag":233,"props":257,"children":258},{},[259,265,270],{"type":18,"tag":260,"props":261,"children":262},"td",{},[263],{"type":37,"value":264},"FHSS",{"type":18,"tag":260,"props":266,"children":267},{},[268],{"type":37,"value":269},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":18,"tag":260,"props":271,"children":272},{},[273],{"type":37,"value":274},"无线电",{"type":18,"tag":233,"props":276,"children":277},{},[278,283,288],{"type":18,"tag":260,"props":279,"children":280},{},[281],{"type":37,"value":282},"UWB",{"type":18,"tag":260,"props":284,"children":285},{},[286],{"type":37,"value":287},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":18,"tag":260,"props":289,"children":290},{},[291],{"type":37,"value":274},{"type":18,"tag":233,"props":293,"children":294},{},[295,300,305],{"type":18,"tag":260,"props":296,"children":297},{},[298],{"type":37,"value":299},"NB-IoT",{"type":18,"tag":260,"props":301,"children":302},{},[303],{"type":37,"value":304},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":18,"tag":260,"props":306,"children":307},{},[308],{"type":37,"value":309},"无线电与物联网",{"type":18,"tag":40,"props":311,"children":312},{},[313],{"type":37,"value":314},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":84,"depth":84,"links":316},[],"content:book:24-hour.md","book/24-hour.md",{"_path":320,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":321,"description":8,"director":322,"time":323,"img":324,"plan":325,"body":326,"_type":86,"_id":1440,"_source":88,"_file":1441,"_extension":90},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","1",{"type":15,"children":327,"toc":1438},[328],{"type":18,"tag":19,"props":329,"children":330},{":by":21,":img":22,":plan":23,":title":24},[331,335,341,362,364,439,453,461,475,488,492,497,502,505,509,515,520,525,530,532,631,636,648,649,715,720,728,733,736,740,746,751,753,814,819,834,839,844,849,851,996,1004,1009,1017,1022,1026,1049,1073,1078,1082,1083,1163,1181,1186,1189,1194,1200,1204,1209,1213,1218,1220,1351,1364,1372,1380,1385,1393,1397,1402,1415,1427],{"type":18,"tag":27,"props":332,"children":334},{":t":333},"Google Project Zero",[],{"type":18,"tag":32,"props":336,"children":338},{"id":337},"作者-1",[339],{"type":37,"value":340},"作者 1",{"type":18,"tag":40,"props":342,"children":343},{},[344,346,352,354,360],{"type":37,"value":345},"本书的作者是 ",{"type":18,"tag":68,"props":347,"children":350},{"href":348,"rel":349},"https://github.com/tyranid",[72],[351],{"type":37,"value":322},{"type":37,"value":353},"，也是著名的 ",{"type":18,"tag":68,"props":355,"children":358},{"href":356,"rel":357},"https://googleprojectzero.blogspot.com/",[72],[359],{"type":37,"value":333},{"type":37,"value":361}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":37,"value":363},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":225,"props":365,"children":366},{},[367,382],{"type":18,"tag":229,"props":368,"children":369},{},[370],{"type":18,"tag":233,"props":371,"children":372},{},[373,378],{"type":18,"tag":237,"props":374,"children":375},{},[376],{"type":37,"value":377},"会议",{"type":18,"tag":237,"props":379,"children":380},{},[381],{"type":37,"value":246},{"type":18,"tag":253,"props":383,"children":384},{},[385,403,421],{"type":18,"tag":233,"props":386,"children":387},{},[388,398],{"type":18,"tag":260,"props":389,"children":390},{},[391],{"type":18,"tag":68,"props":392,"children":395},{"href":393,"rel":394},"https://www.blackhat.com/",[72],[396],{"type":37,"value":397},"BlackHat",{"type":18,"tag":260,"props":399,"children":400},{},[401],{"type":37,"value":402},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":18,"tag":233,"props":404,"children":405},{},[406,416],{"type":18,"tag":260,"props":407,"children":408},{},[409],{"type":18,"tag":68,"props":410,"children":413},{"href":411,"rel":412},"https://www.secwest.net/",[72],[414],{"type":37,"value":415},"CanSecWest",{"type":18,"tag":260,"props":417,"children":418},{},[419],{"type":37,"value":420},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":18,"tag":233,"props":422,"children":423},{},[424,434],{"type":18,"tag":260,"props":425,"children":426},{},[427],{"type":18,"tag":68,"props":428,"children":431},{"href":429,"rel":430},"https://events.ccc.de/",[72],[432],{"type":37,"value":433},"Chaos Computer Conference",{"type":18,"tag":260,"props":435,"children":436},{},[437],{"type":37,"value":438},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":18,"tag":40,"props":440,"children":441},{},[442,444,451],{"type":37,"value":443},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":18,"tag":68,"props":445,"children":448},{"href":446,"rel":447},"https://en.wikipedia.org/wiki/Line_management",[72],[449],{"type":37,"value":450},"Leader(line manager)",{"type":37,"value":452}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":18,"tag":46,"props":454,"children":455},{},[456],{"type":18,"tag":40,"props":457,"children":458},{},[459],{"type":37,"value":460},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":18,"tag":40,"props":462,"children":463},{},[464,466,473],{"type":37,"value":465},"在规划职业路径阶段认识了 ",{"type":18,"tag":68,"props":467,"children":470},{"href":468,"rel":469},"https://www.linkedin.com/in/mike-jordon-72193719/",[72],[471],{"type":37,"value":472},"Mike Jordon",{"type":37,"value":474}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":18,"tag":46,"props":476,"children":477},{},[478,483],{"type":18,"tag":40,"props":479,"children":480},{},[481],{"type":37,"value":482},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":18,"tag":40,"props":484,"children":485},{},[486],{"type":37,"value":487},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":18,"tag":489,"props":490,"children":491},"hr",{},[],{"type":18,"tag":40,"props":493,"children":494},{},[495],{"type":37,"value":496},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":18,"tag":40,"props":498,"children":499},{},[500],{"type":37,"value":501},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":18,"tag":489,"props":503,"children":504},{},[],{"type":18,"tag":27,"props":506,"children":508},{":t":507},"协议是一切的基础",[],{"type":18,"tag":32,"props":510,"children":512},{"id":511},"基础-2",[513],{"type":37,"value":514},"基础 2",{"type":18,"tag":40,"props":516,"children":517},{},[518],{"type":37,"value":519},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":18,"tag":40,"props":521,"children":522},{},[523],{"type":37,"value":524},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":18,"tag":40,"props":526,"children":527},{},[528],{"type":37,"value":529},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":37,"value":531},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":225,"props":533,"children":534},{},[535,550],{"type":18,"tag":229,"props":536,"children":537},{},[538],{"type":18,"tag":233,"props":539,"children":540},{},[541,546],{"type":18,"tag":237,"props":542,"children":543},{},[544],{"type":37,"value":545},"功能",{"type":18,"tag":237,"props":547,"children":548},{},[549],{"type":37,"value":246},{"type":18,"tag":253,"props":551,"children":552},{},[553,566,579,592,605,618],{"type":18,"tag":233,"props":554,"children":555},{},[556,561],{"type":18,"tag":260,"props":557,"children":558},{},[559],{"type":37,"value":560},"维护会话状态",{"type":18,"tag":260,"props":562,"children":563},{},[564],{"type":37,"value":565},"创建新的连接或终止连接",{"type":18,"tag":233,"props":567,"children":568},{},[569,574],{"type":18,"tag":260,"props":570,"children":571},{},[572],{"type":37,"value":573},"通过寻址识别节点",{"type":18,"tag":260,"props":575,"children":576},{},[577],{"type":37,"value":578},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":18,"tag":233,"props":580,"children":581},{},[582,587],{"type":18,"tag":260,"props":583,"children":584},{},[585],{"type":37,"value":586},"控制流量",{"type":18,"tag":260,"props":588,"children":589},{},[590],{"type":37,"value":591},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":18,"tag":233,"props":593,"children":594},{},[595,600],{"type":18,"tag":260,"props":596,"children":597},{},[598],{"type":37,"value":599},"保证传输数据的顺序",{"type":18,"tag":260,"props":601,"children":602},{},[603],{"type":37,"value":604},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":18,"tag":233,"props":606,"children":607},{},[608,613],{"type":18,"tag":260,"props":609,"children":610},{},[611],{"type":37,"value":612},"检测和纠正错误",{"type":18,"tag":260,"props":614,"children":615},{},[616],{"type":37,"value":617},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":18,"tag":233,"props":619,"children":620},{},[621,626],{"type":18,"tag":260,"props":622,"children":623},{},[624],{"type":37,"value":625},"格式化和编码数据",{"type":18,"tag":260,"props":627,"children":628},{},[629],{"type":37,"value":630},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":18,"tag":40,"props":632,"children":633},{},[634],{"type":37,"value":635},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":18,"tag":637,"props":638,"children":642},"pre",{"code":639,"language":37,"meta":8,"className":640},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[641],"language-text",[643],{"type":18,"tag":644,"props":645,"children":646},"code",{"__ignoreMap":8},[647],{"type":37,"value":639},{"type":37,"value":363},{"type":18,"tag":225,"props":650,"children":651},{},[652,667],{"type":18,"tag":229,"props":653,"children":654},{},[655],{"type":18,"tag":233,"props":656,"children":657},{},[658,663],{"type":18,"tag":237,"props":659,"children":660},{},[661],{"type":37,"value":662},"协议模型",{"type":18,"tag":237,"props":664,"children":665},{},[666],{"type":37,"value":246},{"type":18,"tag":253,"props":668,"children":669},{},[670,683,696],{"type":18,"tag":233,"props":671,"children":672},{},[673,678],{"type":18,"tag":260,"props":674,"children":675},{},[676],{"type":37,"value":677},"内容层 (文件请求)",{"type":18,"tag":260,"props":679,"children":680},{},[681],{"type":37,"value":682},"我想要一个 image.png 图片",{"type":18,"tag":233,"props":684,"children":685},{},[686,691],{"type":18,"tag":260,"props":687,"children":688},{},[689],{"type":37,"value":690},"编码层 (HTTP)",{"type":18,"tag":260,"props":692,"children":693},{},[694],{"type":37,"value":695},"GET /image.png HTTP/1.1",{"type":18,"tag":233,"props":697,"children":698},{},[699,704],{"type":18,"tag":260,"props":700,"children":701},{},[702],{"type":37,"value":703},"传输层 (TCP/IP)",{"type":18,"tag":260,"props":705,"children":706},{},[707,709,713],{"type":37,"value":708},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":18,"tag":710,"props":711,"children":712},"br",{},[],{"type":37,"value":714}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":18,"tag":40,"props":716,"children":717},{},[718],{"type":37,"value":719},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":18,"tag":46,"props":721,"children":722},{},[723],{"type":18,"tag":40,"props":724,"children":725},{},[726],{"type":37,"value":727},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":18,"tag":40,"props":729,"children":730},{},[731],{"type":37,"value":732},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":18,"tag":489,"props":734,"children":735},{},[],{"type":18,"tag":27,"props":737,"children":739},{":t":738},"流量捕获",[],{"type":18,"tag":32,"props":741,"children":743},{"id":742},"捕获-2",[744],{"type":37,"value":745},"捕获 2",{"type":18,"tag":40,"props":747,"children":748},{},[749],{"type":37,"value":750},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":37,"value":752},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":225,"props":754,"children":755},{},[756,775],{"type":18,"tag":229,"props":757,"children":758},{},[759],{"type":18,"tag":233,"props":760,"children":761},{},[762,766,770],{"type":18,"tag":237,"props":763,"children":764},{},[765],{"type":37,"value":241},{"type":18,"tag":237,"props":767,"children":768},{},[769],{"type":37,"value":246},{"type":18,"tag":237,"props":771,"children":772},{},[773],{"type":37,"value":774},"特点",{"type":18,"tag":253,"props":776,"children":777},{},[778,796],{"type":18,"tag":233,"props":779,"children":780},{},[781,786,791],{"type":18,"tag":260,"props":782,"children":783},{},[784],{"type":37,"value":785},"被动捕获",{"type":18,"tag":260,"props":787,"children":788},{},[789],{"type":37,"value":790},"在线路上传输时提取数据，如 Wireshark",{"type":18,"tag":260,"props":792,"children":793},{},[794],{"type":37,"value":795},"不直接与流量交互",{"type":18,"tag":233,"props":797,"children":798},{},[799,804,809],{"type":18,"tag":260,"props":800,"children":801},{},[802],{"type":37,"value":803},"主动捕获",{"type":18,"tag":260,"props":805,"children":806},{},[807],{"type":37,"value":808},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":18,"tag":260,"props":810,"children":811},{},[812],{"type":37,"value":813},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":18,"tag":40,"props":815,"children":816},{},[817],{"type":37,"value":818},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":18,"tag":820,"props":821,"children":822},"ol",{},[823,829],{"type":18,"tag":824,"props":825,"children":826},"li",{},[827],{"type":37,"value":828},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":18,"tag":824,"props":830,"children":831},{},[832],{"type":37,"value":833},"只查看正在测试的应用程序的流量",{"type":18,"tag":40,"props":835,"children":836},{},[837],{"type":37,"value":838},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":18,"tag":27,"props":840,"children":843},{":t":841,":type":842},"系统调用跟踪","2",[],{"type":18,"tag":40,"props":845,"children":846},{},[847],{"type":37,"value":848},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":37,"value":850},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":225,"props":852,"children":853},{},[854,873],{"type":18,"tag":229,"props":855,"children":856},{},[857],{"type":18,"tag":233,"props":858,"children":859},{},[860,865,869],{"type":18,"tag":237,"props":861,"children":862},{},[863],{"type":37,"value":864},"模式",{"type":18,"tag":237,"props":866,"children":867},{},[868],{"type":37,"value":246},{"type":18,"tag":237,"props":870,"children":871},{},[872],{"type":37,"value":774},{"type":18,"tag":253,"props":874,"children":875},{},[876,894,908,922,936,954,968,982],{"type":18,"tag":233,"props":877,"children":878},{},[879,884,889],{"type":18,"tag":260,"props":880,"children":881},{},[882],{"type":37,"value":883},"用户模式",{"type":18,"tag":260,"props":885,"children":886},{},[887],{"type":37,"value":888},"操作系统普通应用程序和用户空间进程运行的模式",{"type":18,"tag":260,"props":890,"children":891},{},[892],{"type":37,"value":893},"权限限制",{"type":18,"tag":233,"props":895,"children":896},{},[897,900,903],{"type":18,"tag":260,"props":898,"children":899},{},[],{"type":18,"tag":260,"props":901,"children":902},{},[],{"type":18,"tag":260,"props":904,"children":905},{},[906],{"type":37,"value":907},"隔离",{"type":18,"tag":233,"props":909,"children":910},{},[911,914,917],{"type":18,"tag":260,"props":912,"children":913},{},[],{"type":18,"tag":260,"props":915,"children":916},{},[],{"type":18,"tag":260,"props":918,"children":919},{},[920],{"type":37,"value":921},"限制对系统资源的直接访问",{"type":18,"tag":233,"props":923,"children":924},{},[925,928,931],{"type":18,"tag":260,"props":926,"children":927},{},[],{"type":18,"tag":260,"props":929,"children":930},{},[],{"type":18,"tag":260,"props":932,"children":933},{},[934],{"type":37,"value":935},"日常应用程序的运行",{"type":18,"tag":233,"props":937,"children":938},{},[939,944,949],{"type":18,"tag":260,"props":940,"children":941},{},[942],{"type":37,"value":943},"内核模式",{"type":18,"tag":260,"props":945,"children":946},{},[947],{"type":37,"value":948},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":18,"tag":260,"props":950,"children":951},{},[952],{"type":37,"value":953},"完全权限",{"type":18,"tag":233,"props":955,"children":956},{},[957,960,963],{"type":18,"tag":260,"props":958,"children":959},{},[],{"type":18,"tag":260,"props":961,"children":962},{},[],{"type":18,"tag":260,"props":964,"children":965},{},[966],{"type":37,"value":967},"关键操作",{"type":18,"tag":233,"props":969,"children":970},{},[971,974,977],{"type":18,"tag":260,"props":972,"children":973},{},[],{"type":18,"tag":260,"props":975,"children":976},{},[],{"type":18,"tag":260,"props":978,"children":979},{},[980],{"type":37,"value":981},"直接访问和控制系统资源",{"type":18,"tag":233,"props":983,"children":984},{},[985,988,991],{"type":18,"tag":260,"props":986,"children":987},{},[],{"type":18,"tag":260,"props":989,"children":990},{},[],{"type":18,"tag":260,"props":992,"children":993},{},[994],{"type":37,"value":995},"系统级调用",{"type":18,"tag":46,"props":997,"children":998},{},[999],{"type":18,"tag":40,"props":1000,"children":1001},{},[1002],{"type":37,"value":1003},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":18,"tag":40,"props":1005,"children":1006},{},[1007],{"type":37,"value":1008},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":18,"tag":637,"props":1010,"children":1012},{"code":1011},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[1013],{"type":18,"tag":644,"props":1014,"children":1015},{"__ignoreMap":8},[1016],{"type":37,"value":1011},{"type":18,"tag":40,"props":1018,"children":1019},{},[1020],{"type":37,"value":1021},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":18,"tag":27,"props":1023,"children":1025},{":t":1024,":type":842},"网络编程的基础",[],{"type":18,"tag":40,"props":1027,"children":1028},{},[1029,1031,1038,1040,1047],{"type":37,"value":1030},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":18,"tag":68,"props":1032,"children":1035},{"href":1033,"rel":1034},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[72],[1036],{"type":37,"value":1037},"Berkeley Software Distribution（BSD）",{"type":37,"value":1039}," 完成的。因此在网络通信领域中，就离不开 ",{"type":18,"tag":68,"props":1041,"children":1044},{"href":1042,"rel":1043},"https://en.wikipedia.org/wiki/Berkeley_sockets",[72],[1045],{"type":37,"value":1046},"Berkeley Sockets",{"type":37,"value":1048},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":18,"tag":46,"props":1050,"children":1051},{},[1052],{"type":18,"tag":40,"props":1053,"children":1054},{},[1055,1057,1063,1065,1071],{"type":37,"value":1056},"如果你是类 Unix 系统，可以在终端输入 ",{"type":18,"tag":644,"props":1058,"children":1060},{"className":1059},[],[1061],{"type":37,"value":1062},"man 2 syscall_name",{"type":37,"value":1064}," 在终端中查看手册，比如 ",{"type":18,"tag":644,"props":1066,"children":1068},{"className":1067},[],[1069],{"type":37,"value":1070},"man 2 open",{"type":37,"value":1072}," 就可以查看系统调用第二章有关 open 的内容。",{"type":18,"tag":40,"props":1074,"children":1075},{},[1076],{"type":37,"value":1077},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":18,"tag":27,"props":1079,"children":1081},{":t":1080,":type":842},"不同平台之间的捕获",[],{"type":37,"value":223},{"type":18,"tag":225,"props":1084,"children":1085},{},[1086,1106],{"type":18,"tag":229,"props":1087,"children":1088},{},[1089],{"type":18,"tag":233,"props":1090,"children":1091},{},[1092,1097,1102],{"type":18,"tag":237,"props":1093,"children":1094},{},[1095],{"type":37,"value":1096},"平台",{"type":18,"tag":237,"props":1098,"children":1099},{},[1100],{"type":37,"value":1101},"应用",{"type":18,"tag":237,"props":1103,"children":1104},{},[1105],{"type":37,"value":246},{"type":18,"tag":253,"props":1107,"children":1108},{},[1109,1127,1145],{"type":18,"tag":233,"props":1110,"children":1111},{},[1112,1117,1122],{"type":18,"tag":260,"props":1113,"children":1114},{},[1115],{"type":37,"value":1116},"Linux",{"type":18,"tag":260,"props":1118,"children":1119},{},[1120],{"type":37,"value":1121},"Strace",{"type":18,"tag":260,"props":1123,"children":1124},{},[1125],{"type":37,"value":1126},"跟踪系统调用和信号",{"type":18,"tag":233,"props":1128,"children":1129},{},[1130,1135,1140],{"type":18,"tag":260,"props":1131,"children":1132},{},[1133],{"type":37,"value":1134},"macOS",{"type":18,"tag":260,"props":1136,"children":1137},{},[1138],{"type":37,"value":1139},"DTrace",{"type":18,"tag":260,"props":1141,"children":1142},{},[1143],{"type":37,"value":1144},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":18,"tag":233,"props":1146,"children":1147},{},[1148,1153,1158],{"type":18,"tag":260,"props":1149,"children":1150},{},[1151],{"type":37,"value":1152},"Windows",{"type":18,"tag":260,"props":1154,"children":1155},{},[1156],{"type":37,"value":1157},"Process Monitor",{"type":18,"tag":260,"props":1159,"children":1160},{},[1161],{"type":37,"value":1162},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":18,"tag":46,"props":1164,"children":1165},{},[1166,1171,1176],{"type":18,"tag":40,"props":1167,"children":1168},{},[1169],{"type":37,"value":1170},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":18,"tag":40,"props":1172,"children":1173},{},[1174],{"type":37,"value":1175},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":18,"tag":40,"props":1177,"children":1178},{},[1179],{"type":37,"value":1180},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":18,"tag":40,"props":1182,"children":1183},{},[1184],{"type":37,"value":1185},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":18,"tag":27,"props":1187,"children":1188},{":t":803,":type":842},[],{"type":18,"tag":40,"props":1190,"children":1191},{},[1192],{"type":37,"value":1193},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":18,"tag":32,"props":1195,"children":1197},{"id":1196},"太阳底下没有新鲜事-3",[1198],{"type":37,"value":1199},"太阳底下没有新鲜事 3",{"type":18,"tag":27,"props":1201,"children":1203},{":t":1202},"太阳底下没有新鲜事",[],{"type":18,"tag":40,"props":1205,"children":1206},{},[1207],{"type":37,"value":1208},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":18,"tag":27,"props":1210,"children":1212},{":t":1211,":type":842},"一些进制的基础",[],{"type":18,"tag":40,"props":1214,"children":1215},{},[1216],{"type":37,"value":1217},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":37,"value":1219},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":18,"tag":225,"props":1221,"children":1222},{},[1223,1242],{"type":18,"tag":229,"props":1224,"children":1225},{},[1226],{"type":18,"tag":233,"props":1227,"children":1228},{},[1229,1234,1238],{"type":18,"tag":237,"props":1230,"children":1231},{},[1232],{"type":37,"value":1233},"类型",{"type":18,"tag":237,"props":1235,"children":1236},{},[1237],{"type":37,"value":246},{"type":18,"tag":237,"props":1239,"children":1240},{},[1241],{"type":37,"value":774},{"type":18,"tag":253,"props":1243,"children":1244},{},[1245,1263,1277,1291,1305,1323,1337],{"type":18,"tag":233,"props":1246,"children":1247},{},[1248,1253,1258],{"type":18,"tag":260,"props":1249,"children":1250},{},[1251],{"type":37,"value":1252},"二进制协议",{"type":18,"tag":260,"props":1254,"children":1255},{},[1256],{"type":37,"value":1257},"以二进制格式传输数据",{"type":18,"tag":260,"props":1259,"children":1260},{},[1261],{"type":37,"value":1262},"高效性",{"type":18,"tag":233,"props":1264,"children":1265},{},[1266,1269,1272],{"type":18,"tag":260,"props":1267,"children":1268},{},[],{"type":18,"tag":260,"props":1270,"children":1271},{},[],{"type":18,"tag":260,"props":1273,"children":1274},{},[1275],{"type":37,"value":1276},"紧凑性",{"type":18,"tag":233,"props":1278,"children":1279},{},[1280,1283,1286],{"type":18,"tag":260,"props":1281,"children":1282},{},[],{"type":18,"tag":260,"props":1284,"children":1285},{},[],{"type":18,"tag":260,"props":1287,"children":1288},{},[1289],{"type":37,"value":1290},"复杂性",{"type":18,"tag":233,"props":1292,"children":1293},{},[1294,1297,1300],{"type":18,"tag":260,"props":1295,"children":1296},{},[],{"type":18,"tag":260,"props":1298,"children":1299},{},[],{"type":18,"tag":260,"props":1301,"children":1302},{},[1303],{"type":37,"value":1304},"依赖性",{"type":18,"tag":233,"props":1306,"children":1307},{},[1308,1313,1318],{"type":18,"tag":260,"props":1309,"children":1310},{},[1311],{"type":37,"value":1312},"文本协议",{"type":18,"tag":260,"props":1314,"children":1315},{},[1316],{"type":37,"value":1317},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":18,"tag":260,"props":1319,"children":1320},{},[1321],{"type":37,"value":1322},"可读性",{"type":18,"tag":233,"props":1324,"children":1325},{},[1326,1329,1332],{"type":18,"tag":260,"props":1327,"children":1328},{},[],{"type":18,"tag":260,"props":1330,"children":1331},{},[],{"type":18,"tag":260,"props":1333,"children":1334},{},[1335],{"type":37,"value":1336},"效率低",{"type":18,"tag":233,"props":1338,"children":1339},{},[1340,1343,1346],{"type":18,"tag":260,"props":1341,"children":1342},{},[],{"type":18,"tag":260,"props":1344,"children":1345},{},[],{"type":18,"tag":260,"props":1347,"children":1348},{},[1349],{"type":37,"value":1350},"灵活性（容错性和可扩展性）",{"type":18,"tag":40,"props":1352,"children":1353},{},[1354,1356,1362],{"type":37,"value":1355},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":18,"tag":644,"props":1357,"children":1359},{"className":1358},[],[1360],{"type":37,"value":1361},"octet",{"type":37,"value":1363}," 来确保每个单位确实是 8 位。",{"type":18,"tag":46,"props":1365,"children":1366},{},[1367],{"type":18,"tag":40,"props":1368,"children":1369},{},[1370],{"type":37,"value":1371},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":18,"tag":637,"props":1373,"children":1375},{"code":1374},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[1376],{"type":18,"tag":644,"props":1377,"children":1378},{"__ignoreMap":8},[1379],{"type":37,"value":1374},{"type":18,"tag":40,"props":1381,"children":1382},{},[1383],{"type":37,"value":1384},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":18,"tag":46,"props":1386,"children":1387},{},[1388],{"type":18,"tag":40,"props":1389,"children":1390},{},[1391],{"type":37,"value":1392},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":18,"tag":27,"props":1394,"children":1396},{":t":1395,":type":842},"数值数据",[],{"type":18,"tag":40,"props":1398,"children":1399},{},[1400],{"type":37,"value":1401},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":18,"tag":40,"props":1403,"children":1404},{},[1405,1407,1413],{"type":37,"value":1406},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":18,"tag":1408,"props":1409,"children":1410},"strong",{},[1411],{"type":37,"value":1412},"协议结构",{"type":37,"value":1414}," 与逆向。",{"type":18,"tag":40,"props":1416,"children":1417},{},[1418,1420,1425],{"type":37,"value":1419},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":18,"tag":1408,"props":1421,"children":1422},{},[1423],{"type":37,"value":1424},"握手过程",{"type":37,"value":1426}," 来识别出加密套件。",{"type":18,"tag":40,"props":1428,"children":1429},{},[1430,1432],{"type":37,"value":1431},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":18,"tag":1433,"props":1434,"children":1435},"the",{"ida":8,"pro":8,"book":8},[1436],{"type":37,"value":1437}," 找到我想要的。",{"title":8,"searchDepth":84,"depth":84,"links":1439},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":1443,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1444,"description":8,"director":1445,"time":323,"img":1446,"body":1447,"_type":86,"_id":1602,"_source":88,"_file":1603,"_extension":90},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":15,"children":1448,"toc":1600},[1449],{"type":18,"tag":19,"props":1450,"children":1452},{":by":21,":img":22,":plan":1451,":title":24},"100",[1453,1459,1463,1468,1473,1478,1483,1506,1520,1528,1533,1539,1577,1580,1586,1590,1595],{"type":18,"tag":32,"props":1454,"children":1456},{"id":1455},"理念-1",[1457],{"type":37,"value":1458},"理念 1",{"type":18,"tag":27,"props":1460,"children":1462},{":t":1461},"为什么看这本回忆录？",[],{"type":18,"tag":40,"props":1464,"children":1465},{},[1466],{"type":37,"value":1467},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":18,"tag":40,"props":1469,"children":1470},{},[1471],{"type":37,"value":1472},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":18,"tag":40,"props":1474,"children":1475},{},[1476],{"type":37,"value":1477},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":18,"tag":40,"props":1479,"children":1480},{},[1481],{"type":37,"value":1482},"以打开网站的第一版为例；",{"type":18,"tag":820,"props":1484,"children":1485},{},[1486,1491,1496,1501],{"type":18,"tag":824,"props":1487,"children":1488},{},[1489],{"type":37,"value":1490},"有的政府官网，显示的是当权者的讲话和文件；",{"type":18,"tag":824,"props":1492,"children":1493},{},[1494],{"type":37,"value":1495},"有的政府官网，是一些便民的工具；",{"type":18,"tag":824,"props":1497,"children":1498},{},[1499],{"type":37,"value":1500},"有的政府官网，是国家的景色，旅游信息；",{"type":18,"tag":824,"props":1502,"children":1503},{},[1504],{"type":37,"value":1505},"有的政府官网，是一些数据，一些便民信息；",{"type":18,"tag":40,"props":1507,"children":1508},{},[1509,1511,1518],{"type":37,"value":1510},"打开 ",{"type":18,"tag":68,"props":1512,"children":1515},{"href":1513,"rel":1514},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[72],[1516],{"type":37,"value":1517},"https://www.president.go.kr/",{"type":37,"value":1519}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":18,"tag":46,"props":1521,"children":1522},{},[1523],{"type":18,"tag":40,"props":1524,"children":1525},{},[1526],{"type":37,"value":1527},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":18,"tag":40,"props":1529,"children":1530},{},[1531],{"type":37,"value":1532},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":18,"tag":1534,"props":1535,"children":1538},"img-tip",{"text":1536,"url":1537},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":18,"tag":46,"props":1540,"children":1541},{},[1542,1547,1552,1557,1562,1567,1572],{"type":18,"tag":40,"props":1543,"children":1544},{},[1545],{"type":37,"value":1546},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":18,"tag":40,"props":1548,"children":1549},{},[1550],{"type":37,"value":1551},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":18,"tag":40,"props":1553,"children":1554},{},[1555],{"type":37,"value":1556},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":18,"tag":40,"props":1558,"children":1559},{},[1560],{"type":37,"value":1561},"希望公民，与此同时和我一起走出这段历史。",{"type":18,"tag":40,"props":1563,"children":1564},{},[1565],{"type":37,"value":1566},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":18,"tag":40,"props":1568,"children":1569},{},[1570],{"type":37,"value":1571},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":18,"tag":40,"props":1573,"children":1574},{},[1575],{"type":37,"value":1576},"——文在寅",{"type":18,"tag":489,"props":1578,"children":1579},{},[],{"type":18,"tag":32,"props":1581,"children":1583},{"id":1582},"检察官-2",[1584],{"type":37,"value":1585},"检察官 2",{"type":18,"tag":27,"props":1587,"children":1589},{":t":1588},"青瓦台魔咒",[],{"type":18,"tag":40,"props":1591,"children":1592},{},[1593],{"type":37,"value":1594},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":18,"tag":40,"props":1596,"children":1597},{},[1598],{"type":37,"value":1599},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":84,"depth":84,"links":1601},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1735372859985]