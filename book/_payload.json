[{"data":1,"prerenderedAt":1620},["Reactive",2],{"equalBook":3},[4,29,107,335,1458],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"director":10,"time":11,"img":12,"body":13,"_type":24,"_id":25,"_source":26,"_file":27,"_extension":28},"/book/journey-to-the-west","book",false,"","西游记","吴承恩","2025","07/1.png",{"type":14,"children":15,"toc":21},"root",[16],{"type":17,"tag":18,"props":19,"children":20},"element","text-an-next",{},[],{"title":8,"searchDepth":22,"depth":22,"links":23},2,[],"markdown","content:book:journey-to-the-west.md","content","book/journey-to-the-west.md","md",{"_path":30,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":31,"description":8,"director":32,"time":33,"img":34,"plan":35,"body":36,"_type":24,"_id":105,"_source":26,"_file":106,"_extension":28},"/book/criminal_minds","Criminal Minds","R/N","2024.10.11","06/1.png","01",{"type":14,"children":37,"toc":103},[38],{"type":17,"tag":39,"props":40,"children":45},"book-content",{":by":41,":img":42,":plan":43,":title":44},"director","img","plan","title",[46,51,59,65,74,79,98],{"type":17,"tag":47,"props":48,"children":50},"text-title",{":t":49},"第一季",[],{"type":17,"tag":52,"props":53,"children":55},"h1",{"id":54},"行为分析小组-0",[56],{"type":57,"value":58},"text","行为分析小组 0",{"type":17,"tag":60,"props":61,"children":62},"p",{},[63],{"type":57,"value":64},"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。",{"type":17,"tag":66,"props":67,"children":68},"text-tip",{},[69],{"type":17,"tag":60,"props":70,"children":71},{},[72],{"type":57,"value":73},"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。",{"type":17,"tag":60,"props":75,"children":76},{},[77],{"type":57,"value":78},"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。",{"type":17,"tag":66,"props":80,"children":81},{},[82],{"type":17,"tag":60,"props":83,"children":84},{},[85,87,96],{"type":57,"value":86},"比如 ",{"type":17,"tag":88,"props":89,"children":93},"a",{"href":90,"rel":91},"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9",[92],"nofollow",[94],{"type":57,"value":95},"洪博培",{"type":57,"value":97}," 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。",{"type":17,"tag":60,"props":99,"children":100},{},[101],{"type":57,"value":102},"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。",{"title":8,"searchDepth":22,"depth":22,"links":104},[],"content:book:Criminal_Minds.md","book/Criminal_Minds.md",{"_path":108,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":109,"description":8,"director":32,"time":110,"img":111,"plan":112,"body":113,"_type":24,"_id":333,"_source":26,"_file":334,"_extension":28},"/book/24-hour","24 hour","2024.7.22","05/1.png","30",{"type":14,"children":114,"toc":331},[115],{"type":17,"tag":39,"props":116,"children":117},{":by":41,":img":42,":plan":43,":title":44},[118,122,128,133,138,143,148,153,158,163,168,173,178,182,188,238,240,326],{"type":17,"tag":47,"props":119,"children":121},{":t":120},"1~3 季",[],{"type":17,"tag":52,"props":123,"children":125},{"id":124},"_13-季不要内耗-1",[126],{"type":57,"value":127},"1~3 季：不要内耗 1",{"type":17,"tag":60,"props":129,"children":130},{},[131],{"type":57,"value":132},"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。",{"type":17,"tag":60,"props":134,"children":135},{},[136],{"type":57,"value":137},"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。",{"type":17,"tag":60,"props":139,"children":140},{},[141],{"type":57,"value":142},"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。",{"type":17,"tag":60,"props":144,"children":145},{},[146],{"type":57,"value":147},"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。",{"type":17,"tag":60,"props":149,"children":150},{},[151],{"type":57,"value":152},"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。",{"type":17,"tag":60,"props":154,"children":155},{},[156],{"type":57,"value":157},"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。",{"type":17,"tag":60,"props":159,"children":160},{},[161],{"type":57,"value":162},"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。",{"type":17,"tag":60,"props":164,"children":165},{},[166],{"type":57,"value":167},"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。",{"type":17,"tag":60,"props":169,"children":170},{},[171],{"type":57,"value":172},"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。",{"type":17,"tag":60,"props":174,"children":175},{},[176],{"type":57,"value":177},"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。",{"type":17,"tag":47,"props":179,"children":181},{":t":180},"Subchannel chip",[],{"type":17,"tag":52,"props":183,"children":185},{"id":184},"子通道芯片-subchannel-chip-2",[186],{"type":57,"value":187},"子通道芯片: Subchannel chip 2",{"type":17,"tag":60,"props":189,"children":190},{},[191,193,200,202,209,211,218,220,227,229,236],{"type":57,"value":192},"这个芯片貌似是虚构的，是影视道具的一部分，",{"type":17,"tag":88,"props":194,"children":197},{"href":195,"rel":196},"https://24.fandom.com/wiki/Subchannel_chip",[92],[198],{"type":57,"value":199},"24 Wiki",{"type":57,"value":201}," 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 ",{"type":17,"tag":88,"props":203,"children":206},{"href":204,"rel":205},"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage",[92],[207],{"type":57,"value":208},"频率跳变(Frequency Hopping Spread Spectrum, FHSS)",{"type":57,"value":210},"、",{"type":17,"tag":88,"props":212,"children":215},{"href":213,"rel":214},"https://en.wikipedia.org/wiki/Ultra-wideband#",[92],[216],{"type":57,"value":217},"超宽频(UWB, Ultra-wideband)",{"type":57,"value":219},"，",{"type":17,"tag":88,"props":221,"children":224},{"href":222,"rel":223},"https://en.wikipedia.org/wiki/Low-power_wide-area_network",[92],[225],{"type":57,"value":226},"低功耗广域网(Low-power wide-area network, LPWAN)",{"type":57,"value":228}," 所常用的 ",{"type":17,"tag":88,"props":230,"children":233},{"href":231,"rel":232},"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments",[92],[234],{"type":57,"value":235},"窄带物联网(Narrowband IoT\n, NB-IoT)",{"type":57,"value":237}," 协议。",{"type":57,"value":239},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":241,"props":242,"children":243},"table",{},[244,268],{"type":17,"tag":245,"props":246,"children":247},"thead",{},[248],{"type":17,"tag":249,"props":250,"children":251},"tr",{},[252,258,263],{"type":17,"tag":253,"props":254,"children":255},"th",{},[256],{"type":57,"value":257},"名称",{"type":17,"tag":253,"props":259,"children":260},{},[261],{"type":57,"value":262},"描述",{"type":17,"tag":253,"props":264,"children":265},{},[266],{"type":57,"value":267},"领域",{"type":17,"tag":269,"props":270,"children":271},"tbody",{},[272,291,308],{"type":17,"tag":249,"props":273,"children":274},{},[275,281,286],{"type":17,"tag":276,"props":277,"children":278},"td",{},[279],{"type":57,"value":280},"FHSS",{"type":17,"tag":276,"props":282,"children":283},{},[284],{"type":57,"value":285},"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号",{"type":17,"tag":276,"props":287,"children":288},{},[289],{"type":57,"value":290},"无线电",{"type":17,"tag":249,"props":292,"children":293},{},[294,299,304],{"type":17,"tag":276,"props":295,"children":296},{},[297],{"type":57,"value":298},"UWB",{"type":17,"tag":276,"props":300,"children":301},{},[302],{"type":57,"value":303},"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。",{"type":17,"tag":276,"props":305,"children":306},{},[307],{"type":57,"value":290},{"type":17,"tag":249,"props":309,"children":310},{},[311,316,321],{"type":17,"tag":276,"props":312,"children":313},{},[314],{"type":57,"value":315},"NB-IoT",{"type":17,"tag":276,"props":317,"children":318},{},[319],{"type":57,"value":320},"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理",{"type":17,"tag":276,"props":322,"children":323},{},[324],{"type":57,"value":325},"无线电与物联网",{"type":17,"tag":60,"props":327,"children":328},{},[329],{"type":57,"value":330},"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。",{"title":8,"searchDepth":22,"depth":22,"links":332},[],"content:book:24-hour.md","book/24-hour.md",{"_path":336,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":337,"description":8,"director":338,"time":339,"img":340,"plan":341,"body":342,"_type":24,"_id":1456,"_source":26,"_file":1457,"_extension":28},"/book/attacking-network-protocols","Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","James Forshaw","2024","01/1.png","1",{"type":14,"children":343,"toc":1454},[344],{"type":17,"tag":39,"props":345,"children":346},{":by":41,":img":42,":plan":43,":title":44},[347,351,357,378,380,455,469,477,491,504,508,513,518,521,525,531,536,541,546,548,647,652,664,665,731,736,744,749,752,756,762,767,769,830,835,850,855,860,865,867,1012,1020,1025,1033,1038,1042,1065,1089,1094,1098,1099,1179,1197,1202,1205,1210,1216,1220,1225,1229,1234,1236,1367,1380,1388,1396,1401,1409,1413,1418,1431,1443],{"type":17,"tag":47,"props":348,"children":350},{":t":349},"Google Project Zero",[],{"type":17,"tag":52,"props":352,"children":354},{"id":353},"作者-1",[355],{"type":57,"value":356},"作者 1",{"type":17,"tag":60,"props":358,"children":359},{},[360,362,368,370,376],{"type":57,"value":361},"本书的作者是 ",{"type":17,"tag":88,"props":363,"children":366},{"href":364,"rel":365},"https://github.com/tyranid",[92],[367],{"type":57,"value":338},{"type":57,"value":369},"，也是著名的 ",{"type":17,"tag":88,"props":371,"children":374},{"href":372,"rel":373},"https://googleprojectzero.blogspot.com/",[92],[375],{"type":57,"value":349},{"type":57,"value":377}," 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。",{"type":57,"value":379},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":241,"props":381,"children":382},{},[383,398],{"type":17,"tag":245,"props":384,"children":385},{},[386],{"type":17,"tag":249,"props":387,"children":388},{},[389,394],{"type":17,"tag":253,"props":390,"children":391},{},[392],{"type":57,"value":393},"会议",{"type":17,"tag":253,"props":395,"children":396},{},[397],{"type":57,"value":262},{"type":17,"tag":269,"props":399,"children":400},{},[401,419,437],{"type":17,"tag":249,"props":402,"children":403},{},[404,414],{"type":17,"tag":276,"props":405,"children":406},{},[407],{"type":17,"tag":88,"props":408,"children":411},{"href":409,"rel":410},"https://www.blackhat.com/",[92],[412],{"type":57,"value":413},"BlackHat",{"type":17,"tag":276,"props":415,"children":416},{},[417],{"type":57,"value":418},"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究",{"type":17,"tag":249,"props":420,"children":421},{},[422,432],{"type":17,"tag":276,"props":423,"children":424},{},[425],{"type":17,"tag":88,"props":426,"children":429},{"href":427,"rel":428},"https://www.secwest.net/",[92],[430],{"type":57,"value":431},"CanSecWest",{"type":17,"tag":276,"props":433,"children":434},{},[435],{"type":57,"value":436},"加拿大著名的国际信息安全会议，负责举办 Pwn2Own",{"type":17,"tag":249,"props":438,"children":439},{},[440,450],{"type":17,"tag":276,"props":441,"children":442},{},[443],{"type":17,"tag":88,"props":444,"children":447},{"href":445,"rel":446},"https://events.ccc.de/",[92],[448],{"type":57,"value":449},"Chaos Computer Conference",{"type":17,"tag":276,"props":451,"children":452},{},[453],{"type":57,"value":454},"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名",{"type":17,"tag":60,"props":456,"children":457},{},[458,460,467],{"type":57,"value":459},"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 ",{"type":17,"tag":88,"props":461,"children":464},{"href":462,"rel":463},"https://en.wikipedia.org/wiki/Line_management",[92],[465],{"type":57,"value":466},"Leader(line manager)",{"type":57,"value":468}," 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。",{"type":17,"tag":66,"props":470,"children":471},{},[472],{"type":17,"tag":60,"props":473,"children":474},{},[475],{"type":57,"value":476},"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。",{"type":17,"tag":60,"props":478,"children":479},{},[480,482,489],{"type":57,"value":481},"在规划职业路径阶段认识了 ",{"type":17,"tag":88,"props":483,"children":486},{"href":484,"rel":485},"https://www.linkedin.com/in/mike-jordon-72193719/",[92],[487],{"type":57,"value":488},"Mike Jordon",{"type":57,"value":490}," 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。",{"type":17,"tag":66,"props":492,"children":493},{},[494,499],{"type":17,"tag":60,"props":495,"children":496},{},[497],{"type":57,"value":498},"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。",{"type":17,"tag":60,"props":500,"children":501},{},[502],{"type":57,"value":503},"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。",{"type":17,"tag":505,"props":506,"children":507},"hr",{},[],{"type":17,"tag":60,"props":509,"children":510},{},[511],{"type":57,"value":512},"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。",{"type":17,"tag":60,"props":514,"children":515},{},[516],{"type":57,"value":517},"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。",{"type":17,"tag":505,"props":519,"children":520},{},[],{"type":17,"tag":47,"props":522,"children":524},{":t":523},"协议是一切的基础",[],{"type":17,"tag":52,"props":526,"children":528},{"id":527},"基础-2",[529],{"type":57,"value":530},"基础 2",{"type":17,"tag":60,"props":532,"children":533},{},[534],{"type":57,"value":535},"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。",{"type":17,"tag":60,"props":537,"children":538},{},[539],{"type":57,"value":540},"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。",{"type":17,"tag":60,"props":542,"children":543},{},[544],{"type":57,"value":545},"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项：",{"type":57,"value":547},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":241,"props":549,"children":550},{},[551,566],{"type":17,"tag":245,"props":552,"children":553},{},[554],{"type":17,"tag":249,"props":555,"children":556},{},[557,562],{"type":17,"tag":253,"props":558,"children":559},{},[560],{"type":57,"value":561},"功能",{"type":17,"tag":253,"props":563,"children":564},{},[565],{"type":57,"value":262},{"type":17,"tag":269,"props":567,"children":568},{},[569,582,595,608,621,634],{"type":17,"tag":249,"props":570,"children":571},{},[572,577],{"type":17,"tag":276,"props":573,"children":574},{},[575],{"type":57,"value":576},"维护会话状态",{"type":17,"tag":276,"props":578,"children":579},{},[580],{"type":57,"value":581},"创建新的连接或终止连接",{"type":17,"tag":249,"props":583,"children":584},{},[585,590],{"type":17,"tag":276,"props":586,"children":587},{},[588],{"type":57,"value":589},"通过寻址识别节点",{"type":17,"tag":276,"props":591,"children":592},{},[593],{"type":57,"value":594},"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组",{"type":17,"tag":249,"props":596,"children":597},{},[598,603],{"type":17,"tag":276,"props":599,"children":600},{},[601],{"type":57,"value":602},"控制流量",{"type":17,"tag":276,"props":604,"children":605},{},[606],{"type":57,"value":607},"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟",{"type":17,"tag":249,"props":609,"children":610},{},[611,616],{"type":17,"tag":276,"props":612,"children":613},{},[614],{"type":57,"value":615},"保证传输数据的顺序",{"type":17,"tag":276,"props":617,"children":618},{},[619],{"type":57,"value":620},"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序",{"type":17,"tag":249,"props":622,"children":623},{},[624,629],{"type":17,"tag":276,"props":625,"children":626},{},[627],{"type":57,"value":628},"检测和纠正错误",{"type":17,"tag":276,"props":630,"children":631},{},[632],{"type":57,"value":633},"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要",{"type":17,"tag":249,"props":635,"children":636},{},[637,642],{"type":17,"tag":276,"props":638,"children":639},{},[640],{"type":57,"value":641},"格式化和编码数据",{"type":17,"tag":276,"props":643,"children":644},{},[645],{"type":57,"value":646},"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密",{"type":17,"tag":60,"props":648,"children":649},{},[650],{"type":57,"value":651},"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型：",{"type":17,"tag":653,"props":654,"children":658},"pre",{"code":655,"language":57,"meta":8,"className":656},"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n",[657],"language-text",[659],{"type":17,"tag":660,"props":661,"children":662},"code",{"__ignoreMap":8},[663],{"type":57,"value":655},{"type":57,"value":379},{"type":17,"tag":241,"props":666,"children":667},{},[668,683],{"type":17,"tag":245,"props":669,"children":670},{},[671],{"type":17,"tag":249,"props":672,"children":673},{},[674,679],{"type":17,"tag":253,"props":675,"children":676},{},[677],{"type":57,"value":678},"协议模型",{"type":17,"tag":253,"props":680,"children":681},{},[682],{"type":57,"value":262},{"type":17,"tag":269,"props":684,"children":685},{},[686,699,712],{"type":17,"tag":249,"props":687,"children":688},{},[689,694],{"type":17,"tag":276,"props":690,"children":691},{},[692],{"type":57,"value":693},"内容层 (文件请求)",{"type":17,"tag":276,"props":695,"children":696},{},[697],{"type":57,"value":698},"我想要一个 image.png 图片",{"type":17,"tag":249,"props":700,"children":701},{},[702,707],{"type":17,"tag":276,"props":703,"children":704},{},[705],{"type":57,"value":706},"编码层 (HTTP)",{"type":17,"tag":276,"props":708,"children":709},{},[710],{"type":57,"value":711},"GET /image.png HTTP/1.1",{"type":17,"tag":249,"props":713,"children":714},{},[715,720],{"type":17,"tag":276,"props":716,"children":717},{},[718],{"type":57,"value":719},"传输层 (TCP/IP)",{"type":17,"tag":276,"props":721,"children":722},{},[723,725,729],{"type":57,"value":724},"4500 0043 50d1 4000 8000 c0a8 0a6d ",{"type":17,"tag":726,"props":727,"children":728},"br",{},[],{"type":57,"value":730}," d83a d544 40e0 0050 5dff a4e6 6ac2 ……",{"type":17,"tag":60,"props":732,"children":733},{},[734],{"type":57,"value":735},"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。",{"type":17,"tag":66,"props":737,"children":738},{},[739],{"type":17,"tag":60,"props":740,"children":741},{},[742],{"type":57,"value":743},"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\"",{"type":17,"tag":60,"props":745,"children":746},{},[747],{"type":57,"value":748},"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。",{"type":17,"tag":505,"props":750,"children":751},{},[],{"type":17,"tag":47,"props":753,"children":755},{":t":754},"流量捕获",[],{"type":17,"tag":52,"props":757,"children":759},{"id":758},"捕获-2",[760],{"type":57,"value":761},"捕获 2",{"type":17,"tag":60,"props":763,"children":764},{},[765],{"type":57,"value":766},"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。",{"type":57,"value":768},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":241,"props":770,"children":771},{},[772,791],{"type":17,"tag":245,"props":773,"children":774},{},[775],{"type":17,"tag":249,"props":776,"children":777},{},[778,782,786],{"type":17,"tag":253,"props":779,"children":780},{},[781],{"type":57,"value":257},{"type":17,"tag":253,"props":783,"children":784},{},[785],{"type":57,"value":262},{"type":17,"tag":253,"props":787,"children":788},{},[789],{"type":57,"value":790},"特点",{"type":17,"tag":269,"props":792,"children":793},{},[794,812],{"type":17,"tag":249,"props":795,"children":796},{},[797,802,807],{"type":17,"tag":276,"props":798,"children":799},{},[800],{"type":57,"value":801},"被动捕获",{"type":17,"tag":276,"props":803,"children":804},{},[805],{"type":57,"value":806},"在线路上传输时提取数据，如 Wireshark",{"type":17,"tag":276,"props":808,"children":809},{},[810],{"type":57,"value":811},"不直接与流量交互",{"type":17,"tag":249,"props":813,"children":814},{},[815,820,825],{"type":17,"tag":276,"props":816,"children":817},{},[818],{"type":57,"value":819},"主动捕获",{"type":17,"tag":276,"props":821,"children":822},{},[823],{"type":57,"value":824},"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。",{"type":17,"tag":276,"props":826,"children":827},{},[828],{"type":57,"value":829},"直接与服务器之间的流量产生干扰甚至是拦截、篡改",{"type":17,"tag":60,"props":831,"children":832},{},[833],{"type":57,"value":834},"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的：",{"type":17,"tag":836,"props":837,"children":838},"ol",{},[839,845],{"type":17,"tag":840,"props":841,"children":842},"li",{},[843],{"type":57,"value":844},"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计",{"type":17,"tag":840,"props":846,"children":847},{},[848],{"type":57,"value":849},"只查看正在测试的应用程序的流量",{"type":17,"tag":60,"props":851,"children":852},{},[853],{"type":57,"value":854},"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。",{"type":17,"tag":47,"props":856,"children":859},{":t":857,":type":858},"系统调用跟踪","2",[],{"type":17,"tag":60,"props":861,"children":862},{},[863],{"type":57,"value":864},"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。",{"type":57,"value":866},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":241,"props":868,"children":869},{},[870,889],{"type":17,"tag":245,"props":871,"children":872},{},[873],{"type":17,"tag":249,"props":874,"children":875},{},[876,881,885],{"type":17,"tag":253,"props":877,"children":878},{},[879],{"type":57,"value":880},"模式",{"type":17,"tag":253,"props":882,"children":883},{},[884],{"type":57,"value":262},{"type":17,"tag":253,"props":886,"children":887},{},[888],{"type":57,"value":790},{"type":17,"tag":269,"props":890,"children":891},{},[892,910,924,938,952,970,984,998],{"type":17,"tag":249,"props":893,"children":894},{},[895,900,905],{"type":17,"tag":276,"props":896,"children":897},{},[898],{"type":57,"value":899},"用户模式",{"type":17,"tag":276,"props":901,"children":902},{},[903],{"type":57,"value":904},"操作系统普通应用程序和用户空间进程运行的模式",{"type":17,"tag":276,"props":906,"children":907},{},[908],{"type":57,"value":909},"权限限制",{"type":17,"tag":249,"props":911,"children":912},{},[913,916,919],{"type":17,"tag":276,"props":914,"children":915},{},[],{"type":17,"tag":276,"props":917,"children":918},{},[],{"type":17,"tag":276,"props":920,"children":921},{},[922],{"type":57,"value":923},"隔离",{"type":17,"tag":249,"props":925,"children":926},{},[927,930,933],{"type":17,"tag":276,"props":928,"children":929},{},[],{"type":17,"tag":276,"props":931,"children":932},{},[],{"type":17,"tag":276,"props":934,"children":935},{},[936],{"type":57,"value":937},"限制对系统资源的直接访问",{"type":17,"tag":249,"props":939,"children":940},{},[941,944,947],{"type":17,"tag":276,"props":942,"children":943},{},[],{"type":17,"tag":276,"props":945,"children":946},{},[],{"type":17,"tag":276,"props":948,"children":949},{},[950],{"type":57,"value":951},"日常应用程序的运行",{"type":17,"tag":249,"props":953,"children":954},{},[955,960,965],{"type":17,"tag":276,"props":956,"children":957},{},[958],{"type":57,"value":959},"内核模式",{"type":17,"tag":276,"props":961,"children":962},{},[963],{"type":57,"value":964},"操作系统核心代码，具有对系统资源的完全访问权限",{"type":17,"tag":276,"props":966,"children":967},{},[968],{"type":57,"value":969},"完全权限",{"type":17,"tag":249,"props":971,"children":972},{},[973,976,979],{"type":17,"tag":276,"props":974,"children":975},{},[],{"type":17,"tag":276,"props":977,"children":978},{},[],{"type":17,"tag":276,"props":980,"children":981},{},[982],{"type":57,"value":983},"关键操作",{"type":17,"tag":249,"props":985,"children":986},{},[987,990,993],{"type":17,"tag":276,"props":988,"children":989},{},[],{"type":17,"tag":276,"props":991,"children":992},{},[],{"type":17,"tag":276,"props":994,"children":995},{},[996],{"type":57,"value":997},"直接访问和控制系统资源",{"type":17,"tag":249,"props":999,"children":1000},{},[1001,1004,1007],{"type":17,"tag":276,"props":1002,"children":1003},{},[],{"type":17,"tag":276,"props":1005,"children":1006},{},[],{"type":17,"tag":276,"props":1008,"children":1009},{},[1010],{"type":57,"value":1011},"系统级调用",{"type":17,"tag":66,"props":1013,"children":1014},{},[1015],{"type":17,"tag":60,"props":1016,"children":1017},{},[1018],{"type":57,"value":1019},"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。",{"type":17,"tag":60,"props":1021,"children":1022},{},[1023],{"type":57,"value":1024},"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。",{"type":17,"tag":653,"props":1026,"children":1028},{"code":1027},"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n",[1029],{"type":17,"tag":660,"props":1030,"children":1031},{"__ignoreMap":8},[1032],{"type":57,"value":1027},{"type":17,"tag":60,"props":1034,"children":1035},{},[1036],{"type":57,"value":1037},"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。",{"type":17,"tag":47,"props":1039,"children":1041},{":t":1040,":type":858},"网络编程的基础",[],{"type":17,"tag":60,"props":1043,"children":1044},{},[1045,1047,1054,1056,1063],{"type":57,"value":1046},"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 ",{"type":17,"tag":88,"props":1048,"children":1051},{"href":1049,"rel":1050},"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution",[92],[1052],{"type":57,"value":1053},"Berkeley Software Distribution（BSD）",{"type":57,"value":1055}," 完成的。因此在网络通信领域中，就离不开 ",{"type":17,"tag":88,"props":1057,"children":1060},{"href":1058,"rel":1059},"https://en.wikipedia.org/wiki/Berkeley_sockets",[92],[1061],{"type":57,"value":1062},"Berkeley Sockets",{"type":57,"value":1064},"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。",{"type":17,"tag":66,"props":1066,"children":1067},{},[1068],{"type":17,"tag":60,"props":1069,"children":1070},{},[1071,1073,1079,1081,1087],{"type":57,"value":1072},"如果你是类 Unix 系统，可以在终端输入 ",{"type":17,"tag":660,"props":1074,"children":1076},{"className":1075},[],[1077],{"type":57,"value":1078},"man 2 syscall_name",{"type":57,"value":1080}," 在终端中查看手册，比如 ",{"type":17,"tag":660,"props":1082,"children":1084},{"className":1083},[],[1085],{"type":57,"value":1086},"man 2 open",{"type":57,"value":1088}," 就可以查看系统调用第二章有关 open 的内容。",{"type":17,"tag":60,"props":1090,"children":1091},{},[1092],{"type":57,"value":1093},"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。",{"type":17,"tag":47,"props":1095,"children":1097},{":t":1096,":type":858},"不同平台之间的捕获",[],{"type":57,"value":239},{"type":17,"tag":241,"props":1100,"children":1101},{},[1102,1122],{"type":17,"tag":245,"props":1103,"children":1104},{},[1105],{"type":17,"tag":249,"props":1106,"children":1107},{},[1108,1113,1118],{"type":17,"tag":253,"props":1109,"children":1110},{},[1111],{"type":57,"value":1112},"平台",{"type":17,"tag":253,"props":1114,"children":1115},{},[1116],{"type":57,"value":1117},"应用",{"type":17,"tag":253,"props":1119,"children":1120},{},[1121],{"type":57,"value":262},{"type":17,"tag":269,"props":1123,"children":1124},{},[1125,1143,1161],{"type":17,"tag":249,"props":1126,"children":1127},{},[1128,1133,1138],{"type":17,"tag":276,"props":1129,"children":1130},{},[1131],{"type":57,"value":1132},"Linux",{"type":17,"tag":276,"props":1134,"children":1135},{},[1136],{"type":57,"value":1137},"Strace",{"type":17,"tag":276,"props":1139,"children":1140},{},[1141],{"type":57,"value":1142},"跟踪系统调用和信号",{"type":17,"tag":249,"props":1144,"children":1145},{},[1146,1151,1156],{"type":17,"tag":276,"props":1147,"children":1148},{},[1149],{"type":57,"value":1150},"macOS",{"type":17,"tag":276,"props":1152,"children":1153},{},[1154],{"type":57,"value":1155},"DTrace",{"type":17,"tag":276,"props":1157,"children":1158},{},[1159],{"type":57,"value":1160},"跟踪系统调用, 可用于许多类 Unix 系统",{"type":17,"tag":249,"props":1162,"children":1163},{},[1164,1169,1174],{"type":17,"tag":276,"props":1165,"children":1166},{},[1167],{"type":57,"value":1168},"Windows",{"type":17,"tag":276,"props":1170,"children":1171},{},[1172],{"type":57,"value":1173},"Process Monitor",{"type":17,"tag":276,"props":1175,"children":1176},{},[1177],{"type":57,"value":1178},"Windows TEAM 提供的交互非常 Nice 的进程监视器",{"type":17,"tag":66,"props":1180,"children":1181},{},[1182,1187,1192],{"type":17,"tag":60,"props":1183,"children":1184},{},[1185],{"type":57,"value":1186},"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。",{"type":17,"tag":60,"props":1188,"children":1189},{},[1190],{"type":57,"value":1191},"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。",{"type":17,"tag":60,"props":1193,"children":1194},{},[1195],{"type":57,"value":1196},"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。",{"type":17,"tag":60,"props":1198,"children":1199},{},[1200],{"type":57,"value":1201},"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。",{"type":17,"tag":47,"props":1203,"children":1204},{":t":819,":type":858},[],{"type":17,"tag":60,"props":1206,"children":1207},{},[1208],{"type":57,"value":1209},"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。",{"type":17,"tag":52,"props":1211,"children":1213},{"id":1212},"太阳底下没有新鲜事-3",[1214],{"type":57,"value":1215},"太阳底下没有新鲜事 3",{"type":17,"tag":47,"props":1217,"children":1219},{":t":1218},"太阳底下没有新鲜事",[],{"type":17,"tag":60,"props":1221,"children":1222},{},[1223],{"type":57,"value":1224},"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。",{"type":17,"tag":47,"props":1226,"children":1228},{":t":1227,":type":858},"一些进制的基础",[],{"type":17,"tag":60,"props":1230,"children":1231},{},[1232],{"type":57,"value":1233},"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。",{"type":57,"value":1235},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":241,"props":1237,"children":1238},{},[1239,1258],{"type":17,"tag":245,"props":1240,"children":1241},{},[1242],{"type":17,"tag":249,"props":1243,"children":1244},{},[1245,1250,1254],{"type":17,"tag":253,"props":1246,"children":1247},{},[1248],{"type":57,"value":1249},"类型",{"type":17,"tag":253,"props":1251,"children":1252},{},[1253],{"type":57,"value":262},{"type":17,"tag":253,"props":1255,"children":1256},{},[1257],{"type":57,"value":790},{"type":17,"tag":269,"props":1259,"children":1260},{},[1261,1279,1293,1307,1321,1339,1353],{"type":17,"tag":249,"props":1262,"children":1263},{},[1264,1269,1274],{"type":17,"tag":276,"props":1265,"children":1266},{},[1267],{"type":57,"value":1268},"二进制协议",{"type":17,"tag":276,"props":1270,"children":1271},{},[1272],{"type":57,"value":1273},"以二进制格式传输数据",{"type":17,"tag":276,"props":1275,"children":1276},{},[1277],{"type":57,"value":1278},"高效性",{"type":17,"tag":249,"props":1280,"children":1281},{},[1282,1285,1288],{"type":17,"tag":276,"props":1283,"children":1284},{},[],{"type":17,"tag":276,"props":1286,"children":1287},{},[],{"type":17,"tag":276,"props":1289,"children":1290},{},[1291],{"type":57,"value":1292},"紧凑性",{"type":17,"tag":249,"props":1294,"children":1295},{},[1296,1299,1302],{"type":17,"tag":276,"props":1297,"children":1298},{},[],{"type":17,"tag":276,"props":1300,"children":1301},{},[],{"type":17,"tag":276,"props":1303,"children":1304},{},[1305],{"type":57,"value":1306},"复杂性",{"type":17,"tag":249,"props":1308,"children":1309},{},[1310,1313,1316],{"type":17,"tag":276,"props":1311,"children":1312},{},[],{"type":17,"tag":276,"props":1314,"children":1315},{},[],{"type":17,"tag":276,"props":1317,"children":1318},{},[1319],{"type":57,"value":1320},"依赖性",{"type":17,"tag":249,"props":1322,"children":1323},{},[1324,1329,1334],{"type":17,"tag":276,"props":1325,"children":1326},{},[1327],{"type":57,"value":1328},"文本协议",{"type":17,"tag":276,"props":1330,"children":1331},{},[1332],{"type":57,"value":1333},"以人类可读的形式传输数据（如 ASCII 或 UTF-8）",{"type":17,"tag":276,"props":1335,"children":1336},{},[1337],{"type":57,"value":1338},"可读性",{"type":17,"tag":249,"props":1340,"children":1341},{},[1342,1345,1348],{"type":17,"tag":276,"props":1343,"children":1344},{},[],{"type":17,"tag":276,"props":1346,"children":1347},{},[],{"type":17,"tag":276,"props":1349,"children":1350},{},[1351],{"type":57,"value":1352},"效率低",{"type":17,"tag":249,"props":1354,"children":1355},{},[1356,1359,1362],{"type":17,"tag":276,"props":1357,"children":1358},{},[],{"type":17,"tag":276,"props":1360,"children":1361},{},[],{"type":17,"tag":276,"props":1363,"children":1364},{},[1365],{"type":57,"value":1366},"灵活性（容错性和可扩展性）",{"type":17,"tag":60,"props":1368,"children":1369},{},[1370,1372,1378],{"type":57,"value":1371},"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 ",{"type":17,"tag":660,"props":1373,"children":1375},{"className":1374},[],[1376],{"type":57,"value":1377},"octet",{"type":57,"value":1379}," 来确保每个单位确实是 8 位。",{"type":17,"tag":66,"props":1381,"children":1382},{},[1383],{"type":17,"tag":60,"props":1384,"children":1385},{},[1386],{"type":57,"value":1387},"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据",{"type":17,"tag":653,"props":1389,"children":1391},{"code":1390},"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n",[1392],{"type":17,"tag":660,"props":1393,"children":1394},{"__ignoreMap":8},[1395],{"type":57,"value":1390},{"type":17,"tag":60,"props":1397,"children":1398},{},[1399],{"type":57,"value":1400},"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）",{"type":17,"tag":66,"props":1402,"children":1403},{},[1404],{"type":17,"tag":60,"props":1405,"children":1406},{},[1407],{"type":57,"value":1408},"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。",{"type":17,"tag":47,"props":1410,"children":1412},{":t":1411,":type":858},"数值数据",[],{"type":17,"tag":60,"props":1414,"children":1415},{},[1416],{"type":57,"value":1417},"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。",{"type":17,"tag":60,"props":1419,"children":1420},{},[1421,1423,1429],{"type":57,"value":1422},"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，",{"type":17,"tag":1424,"props":1425,"children":1426},"strong",{},[1427],{"type":57,"value":1428},"协议结构",{"type":57,"value":1430}," 与逆向。",{"type":17,"tag":60,"props":1432,"children":1433},{},[1434,1436,1441],{"type":57,"value":1435},"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 ",{"type":17,"tag":1424,"props":1437,"children":1438},{},[1439],{"type":57,"value":1440},"握手过程",{"type":57,"value":1442}," 来识别出加密套件。",{"type":17,"tag":60,"props":1444,"children":1445},{},[1446,1448],{"type":57,"value":1447},"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 ",{"type":17,"tag":1449,"props":1450,"children":1451},"the",{"ida":8,"pro":8,"book":8},[1452],{"type":57,"value":1453}," 找到我想要的。",{"title":8,"searchDepth":22,"depth":22,"links":1455},[],"content:book:attacking-network-protocols.md","book/attacking-network-protocols.md",{"_path":1459,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1460,"description":8,"director":1461,"time":339,"img":1462,"body":1463,"_type":24,"_id":1618,"_source":26,"_file":1619,"_extension":28},"/book/fate-of-moon-jae-in","문재인의 운명","문재인","04/4.png",{"type":14,"children":1464,"toc":1616},[1465],{"type":17,"tag":39,"props":1466,"children":1468},{":by":41,":img":42,":plan":1467,":title":44},"100",[1469,1475,1479,1484,1489,1494,1499,1522,1536,1544,1549,1555,1593,1596,1602,1606,1611],{"type":17,"tag":52,"props":1470,"children":1472},{"id":1471},"理念-1",[1473],{"type":57,"value":1474},"理念 1",{"type":17,"tag":47,"props":1476,"children":1478},{":t":1477},"为什么看这本回忆录？",[],{"type":17,"tag":60,"props":1480,"children":1481},{},[1482],{"type":57,"value":1483},"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。",{"type":17,"tag":60,"props":1485,"children":1486},{},[1487],{"type":57,"value":1488},"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。",{"type":17,"tag":60,"props":1490,"children":1491},{},[1492],{"type":57,"value":1493},"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格：",{"type":17,"tag":60,"props":1495,"children":1496},{},[1497],{"type":57,"value":1498},"以打开网站的第一版为例；",{"type":17,"tag":836,"props":1500,"children":1501},{},[1502,1507,1512,1517],{"type":17,"tag":840,"props":1503,"children":1504},{},[1505],{"type":57,"value":1506},"有的政府官网，显示的是当权者的讲话和文件；",{"type":17,"tag":840,"props":1508,"children":1509},{},[1510],{"type":57,"value":1511},"有的政府官网，是一些便民的工具；",{"type":17,"tag":840,"props":1513,"children":1514},{},[1515],{"type":57,"value":1516},"有的政府官网，是国家的景色，旅游信息；",{"type":17,"tag":840,"props":1518,"children":1519},{},[1520],{"type":57,"value":1521},"有的政府官网，是一些数据，一些便民信息；",{"type":17,"tag":60,"props":1523,"children":1524},{},[1525,1527,1534],{"type":57,"value":1526},"打开 ",{"type":17,"tag":88,"props":1528,"children":1531},{"href":1529,"rel":1530},"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions",[92],[1532],{"type":57,"value":1533},"https://www.president.go.kr/",{"type":57,"value":1535}," 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。",{"type":17,"tag":66,"props":1537,"children":1538},{},[1539],{"type":17,"tag":60,"props":1540,"children":1541},{},[1542],{"type":57,"value":1543},"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\"",{"type":17,"tag":60,"props":1545,"children":1546},{},[1547],{"type":57,"value":1548},"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。",{"type":17,"tag":1550,"props":1551,"children":1554},"img-tip",{"text":1552,"url":1553},"🕯烛光集会：2016 年大韩民国反朴槿惠示威","04/WechatIMG4.jpg",[],{"type":17,"tag":66,"props":1556,"children":1557},{},[1558,1563,1568,1573,1578,1583,1588],{"type":17,"tag":60,"props":1559,"children":1560},{},[1561],{"type":57,"value":1562},"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。",{"type":17,"tag":60,"props":1564,"children":1565},{},[1566],{"type":57,"value":1567},"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。",{"type":17,"tag":60,"props":1569,"children":1570},{},[1571],{"type":57,"value":1572},"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。",{"type":17,"tag":60,"props":1574,"children":1575},{},[1576],{"type":57,"value":1577},"希望公民，与此同时和我一起走出这段历史。",{"type":17,"tag":60,"props":1579,"children":1580},{},[1581],{"type":57,"value":1582},"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。",{"type":17,"tag":60,"props":1584,"children":1585},{},[1586],{"type":57,"value":1587},"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”",{"type":17,"tag":60,"props":1589,"children":1590},{},[1591],{"type":57,"value":1592},"——文在寅",{"type":17,"tag":505,"props":1594,"children":1595},{},[],{"type":17,"tag":52,"props":1597,"children":1599},{"id":1598},"检察官-2",[1600],{"type":57,"value":1601},"检察官 2",{"type":17,"tag":47,"props":1603,"children":1605},{":t":1604},"青瓦台魔咒",[],{"type":17,"tag":60,"props":1607,"children":1608},{},[1609],{"type":57,"value":1610},"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。",{"type":17,"tag":60,"props":1612,"children":1613},{},[1614],{"type":57,"value":1615},"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。",{"title":8,"searchDepth":22,"depth":22,"links":1617},[],"content:book:fate-of-moon-jae-in.md","book/fate-of-moon-jae-in.md",1736185411161]