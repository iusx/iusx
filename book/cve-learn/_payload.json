[{"data":1,"prerenderedAt":383},["Reactive",2],{"content-query-UW67z4wVLQ":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"director":9,"time":10,"img":11,"plan":12,"body":13,"_type":378,"_id":379,"_source":380,"_file":381,"_extension":382},"/book/cve-learn","book",false,"","CVE learn","My","2025","14/1.png","100,100",{"type":14,"children":15,"toc":375},"root",[16],{"type":17,"tag":18,"props":19,"children":24},"element","book-content",{":by":20,":img":21,":plan":22,":title":23},"director","img","plan","title",[25,30,37,42,47,52,57,61,68,81,124,138,150,172,175,181,197,219,256,280,302,318,326,338,346,367],{"type":17,"tag":26,"props":27,"children":29},"text-title",{":t":28},"CVE is my dream.",[],{"type":17,"tag":31,"props":32,"children":33},"p",{},[34],{"type":35,"value":36},"text","早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":17,"tag":31,"props":38,"children":39},{},[40],{"type":35,"value":41},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":17,"tag":31,"props":43,"children":44},{},[45],{"type":35,"value":46},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":17,"tag":31,"props":48,"children":49},{},[50],{"type":35,"value":51},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":17,"tag":31,"props":53,"children":54},{},[55],{"type":35,"value":56},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":17,"tag":58,"props":59,"children":60},"hr",{},[],{"type":17,"tag":62,"props":63,"children":65},"h1",{"id":64},"cve-2022-36114-1",[66],{"type":35,"value":67},"CVE-2022-36114 1",{"type":17,"tag":69,"props":70,"children":75},"cve-info",{":cwe":71,":type":72,"cve":73,"to":74},"400","2","CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114",[76],{"type":17,"tag":31,"props":77,"children":78},{},[79],{"type":35,"value":80},"不受控制的资源消耗",{"type":17,"tag":31,"props":82,"children":83},{},[84,86,95,97,104,106,113,115,122],{"type":35,"value":85},"利用 Cargo 的 ",{"type":17,"tag":87,"props":88,"children":92},"a",{"href":89,"rel":90},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[91],"nofollow",[93],{"type":35,"value":94},"build script",{"type":35,"value":96}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":17,"tag":87,"props":98,"children":101},{"href":99,"rel":100},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[91],[102],{"type":35,"value":103},"procedural macros",{"type":35,"value":105},"，在执行 ",{"type":17,"tag":107,"props":108,"children":110},"code",{"className":109},[],[111],{"type":35,"value":112},"cargo run",{"type":35,"value":114}," 的过程中触发了一个 ",{"type":17,"tag":87,"props":116,"children":119},{"href":117,"rel":118},"https://en.wikipedia.org/wiki/Zip_bomb",[91],[120],{"type":35,"value":121},"Zip Bomb",{"type":35,"value":123}," 行为。",{"type":17,"tag":31,"props":125,"children":126},{},[127,129,136],{"type":35,"value":128},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":17,"tag":87,"props":130,"children":133},{"href":131,"rel":132},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[91],[134],{"type":35,"value":135},"补丁修复",{"type":35,"value":137}," Zip_bomb 的问题:",{"type":17,"tag":139,"props":140,"children":145},"pre",{"code":141,"language":142,"meta":7,"className":143},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[144],"language-c",[146],{"type":17,"tag":107,"props":147,"children":148},{"__ignoreMap":7},[149],{"type":35,"value":141},{"type":17,"tag":31,"props":151,"children":152},{},[153,155,161,163,170],{"type":35,"value":154},"同时引入了 ",{"type":17,"tag":107,"props":156,"children":158},{"className":157},[],[159],{"type":35,"value":160},"LimitErrorReader",{"type":35,"value":162},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":17,"tag":87,"props":164,"children":167},{"href":165,"rel":166},"https://crates.io/",[91],[168],{"type":35,"value":169},"crates",{"type":35,"value":171}," 上提交的 crate。",{"type":17,"tag":58,"props":173,"children":174},{},[],{"type":17,"tag":62,"props":176,"children":178},{"id":177},"cve-2023-40030-1",[179],{"type":35,"value":180},"CVE-2023-40030 1",{"type":17,"tag":69,"props":182,"children":187},{":cwe":183,":type":184,"cve":185,"to":186},"79","1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030",[188],{"type":17,"tag":31,"props":189,"children":190},{},[191,193],{"type":35,"value":192},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":17,"tag":194,"props":195,"children":196},"br",{},[],{"type":17,"tag":31,"props":198,"children":199},{},[200,202,208,210,217],{"type":35,"value":201},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":17,"tag":107,"props":203,"children":205},{"className":204},[],[206],{"type":35,"value":207},"cargo build --timings",{"type":35,"value":209}," 的时候肿么没想到会有 CWE-79。",{"type":17,"tag":87,"props":211,"children":214},{"href":212,"rel":213},"https://doc.rust-lang.org/cargo/reference/timings.html",[91],[215],{"type":35,"value":216},"--timings",{"type":35,"value":218}," 是一个生成 build 时间的 html 报告。",{"type":17,"tag":31,"props":220,"children":221},{},[222,224,230,232,238,240,246,248,254],{"type":35,"value":223},"可以通过在 ",{"type":17,"tag":107,"props":225,"children":227},{"className":226},[],[228],{"type":35,"value":229},"Cargo.toml",{"type":35,"value":231}," 中加入 ",{"type":17,"tag":107,"props":233,"children":235},{"className":234},[],[236],{"type":35,"value":237},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":35,"value":239}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":17,"tag":107,"props":241,"children":243},{"className":242},[],[244],{"type":35,"value":245},"Warning",{"type":35,"value":247},", 换成了 ",{"type":17,"tag":107,"props":249,"children":251},{"className":250},[],[252],{"type":35,"value":253},"bail!",{"type":35,"value":255}," 机制。",{"type":17,"tag":257,"props":258,"children":260},"text-space",{"type":259},"tip",[261],{"type":17,"tag":31,"props":262,"children":263},{},[264,269,271,278],{"type":17,"tag":107,"props":265,"children":267},{"className":266},[],[268],{"type":35,"value":253},{"type":35,"value":270}," 宏来自 ",{"type":17,"tag":87,"props":272,"children":275},{"href":273,"rel":274},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[91],[276],{"type":35,"value":277},"anyhow",{"type":35,"value":279}," 用于方便地提前返回错误。",{"type":17,"tag":31,"props":281,"children":282},{},[283,285,292,294,300],{"type":35,"value":284},"可以看一下 ",{"type":17,"tag":87,"props":286,"children":289},{"href":287,"rel":288},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[91],[290],{"type":35,"value":291},"fix pr",{"type":35,"value":293},"，非常有意思，比如 ",{"type":17,"tag":107,"props":295,"children":297},{"className":296},[],[298],{"type":35,"value":299},"validate_feature_name",{"type":35,"value":301}," 函数。",{"type":17,"tag":31,"props":303,"children":304},{},[305,307,313,315],{"type":35,"value":306},"原来：遇到非法 feature name，只输出 ",{"type":17,"tag":107,"props":308,"children":310},{"className":309},[],[311],{"type":35,"value":312},"warning",{"type":35,"value":314},"，流程继续。",{"type":17,"tag":194,"props":316,"children":317},{},[],{"type":17,"tag":139,"props":319,"children":321},{"code":320},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[322],{"type":17,"tag":107,"props":323,"children":324},{"__ignoreMap":7},[325],{"type":35,"value":320},{"type":17,"tag":31,"props":327,"children":328},{},[329,331,336],{"type":35,"value":330},"现在：遇到非法 feature name，直接 ",{"type":17,"tag":107,"props":332,"children":334},{"className":333},[],[335],{"type":35,"value":253},{"type":35,"value":337},"，构建中止，用户必须修正。",{"type":17,"tag":139,"props":339,"children":341},{"code":340}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[342],{"type":17,"tag":107,"props":343,"children":344},{"__ignoreMap":7},[345],{"type":35,"value":340},{"type":17,"tag":31,"props":347,"children":348},{},[349,351,357,359,365],{"type":35,"value":350},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":17,"tag":107,"props":352,"children":354},{"className":353},[],[355],{"type":35,"value":356},"is_ok()",{"type":35,"value":358}," 是合法的，而 ",{"type":17,"tag":107,"props":360,"children":362},{"className":361},[],[363],{"type":35,"value":364},"is_err()",{"type":35,"value":366}," 是不合法的：",{"type":17,"tag":139,"props":368,"children":370},{"code":369}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[371],{"type":17,"tag":107,"props":372,"children":373},{"__ignoreMap":7},[374],{"type":35,"value":369},{"title":7,"searchDepth":376,"depth":376,"links":377},2,[],"markdown","content:book:cve-learn.md","content","book/cve-learn.md","md",1750786970891]