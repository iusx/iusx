[{"data":1,"prerenderedAt":250},["Reactive",2],{"content-query-We1OsS6S6P":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"director":9,"time":10,"img":11,"plan":12,"body":13,"_type":245,"_id":246,"_source":247,"_file":248,"_extension":249},"/book/system-config","book",false,"","System config","MY","2025","17/1.png","100,100",{"type":14,"children":15,"toc":242},"root",[16],{"type":17,"tag":18,"props":19,"children":24},"element","book-content",{":by":20,":img":21,":plan":22,":title":23},"director","img","plan","title",[25,30,38,73,89,103,107,117,119,217],{"type":17,"tag":26,"props":27,"children":29},"text-title",{"t":28},"Nix",[],{"type":17,"tag":31,"props":32,"children":34},"h1",{"id":33},"为什么用-nix-2",[35],{"type":36,"value":37},"text","为什么用 Nix? 2",{"type":17,"tag":39,"props":40,"children":41},"p",{},[42,44,53,55,62,64,71],{"type":36,"value":43},"也是视奸 群u萌 看到的，了解了下发现是 2003 年就开始发布，至今已经 22 年了。（第一印象还以为是一个发行版，确实有，",{"type":17,"tag":45,"props":46,"children":50},"a",{"href":47,"rel":48},"https://nixos.org/",[49],"nofollow",[51],{"type":36,"value":52},"NixOS",{"type":36,"value":54},"）。再看看自己的系统环境确实有点乱，于是就有了重装系统的念头。新的系统毫不犹豫就用上了 Nix，不过我用的是 ",{"type":17,"tag":45,"props":56,"children":59},{"href":57,"rel":58},"https://github.com/DeterminateSystems/nix-installer",[49],[60],{"type":36,"value":61},"DeterminateSystems",{"type":36,"value":63}," 家的（好像是对 macOS 有优化？）个人感觉 Nix 貌似还挺成熟了，我看很多 community contributor 都是 ",{"type":17,"tag":45,"props":65,"children":68},{"href":66,"rel":67},"https://www.tweag.io/",[49],[69],{"type":36,"value":70},"tweag",{"type":36,"value":72}," 的员工？",{"type":17,"tag":74,"props":75,"children":78},"wise-info",{"by":76,"topic":77},"Wikipedia","Haskell Criticism",[79,84],{"type":17,"tag":39,"props":80,"children":81},{},[82],{"type":36,"value":83},"Haskell's build tool, Cabal, has historically been criticized for poorly handling multiple versions of the same library, a problem known as \"Cabal hell\". The Stackage server and Stack build tool were made in response to these criticisms. Cabal has since addressed this problem by borrowing ideas from a package manager named Nix, with the new approach becoming the default in 2019.",{"type":17,"tag":39,"props":85,"children":86},{},[87],{"type":36,"value":88},"Haskell 的构建工具 Cabal 历来因处理同一库的多个版本不力而受到批评，这个问题被称为“Cabal 地狱”。Stackage 服务器和 Stack 构建工具就是为了回应这些批评而制作的。 此后，Cabal 通过借鉴名为 Nix 的包管理器的想法来解决这个问题， 新方法在 2019 年成为默认方法。",{"type":17,"tag":39,"props":90,"children":91},{},[92,94,101],{"type":36,"value":93},"我发现了很多用 Haskell 的同时也会是 Nix 的使用者。甚至有些给 NixOS contributor 的也会是 Haskell contributor。一开始还不知道为什么，直到看到了 ",{"type":17,"tag":95,"props":96,"children":98},"code",{"className":97},[],[99],{"type":36,"value":100},"\"Cabal hell\"",{"type":36,"value":102}," 这个词才了解到了 Nix 和 Haskell 之间的渊源。",{"type":17,"tag":104,"props":105,"children":106},"hr",{},[],{"type":17,"tag":108,"props":109,"children":111},"text-space",{"type":110},"tip",[112],{"type":17,"tag":39,"props":113,"children":114},{},[115],{"type":36,"value":116},"记录一些自己常用的（用的时候可以翻翻",{"type":36,"value":118},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":120,"props":121,"children":122},"table",{},[123,147],{"type":17,"tag":124,"props":125,"children":126},"thead",{},[127],{"type":17,"tag":128,"props":129,"children":130},"tr",{},[131,137,142],{"type":17,"tag":132,"props":133,"children":134},"th",{},[135],{"type":36,"value":136},"command",{"type":17,"tag":132,"props":138,"children":139},{},[140],{"type":36,"value":141},"info",{"type":17,"tag":132,"props":143,"children":144},{},[145],{"type":36,"value":146},"e.g",{"type":17,"tag":148,"props":149,"children":150},"tbody",{},[151,176],{"type":17,"tag":128,"props":152,"children":153},{},[154,160,171],{"type":17,"tag":155,"props":156,"children":157},"td",{},[158],{"type":36,"value":159},"nix-shell",{"type":17,"tag":155,"props":161,"children":162},{},[163,165],{"type":36,"value":164},"创建一个隔离环境 或是 ",{"type":17,"tag":166,"props":167,"children":168},"strong",{},[169],{"type":36,"value":170},"以使用声明式配置文件创建可重现的 shell 环境",{"type":17,"tag":155,"props":172,"children":173},{},[174],{"type":36,"value":175},"nix-shell -p nodejs --run 'node -v'",{"type":17,"tag":128,"props":177,"children":178},{},[179,184,196],{"type":17,"tag":155,"props":180,"children":181},{},[182],{"type":36,"value":183},"nix-collect-garbage -d",{"type":17,"tag":155,"props":185,"children":186},{},[187,189,194],{"type":36,"value":188},"快速清理环境(但下次再进到 ",{"type":17,"tag":95,"props":190,"children":192},{"className":191},[],[193],{"type":36,"value":159},{"type":36,"value":195}," 环境下载有点慢)",{"type":17,"tag":155,"props":197,"children":198},{},[199,201,207,209,215],{"type":36,"value":200},"有点像是 ",{"type":17,"tag":95,"props":202,"children":204},{"className":203},[],[205],{"type":36,"value":206},"nix-env",{"type":36,"value":208}," & ",{"type":17,"tag":95,"props":210,"children":212},{"className":211},[],[213],{"type":36,"value":214},"nix-store",{"type":36,"value":216}," 的结合体哈哈好爽。",{"type":17,"tag":39,"props":218,"children":219},{},[220,222,227,229,234,236],{"type":36,"value":221},"不过对我来说 ",{"type":17,"tag":95,"props":223,"children":225},{"className":224},[],[226],{"type":36,"value":159},{"type":36,"value":228}," 貌似就很满足我的需求了。剩下的 ",{"type":17,"tag":95,"props":230,"children":232},{"className":231},[],[233],{"type":36,"value":206},{"type":36,"value":235},"（升级/卸载）只是 ​​在借阅记录（profile generation）中划掉某本书的名字​​，但书（包）仍然放在书架上 ",{"type":17,"tag":95,"props":237,"children":239},{"className":238},[],[240],{"type":36,"value":241},"（/nix/store）",{"title":7,"searchDepth":243,"depth":243,"links":244},2,[],"markdown","content:book:system-config.md","content","book/system-config.md","md",1755873520468]