[{"data":1,"prerenderedAt":4646},["Reactive",2],{"content-query-5sj1qf7C3V":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"director":9,"time":10,"img":11,"plan":12,"body":13,"_type":4641,"_id":4642,"_source":4643,"_file":4644,"_extension":4645},"/book/test","book",false,"","Seven Languages in Seven Weeks","Bruce A. Tate","2025.01.08","08/1.png","153,323",{"type":14,"children":15,"toc":4609},"root",[16,4603],{"type":17,"tag":18,"props":19,"children":24},"element","book-content",{":by":20,":img":21,":plan":22,":title":23},"director","img","plan","title",[25,33,38,44,51,55,60,62,139,162,174,189,194,204,209,217,232,240,248,254,259,271,273,383,384,456,463,467,478,486,541,547,551,561,563,797,802,804,935,941,945,957,980,983,1000,1005,1010,1015,1028,1051,1063,1081,1098,1104,1107,1119,1131,1135,1143,1161,1169,1202,1218,1230,1238,1242,1248,1252,1271,1279,1282,1540,1559,1960,2269,2287,2299,2305,2309,2322,2330,2342,2355,2361,2365,2393,2401,2428,2431,2437,2441,2444,2453,2480,2486,2490,2493,2501,2514,2522,2534,2542,2548,2552,2557,2565,2568,2581,2591,2604,2613,2631,2639,2640,2701,2706,2933,2941,2962,2968,2972,2986,2994,3004,3012,3023,3035,3038,3044,3048,3071,3077,3081,3093,3116,3130,3138,3151,3169,3174,3182,3183,3243,3249,3253,3274,3311,3319,3324,3330,3334,3345,3366,3374,3425,3428,3434,3438,3450,3463,3475,3483,3496,3504,3507,3514,3518,3539,3547,3555,3562,3566,3571,3584,3597,3605,3610,3618,3621,3627,3631,3636,3673,3700,3708,3721,3729,3732,3738,3742,3744,3853,3859,3863,3889,3908,3916,3922,3926,3937,3945,3973,3981,3986,3994,4000,4003,4016,4024,4029,4037,4040,4046,4050,4078,4111,4119,4139,4141,4413,4418,4421,4427,4431,4439,4444,4450,4454,4465,4466,4565,4595],{"type":17,"tag":26,"props":27,"children":29},"h1",{"id":28},"prolog-1",[30],{"type":31,"value":32},"text","Prolog 1",{"type":17,"tag":34,"props":35,"children":37},"text-title",{"t":36},"Prolog",[],{"type":17,"tag":39,"props":40,"children":41},"p",{},[42],{"type":31,"value":43},"在本书刚开始的时候我就对 Prolog 和 io lang 拥有了兴趣。因为他们是我未曾看见过的（貌似比较冷门？），其中我在搜集 Prolog 相关的资料后发现，有一位大佬可以通过逻辑来和鲸鱼对话，这让我非常有兴趣了解这门语言，或许学完了可以和猫猫对话。",{"type":17,"tag":45,"props":46,"children":48},"h2",{"id":47},"逻辑知识库-2",[49],{"type":31,"value":50},"逻辑知识库 2",{"type":17,"tag":34,"props":52,"children":54},{"t":53},"逻辑知识库",[],{"type":17,"tag":39,"props":56,"children":57},{},[58],{"type":31,"value":59},"逻辑知识库是 Prolog 的核心，我将它理解为一些数据的存储，它由以下信息构成：",{"type":31,"value":61},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":63,"props":64,"children":65},"table",{},[66,85],{"type":17,"tag":67,"props":68,"children":69},"thead",{},[70],{"type":17,"tag":71,"props":72,"children":73},"tr",{},[74,80],{"type":17,"tag":75,"props":76,"children":77},"th",{},[78],{"type":31,"value":79},"构建块",{"type":17,"tag":75,"props":81,"children":82},{},[83],{"type":31,"value":84},"例子",{"type":17,"tag":86,"props":87,"children":88},"tbody",{},[89,107,123],{"type":17,"tag":71,"props":90,"children":91},{},[92,102],{"type":17,"tag":93,"props":94,"children":95},"td",{},[96],{"type":17,"tag":97,"props":98,"children":99},"strong",{},[100],{"type":31,"value":101},"事实（Facts）",{"type":17,"tag":93,"props":103,"children":104},{},[105],{"type":31,"value":106},"对某个世界的基本断言。（例如：“Babe 是一只猪”，“猪喜欢泥巴”。）",{"type":17,"tag":71,"props":108,"children":109},{},[110,118],{"type":17,"tag":93,"props":111,"children":112},{},[113],{"type":17,"tag":97,"props":114,"children":115},{},[116],{"type":31,"value":117},"规则（Rules）",{"type":17,"tag":93,"props":119,"children":120},{},[121],{"type":31,"value":122},"关于这些事实的推论。（例如：“如果某动物是猪，那么它喜欢泥巴。”）",{"type":17,"tag":71,"props":124,"children":125},{},[126,134],{"type":17,"tag":93,"props":127,"children":128},{},[129],{"type":17,"tag":97,"props":130,"children":131},{},[132],{"type":31,"value":133},"查询（Query）",{"type":17,"tag":93,"props":135,"children":136},{},[137],{"type":31,"value":138},"关于这个世界的提问。（例如：“Babe 喜欢泥巴吗？”）",{"type":17,"tag":39,"props":140,"children":141},{},[142,144,153,155,160],{"type":31,"value":143},"如果要运行、体验 Prolog，我更推荐 swi 的 ",{"type":17,"tag":145,"props":146,"children":150},"a",{"href":147,"rel":148},"https://wasm.swi-prolog.org/wasm/tinker",[149],"nofollow",[151],{"type":31,"value":152},"wasm",{"type":31,"value":154},"。目前，prolog 分别有 SWI 和 CIAO。他们都是 Prolog 的 ",{"type":17,"tag":97,"props":156,"children":157},{},[158],{"type":31,"value":159},"实现",{"type":31,"value":161},"。不过我更喜欢 SWI，因为他提供了在线的 Prolog 编辑器？我有了解过他们两个实现的作者，发现他们都是老师，都为 prolog 坚持了很久。",{"type":17,"tag":39,"props":163,"children":164},{},[165,167,172],{"type":31,"value":166},"在 Prolog 中，",{"type":17,"tag":97,"props":168,"children":169},{},[170],{"type":31,"value":171},"在 Prolog 中，首字母大小写很重要",{"type":31,"value":173},"：",{"type":17,"tag":175,"props":176,"children":177},"ol",{},[178,184],{"type":17,"tag":179,"props":180,"children":181},"li",{},[182],{"type":31,"value":183},"小写字母开头的单词是原子（atom），表示固定的值（类似于 Ruby 的符号）。",{"type":17,"tag":179,"props":185,"children":186},{},[187],{"type":31,"value":188},"大写字母或下划线开头的单词是变量（variable），值可以改变。",{"type":17,"tag":39,"props":190,"children":191},{},[192],{"type":31,"value":193},"例如，一个简单的逻辑推理：",{"type":17,"tag":195,"props":196,"children":198},"pre",{"code":197},"% 定义事实\nlikes(wallace, cheese).\nlikes(grommit, cheese).\nlikes(wendolene, sheep).\n\n% 定义规则：朋友关系\nfriend(X, Y) :- \\+(X = Y), likes(X, Z), likes(Y, Z).\n---\n如果 X 和 Y 是不同的人，并且他们都喜欢同一个 Z，那么 X 和 Y 是朋友。\n\n% 定义解释输出规则\nexplain_likes(Person, Item) :-\n    ( likes(Person, Item) ->\n        format('~w 喜欢 ~w。~n', [Person, Item])\n    ;   format('~w 不喜欢 ~w，因为没有相关事实支持。~n', [Person, Item])\n    ).\n\nexplain_friend(X, Y) :-\n    ( friend(X, Y) ->\n        format('~w 和 ~w 是朋友，因为他们都喜欢某个相同的事物。~n', [X, Y])\n    ;   format('~w 和 ~w 不是朋友，因为他们没有共同喜欢的事物。~n', [X, Y])\n    ).\n",[199],{"type":17,"tag":200,"props":201,"children":202},"code",{"__ignoreMap":7},[203],{"type":31,"value":197},{"type":17,"tag":39,"props":205,"children":206},{},[207],{"type":31,"value":208},"我们可以长时下输入来看看返回的结果：",{"type":17,"tag":39,"props":210,"children":211},{},[212],{"type":17,"tag":97,"props":213,"children":214},{},[215],{"type":31,"value":216},"?-explain_friend(wallace, grommit).",{"type":17,"tag":218,"props":219,"children":220},"ul",{},[221],{"type":17,"tag":179,"props":222,"children":223},{},[224,226,230],{"type":31,"value":225},"wallace 和 grommit 是朋友，因为他们都喜欢某个相同的事物。",{"type":17,"tag":227,"props":228,"children":229},"br",{},[],{"type":31,"value":231},"\ntrue.",{"type":17,"tag":39,"props":233,"children":234},{},[235],{"type":17,"tag":97,"props":236,"children":237},{},[238],{"type":31,"value":239},"?-explain_friend(wallace, wendolene).",{"type":17,"tag":218,"props":241,"children":242},{},[243],{"type":17,"tag":179,"props":244,"children":245},{},[246],{"type":31,"value":247},"wallace 和 wendolene 不是朋友，因为他们没有共同喜欢的事物。\ntrue.",{"type":17,"tag":45,"props":249,"children":251},{"id":250},"运算符-2",[252],{"type":31,"value":253},"运算符 2",{"type":17,"tag":34,"props":255,"children":258},{"type":256,":t":257},"2","运算符",[],{"type":17,"tag":39,"props":260,"children":261},{},[262,264,269],{"type":31,"value":263},"在 prolog 中，这些符号都是 ",{"type":17,"tag":97,"props":265,"children":266},{},[267],{"type":31,"value":268},"语言符号体系",{"type":31,"value":270}," 的一部分，而且还具有优先级。优先级决定了运算符的绑定顺序（类似括号的作用）。",{"type":31,"value":272},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":63,"props":274,"children":275},{},[276,292],{"type":17,"tag":67,"props":277,"children":278},{},[279],{"type":17,"tag":71,"props":280,"children":281},{},[282,287],{"type":17,"tag":75,"props":283,"children":284},{},[285],{"type":31,"value":286},"符号",{"type":17,"tag":75,"props":288,"children":289},{},[290],{"type":31,"value":291},"解释",{"type":17,"tag":86,"props":293,"children":294},{},[295,317,339,361],{"type":17,"tag":71,"props":296,"children":297},{},[298,307],{"type":17,"tag":93,"props":299,"children":300},{},[301],{"type":17,"tag":200,"props":302,"children":304},{"className":303},[],[305],{"type":31,"value":306},":-",{"type":17,"tag":93,"props":308,"children":309},{},[310,315],{"type":17,"tag":97,"props":311,"children":312},{},[313],{"type":31,"value":314},"如果",{"type":31,"value":316},"。连接规则头和规则体，表示规则的定义。",{"type":17,"tag":71,"props":318,"children":319},{},[320,329],{"type":17,"tag":93,"props":321,"children":322},{},[323],{"type":17,"tag":200,"props":324,"children":326},{"className":325},[],[327],{"type":31,"value":328},"\\+",{"type":17,"tag":93,"props":330,"children":331},{},[332,337],{"type":17,"tag":97,"props":333,"children":334},{},[335],{"type":31,"value":336},"逻辑否定",{"type":31,"value":338},"。表示“不成立”或“不能证明为真”（基于有限失败的逻辑）。",{"type":17,"tag":71,"props":340,"children":341},{},[342,351],{"type":17,"tag":93,"props":343,"children":344},{},[345],{"type":17,"tag":200,"props":346,"children":348},{"className":347},[],[349],{"type":31,"value":350},"=",{"type":17,"tag":93,"props":352,"children":353},{},[354,359],{"type":17,"tag":97,"props":355,"children":356},{},[357],{"type":31,"value":358},"等于",{"type":31,"value":360},"。用于判断两个值是否相等。",{"type":17,"tag":71,"props":362,"children":363},{},[364,373],{"type":17,"tag":93,"props":365,"children":366},{},[367],{"type":17,"tag":200,"props":368,"children":370},{"className":369},[],[371],{"type":31,"value":372},",",{"type":17,"tag":93,"props":374,"children":375},{},[376,381],{"type":17,"tag":97,"props":377,"children":378},{},[379],{"type":31,"value":380},"逻辑与",{"type":31,"value":382},"。多个条件必须同时成立规则才为真。",{"type":31,"value":61},{"type":17,"tag":63,"props":385,"children":386},{},[387,402],{"type":17,"tag":67,"props":388,"children":389},{},[390],{"type":17,"tag":71,"props":391,"children":392},{},[393,398],{"type":17,"tag":75,"props":394,"children":395},{},[396],{"type":31,"value":397},"条件",{"type":17,"tag":75,"props":399,"children":400},{},[401],{"type":31,"value":291},{"type":17,"tag":86,"props":403,"children":404},{},[405,422,439],{"type":17,"tag":71,"props":406,"children":407},{},[408,417],{"type":17,"tag":93,"props":409,"children":410},{},[411],{"type":17,"tag":200,"props":412,"children":414},{"className":413},[],[415],{"type":31,"value":416},"\\+(X = Y)",{"type":17,"tag":93,"props":418,"children":419},{},[420],{"type":31,"value":421},"X 和 Y 必须不同。",{"type":17,"tag":71,"props":423,"children":424},{},[425,434],{"type":17,"tag":93,"props":426,"children":427},{},[428],{"type":17,"tag":200,"props":429,"children":431},{"className":430},[],[432],{"type":31,"value":433},"likes(X, Z)",{"type":17,"tag":93,"props":435,"children":436},{},[437],{"type":31,"value":438},"X 必须喜欢某个 Z。",{"type":17,"tag":71,"props":440,"children":441},{},[442,451],{"type":17,"tag":93,"props":443,"children":444},{},[445],{"type":17,"tag":200,"props":446,"children":448},{"className":447},[],[449],{"type":31,"value":450},"likes(Y, Z)",{"type":17,"tag":93,"props":452,"children":453},{},[454],{"type":31,"value":455},"Y 必须喜欢同一个 Z。",{"type":17,"tag":457,"props":458,"children":460},"h3",{"id":459},"否定为失败-1",[461],{"type":31,"value":462},"否定为失败 1",{"type":17,"tag":34,"props":464,"children":466},{"type":256,":t":465},"否定为失败",[],{"type":17,"tag":39,"props":468,"children":469},{},[470,471,476],{"type":31,"value":166},{"type":17,"tag":200,"props":472,"children":474},{"className":473},[],[475],{"type":31,"value":328},{"type":31,"value":477}," 符号为逻辑否定。如果无法证明 X = Y 为真，则 +(X = Y) 为真。如果能够证明 X = Y 为真，则 +(X = Y) 为假。",{"type":17,"tag":195,"props":479,"children":481},{"code":480},"?- \\+(1 = 2).\ntrue.   % 因为 1 不等于 2，无法证明 1 = 2，所以 \\+(1 = 2) 为真。\n\n?- \\+(1 = 1).\nfalse.  % 因为 1 = 1 可以被证明为真，所以 \\+(1 = 1) 为假。\n",[482],{"type":17,"tag":200,"props":483,"children":484},{"__ignoreMap":7},[485],{"type":31,"value":480},{"type":17,"tag":39,"props":487,"children":488},{},[489,491,497,499,505,507,512,514,519,521,526,528,534,536],{"type":31,"value":490},"一般来说我们认为的应该是 1 = 2 为 ",{"type":17,"tag":200,"props":492,"children":494},{"className":493},[],[495],{"type":31,"value":496},"false",{"type":31,"value":498},"，而 1 = 1 则应该为 ",{"type":17,"tag":200,"props":500,"children":502},{"className":501},[],[503],{"type":31,"value":504},"true",{"type":31,"value":506},"，在这里是反着的。但因为我们加入了 ",{"type":17,"tag":200,"props":508,"children":510},{"className":509},[],[511],{"type":31,"value":328},{"type":31,"value":513},"，即逻辑否定来表示 ",{"type":17,"tag":97,"props":515,"children":516},{},[517],{"type":31,"value":518},"不成立",{"type":31,"value":520},"，",{"type":17,"tag":97,"props":522,"children":523},{},[524],{"type":31,"value":525},"不能证明为真",{"type":31,"value":527},"，所以 ",{"type":17,"tag":200,"props":529,"children":531},{"className":530},[],[532],{"type":31,"value":533},"\\+(1 = 2)",{"type":31,"value":535}," 无法被证明所以返回了 ",{"type":17,"tag":200,"props":537,"children":539},{"className":538},[],[540],{"type":31,"value":504},{"type":17,"tag":45,"props":542,"children":544},{"id":543},"推理-2",[545],{"type":31,"value":546},"推理 2",{"type":17,"tag":34,"props":548,"children":550},{":t":549},"推理",[],{"type":17,"tag":39,"props":552,"children":553},{},[554,559],{"type":17,"tag":97,"props":555,"children":556},{},[557],{"type":31,"value":558},"规则与推理是 Prolog 的核心，允许通过简单的规则解决复杂问题。",{"type":31,"value":560},"，虽然 Prolog 并不是很火，但隔壁的 mcp(Model Context Protocol) 也是推理的一种方式，不过它是根据上下文来进行推理。",{"type":31,"value":562},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":63,"props":564,"children":565},{},[566,595],{"type":17,"tag":67,"props":567,"children":568},{},[569],{"type":17,"tag":71,"props":570,"children":571},{},[572,580,587],{"type":17,"tag":75,"props":573,"children":574},{},[575],{"type":17,"tag":97,"props":576,"children":577},{},[578],{"type":31,"value":579},"维度",{"type":17,"tag":75,"props":581,"children":582},{},[583],{"type":17,"tag":97,"props":584,"children":585},{},[586],{"type":31,"value":36},{"type":17,"tag":75,"props":588,"children":589},{},[590],{"type":17,"tag":97,"props":591,"children":592},{},[593],{"type":31,"value":594},"Model Context Protocol (MCP)",{"type":17,"tag":86,"props":596,"children":597},{},[598,619,650,671,692,713,734,755,776],{"type":17,"tag":71,"props":599,"children":600},{},[601,609,614],{"type":17,"tag":93,"props":602,"children":603},{},[604],{"type":17,"tag":97,"props":605,"children":606},{},[607],{"type":31,"value":608},"核心目标",{"type":17,"tag":93,"props":610,"children":611},{},[612],{"type":31,"value":613},"专注于逻辑推理和知识表达",{"type":17,"tag":93,"props":615,"children":616},{},[617],{"type":31,"value":618},"专注于上下文感知和动态决策",{"type":17,"tag":71,"props":620,"children":621},{},[622,630,640],{"type":17,"tag":93,"props":623,"children":624},{},[625],{"type":17,"tag":97,"props":626,"children":627},{},[628],{"type":31,"value":629},"推理方式",{"type":17,"tag":93,"props":631,"children":632},{},[633,635],{"type":31,"value":634},"基于逻辑规则的推导，通常采用",{"type":17,"tag":97,"props":636,"children":637},{},[638],{"type":31,"value":639},"反向链式推理（Backward Chaining）",{"type":17,"tag":93,"props":641,"children":642},{},[643,645],{"type":31,"value":644},"基于规则动态检查，通常采用",{"type":17,"tag":97,"props":646,"children":647},{},[648],{"type":31,"value":649},"前向链式推理（Forward Chaining）",{"type":17,"tag":71,"props":651,"children":652},{},[653,661,666],{"type":17,"tag":93,"props":654,"children":655},{},[656],{"type":17,"tag":97,"props":657,"children":658},{},[659],{"type":31,"value":660},"规则与上下文",{"type":17,"tag":93,"props":662,"children":663},{},[664],{"type":31,"value":665},"静态知识库，规则基于固定的逻辑与事实",{"type":17,"tag":93,"props":667,"children":668},{},[669],{"type":31,"value":670},"动态数据驱动，规则依赖实时上下文和数据流",{"type":17,"tag":71,"props":672,"children":673},{},[674,682,687],{"type":17,"tag":93,"props":675,"children":676},{},[677],{"type":17,"tag":97,"props":678,"children":679},{},[680],{"type":31,"value":681},"表达方式",{"type":17,"tag":93,"props":683,"children":684},{},[685],{"type":31,"value":686},"接近自然语言的逻辑描述，强调“什么是正确”",{"type":17,"tag":93,"props":688,"children":689},{},[690],{"type":31,"value":691},"数据与规则分离，规则动态触发，强调“如何适应实时场景”",{"type":17,"tag":71,"props":693,"children":694},{},[695,703,708],{"type":17,"tag":93,"props":696,"children":697},{},[698],{"type":17,"tag":97,"props":699,"children":700},{},[701],{"type":31,"value":702},"适用场景",{"type":17,"tag":93,"props":704,"children":705},{},[706],{"type":31,"value":707},"知识推理、逻辑问题、专家系统（如关系推理、定理证明）",{"type":17,"tag":93,"props":709,"children":710},{},[711],{"type":31,"value":712},"动态场景（如物联网、实时决策支持系统、上下文驱动应用）",{"type":17,"tag":71,"props":714,"children":715},{},[716,724,729],{"type":17,"tag":93,"props":717,"children":718},{},[719],{"type":17,"tag":97,"props":720,"children":721},{},[722],{"type":31,"value":723},"推理透明性",{"type":17,"tag":93,"props":725,"children":726},{},[727],{"type":31,"value":728},"高度可解释性，直接展示推理过程",{"type":17,"tag":93,"props":730,"children":731},{},[732],{"type":31,"value":733},"推理过程嵌套在系统框架中，透明度较低",{"type":17,"tag":71,"props":735,"children":736},{},[737,745,750],{"type":17,"tag":93,"props":738,"children":739},{},[740],{"type":17,"tag":97,"props":741,"children":742},{},[743],{"type":31,"value":744},"灵活性",{"type":17,"tag":93,"props":746,"children":747},{},[748],{"type":31,"value":749},"规则明确但相对静态，适用于逻辑推导问题",{"type":17,"tag":93,"props":751,"children":752},{},[753],{"type":31,"value":754},"依赖实时上下文，动态调整规则，适合复杂系统的实时决策",{"type":17,"tag":71,"props":756,"children":757},{},[758,766,771],{"type":17,"tag":93,"props":759,"children":760},{},[761],{"type":17,"tag":97,"props":762,"children":763},{},[764],{"type":31,"value":765},"典型实现方式",{"type":17,"tag":93,"props":767,"children":768},{},[769],{"type":31,"value":770},"使用基于逻辑编程的语言（如 Prolog），定义规则和知识库",{"type":17,"tag":93,"props":772,"children":773},{},[774],{"type":31,"value":775},"作为动态系统架构的一部分，与上下文数据、事件和规则引擎结合",{"type":17,"tag":71,"props":777,"children":778},{},[779,787,792],{"type":17,"tag":93,"props":780,"children":781},{},[782],{"type":17,"tag":97,"props":783,"children":784},{},[785],{"type":31,"value":786},"推理复杂度",{"type":17,"tag":93,"props":788,"children":789},{},[790],{"type":31,"value":791},"强逻辑性，处理基于规则的严格逻辑推理",{"type":17,"tag":93,"props":793,"children":794},{},[795],{"type":31,"value":796},"更贴近实际应用，推理复杂度与上下文动态性直接相关",{"type":17,"tag":39,"props":798,"children":799},{},[800],{"type":31,"value":801},"我在这里思考了一个问题。假设通过 MCP 来进行推理，如果上下文、元数据都是错的，那么推理的结果也必然是错误的。那 Prolog 是否也会出现这样的错误呢？如果能自我纠错，那么这个能力绝对是非常厉害的特性。",{"type":31,"value":803},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":63,"props":805,"children":806},{},[807,836],{"type":17,"tag":67,"props":808,"children":809},{},[810],{"type":17,"tag":71,"props":811,"children":812},{},[813,821,829],{"type":17,"tag":75,"props":814,"children":815},{},[816],{"type":17,"tag":97,"props":817,"children":818},{},[819],{"type":31,"value":820},"情况",{"type":17,"tag":75,"props":822,"children":823},{},[824],{"type":17,"tag":97,"props":825,"children":826},{},[827],{"type":31,"value":828},"MCP",{"type":17,"tag":75,"props":830,"children":831},{},[832],{"type":17,"tag":97,"props":833,"children":834},{},[835],{"type":31,"value":36},{"type":17,"tag":86,"props":837,"children":838},{},[839,860,893,914],{"type":17,"tag":71,"props":840,"children":841},{},[842,850,855],{"type":17,"tag":93,"props":843,"children":844},{},[845],{"type":17,"tag":97,"props":846,"children":847},{},[848],{"type":31,"value":849},"输入数据正确",{"type":17,"tag":93,"props":851,"children":852},{},[853],{"type":31,"value":854},"能够做出动态决策，输出结果正确",{"type":17,"tag":93,"props":856,"children":857},{},[858],{"type":31,"value":859},"能够基于事实和规则做出推理，输出结果正确",{"type":17,"tag":71,"props":861,"children":862},{},[863,871,881],{"type":17,"tag":93,"props":864,"children":865},{},[866],{"type":17,"tag":97,"props":867,"children":868},{},[869],{"type":31,"value":870},"输入数据错误",{"type":17,"tag":93,"props":872,"children":873},{},[874,876],{"type":31,"value":875},"会基于错误数据推导，",{"type":17,"tag":97,"props":877,"children":878},{},[879],{"type":31,"value":880},"结果错误",{"type":17,"tag":93,"props":882,"children":883},{},[884,886,891],{"type":31,"value":885},"逻辑规则不匹配时可能",{"type":17,"tag":97,"props":887,"children":888},{},[889],{"type":31,"value":890},"无法推理",{"type":31,"value":892},"；如果推理完成，结果也可能错误",{"type":17,"tag":71,"props":894,"children":895},{},[896,904,909],{"type":17,"tag":93,"props":897,"children":898},{},[899],{"type":17,"tag":97,"props":900,"children":901},{},[902],{"type":31,"value":903},"推理灵活性",{"type":17,"tag":93,"props":905,"children":906},{},[907],{"type":31,"value":908},"高，实时适应动态场景",{"type":17,"tag":93,"props":910,"children":911},{},[912],{"type":31,"value":913},"低，更适合静态规则和逻辑推导",{"type":17,"tag":71,"props":915,"children":916},{},[917,925,930],{"type":17,"tag":93,"props":918,"children":919},{},[920],{"type":17,"tag":97,"props":921,"children":922},{},[923],{"type":31,"value":924},"错误的敏感性",{"type":17,"tag":93,"props":926,"children":927},{},[928],{"type":31,"value":929},"不敏感，直接使用错误数据作为基础，结果也随之错误",{"type":17,"tag":93,"props":931,"children":932},{},[933],{"type":31,"value":934},"更敏感，逻辑上无法匹配会导致推理终止",{"type":17,"tag":457,"props":936,"children":938},{"id":937},"推理引擎-3",[939],{"type":31,"value":940},"推理引擎 3",{"type":17,"tag":34,"props":942,"children":944},{":t":943},"推理引擎",[],{"type":17,"tag":39,"props":946,"children":947},{},[948,950,955],{"type":31,"value":949},"推理引擎(Inference engine) 也叫 “推理机”（中文维基百科是这样叫的）。",{"type":17,"tag":97,"props":951,"children":952},{},[953],{"type":31,"value":954},"它将逻辑规则应用于知识库以推断出新信息",{"type":31,"value":956},",推理引擎主要以两种模式之一工作：特殊规则或事实： 正向推理和反向推理 。",{"type":17,"tag":218,"props":958,"children":959},{},[960,970],{"type":17,"tag":179,"props":961,"children":962},{},[963,968],{"type":17,"tag":97,"props":964,"children":965},{},[966],{"type":31,"value":967},"正向推理",{"type":31,"value":969},": 从“今天下雨了”，想到“可能会堵车”，“需要带伞”，“地铁可能会拥挤”……从一个已知事实出发，推导出一系列可能的结论。",{"type":17,"tag":179,"props":971,"children":972},{},[973,978],{"type":17,"tag":97,"props":974,"children":975},{},[976],{"type":31,"value":977},"反向推理",{"type":31,"value":979},":从“我要准时到达公司”开始，想“我要避开堵车”，“那我需要提前出发”，“所以我需要了解天气情况”。从目标出发，倒推出一系列必要条件。",{"type":17,"tag":34,"props":981,"children":982},{"type":256,":t":967},[],{"type":17,"tag":39,"props":984,"children":985},{},[986,988,993,995],{"type":31,"value":987},"正向推理是一种数据驱动（data-driven）的推理方式。",{"type":17,"tag":97,"props":989,"children":990},{},[991],{"type":31,"value":992},"从已知的事实出发",{"type":31,"value":994},"，应用规则逐步推出新的事实，",{"type":17,"tag":97,"props":996,"children":997},{},[998],{"type":31,"value":999},"直到找到目标答案或不能再推出新事实为止。",{"type":17,"tag":39,"props":1001,"children":1002},{},[1003],{"type":31,"value":1004},"假设有一位侦探正在调查一桩案件：某人（嫌疑人）在某个时间段内是否参与了一起犯罪活动。",{"type":17,"tag":39,"props":1006,"children":1007},{},[1008],{"type":31,"value":1009},"侦探采取 “从已知线索出发，看能推断出什么” 的方法。(这是一种 数据驱动 的逻辑推理过程。)",{"type":17,"tag":39,"props":1011,"children":1012},{},[1013],{"type":31,"value":1014},"目标：要证明嫌疑人A是否在案发时间段内去了案发现场。",{"type":17,"tag":39,"props":1016,"children":1017},{},[1018,1023,1025],{"type":17,"tag":97,"props":1019,"children":1020},{},[1021],{"type":31,"value":1022},"(1) 侦探掌握的线索:",{"type":31,"value":1024}," ",{"type":17,"tag":227,"props":1026,"children":1027},{},[],{"type":17,"tag":175,"props":1029,"children":1030},{},[1031,1036,1041,1046],{"type":17,"tag":179,"props":1032,"children":1033},{},[1034],{"type":31,"value":1035},"嫌疑人A的鞋底有泥土。",{"type":17,"tag":179,"props":1037,"children":1038},{},[1039],{"type":31,"value":1040},"案发现场附近的地上有相同类型的泥土。",{"type":17,"tag":179,"props":1042,"children":1043},{},[1044],{"type":31,"value":1045},"嫌疑人A的手机定位显示，他曾在案发时间段靠近案发现场。",{"type":17,"tag":179,"props":1047,"children":1048},{},[1049],{"type":31,"value":1050},"有人看见嫌疑人A在案发现场附近出现。",{"type":17,"tag":39,"props":1052,"children":1053},{},[1054,1059,1060],{"type":17,"tag":97,"props":1055,"children":1056},{},[1057],{"type":31,"value":1058},"(2) 推理过程：",{"type":31,"value":1024},{"type":17,"tag":227,"props":1061,"children":1062},{},[],{"type":17,"tag":175,"props":1064,"children":1065},{},[1066,1071,1076],{"type":17,"tag":179,"props":1067,"children":1068},{},[1069],{"type":31,"value":1070},"嫌疑人鞋底有泥土，说明他可能去过案发现场附近。",{"type":17,"tag":179,"props":1072,"children":1073},{},[1074],{"type":31,"value":1075},"手机定位也确认了嫌疑人确实在案发时间段靠近案发现场。",{"type":17,"tag":179,"props":1077,"children":1078},{},[1079],{"type":31,"value":1080},"目击者证词进一步确认了嫌疑人在附近出现。",{"type":17,"tag":39,"props":1082,"children":1083},{},[1084,1089,1091,1096],{"type":17,"tag":97,"props":1085,"children":1086},{},[1087],{"type":31,"value":1088},"(3) 得出结论",{"type":31,"value":1090},"\n通过所有线索一步步推导，侦探得出 ",{"type":17,"tag":97,"props":1092,"children":1093},{},[1094],{"type":31,"value":1095},"“嫌疑人A极有可能在案发时间段出现在案发现场”",{"type":31,"value":1097}," 的结论。",{"type":17,"tag":457,"props":1099,"children":1101},{"id":1100},"反向推理-3",[1102],{"type":31,"value":1103},"反向推理 3",{"type":17,"tag":34,"props":1105,"children":1106},{"type":256,":t":977},[],{"type":17,"tag":39,"props":1108,"children":1109},{},[1110,1112,1117],{"type":31,"value":1111},"反向推理是一种目标驱动（goal-driven）的推理方式。",{"type":17,"tag":97,"props":1113,"children":1114},{},[1115],{"type":31,"value":1116},"从目标出发",{"type":31,"value":1118},"，寻找满足目标的前提条件，逐步回溯到已知的事实。",{"type":17,"tag":39,"props":1120,"children":1121},{},[1122,1124,1129],{"type":31,"value":1123},"这一次，侦探采取的是 ",{"type":17,"tag":97,"props":1125,"children":1126},{},[1127],{"type":31,"value":1128},"“从目标出发，验证其成立条件”",{"type":31,"value":1130}," 的方法。这是一种 目标驱动 的推理过程。",{"type":17,"tag":39,"props":1132,"children":1133},{},[1134],{"type":31,"value":1014},{"type":17,"tag":39,"props":1136,"children":1137},{},[1138],{"type":17,"tag":97,"props":1139,"children":1140},{},[1141],{"type":31,"value":1142},"(1) 如果嫌疑人去了案发现场，那么",{"type":17,"tag":175,"props":1144,"children":1145},{},[1146,1151,1156],{"type":17,"tag":179,"props":1147,"children":1148},{},[1149],{"type":31,"value":1150},"嫌疑人应该留下某种可以证明的痕迹，比如脚印或其他物证。",{"type":17,"tag":179,"props":1152,"children":1153},{},[1154],{"type":31,"value":1155},"嫌疑人的手机定位应该能显示他靠近案发现场。",{"type":17,"tag":179,"props":1157,"children":1158},{},[1159],{"type":31,"value":1160},"或者，有目击者看见他出现在案发现场。",{"type":17,"tag":39,"props":1162,"children":1163},{},[1164],{"type":17,"tag":97,"props":1165,"children":1166},{},[1167],{"type":31,"value":1168},"(2) 验证条件",{"type":17,"tag":175,"props":1170,"children":1171},{},[1172,1182,1192],{"type":17,"tag":179,"props":1173,"children":1174},{},[1175,1180],{"type":17,"tag":97,"props":1176,"children":1177},{},[1178],{"type":31,"value":1179},"验证1",{"type":31,"value":1181},"：侦探检查嫌疑人鞋底，发现有与案发现场泥土一致的痕迹（成立）。",{"type":17,"tag":179,"props":1183,"children":1184},{},[1185,1190],{"type":17,"tag":97,"props":1186,"children":1187},{},[1188],{"type":31,"value":1189},"验证2",{"type":31,"value":1191},"：侦探调取手机定位记录，发现嫌疑人在案发时间靠近案发现场（成立）。",{"type":17,"tag":179,"props":1193,"children":1194},{},[1195,1200],{"type":17,"tag":97,"props":1196,"children":1197},{},[1198],{"type":31,"value":1199},"验证3",{"type":31,"value":1201},"：侦探问询目击者，确认有人看到嫌疑人靠近案发现场（成立）。",{"type":17,"tag":39,"props":1203,"children":1204},{},[1205,1209,1211,1216],{"type":17,"tag":97,"props":1206,"children":1207},{},[1208],{"type":31,"value":1088},{"type":31,"value":1210},"\n所有条件都得到满足，侦探得出结论：",{"type":17,"tag":97,"props":1212,"children":1213},{},[1214],{"type":31,"value":1215},"“嫌疑人A确实出现在案发现场”",{"type":31,"value":1217},"。",{"type":17,"tag":39,"props":1219,"children":1220},{},[1221,1223,1229],{"type":31,"value":1222},"书中给了一个反向推理那些食物是咸的例子，",{"type":17,"tag":200,"props":1224,"children":1226},{"className":1225},[],[1227],{"type":31,"value":1228},"food_flavor(X, Y) 推导出满足 Y = savory 的 X",{"type":31,"value":173},{"type":17,"tag":195,"props":1231,"children":1233},{"code":1232},"food_type(velveeta, cheese).\nfood_type(ritz, cracker).\nfood_type(spam, meat).\nfood_type(sausage, meat).\nfood_type(jolt, soda).\nfood_type(twinkie, dessert).\n\nflavor(sweet, dessert).\nflavor(savory, meat).\nflavor(savory, cheese).\nflavor(sweet, soda).\n\nfood_flavor(X, Y) :- food_type(X, Z), flavor(Y, Z).\n\n---\n找到所有满足 food_type(X, Z) 的 X 和 Z。\n找到满足 flavor(savory, Z) 的 Z。\n两个条件的 Z 相交时，得出最终的 X。\n\n---\n\nfood_flavor(What, savory).\n\n---\n哪些食物（What）的味道是咸的（savory）？\n\nWhat = spam ;\nWhat = sausage ;\nfalse.\n",[1234],{"type":17,"tag":200,"props":1235,"children":1236},{"__ignoreMap":7},[1237],{"type":31,"value":1232},{"type":17,"tag":1239,"props":1240,"children":1241},"hr",{},[],{"type":17,"tag":45,"props":1243,"children":1245},{"id":1244},"递归-1",[1246],{"type":31,"value":1247},"递归 1",{"type":17,"tag":34,"props":1249,"children":1251},{":t":1250},"递归",[],{"type":17,"tag":39,"props":1253,"children":1254},{},[1255,1257,1262,1264,1269],{"type":31,"value":1256},"一看到「递归」，那么自然离不开 ",{"type":17,"tag":97,"props":1258,"children":1259},{},[1260],{"type":31,"value":1261},"数组、列表、遍历、字典、元组",{"type":31,"value":1263}," 这几个关键词。递归很擅长解决 ",{"type":17,"tag":97,"props":1265,"children":1266},{},[1267],{"type":31,"value":1268},"重复模式",{"type":31,"value":1270}," 的问题，使得递归在算法等相关方面成为了必备的方法。比如可以使用递归来完成一个乘积计算：",{"type":17,"tag":195,"props":1272,"children":1274},{"code":1273},"factorial(0, 1). % 基准情况：0! = 1\nfactorial(N, Result) :- \n    N > 0, \n    N1 is N - 1, \n    factorial(N1, SubResult), \n    Result is N * SubResult. % 递归步骤\n\n---\nfactorial(5, Result).\n5! = 5 × 4 × 3 × 2 × 1 = 120\n",[1275],{"type":17,"tag":200,"props":1276,"children":1277},{"__ignoreMap":7},[1278],{"type":31,"value":1273},{"type":17,"tag":227,"props":1280,"children":1281},{},[],{"type":17,"tag":1283,"props":1284,"children":1285},"text-tip",{},[1286],{"type":17,"tag":39,"props":1287,"children":1288},{},[1289,1291,1294],{"type":31,"value":1290},"在数学中，! 表示阶乘（Factorial）。一个正整数 n 的阶乘记为 n!，表示从 1 到 n 所有正整数的乘积 ",{"type":17,"tag":227,"props":1292,"children":1293},{},[],{"type":17,"tag":1295,"props":1296,"children":1300},"mjx-container",{"className":1297,"jax":1299},[1298],"MathJax","SVG",[1301],{"type":17,"tag":1302,"props":1303,"children":1310},"svg",{"style":1304,"xmlns":1305,"width":1306,"height":1307,"role":21,"focusable":496,"viewBox":1308,"xmlnsXLink":1309},"vertical-align: -0.566ex;","http://www.w3.org/2000/svg","35.236ex","2.262ex","0 -750 15574.2 1000","http://www.w3.org/1999/xlink",[1311,1366],{"type":17,"tag":1312,"props":1313,"children":1314},"defs",{},[1315,1321,1326,1331,1336,1341,1346,1351,1356,1361],{"type":17,"tag":1316,"props":1317,"children":1320},"path",{"id":1318,"d":1319},"MJX-1-TEX-I-1D45B","M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",[],{"type":17,"tag":1316,"props":1322,"children":1325},{"id":1323,"d":1324},"MJX-1-TEX-N-21","M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z",[],{"type":17,"tag":1316,"props":1327,"children":1330},{"id":1328,"d":1329},"MJX-1-TEX-N-3D","M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",[],{"type":17,"tag":1316,"props":1332,"children":1335},{"id":1333,"d":1334},"MJX-1-TEX-N-D7","M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",[],{"type":17,"tag":1316,"props":1337,"children":1340},{"id":1338,"d":1339},"MJX-1-TEX-N-28","M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",[],{"type":17,"tag":1316,"props":1342,"children":1345},{"id":1343,"d":1344},"MJX-1-TEX-N-2212","M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z",[],{"type":17,"tag":1316,"props":1347,"children":1350},{"id":1348,"d":1349},"MJX-1-TEX-N-31","M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",[],{"type":17,"tag":1316,"props":1352,"children":1355},{"id":1353,"d":1354},"MJX-1-TEX-N-29","M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",[],{"type":17,"tag":1316,"props":1357,"children":1360},{"id":1358,"d":1359},"MJX-1-TEX-N-32","M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",[],{"type":17,"tag":1316,"props":1362,"children":1365},{"id":1363,"d":1364},"MJX-1-TEX-N-22EF","M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z",[],{"type":17,"tag":1367,"props":1368,"children":1372},"g",{"stroke":1369,"fill":1369,"stroke-width":1370,"transform":1371},"currentColor","0","scale(1,-1)",[1373],{"type":17,"tag":1367,"props":1374,"children":1376},{"dataMmlNode":1375},"math",[1377,1387,1397,1406,1413,1422,1431,1438,1447,1457,1466,1473,1480,1487,1494,1503,1510,1517,1526,1533],{"type":17,"tag":1367,"props":1378,"children":1380},{"dataMmlNode":1379},"mi",[1381],{"type":17,"tag":1382,"props":1383,"children":1386},"use",{"dataC":1384,"xLinkHref":1385},"1D45B","#MJX-1-TEX-I-1D45B",[],{"type":17,"tag":1367,"props":1388,"children":1391},{"dataMmlNode":1389,"transform":1390},"mo","translate(600,0)",[1392],{"type":17,"tag":1382,"props":1393,"children":1396},{"dataC":1394,"xLinkHref":1395},"21","#MJX-1-TEX-N-21",[],{"type":17,"tag":1367,"props":1398,"children":1400},{"dataMmlNode":1389,"transform":1399},"translate(1155.8,0)",[1401],{"type":17,"tag":1382,"props":1402,"children":1405},{"dataC":1403,"xLinkHref":1404},"3D","#MJX-1-TEX-N-3D",[],{"type":17,"tag":1367,"props":1407,"children":1409},{"dataMmlNode":1379,"transform":1408},"translate(2211.6,0)",[1410],{"type":17,"tag":1382,"props":1411,"children":1412},{"dataC":1384,"xLinkHref":1385},[],{"type":17,"tag":1367,"props":1414,"children":1416},{"dataMmlNode":1389,"transform":1415},"translate(3033.8,0)",[1417],{"type":17,"tag":1382,"props":1418,"children":1421},{"dataC":1419,"xLinkHref":1420},"D7","#MJX-1-TEX-N-D7",[],{"type":17,"tag":1367,"props":1423,"children":1425},{"dataMmlNode":1389,"transform":1424},"translate(4034,0)",[1426],{"type":17,"tag":1382,"props":1427,"children":1430},{"dataC":1428,"xLinkHref":1429},"28","#MJX-1-TEX-N-28",[],{"type":17,"tag":1367,"props":1432,"children":1434},{"dataMmlNode":1379,"transform":1433},"translate(4423,0)",[1435],{"type":17,"tag":1382,"props":1436,"children":1437},{"dataC":1384,"xLinkHref":1385},[],{"type":17,"tag":1367,"props":1439,"children":1441},{"dataMmlNode":1389,"transform":1440},"translate(5245.2,0)",[1442],{"type":17,"tag":1382,"props":1443,"children":1446},{"dataC":1444,"xLinkHref":1445},"2212","#MJX-1-TEX-N-2212",[],{"type":17,"tag":1367,"props":1448,"children":1451},{"dataMmlNode":1449,"transform":1450},"mn","translate(6245.4,0)",[1452],{"type":17,"tag":1382,"props":1453,"children":1456},{"dataC":1454,"xLinkHref":1455},"31","#MJX-1-TEX-N-31",[],{"type":17,"tag":1367,"props":1458,"children":1460},{"dataMmlNode":1389,"transform":1459},"translate(6745.4,0)",[1461],{"type":17,"tag":1382,"props":1462,"children":1465},{"dataC":1463,"xLinkHref":1464},"29","#MJX-1-TEX-N-29",[],{"type":17,"tag":1367,"props":1467,"children":1469},{"dataMmlNode":1389,"transform":1468},"translate(7356.7,0)",[1470],{"type":17,"tag":1382,"props":1471,"children":1472},{"dataC":1419,"xLinkHref":1420},[],{"type":17,"tag":1367,"props":1474,"children":1476},{"dataMmlNode":1389,"transform":1475},"translate(8356.9,0)",[1477],{"type":17,"tag":1382,"props":1478,"children":1479},{"dataC":1428,"xLinkHref":1429},[],{"type":17,"tag":1367,"props":1481,"children":1483},{"dataMmlNode":1379,"transform":1482},"translate(8745.9,0)",[1484],{"type":17,"tag":1382,"props":1485,"children":1486},{"dataC":1384,"xLinkHref":1385},[],{"type":17,"tag":1367,"props":1488,"children":1490},{"dataMmlNode":1389,"transform":1489},"translate(9568.1,0)",[1491],{"type":17,"tag":1382,"props":1492,"children":1493},{"dataC":1444,"xLinkHref":1445},[],{"type":17,"tag":1367,"props":1495,"children":1497},{"dataMmlNode":1449,"transform":1496},"translate(10568.3,0)",[1498],{"type":17,"tag":1382,"props":1499,"children":1502},{"dataC":1500,"xLinkHref":1501},"32","#MJX-1-TEX-N-32",[],{"type":17,"tag":1367,"props":1504,"children":1506},{"dataMmlNode":1389,"transform":1505},"translate(11068.3,0)",[1507],{"type":17,"tag":1382,"props":1508,"children":1509},{"dataC":1463,"xLinkHref":1464},[],{"type":17,"tag":1367,"props":1511,"children":1513},{"dataMmlNode":1389,"transform":1512},"translate(11679.6,0)",[1514],{"type":17,"tag":1382,"props":1515,"children":1516},{"dataC":1419,"xLinkHref":1420},[],{"type":17,"tag":1367,"props":1518,"children":1520},{"dataMmlNode":1389,"transform":1519},"translate(12679.8,0)",[1521],{"type":17,"tag":1382,"props":1522,"children":1525},{"dataC":1523,"xLinkHref":1524},"22EF","#MJX-1-TEX-N-22EF",[],{"type":17,"tag":1367,"props":1527,"children":1529},{"dataMmlNode":1389,"transform":1528},"translate(14074,0)",[1530],{"type":17,"tag":1382,"props":1531,"children":1532},{"dataC":1419,"xLinkHref":1420},[],{"type":17,"tag":1367,"props":1534,"children":1536},{"dataMmlNode":1449,"transform":1535},"translate(15074.2,0)",[1537],{"type":17,"tag":1382,"props":1538,"children":1539},{"dataC":1454,"xLinkHref":1455},[],{"type":17,"tag":39,"props":1541,"children":1542},{},[1543,1545,1550,1552,1557],{"type":31,"value":1544},"在这个过程中，递归分为了 ",{"type":17,"tag":97,"props":1546,"children":1547},{},[1548],{"type":31,"value":1549},"向下递",{"type":31,"value":1551}," 和 ",{"type":17,"tag":97,"props":1553,"children":1554},{},[1555],{"type":31,"value":1556},"向上归",{"type":31,"value":1558}," 的两个阶段。",{"type":17,"tag":1295,"props":1560,"children":1562},{"className":1561,"jax":1299},[1298],[1563],{"type":17,"tag":1302,"props":1564,"children":1569},{"style":1565,"xmlns":1305,"width":1566,"height":1567,"role":21,"focusable":496,"viewBox":1568,"xmlnsXLink":1309},"vertical-align: -2.148ex;","43.724ex","5.428ex","0 -1449.5 19326 2399",[1570,1661],{"type":17,"tag":1312,"props":1571,"children":1572},{},[1573,1578,1583,1588,1593,1598,1603,1608,1613,1617,1621,1625,1629,1634,1638,1642,1647,1652,1656],{"type":17,"tag":1316,"props":1574,"children":1577},{"id":1575,"d":1576},"MJX-2-TEX-N-66","M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z",[],{"type":17,"tag":1316,"props":1579,"children":1582},{"id":1580,"d":1581},"MJX-2-TEX-N-61","M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z",[],{"type":17,"tag":1316,"props":1584,"children":1587},{"id":1585,"d":1586},"MJX-2-TEX-N-63","M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z",[],{"type":17,"tag":1316,"props":1589,"children":1592},{"id":1590,"d":1591},"MJX-2-TEX-N-74","M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z",[],{"type":17,"tag":1316,"props":1594,"children":1597},{"id":1595,"d":1596},"MJX-2-TEX-N-6F","M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z",[],{"type":17,"tag":1316,"props":1599,"children":1602},{"id":1600,"d":1601},"MJX-2-TEX-N-72","M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z",[],{"type":17,"tag":1316,"props":1604,"children":1607},{"id":1605,"d":1606},"MJX-2-TEX-N-69","M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z",[],{"type":17,"tag":1316,"props":1609,"children":1612},{"id":1610,"d":1611},"MJX-2-TEX-N-6C","M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z",[],{"type":17,"tag":1316,"props":1614,"children":1616},{"id":1615,"d":1339},"MJX-2-TEX-N-28",[],{"type":17,"tag":1316,"props":1618,"children":1620},{"id":1619,"d":1319},"MJX-2-TEX-I-1D45B",[],{"type":17,"tag":1316,"props":1622,"children":1624},{"id":1623,"d":1354},"MJX-2-TEX-N-29",[],{"type":17,"tag":1316,"props":1626,"children":1628},{"id":1627,"d":1329},"MJX-2-TEX-N-3D",[],{"type":17,"tag":1316,"props":1630,"children":1633},{"id":1631,"d":1632},"MJX-2-TEX-S3-7B","M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z",[],{"type":17,"tag":1316,"props":1635,"children":1637},{"id":1636,"d":1349},"MJX-2-TEX-N-31",[],{"type":17,"tag":1316,"props":1639,"children":1641},{"id":1640,"d":7},"MJX-2-TEX-N-A0",[],{"type":17,"tag":1316,"props":1643,"children":1646},{"id":1644,"d":1645},"MJX-2-TEX-N-30","M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z",[],{"type":17,"tag":1316,"props":1648,"children":1651},{"id":1649,"d":1650},"MJX-2-TEX-N-22C5","M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z",[],{"type":17,"tag":1316,"props":1653,"children":1655},{"id":1654,"d":1344},"MJX-2-TEX-N-2212",[],{"type":17,"tag":1316,"props":1657,"children":1660},{"id":1658,"d":1659},"MJX-2-TEX-N-3E","M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z",[],{"type":17,"tag":1367,"props":1662,"children":1663},{"stroke":1369,"fill":1369,"stroke-width":1370,"transform":1371},[1664],{"type":17,"tag":1367,"props":1665,"children":1666},{"dataMmlNode":1375},[1667,1722,1730,1738,1746,1754],{"type":17,"tag":1367,"props":1668,"children":1670},{"dataMmlNode":1669},"mtext",[1671,1676,1682,1688,1694,1700,1706,1712,1716],{"type":17,"tag":1382,"props":1672,"children":1675},{"dataC":1673,"xLinkHref":1674},"66","#MJX-2-TEX-N-66",[],{"type":17,"tag":1382,"props":1677,"children":1681},{"dataC":1678,"xLinkHref":1679,"transform":1680},"61","#MJX-2-TEX-N-61","translate(306,0)",[],{"type":17,"tag":1382,"props":1683,"children":1687},{"dataC":1684,"xLinkHref":1685,"transform":1686},"63","#MJX-2-TEX-N-63","translate(806,0)",[],{"type":17,"tag":1382,"props":1689,"children":1693},{"dataC":1690,"xLinkHref":1691,"transform":1692},"74","#MJX-2-TEX-N-74","translate(1250,0)",[],{"type":17,"tag":1382,"props":1695,"children":1699},{"dataC":1696,"xLinkHref":1697,"transform":1698},"6F","#MJX-2-TEX-N-6F","translate(1639,0)",[],{"type":17,"tag":1382,"props":1701,"children":1705},{"dataC":1702,"xLinkHref":1703,"transform":1704},"72","#MJX-2-TEX-N-72","translate(2139,0)",[],{"type":17,"tag":1382,"props":1707,"children":1711},{"dataC":1708,"xLinkHref":1709,"transform":1710},"69","#MJX-2-TEX-N-69","translate(2531,0)",[],{"type":17,"tag":1382,"props":1713,"children":1715},{"dataC":1678,"xLinkHref":1679,"transform":1714},"translate(2809,0)",[],{"type":17,"tag":1382,"props":1717,"children":1721},{"dataC":1718,"xLinkHref":1719,"transform":1720},"6C","#MJX-2-TEX-N-6C","translate(3309,0)",[],{"type":17,"tag":1367,"props":1723,"children":1725},{"dataMmlNode":1389,"transform":1724},"translate(3587,0)",[1726],{"type":17,"tag":1382,"props":1727,"children":1729},{"dataC":1428,"xLinkHref":1728},"#MJX-2-TEX-N-28",[],{"type":17,"tag":1367,"props":1731,"children":1733},{"dataMmlNode":1379,"transform":1732},"translate(3976,0)",[1734],{"type":17,"tag":1382,"props":1735,"children":1737},{"dataC":1384,"xLinkHref":1736},"#MJX-2-TEX-I-1D45B",[],{"type":17,"tag":1367,"props":1739,"children":1741},{"dataMmlNode":1389,"transform":1740},"translate(4576,0)",[1742],{"type":17,"tag":1382,"props":1743,"children":1745},{"dataC":1463,"xLinkHref":1744},"#MJX-2-TEX-N-29",[],{"type":17,"tag":1367,"props":1747,"children":1749},{"dataMmlNode":1389,"transform":1748},"translate(5242.8,0)",[1750],{"type":17,"tag":1382,"props":1751,"children":1753},{"dataC":1403,"xLinkHref":1752},"#MJX-2-TEX-N-3D",[],{"type":17,"tag":1367,"props":1755,"children":1758},{"dataMmlNode":1756,"transform":1757},"mrow","translate(6298.6,0)",[1759,1768,1956],{"type":17,"tag":1367,"props":1760,"children":1762},{"dataMmlNode":1389,"transform":1761},"translate(0 -0.5)",[1763],{"type":17,"tag":1382,"props":1764,"children":1767},{"dataC":1765,"xLinkHref":1766},"7B","#MJX-2-TEX-S3-7B",[],{"type":17,"tag":1367,"props":1769,"children":1772},{"dataMmlNode":1770,"transform":1771},"mtable","translate(750,0)",[1773,1832],{"type":17,"tag":1367,"props":1774,"children":1777},{"dataMmlNode":1775,"transform":1776},"mtr","translate(0,600)",[1778,1789],{"type":17,"tag":1367,"props":1779,"children":1781},{"dataMmlNode":1780},"mtd",[1782],{"type":17,"tag":1367,"props":1783,"children":1784},{"dataMmlNode":1449},[1785],{"type":17,"tag":1382,"props":1786,"children":1788},{"dataC":1454,"xLinkHref":1787},"#MJX-2-TEX-N-31",[],{"type":17,"tag":1367,"props":1790,"children":1792},{"dataMmlNode":1780,"transform":1791},"translate(9009.9,0)",[1793,1809,1816,1823],{"type":17,"tag":1367,"props":1794,"children":1795},{"dataMmlNode":1669},[1796,1799,1803],{"type":17,"tag":1382,"props":1797,"children":1798},{"dataC":1708,"xLinkHref":1709},[],{"type":17,"tag":1382,"props":1800,"children":1802},{"dataC":1673,"xLinkHref":1674,"transform":1801},"translate(278,0)",[],{"type":17,"tag":1382,"props":1804,"children":1808},{"dataC":1805,"xLinkHref":1806,"transform":1807},"A0","#MJX-2-TEX-N-A0","translate(584,0)",[],{"type":17,"tag":1367,"props":1810,"children":1812},{"dataMmlNode":1379,"transform":1811},"translate(834,0)",[1813],{"type":17,"tag":1382,"props":1814,"children":1815},{"dataC":1384,"xLinkHref":1736},[],{"type":17,"tag":1367,"props":1817,"children":1819},{"dataMmlNode":1389,"transform":1818},"translate(1711.8,0)",[1820],{"type":17,"tag":1382,"props":1821,"children":1822},{"dataC":1403,"xLinkHref":1752},[],{"type":17,"tag":1367,"props":1824,"children":1826},{"dataMmlNode":1449,"transform":1825},"translate(2767.6,0)",[1827],{"type":17,"tag":1382,"props":1828,"children":1831},{"dataC":1829,"xLinkHref":1830},"30","#MJX-2-TEX-N-30",[],{"type":17,"tag":1367,"props":1833,"children":1835},{"dataMmlNode":1775,"transform":1834},"translate(0,-600)",[1836,1921],{"type":17,"tag":1367,"props":1837,"children":1838},{"dataMmlNode":1780},[1839,1845,1854,1885,1892,1899,1907,1914],{"type":17,"tag":1367,"props":1840,"children":1841},{"dataMmlNode":1379},[1842],{"type":17,"tag":1382,"props":1843,"children":1844},{"dataC":1384,"xLinkHref":1736},[],{"type":17,"tag":1367,"props":1846,"children":1848},{"dataMmlNode":1389,"transform":1847},"translate(822.2,0)",[1849],{"type":17,"tag":1382,"props":1850,"children":1853},{"dataC":1851,"xLinkHref":1852},"22C5","#MJX-2-TEX-N-22C5",[],{"type":17,"tag":1367,"props":1855,"children":1857},{"dataMmlNode":1669,"transform":1856},"translate(1322.4,0)",[1858,1861,1864,1867,1870,1873,1876,1879,1882],{"type":17,"tag":1382,"props":1859,"children":1860},{"dataC":1673,"xLinkHref":1674},[],{"type":17,"tag":1382,"props":1862,"children":1863},{"dataC":1678,"xLinkHref":1679,"transform":1680},[],{"type":17,"tag":1382,"props":1865,"children":1866},{"dataC":1684,"xLinkHref":1685,"transform":1686},[],{"type":17,"tag":1382,"props":1868,"children":1869},{"dataC":1690,"xLinkHref":1691,"transform":1692},[],{"type":17,"tag":1382,"props":1871,"children":1872},{"dataC":1696,"xLinkHref":1697,"transform":1698},[],{"type":17,"tag":1382,"props":1874,"children":1875},{"dataC":1702,"xLinkHref":1703,"transform":1704},[],{"type":17,"tag":1382,"props":1877,"children":1878},{"dataC":1708,"xLinkHref":1709,"transform":1710},[],{"type":17,"tag":1382,"props":1880,"children":1881},{"dataC":1678,"xLinkHref":1679,"transform":1714},[],{"type":17,"tag":1382,"props":1883,"children":1884},{"dataC":1718,"xLinkHref":1719,"transform":1720},[],{"type":17,"tag":1367,"props":1886,"children":1888},{"dataMmlNode":1389,"transform":1887},"translate(4909.4,0)",[1889],{"type":17,"tag":1382,"props":1890,"children":1891},{"dataC":1428,"xLinkHref":1728},[],{"type":17,"tag":1367,"props":1893,"children":1895},{"dataMmlNode":1379,"transform":1894},"translate(5298.4,0)",[1896],{"type":17,"tag":1382,"props":1897,"children":1898},{"dataC":1384,"xLinkHref":1736},[],{"type":17,"tag":1367,"props":1900,"children":1902},{"dataMmlNode":1389,"transform":1901},"translate(6120.7,0)",[1903],{"type":17,"tag":1382,"props":1904,"children":1906},{"dataC":1444,"xLinkHref":1905},"#MJX-2-TEX-N-2212",[],{"type":17,"tag":1367,"props":1908,"children":1910},{"dataMmlNode":1449,"transform":1909},"translate(7120.9,0)",[1911],{"type":17,"tag":1382,"props":1912,"children":1913},{"dataC":1454,"xLinkHref":1787},[],{"type":17,"tag":1367,"props":1915,"children":1917},{"dataMmlNode":1389,"transform":1916},"translate(7620.9,0)",[1918],{"type":17,"tag":1382,"props":1919,"children":1920},{"dataC":1463,"xLinkHref":1744},[],{"type":17,"tag":1367,"props":1922,"children":1923},{"dataMmlNode":1780,"transform":1791},[1924,1936,1942,1950],{"type":17,"tag":1367,"props":1925,"children":1926},{"dataMmlNode":1669},[1927,1930,1933],{"type":17,"tag":1382,"props":1928,"children":1929},{"dataC":1708,"xLinkHref":1709},[],{"type":17,"tag":1382,"props":1931,"children":1932},{"dataC":1673,"xLinkHref":1674,"transform":1801},[],{"type":17,"tag":1382,"props":1934,"children":1935},{"dataC":1805,"xLinkHref":1806,"transform":1807},[],{"type":17,"tag":1367,"props":1937,"children":1938},{"dataMmlNode":1379,"transform":1811},[1939],{"type":17,"tag":1382,"props":1940,"children":1941},{"dataC":1384,"xLinkHref":1736},[],{"type":17,"tag":1367,"props":1943,"children":1944},{"dataMmlNode":1389,"transform":1818},[1945],{"type":17,"tag":1382,"props":1946,"children":1949},{"dataC":1947,"xLinkHref":1948},"3E","#MJX-2-TEX-N-3E",[],{"type":17,"tag":1367,"props":1951,"children":1952},{"dataMmlNode":1449,"transform":1825},[1953],{"type":17,"tag":1382,"props":1954,"children":1955},{"dataC":1829,"xLinkHref":1830},[],{"type":17,"tag":1367,"props":1957,"children":1959},{"dataMmlNode":1389,"transform":1958},"translate(13027.4,0) translate(0 250)",[],{"type":17,"tag":39,"props":1961,"children":1962},{},[1963,1965,2240,2242,2247,2249,2255,2257,2262,2264],{"type":31,"value":1964},"这是函数逐步调用的展开过程, 最后通过 ",{"type":17,"tag":1295,"props":1966,"children":1968},{"className":1967,"jax":1299},[1298],[1969],{"type":17,"tag":1302,"props":1970,"children":1973},{"style":1304,"xmlns":1305,"width":1971,"height":1307,"role":21,"focusable":496,"viewBox":1972,"xmlnsXLink":1309},"39.958ex","0 -750 17661.2 1000",[1974,2045],{"type":17,"tag":1312,"props":1975,"children":1976},{},[1977,1981,1985,1989,1993,1997,2001,2005,2009,2013,2017,2021,2025,2029,2033,2037,2041],{"type":17,"tag":1316,"props":1978,"children":1980},{"id":1979,"d":1576},"MJX-3-TEX-N-66",[],{"type":17,"tag":1316,"props":1982,"children":1984},{"id":1983,"d":1581},"MJX-3-TEX-N-61",[],{"type":17,"tag":1316,"props":1986,"children":1988},{"id":1987,"d":1586},"MJX-3-TEX-N-63",[],{"type":17,"tag":1316,"props":1990,"children":1992},{"id":1991,"d":1591},"MJX-3-TEX-N-74",[],{"type":17,"tag":1316,"props":1994,"children":1996},{"id":1995,"d":1596},"MJX-3-TEX-N-6F",[],{"type":17,"tag":1316,"props":1998,"children":2000},{"id":1999,"d":1601},"MJX-3-TEX-N-72",[],{"type":17,"tag":1316,"props":2002,"children":2004},{"id":2003,"d":1606},"MJX-3-TEX-N-69",[],{"type":17,"tag":1316,"props":2006,"children":2008},{"id":2007,"d":1611},"MJX-3-TEX-N-6C",[],{"type":17,"tag":1316,"props":2010,"children":2012},{"id":2011,"d":1339},"MJX-3-TEX-N-28",[],{"type":17,"tag":1316,"props":2014,"children":2016},{"id":2015,"d":1319},"MJX-3-TEX-I-1D45B",[],{"type":17,"tag":1316,"props":2018,"children":2020},{"id":2019,"d":1354},"MJX-3-TEX-N-29",[],{"type":17,"tag":1316,"props":2022,"children":2024},{"id":2023,"d":1329},"MJX-3-TEX-N-3D",[],{"type":17,"tag":1316,"props":2026,"children":2028},{"id":2027,"d":1650},"MJX-3-TEX-N-22C5",[],{"type":17,"tag":1316,"props":2030,"children":2032},{"id":2031,"d":1344},"MJX-3-TEX-N-2212",[],{"type":17,"tag":1316,"props":2034,"children":2036},{"id":2035,"d":1349},"MJX-3-TEX-N-31",[],{"type":17,"tag":1316,"props":2038,"children":2040},{"id":2039,"d":1359},"MJX-3-TEX-N-32",[],{"type":17,"tag":1316,"props":2042,"children":2044},{"id":2043,"d":1364},"MJX-3-TEX-N-22EF",[],{"type":17,"tag":1367,"props":2046,"children":2047},{"stroke":1369,"fill":1369,"stroke-width":1370,"transform":1371},[2048],{"type":17,"tag":1367,"props":2049,"children":2050},{"dataMmlNode":1375},[2051,2089,2096,2103,2110,2117,2123,2131,2138,2145,2153,2161,2168,2175,2182,2189,2196,2204,2211,2218,2226,2233],{"type":17,"tag":1367,"props":2052,"children":2053},{"dataMmlNode":1669},[2054,2058,2062,2066,2070,2074,2078,2082,2085],{"type":17,"tag":1382,"props":2055,"children":2057},{"dataC":1673,"xLinkHref":2056},"#MJX-3-TEX-N-66",[],{"type":17,"tag":1382,"props":2059,"children":2061},{"dataC":1678,"xLinkHref":2060,"transform":1680},"#MJX-3-TEX-N-61",[],{"type":17,"tag":1382,"props":2063,"children":2065},{"dataC":1684,"xLinkHref":2064,"transform":1686},"#MJX-3-TEX-N-63",[],{"type":17,"tag":1382,"props":2067,"children":2069},{"dataC":1690,"xLinkHref":2068,"transform":1692},"#MJX-3-TEX-N-74",[],{"type":17,"tag":1382,"props":2071,"children":2073},{"dataC":1696,"xLinkHref":2072,"transform":1698},"#MJX-3-TEX-N-6F",[],{"type":17,"tag":1382,"props":2075,"children":2077},{"dataC":1702,"xLinkHref":2076,"transform":1704},"#MJX-3-TEX-N-72",[],{"type":17,"tag":1382,"props":2079,"children":2081},{"dataC":1708,"xLinkHref":2080,"transform":1710},"#MJX-3-TEX-N-69",[],{"type":17,"tag":1382,"props":2083,"children":2084},{"dataC":1678,"xLinkHref":2060,"transform":1714},[],{"type":17,"tag":1382,"props":2086,"children":2088},{"dataC":1718,"xLinkHref":2087,"transform":1720},"#MJX-3-TEX-N-6C",[],{"type":17,"tag":1367,"props":2090,"children":2091},{"dataMmlNode":1389,"transform":1724},[2092],{"type":17,"tag":1382,"props":2093,"children":2095},{"dataC":1428,"xLinkHref":2094},"#MJX-3-TEX-N-28",[],{"type":17,"tag":1367,"props":2097,"children":2098},{"dataMmlNode":1379,"transform":1732},[2099],{"type":17,"tag":1382,"props":2100,"children":2102},{"dataC":1384,"xLinkHref":2101},"#MJX-3-TEX-I-1D45B",[],{"type":17,"tag":1367,"props":2104,"children":2105},{"dataMmlNode":1389,"transform":1740},[2106],{"type":17,"tag":1382,"props":2107,"children":2109},{"dataC":1463,"xLinkHref":2108},"#MJX-3-TEX-N-29",[],{"type":17,"tag":1367,"props":2111,"children":2112},{"dataMmlNode":1389,"transform":1748},[2113],{"type":17,"tag":1382,"props":2114,"children":2116},{"dataC":1403,"xLinkHref":2115},"#MJX-3-TEX-N-3D",[],{"type":17,"tag":1367,"props":2118,"children":2119},{"dataMmlNode":1379,"transform":1757},[2120],{"type":17,"tag":1382,"props":2121,"children":2122},{"dataC":1384,"xLinkHref":2101},[],{"type":17,"tag":1367,"props":2124,"children":2126},{"dataMmlNode":1389,"transform":2125},"translate(7120.8,0)",[2127],{"type":17,"tag":1382,"props":2128,"children":2130},{"dataC":1851,"xLinkHref":2129},"#MJX-3-TEX-N-22C5",[],{"type":17,"tag":1367,"props":2132,"children":2134},{"dataMmlNode":1389,"transform":2133},"translate(7621,0)",[2135],{"type":17,"tag":1382,"props":2136,"children":2137},{"dataC":1428,"xLinkHref":2094},[],{"type":17,"tag":1367,"props":2139,"children":2141},{"dataMmlNode":1379,"transform":2140},"translate(8010,0)",[2142],{"type":17,"tag":1382,"props":2143,"children":2144},{"dataC":1384,"xLinkHref":2101},[],{"type":17,"tag":1367,"props":2146,"children":2148},{"dataMmlNode":1389,"transform":2147},"translate(8832.2,0)",[2149],{"type":17,"tag":1382,"props":2150,"children":2152},{"dataC":1444,"xLinkHref":2151},"#MJX-3-TEX-N-2212",[],{"type":17,"tag":1367,"props":2154,"children":2156},{"dataMmlNode":1449,"transform":2155},"translate(9832.4,0)",[2157],{"type":17,"tag":1382,"props":2158,"children":2160},{"dataC":1454,"xLinkHref":2159},"#MJX-3-TEX-N-31",[],{"type":17,"tag":1367,"props":2162,"children":2164},{"dataMmlNode":1389,"transform":2163},"translate(10332.4,0)",[2165],{"type":17,"tag":1382,"props":2166,"children":2167},{"dataC":1463,"xLinkHref":2108},[],{"type":17,"tag":1367,"props":2169,"children":2171},{"dataMmlNode":1389,"transform":2170},"translate(10943.7,0)",[2172],{"type":17,"tag":1382,"props":2173,"children":2174},{"dataC":1851,"xLinkHref":2129},[],{"type":17,"tag":1367,"props":2176,"children":2178},{"dataMmlNode":1389,"transform":2177},"translate(11443.9,0)",[2179],{"type":17,"tag":1382,"props":2180,"children":2181},{"dataC":1428,"xLinkHref":2094},[],{"type":17,"tag":1367,"props":2183,"children":2185},{"dataMmlNode":1379,"transform":2184},"translate(11832.9,0)",[2186],{"type":17,"tag":1382,"props":2187,"children":2188},{"dataC":1384,"xLinkHref":2101},[],{"type":17,"tag":1367,"props":2190,"children":2192},{"dataMmlNode":1389,"transform":2191},"translate(12655.1,0)",[2193],{"type":17,"tag":1382,"props":2194,"children":2195},{"dataC":1444,"xLinkHref":2151},[],{"type":17,"tag":1367,"props":2197,"children":2199},{"dataMmlNode":1449,"transform":2198},"translate(13655.3,0)",[2200],{"type":17,"tag":1382,"props":2201,"children":2203},{"dataC":1500,"xLinkHref":2202},"#MJX-3-TEX-N-32",[],{"type":17,"tag":1367,"props":2205,"children":2207},{"dataMmlNode":1389,"transform":2206},"translate(14155.3,0)",[2208],{"type":17,"tag":1382,"props":2209,"children":2210},{"dataC":1463,"xLinkHref":2108},[],{"type":17,"tag":1367,"props":2212,"children":2214},{"dataMmlNode":1389,"transform":2213},"translate(14766.6,0)",[2215],{"type":17,"tag":1382,"props":2216,"children":2217},{"dataC":1851,"xLinkHref":2129},[],{"type":17,"tag":1367,"props":2219,"children":2221},{"dataMmlNode":1389,"transform":2220},"translate(15266.8,0)",[2222],{"type":17,"tag":1382,"props":2223,"children":2225},{"dataC":1523,"xLinkHref":2224},"#MJX-3-TEX-N-22EF",[],{"type":17,"tag":1367,"props":2227,"children":2229},{"dataMmlNode":1389,"transform":2228},"translate(16661,0)",[2230],{"type":17,"tag":1382,"props":2231,"children":2232},{"dataC":1851,"xLinkHref":2129},[],{"type":17,"tag":1367,"props":2234,"children":2236},{"dataMmlNode":1449,"transform":2235},"translate(17161.2,0)",[2237],{"type":17,"tag":1382,"props":2238,"children":2239},{"dataC":1454,"xLinkHref":2159},[],{"type":31,"value":2241}," 从基准情况开始 ",{"type":17,"tag":97,"props":2243,"children":2244},{},[2245],{"type":31,"value":2246},"逐步向上计算结果，将子问题的解组合成最终解。",{"type":31,"value":2248}," 他对应了 ",{"type":17,"tag":200,"props":2250,"children":2252},{"className":2251},[],[2253],{"type":31,"value":2254},"Result is N * SubResult.",{"type":31,"value":2256}," 这一部分，在 ",{"type":17,"tag":97,"props":2258,"children":2259},{},[2260],{"type":31,"value":2261},"结果返回时",{"type":31,"value":2263}," 调用。",{"type":17,"tag":97,"props":2265,"children":2266},{},[2267],{"type":31,"value":2268},"将子问题的结果（SubResult）与当前层的值（N）相乘，逐层合并结果。",{"type":17,"tag":39,"props":2270,"children":2271},{},[2272,2274,2279,2281,2286],{"type":31,"value":2273},"之后，更多的是数据结构的范畴。通过递归和不同数据结构的搭配，以解决复杂的问题。这个过程称之为 ",{"type":17,"tag":97,"props":2275,"children":2276},{},[2277],{"type":31,"value":2278},"算法",{"type":31,"value":2280},"，而数据结构的魅力在于，",{"type":17,"tag":97,"props":2282,"children":2283},{},[2284],{"type":31,"value":2285},"组织和管理数据",{"type":31,"value":1217},{"type":17,"tag":39,"props":2288,"children":2289},{},[2290,2292,2297],{"type":31,"value":2291},"我打算看完这本书后，会看一些数据结构类的书籍。之前我认为数据结构就是存储、组织数据的方式。现在我觉得数据结构是语言的基础，和功能、性能息息相关，语言操控着数据如何利用，例如 ",{"type":17,"tag":97,"props":2293,"children":2294},{},[2295],{"type":31,"value":2296},"存储、修改、遍历、删除",{"type":31,"value":2298},"，以实现各类效果和功能。",{"type":17,"tag":457,"props":2300,"children":2302},{"id":2301},"不仅是连接-2",[2303],{"type":31,"value":2304},"不仅是连接 2",{"type":17,"tag":34,"props":2306,"children":2308},{"type":256,":t":2307},"不仅是连接",[],{"type":17,"tag":39,"props":2310,"children":2311},{},[2312,2314,2320],{"type":31,"value":2313},"在我了解 ",{"type":17,"tag":200,"props":2315,"children":2317},{"className":2316},[],[2318],{"type":31,"value":2319},"append",{"type":31,"value":2321}," 的时候。我只是单纯的认为他就是普通的连接数据，比如连接数组之类的，然后连接起来输出、还可以拆分。感觉没什么特别重要的，很不解为什么作者将它加入到本章节中。",{"type":17,"tag":195,"props":2323,"children":2325},{"code":2324},"?-append([1, 2], [3, 4], What).\n---\nWhat = [1, 2, 3, 4].\n\n?-append(Part1, Part2, [1, 2, 3, 4]).\n---\nPart1 = [],\nPart2 = [1, 2, 3, 4] ;\nPart1 = [1],\nPart2 = [2, 3, 4] ;\nPart1 = [1, 2],\nPart2 = [3, 4] ;\n",[2326],{"type":17,"tag":200,"props":2327,"children":2328},{"__ignoreMap":7},[2329],{"type":31,"value":2324},{"type":17,"tag":39,"props":2331,"children":2332},{},[2333,2335,2340],{"type":31,"value":2334},"后来，我可能觉得这是递归的经典应用之一。它展示了通过简单规则，递归地",{"type":17,"tag":97,"props":2336,"children":2337},{},[2338],{"type":31,"value":2339},"将复杂问题分解成小问题的过程",{"type":31,"value":2341},", 例如可以应用于：",{"type":17,"tag":218,"props":2343,"children":2344},{},[2345,2350],{"type":17,"tag":179,"props":2346,"children":2347},{},[2348],{"type":31,"value":2349},"分治法：将一个大问题拆分成多个小问题（例如合并排序）",{"type":17,"tag":179,"props":2351,"children":2352},{},[2353],{"type":31,"value":2354},"树和图的遍历：通过递归规则遍历复杂数据结构。",{"type":17,"tag":457,"props":2356,"children":2358},{"id":2357},"数据结构不仅是结构-1",[2359],{"type":31,"value":2360},"数据结构不仅是结构 1",{"type":17,"tag":34,"props":2362,"children":2364},{"type":256,":t":2363},"数据结构不仅是数据结构",[],{"type":17,"tag":39,"props":2366,"children":2367},{},[2368,2370,2377,2379,2384,2386,2391],{"type":31,"value":2369},"在此之前，我一直认为数据结构仅仅是存储数据的一种方法。但之后和 ",{"type":17,"tag":145,"props":2371,"children":2374},{"href":2372,"rel":2373},"https://dragove.site/",[149],[2375],{"type":31,"value":2376},"dragove",{"type":31,"value":2378}," 聊天后才意识到，数据的结构决定了如何 ",{"type":17,"tag":97,"props":2380,"children":2381},{},[2382],{"type":31,"value":2383},"操作数据",{"type":31,"value":2385}," 以及 ",{"type":17,"tag":97,"props":2387,"children":2388},{},[2389],{"type":31,"value":2390},"使用数据的方式",{"type":31,"value":2392},"，以及用什么样的写法，才能方便的操纵、使用这些数据。",{"type":17,"tag":195,"props":2394,"children":2396},{"code":2395},"class Cons {\n  constructor(h, t) {\n    this.h = h\n    this.t = t\n  }\n  toString() {\n    function iter(that) {\n      if (that.t == null) return that.h\n      return that.h + \", \" + iter(that.t)\n    }\n    return \"[\" + iter(this) + \"]\"\n  }\n\n  // 通过递归的方式遍历链表，并将一个函数 f 应用到每一个元素上，生成一个新的链表。\n  map(f) {\n    if (this.t == null) return new Cons(f(this.h), null)\n    return new Cons(f(this.h), this.t.map(f))\n  }\n\n  //  通过循环遍历整个链表，直接修改每个元素。\n  // 展示了操作数据的不同策略：递归与迭代。\n  map2(f) {\n    let it = this\n    while (it != null) {\n      it.h = f(it.h)\n      it = it.t\n    }\n  }\n}\n\nconst cons = (h, t) => new Cons(h, t)\nconst list = (...args) => {\n  if (args.length == 0) return null\n  return cons(args[0], list(...args.slice(1)))\n}\n\nconst c = list(2, 3, 4, 5, 6)\nconsole.log(list(2, 5, 8).map(x => x * 2).toString())\nc.map2(x => x + 8)\nconsole.log(c.toString())\n",[2397],{"type":17,"tag":200,"props":2398,"children":2399},{"__ignoreMap":7},[2400],{"type":31,"value":2395},{"type":17,"tag":39,"props":2402,"children":2403},{},[2404,2406,2411,2413,2419,2420,2426],{"type":31,"value":2405},"在这几十行 code 中，不仅实现了 ",{"type":17,"tag":97,"props":2407,"children":2408},{},[2409],{"type":31,"value":2410},"链表",{"type":31,"value":2412}," 结构，同时还定义了 ",{"type":17,"tag":200,"props":2414,"children":2416},{"className":2415},[],[2417],{"type":31,"value":2418},"map",{"type":31,"value":1551},{"type":17,"tag":200,"props":2421,"children":2423},{"className":2422},[],[2424],{"type":31,"value":2425},"map2",{"type":31,"value":2427}," 方法来操控这些数据。",{"type":17,"tag":1239,"props":2429,"children":2430},{},[],{"type":17,"tag":45,"props":2432,"children":2434},{"id":2433},"逻辑谜题-3",[2435],{"type":31,"value":2436},"逻辑谜题 3",{"type":17,"tag":34,"props":2438,"children":2440},{":t":2439},"逻辑谜题",[],{"type":17,"tag":227,"props":2442,"children":2443},{},[],{"type":17,"tag":1283,"props":2445,"children":2447},{":type":2446},"big",[2448],{"type":17,"tag":39,"props":2449,"children":2450},{},[2451],{"type":31,"value":2452},"不写“怎么做”，要写“什么是对的”。",{"type":17,"tag":39,"props":2454,"children":2455},{},[2456,2463,2464,2471,2473,2478],{"type":17,"tag":145,"props":2457,"children":2460},{"href":2458,"rel":2459},"https://en.wikipedia.org/wiki/Sudoku",[149],[2461],{"type":31,"value":2462},"数独（Sudoku）",{"type":31,"value":1551},{"type":17,"tag":145,"props":2465,"children":2468},{"href":2466,"rel":2467},"https://en.wikipedia.org/wiki/Eight_queens_puzzle",[149],[2469],{"type":31,"value":2470},"八皇后问题（Eight Queens）",{"type":31,"value":2472}," 是一个经典的逻辑谜题。前者貌似有很多在初中阶段的培训班拿出来讲，后者就不知道了。但有一个共同点就是 ",{"type":17,"tag":97,"props":2474,"children":2475},{},[2476],{"type":31,"value":2477},"他们都是数学计算能解出的谜题",{"type":31,"value":2479},"。我之前没有接触到这方面的，貌似只有那些大佬会喜欢然后经常去做这种类似的问题(可以有机会玩大佬玩过的小游戏了)：",{"type":17,"tag":457,"props":2481,"children":2483},{"id":2482},"数独-1",[2484],{"type":31,"value":2485},"数独 1",{"type":17,"tag":34,"props":2487,"children":2489},{"type":256,":t":2488},"数独",[],{"type":17,"tag":227,"props":2491,"children":2492},{},[],{"type":17,"tag":39,"props":2494,"children":2495},{},[2496],{"type":17,"tag":97,"props":2497,"children":2498},{},[2499],{"type":31,"value":2500},"规则：",{"type":17,"tag":175,"props":2502,"children":2503},{},[2504,2509],{"type":17,"tag":179,"props":2505,"children":2506},{},[2507],{"type":31,"value":2508},"每行、每列、每个小方格（2x2）（在4x4的情况下为4个2x2的方块）都必须包含 1~4 的数字",{"type":17,"tag":179,"props":2510,"children":2511},{},[2512],{"type":31,"value":2513},"不允许有重复数字（我觉得数独的中文翻译就体现出了这个意思）",{"type":17,"tag":195,"props":2515,"children":2517},{"code":2516},"+---+---+---+---+\n|   | 2 |   | 4 |\n+---+---+---+---+\n|   |   | 1 |   |\n+---+---+---+---+\n| 4 |   |   |   |\n+---+---+---+---+\n| 2 |   |   | 1 |\n+---+---+---+---+\n",[2518],{"type":17,"tag":200,"props":2519,"children":2520},{"__ignoreMap":7},[2521],{"type":31,"value":2516},{"type":17,"tag":39,"props":2523,"children":2524},{},[2525,2527,2532],{"type":31,"value":2526},"数独矩阵的维度为 4 行 4 列，它被分成 4 个 2x2 的小方格。我们要做的就是将数字填上去，但有需要符合规则，即 ",{"type":17,"tag":97,"props":2528,"children":2529},{},[2530],{"type":31,"value":2531},"每行不允许有重复数字",{"type":31,"value":2533},":",{"type":17,"tag":195,"props":2535,"children":2537},{"code":2536},":- use_module(library(clpfd)).\n\nsudoku4x4(Puzzle) :-\n    Puzzle = [A1, A2, A3, A4,\n              B1, B2, B3, B4,\n              C1, C2, C3, C4,\n              D1, D2, D3, D4],\n    \n    Puzzle ins 1..4,\n\n    % 每行不重复\n    all_different([A1, A2, A3, A4]),\n    all_different([B1, B2, B3, B4]),\n    all_different([C1, C2, C3, C4]),\n    all_different([D1, D2, D3, D4]),\n\n    % 每列不重复\n    all_different([A1, B1, C1, D1]),\n    all_different([A2, B2, C2, D2]),\n    all_different([A3, B3, C3, D3]),\n    all_different([A4, B4, C4, D4]),\n\n    % 每个 2x2 小格子不重复\n    all_different([A1, A2, B1, B2]),\n    all_different([A3, A4, B3, B4]),\n    all_different([C1, C2, D1, D2]),\n    all_different([C3, C4, D3, D4]),\n\n    labeling([], Puzzle),\n    print_sudoku([A1, A2, A3, A4,\n                  B1, B2, B3, B4,\n                  C1, C2, C3, C4,\n                  D1, D2, D3, D4]).\n\nprint_sudoku([]).\nprint_sudoku([A, B, C, D | Rest]) :-\n    format('+---+---+---+---+\\n'),\n    format('| ~w | ~w | ~w | ~w |\\n', [A, B, C, D]),\n    print_sudoku(Rest).\n\n\n---\n\n?-sudoku4x4(P).\n\n+---+---+---+---+\n| 1 | 2 | 3 | 4 |\n+---+---+---+---+\n| 3 | 4 | 1 | 2 |\n+---+---+---+---+\n| 2 | 1 | 4 | 3 |\n+---+---+---+---+\n| 4 | 3 | 2 | 1 |\n",[2538],{"type":17,"tag":200,"props":2539,"children":2540},{"__ignoreMap":7},[2541],{"type":31,"value":2536},{"type":17,"tag":457,"props":2543,"children":2545},{"id":2544},"八皇后谜题-1",[2546],{"type":31,"value":2547},"八皇后谜题 1",{"type":17,"tag":34,"props":2549,"children":2551},{"type":256,":t":2550},"八皇后问题",[],{"type":17,"tag":39,"props":2553,"children":2554},{},[2555],{"type":31,"value":2556},"要理解八皇后谜题，首先需要了解国际象棋的基本规则和玩法。（不知道为什么 Windows 和 macOS 基本上都会自带一个国际象棋游戏，有些 Linux 也会预装，好像在国外国际象棋就跟斗地主一样人人都会吧），首先，国际象棋一般是这样的：",{"type":17,"tag":195,"props":2558,"children":2560},{"code":2559},"   a b c d e f g h           \n  +-+-+-+-+-+-+-+-+          \n8 |♜|♞|♝|♛|♚|♝|♞|♜| ← Black  \n7 |♟|♟|♟|♟|♟|♟|♟|♟|          \n6 | | | | | | | | |          \n5 | | | | | | | | |          \n4 | | | | | | | | |          \n3 | | | | | | | | |          \n2 |♙|♙|♙|♙|♙|♙|♙|♙|          \n1 |♖|♘|♗|♕|♔|♗|♘|♖|  ← White \n  +-+-+-+-+-+-+-+-+          \n   a b c d e f g h           \n\n---\n\n皇后长这样：♕ ♛\n\n♔   王   King    ♚\n♕   后   Queen   ♛\n♖   车   Rook    ♜\n♗   象   Bishop  ♝\n♘   马   Knight  ♞\n♙   兵   Pawn    ♟\n\n*建议放大看\n",[2561],{"type":17,"tag":200,"props":2562,"children":2563},{"__ignoreMap":7},[2564],{"type":31,"value":2559},{"type":17,"tag":227,"props":2566,"children":2567},{},[],{"type":17,"tag":1283,"props":2569,"children":2570},{},[2571],{"type":17,"tag":39,"props":2572,"children":2573},{},[2574,2576,2579],{"type":31,"value":2575},"八皇后问题的核心就是:",{"type":17,"tag":227,"props":2577,"children":2578},{},[],{"type":31,"value":2580},"\n在 8×8 的棋盘上，放置 8 个皇后，使得 任何两个皇后都不会互相攻击。",{"type":17,"tag":39,"props":2582,"children":2583},{},[2584,2589],{"type":17,"tag":97,"props":2585,"children":2586},{},[2587],{"type":31,"value":2588},"皇后的规则：",{"type":31,"value":2590},"\n皇后是棋盘上 最强的棋子，她的移动规则是：",{"type":17,"tag":175,"props":2592,"children":2593},{},[2594,2599],{"type":17,"tag":179,"props":2595,"children":2596},{},[2597],{"type":31,"value":2598},"可以横向、纵向、斜向任意距离走",{"type":17,"tag":179,"props":2600,"children":2601},{},[2602],{"type":31,"value":2603},"不能跳过其他棋子",{"type":17,"tag":39,"props":2605,"children":2606},{},[2607,2612],{"type":17,"tag":97,"props":2608,"children":2609},{},[2610],{"type":31,"value":2611},"皇后可以攻击",{"type":31,"value":2533},{"type":17,"tag":175,"props":2614,"children":2615},{},[2616,2621,2626],{"type":17,"tag":179,"props":2617,"children":2618},{},[2619],{"type":31,"value":2620},"同一行",{"type":17,"tag":179,"props":2622,"children":2623},{},[2624],{"type":31,"value":2625},"同一列",{"type":17,"tag":179,"props":2627,"children":2628},{},[2629],{"type":31,"value":2630},"所有对角线",{"type":17,"tag":39,"props":2632,"children":2633},{},[2634],{"type":17,"tag":97,"props":2635,"children":2636},{},[2637],{"type":31,"value":2638},"所以我们要确保：",{"type":31,"value":61},{"type":17,"tag":63,"props":2641,"children":2642},{},[2643,2659],{"type":17,"tag":67,"props":2644,"children":2645},{},[2646],{"type":17,"tag":71,"props":2647,"children":2648},{},[2649,2654],{"type":17,"tag":75,"props":2650,"children":2651},{},[2652],{"type":31,"value":2653},"不同皇后之间",{"type":17,"tag":75,"props":2655,"children":2656},{},[2657],{"type":31,"value":2658},"意义",{"type":17,"tag":86,"props":2660,"children":2661},{},[2662,2675,2688],{"type":17,"tag":71,"props":2663,"children":2664},{},[2665,2670],{"type":17,"tag":93,"props":2666,"children":2667},{},[2668],{"type":31,"value":2669},"不在同一行",{"type":17,"tag":93,"props":2671,"children":2672},{},[2673],{"type":31,"value":2674},"每一行只放一个皇后（数组表示）",{"type":17,"tag":71,"props":2676,"children":2677},{},[2678,2683],{"type":17,"tag":93,"props":2679,"children":2680},{},[2681],{"type":31,"value":2682},"不在同一列",{"type":17,"tag":93,"props":2684,"children":2685},{},[2686],{"type":31,"value":2687},"所有列数字不重复（all_different）",{"type":17,"tag":71,"props":2689,"children":2690},{},[2691,2696],{"type":17,"tag":93,"props":2692,"children":2693},{},[2694],{"type":31,"value":2695},"不在同一对角线",{"type":17,"tag":93,"props":2697,"children":2698},{},[2699],{"type":31,"value":2700},"行差 ≠ 列差",{"type":17,"tag":39,"props":2702,"children":2703},{},[2704],{"type":31,"value":2705},"在这个过程中需要保证:",{"type":17,"tag":175,"props":2707,"children":2708},{},[2709,2714],{"type":17,"tag":179,"props":2710,"children":2711},{},[2712],{"type":31,"value":2713},"保证列表中的数互不相同（列不同）",{"type":17,"tag":179,"props":2715,"children":2716},{},[2717,2719],{"type":31,"value":2718},"保证没有两个数的对角线关系成立：",{"type":17,"tag":1295,"props":2720,"children":2722},{"className":2721,"jax":1299},[1298],[2723],{"type":17,"tag":1302,"props":2724,"children":2727},{"style":1304,"xmlns":1305,"width":2725,"height":1307,"role":21,"focusable":496,"viewBox":2726,"xmlnsXLink":1309},"25.53ex","0 -750 11284.4 1000",[2728,2778],{"type":17,"tag":1312,"props":2729,"children":2730},{},[2731,2736,2741,2746,2750,2755,2760,2764,2769,2773],{"type":17,"tag":1316,"props":2732,"children":2735},{"id":2733,"d":2734},"MJX-4-TEX-I-1D44E","M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z",[],{"type":17,"tag":1316,"props":2737,"children":2740},{"id":2738,"d":2739},"MJX-4-TEX-I-1D44F","M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z",[],{"type":17,"tag":1316,"props":2742,"children":2745},{"id":2743,"d":2744},"MJX-4-TEX-I-1D460","M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z",[],{"type":17,"tag":1316,"props":2747,"children":2749},{"id":2748,"d":1339},"MJX-4-TEX-N-28",[],{"type":17,"tag":1316,"props":2751,"children":2754},{"id":2752,"d":2753},"MJX-4-TEX-I-1D444","M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z",[],{"type":17,"tag":1316,"props":2756,"children":2759},{"id":2757,"d":2758},"MJX-4-TEX-I-1D456","M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z",[],{"type":17,"tag":1316,"props":2761,"children":2763},{"id":2762,"d":1344},"MJX-4-TEX-N-2212",[],{"type":17,"tag":1316,"props":2765,"children":2768},{"id":2766,"d":2767},"MJX-4-TEX-I-1D457","M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z",[],{"type":17,"tag":1316,"props":2770,"children":2772},{"id":2771,"d":1354},"MJX-4-TEX-N-29",[],{"type":17,"tag":1316,"props":2774,"children":2777},{"id":2775,"d":2776},"MJX-4-TEX-N-2260","M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z",[],{"type":17,"tag":1367,"props":2779,"children":2780},{"stroke":1369,"fill":1369,"stroke-width":1370,"transform":1371},[2781],{"type":17,"tag":1367,"props":2782,"children":2783},{"dataMmlNode":1375},[2784,2792,2801,2810,2818,2827,2836,2844,2851,2860,2868,2877,2884,2891,2898,2905,2912,2919,2926],{"type":17,"tag":1367,"props":2785,"children":2786},{"dataMmlNode":1379},[2787],{"type":17,"tag":1382,"props":2788,"children":2791},{"dataC":2789,"xLinkHref":2790},"1D44E","#MJX-4-TEX-I-1D44E",[],{"type":17,"tag":1367,"props":2793,"children":2795},{"dataMmlNode":1379,"transform":2794},"translate(529,0)",[2796],{"type":17,"tag":1382,"props":2797,"children":2800},{"dataC":2798,"xLinkHref":2799},"1D44F","#MJX-4-TEX-I-1D44F",[],{"type":17,"tag":1367,"props":2802,"children":2804},{"dataMmlNode":1379,"transform":2803},"translate(958,0)",[2805],{"type":17,"tag":1382,"props":2806,"children":2809},{"dataC":2807,"xLinkHref":2808},"1D460","#MJX-4-TEX-I-1D460",[],{"type":17,"tag":1367,"props":2811,"children":2813},{"dataMmlNode":1389,"transform":2812},"translate(1427,0)",[2814],{"type":17,"tag":1382,"props":2815,"children":2817},{"dataC":1428,"xLinkHref":2816},"#MJX-4-TEX-N-28",[],{"type":17,"tag":1367,"props":2819,"children":2821},{"dataMmlNode":1379,"transform":2820},"translate(1816,0)",[2822],{"type":17,"tag":1382,"props":2823,"children":2826},{"dataC":2824,"xLinkHref":2825},"1D444","#MJX-4-TEX-I-1D444",[],{"type":17,"tag":1367,"props":2828,"children":2830},{"dataMmlNode":1379,"transform":2829},"translate(2607,0)",[2831],{"type":17,"tag":1382,"props":2832,"children":2835},{"dataC":2833,"xLinkHref":2834},"1D456","#MJX-4-TEX-I-1D456",[],{"type":17,"tag":1367,"props":2837,"children":2839},{"dataMmlNode":1389,"transform":2838},"translate(3174.2,0)",[2840],{"type":17,"tag":1382,"props":2841,"children":2843},{"dataC":1444,"xLinkHref":2842},"#MJX-4-TEX-N-2212",[],{"type":17,"tag":1367,"props":2845,"children":2847},{"dataMmlNode":1379,"transform":2846},"translate(4174.4,0)",[2848],{"type":17,"tag":1382,"props":2849,"children":2850},{"dataC":2824,"xLinkHref":2825},[],{"type":17,"tag":1367,"props":2852,"children":2854},{"dataMmlNode":1379,"transform":2853},"translate(4965.4,0)",[2855],{"type":17,"tag":1382,"props":2856,"children":2859},{"dataC":2857,"xLinkHref":2858},"1D457","#MJX-4-TEX-I-1D457",[],{"type":17,"tag":1367,"props":2861,"children":2863},{"dataMmlNode":1389,"transform":2862},"translate(5377.4,0)",[2864],{"type":17,"tag":1382,"props":2865,"children":2867},{"dataC":1463,"xLinkHref":2866},"#MJX-4-TEX-N-29",[],{"type":17,"tag":1367,"props":2869,"children":2871},{"dataMmlNode":1389,"transform":2870},"translate(6044.2,0)",[2872],{"type":17,"tag":1382,"props":2873,"children":2876},{"dataC":2874,"xLinkHref":2875},"2260","#MJX-4-TEX-N-2260",[],{"type":17,"tag":1367,"props":2878,"children":2880},{"dataMmlNode":1379,"transform":2879},"translate(7100,0)",[2881],{"type":17,"tag":1382,"props":2882,"children":2883},{"dataC":2789,"xLinkHref":2790},[],{"type":17,"tag":1367,"props":2885,"children":2887},{"dataMmlNode":1379,"transform":2886},"translate(7629,0)",[2888],{"type":17,"tag":1382,"props":2889,"children":2890},{"dataC":2798,"xLinkHref":2799},[],{"type":17,"tag":1367,"props":2892,"children":2894},{"dataMmlNode":1379,"transform":2893},"translate(8058,0)",[2895],{"type":17,"tag":1382,"props":2896,"children":2897},{"dataC":2807,"xLinkHref":2808},[],{"type":17,"tag":1367,"props":2899,"children":2901},{"dataMmlNode":1389,"transform":2900},"translate(8527,0)",[2902],{"type":17,"tag":1382,"props":2903,"children":2904},{"dataC":1428,"xLinkHref":2816},[],{"type":17,"tag":1367,"props":2906,"children":2908},{"dataMmlNode":1379,"transform":2907},"translate(8916,0)",[2909],{"type":17,"tag":1382,"props":2910,"children":2911},{"dataC":2833,"xLinkHref":2834},[],{"type":17,"tag":1367,"props":2913,"children":2915},{"dataMmlNode":1389,"transform":2914},"translate(9483.2,0)",[2916],{"type":17,"tag":1382,"props":2917,"children":2918},{"dataC":1444,"xLinkHref":2842},[],{"type":17,"tag":1367,"props":2920,"children":2922},{"dataMmlNode":1379,"transform":2921},"translate(10483.4,0)",[2923],{"type":17,"tag":1382,"props":2924,"children":2925},{"dataC":2857,"xLinkHref":2858},[],{"type":17,"tag":1367,"props":2927,"children":2929},{"dataMmlNode":1389,"transform":2928},"translate(10895.4,0)",[2930],{"type":17,"tag":1382,"props":2931,"children":2932},{"dataC":1463,"xLinkHref":2866},[],{"type":17,"tag":195,"props":2934,"children":2936},{"code":2935},"% 引入约束逻辑编程库 clpfd（Constraint Logic Programming over Finite Domains）\n:- use_module(library(clpfd)).\n\n% 主谓词：寻找一个满足八皇后条件的解，并打印棋盘\neight_queens(Qs) :-\n    % Qs 是一个列表，表示每一行皇后所在的列位置（索引是行，值是列）\n    Qs = [Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8],\n\n    % 每个皇后只能放在第 1 到 8 列之间\n    Qs ins 1..8,\n\n    % 所有列都必须不同（确保没有皇后在同一列）\n    all_different(Qs),\n\n    % 检查所有皇后是否安全（不互相攻击）\n    safe_queens(Qs),\n\n    % 求出一个满足所有条件的解（进行求值）\n    labeling([], Qs),\n\n    % 打印最终的棋盘结果\n    print_board(Qs, 1).\n\n% 空列表是安全的（递归终止条件）\nsafe_queens([]).\n\n% 递归检查当前皇后与后续皇后是否安全\nsafe_queens([Q|Qs]) :-\n    % 先递归检查后面的皇后是否安全\n    safe_queens(Qs),\n    % 再检查当前皇后 Q 是否与后续的每个皇后构成攻击\n    no_attack(Q, Qs, 1).\n\n% 当前皇后 Q 和空列表当然不会攻击（递归终止）\nno_attack(_, [], _).\n\n% 判断当前皇后 Q 是否不攻击 Q1（行距为 D），然后递归检查其余\nno_attack(Q, [Q1|Qs], D) :-\n    % Q 不能与 Q1 在同一列\n    Q #\\= Q1,\n    % Q 不能与 Q1 在同一对角线（行距 = 列距）\n    abs(Q - Q1) #\\= D,\n    % 增加行距后递归继续检查\n    D1 #= D + 1,\n    no_attack(Q, Qs, D1).\n\n% ========== 打印棋盘部分 ==========\n\n% 打印完成，空列表停止递归\nprint_board([], _).\n\n% 打印每一行（即每个皇后）\nprint_board([Q|Rest], _) :-\n    % 打印当前行，Q 表示皇后在第几列\n    print_row(Q, 1),\n    nl,  % 换行\n    % 递归打印下一行\n    print_board(Rest, _).\n\n% 超过8列就停止打印该行\nprint_row(_, 9) :- !.\n\n% 打印棋盘一行：如果当前位置是皇后所在列，就打印 \"Q\"，否则打印 \".\"\nprint_row(Q, Col) :-\n    (Q =:= Col -> write(' Q ') ; write(' . ')),\n    Col1 is Col + 1,\n    print_row(Q, Col1).\n\n\n---\n?-eight_queens(Qs).\n\n Q  .  .  .  .  .  .  . \n .  .  .  .  Q  .  .  . \n .  .  .  .  .  .  .  Q \n .  .  .  .  .  Q  .  . \n .  .  Q  .  .  .  .  . \n .  .  .  .  .  .  Q  . \n .  Q  .  .  .  .  .  . \n .  .  .  Q  .  .  .  . \nQs = [1, 5, 8, 6, 3, 7, 2, 4]\n",[2937],{"type":17,"tag":200,"props":2938,"children":2939},{"__ignoreMap":7},[2940],{"type":31,"value":2935},{"type":17,"tag":39,"props":2942,"children":2943},{},[2944,2946,2951,2953,2960],{"type":31,"value":2945},"最后得出了这个结果。你会发现一个规律即 ",{"type":17,"tag":97,"props":2947,"children":2948},{},[2949],{"type":31,"value":2950},"每个行的皇后最后放在一起都不会重叠",{"type":31,"value":2952},"，严谨点的来说是 ",{"type":17,"tag":145,"props":2954,"children":2957},{"href":2955,"rel":2956},"https://en.wikipedia.org/wiki/No-three-in-line_problem",[149],[2958],{"type":31,"value":2959},"无三共线点",{"type":31,"value":2961}," 翻译的可能不是那么准确，但详细了解后得知：",{"type":17,"tag":457,"props":2963,"children":2965},{"id":2964},"无三线共点-3",[2966],{"type":31,"value":2967},"无三线共点 3",{"type":17,"tag":34,"props":2969,"children":2971},{"t":2970,"type":256},"无三线共点",[],{"type":17,"tag":39,"props":2973,"children":2974},{},[2975,2977,2984],{"type":31,"value":2976},"这是问题是我在八皇后谜题了解到的，同时还涉及到一个 ",{"type":17,"tag":145,"props":2978,"children":2981},{"href":2979,"rel":2980},"https://en.wikipedia.org/wiki/List_of_unsolved_problems_in_mathematics",[149],[2982],{"type":31,"value":2983},"数学中未解决的问题",{"type":31,"value":2985},"，即",{"type":17,"tag":1283,"props":2987,"children":2988},{"type":2446},[2989],{"type":17,"tag":39,"props":2990,"children":2991},{},[2992],{"type":31,"value":2993},"在 n × n 的网格中可以放置多少个点，使得其中任何三个点都不位于一条线上？",{"type":17,"tag":39,"props":2995,"children":2996},{},[2997,2999],{"type":31,"value":2998},"在此之前，需要了解 ",{"type":17,"tag":97,"props":3000,"children":3001},{},[3002],{"type":31,"value":3003},"不共线、三个点共线",{"type":17,"tag":195,"props":3005,"children":3007},{"code":3006},"无三点共线\n    C\n   / \\\n  /   \\\n A-----B\n\n三点共线\nA---B---C\n",[3008],{"type":17,"tag":200,"props":3009,"children":3010},{"__ignoreMap":7},[3011],{"type":31,"value":3006},{"type":17,"tag":39,"props":3013,"children":3014},{},[3015,3017,3021],{"type":31,"value":3016},"那么很明显，八皇后问题最后的计算答案是 ",{"type":17,"tag":97,"props":3018,"children":3019},{},[3020],{"type":31,"value":2970},{"type":31,"value":3022}," 的。因此维基百科才会在更多解法中列举了这个.",{"type":17,"tag":195,"props":3024,"children":3030},{"code":3025,"language":3026,"meta":3027,"className":3028},". Q . .     列: 2        1 . Q . .   ← Q1 在第1行第2列\n. . . Q     列: 4        2 . . . Q   ← Q2 在第2行第4列\nQ . . .     列: 1        3 Q . . .   ← Q3 在第3行第1列\n. . Q .     列: 3        4 . . Q .   ← Q4 在第4行第3列\n","1","2 3 4",[3029],"language-1",[3031],{"type":17,"tag":200,"props":3032,"children":3033},{"__ignoreMap":7},[3034],{"type":31,"value":3025},{"type":17,"tag":1239,"props":3036,"children":3037},{},[],{"type":17,"tag":26,"props":3039,"children":3041},{"id":3040},"scala-1",[3042],{"type":31,"value":3043},"Scala 1",{"type":17,"tag":34,"props":3045,"children":3047},{"t":3046},"Scala",[],{"type":17,"tag":39,"props":3049,"children":3050},{},[3051,3053,3060,3062,3069],{"type":31,"value":3052},"对 Scala 印象比较深的就是 Scala 社区主要的维护者",{"type":17,"tag":145,"props":3054,"children":3057},{"href":3055,"rel":3056},"https://github.com/lihaoyi",[149],[3058],{"type":31,"value":3059},"李浩毅",{"type":31,"value":3061},",竟然是新加坡前总理李显龙的次子。还是 ",{"type":17,"tag":145,"props":3063,"children":3066},{"href":3064,"rel":3065},"https://www.handsonscala.com/",[149],[3067],{"type":31,"value":3068},"Hands-on Scala Programming",{"type":31,"value":3070}," 一书的作者（这本书还免费观看章节部分的内容，对引导学习 scala 很有帮助）。我第一次看到 Scala 这个名字，还以为是某个数据库，毕竟 LOGO 不太像是一个 lang。",{"type":17,"tag":45,"props":3072,"children":3074},{"id":3073},"编程范式-3",[3075],{"type":31,"value":3076},"编程范式 3",{"type":17,"tag":34,"props":3078,"children":3080},{"t":3079,"type":256},"编程范式",[],{"type":17,"tag":39,"props":3082,"children":3083},{},[3084,3086,3091],{"type":31,"value":3085},"在此之前，作者通过 Ruby, IO lang, Prolog 介绍了 起码三种编程范式，每一种编程范式都会掀起一场腥风血雨。而 Scala 是函数式和面向对象的一种桥梁，本书作者称之为 “混合语言”。目的是 ",{"type":17,"tag":97,"props":3087,"children":3088},{},[3089],{"type":31,"value":3090},"架起 Java 和 Haskell",{"type":31,"value":3092}," 之间的鸿沟连接起来",{"type":17,"tag":3094,"props":3095,"children":3097},"text-space",{"type":3096},"tip",[3098,3108,3111],{"type":17,"tag":39,"props":3099,"children":3100},{},[3101,3103,3106],{"type":31,"value":3102},"2009: 作者的总结",{"type":17,"tag":227,"props":3104,"children":3105},{},[],{"type":31,"value":3107},"\n随着程序需求的增加，编程语言也在不断进化。每二十年左右，旧的编程范式无法满足新的需求，新的范式必须出现。每个新的范式都会诞生一批编程语言，最初可能效率高但不实用（如 Smalltalk 和 Lisp）。最终，某些混合语言（如 C++）成为“桥梁”，然后是商业化语言（如 Java 或 C#），最终成熟的语言会实现新的范式。",{"type":17,"tag":227,"props":3109,"children":3110},{},[],{"type":17,"tag":39,"props":3112,"children":3113},{},[3114],{"type":31,"value":3115},"2025: 说的太对了",{"type":17,"tag":39,"props":3117,"children":3118},{},[3119,3121,3128],{"type":31,"value":3120},"不过由于我看这本书是总结语言的学习思路，所以我不会再本机装 lang，基本上用在线环境来运行。这里我推荐使用 Scala 提供的在线环境 ",{"type":17,"tag":145,"props":3122,"children":3125},{"href":3123,"rel":3124},"https://scastie.scala-lang.org/",[149],[3126],{"type":31,"value":3127},"Scastie",{"type":31,"value":3129}," 对于 Scala 给我的直接映像就是输出 Hello 有很多种方法，比如：",{"type":17,"tag":195,"props":3131,"children":3133},{"code":3132},"object Main extends App{print(\"Hello, World!\")}\n\n@main\ndef hello(): Unit =\n  println(\"Hello, World!\")\n\nprintln(\"Hello, World\")\n",[3134],{"type":17,"tag":200,"props":3135,"children":3136},{"__ignoreMap":7},[3137],{"type":31,"value":3132},{"type":17,"tag":39,"props":3139,"children":3140},{},[3141,3143,3149],{"type":31,"value":3142},"如你所见起码有三种方式可以输出 ",{"type":17,"tag":200,"props":3144,"children":3146},{"className":3145},[],[3147],{"type":31,"value":3148},"Hello, World",{"type":31,"value":3150},"， 这三种方式体现了 Scala 灵活性：",{"type":17,"tag":175,"props":3152,"children":3153},{},[3154,3159,3164],{"type":17,"tag":179,"props":3155,"children":3156},{},[3157],{"type":31,"value":3158},"使用 object 和 App，继承 App trait，简化主程序结构",{"type":17,"tag":179,"props":3160,"children":3161},{},[3162],{"type":31,"value":3163},"Scala 3 的 @main 注解,不需要显式声明类和方法。",{"type":17,"tag":179,"props":3165,"children":3166},{},[3167],{"type":31,"value":3168},"不依赖类或对象结构",{"type":17,"tag":39,"props":3170,"children":3171},{},[3172],{"type":31,"value":3173},"不过和 Java 相比，那也是非常的直观明了的：",{"type":17,"tag":195,"props":3175,"children":3177},{"code":3176},"public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n",[3178],{"type":17,"tag":200,"props":3179,"children":3180},{"__ignoreMap":7},[3181],{"type":31,"value":3176},{"type":31,"value":61},{"type":17,"tag":63,"props":3184,"children":3185},{},[3186,3202],{"type":17,"tag":67,"props":3187,"children":3188},{},[3189],{"type":17,"tag":71,"props":3190,"children":3191},{},[3192,3197],{"type":17,"tag":75,"props":3193,"children":3194},{},[3195],{"type":31,"value":3196},"LANG",{"type":17,"tag":75,"props":3198,"children":3199},{},[3200],{"type":31,"value":3201},"TYPE",{"type":17,"tag":86,"props":3203,"children":3204},{},[3205,3218,3231],{"type":17,"tag":71,"props":3206,"children":3207},{},[3208,3213],{"type":17,"tag":93,"props":3209,"children":3210},{},[3211],{"type":31,"value":3212},"Ruby",{"type":17,"tag":93,"props":3214,"children":3215},{},[3216],{"type":31,"value":3217},"面向对象",{"type":17,"tag":71,"props":3219,"children":3220},{},[3221,3226],{"type":17,"tag":93,"props":3222,"children":3223},{},[3224],{"type":31,"value":3225},"IO",{"type":17,"tag":93,"props":3227,"children":3228},{},[3229],{"type":31,"value":3230},"原型式编程",{"type":17,"tag":71,"props":3232,"children":3233},{},[3234,3238],{"type":17,"tag":93,"props":3235,"children":3236},{},[3237],{"type":31,"value":36},{"type":17,"tag":93,"props":3239,"children":3240},{},[3241],{"type":31,"value":3242},"声明式编程",{"type":17,"tag":45,"props":3244,"children":3246},{"id":3245},"类型-1",[3247],{"type":31,"value":3248},"类型 1",{"type":17,"tag":34,"props":3250,"children":3252},{"t":3251,"type":256},"类型",[],{"type":17,"tag":39,"props":3254,"children":3255},{},[3256,3258,3264,3266,3272],{"type":31,"value":3257},"Scala 是可以推断出类型的，比如 ",{"type":17,"tag":200,"props":3259,"children":3261},{"className":3260},[],[3262],{"type":31,"value":3263},"1 + 1",{"type":31,"value":3265},"，IDE 会在旁边显示 ",{"type":17,"tag":200,"props":3267,"children":3269},{"className":3268},[],[3270],{"type":31,"value":3271},"2: scala.Int",{"type":31,"value":3273},", 例如下面的类型转换（String 真方便啊）",{"type":17,"tag":3094,"props":3275,"children":3276},{"type":3096},[3277],{"type":17,"tag":39,"props":3278,"children":3279},{},[3280,3282,3287,3289,3295,3297,3303,3305],{"type":31,"value":3281},"在 Scala 2 的某个小版本中，Int + String 之类的 ",{"type":17,"tag":97,"props":3283,"children":3284},{},[3285],{"type":31,"value":3286},"插值",{"type":31,"value":3288}," 被废弃掉了，需要使用 ",{"type":17,"tag":200,"props":3290,"children":3292},{"className":3291},[],[3293],{"type":31,"value":3294},"$",{"type":31,"value":3296}," 进行插值，反正最后都会被归类到 ",{"type":17,"tag":200,"props":3298,"children":3300},{"className":3299},[],[3301],{"type":31,"value":3302},"String",{"type":31,"value":3304}," type。（String 和 Json 以及 Object 是我最喜欢的类型）:\n",{"type":17,"tag":200,"props":3306,"children":3308},{"className":3307},[],[3309],{"type":31,"value":3310},"val pi = 3.14159; println(f\"Pi is approximately $pi%1.2f\")",{"type":17,"tag":195,"props":3312,"children":3314},{"code":3313},"val x = 4 + \"abc\"\nprintln(x.getClass) \n\nval s = \"abc\" + 4\nprintln(s.getClass) // class java.lang.String\n",[3315],{"type":17,"tag":200,"props":3316,"children":3317},{"__ignoreMap":7},[3318],{"type":31,"value":3313},{"type":17,"tag":39,"props":3320,"children":3321},{},[3322],{"type":31,"value":3323},"Scala 2 和 3 version 的语法可能略有不同。所以这就是我读本书的理由，语言和语法结构是会变的。无论多么熟悉，过个两三年和四五年就会改变很多，但如果根据语言的基础来学，则很快就能上手。",{"type":17,"tag":457,"props":3325,"children":3327},{"id":3326},"ast-2",[3328],{"type":31,"value":3329},"AST 2",{"type":17,"tag":34,"props":3331,"children":3333},{"t":3332,"type":256},"AST",[],{"type":17,"tag":39,"props":3335,"children":3336},{},[3337,3339,3344],{"type":31,"value":3338},"AST 是抽象语法树（AST, Abstract Syntax Tree）的简称。当你写一段 Scala 代码时，Scala 编译器会将其转换为抽象语法树（AST），然后再进行后续的编译阶段（如类型检查、优化、字节码生成）。可以 ",{"type":17,"tag":97,"props":3340,"children":3341},{},[3342],{"type":31,"value":3343},"查看该代码在编译阶段形成的 AST 结构:",{"type":31,"value":1217},{"type":17,"tag":39,"props":3346,"children":3347},{},[3348,3350,3357,3359,3364],{"type":31,"value":3349},"在 Scala 中，可以使用 ",{"type":17,"tag":145,"props":3351,"children":3354},{"href":3352,"rel":3353},"https://scalameta.org/ast-explorer/#",[149],[3355],{"type":31,"value":3356},"Scala AST explorer",{"type":31,"value":3358}," 来进行查看。例如上面我说 ",{"type":17,"tag":97,"props":3360,"children":3361},{},[3362],{"type":31,"value":3363},"反正最后都要归类到 String",{"type":31,"value":3365}," 其实很不严谨，可以将 Copy 放进去查看在编译的时候都做了什么：",{"type":17,"tag":195,"props":3367,"children":3369},{"code":3368},"val x = 4 + \"abc\"\nprintln(x.getClass) \n\n---\n\nSource [0;38]\n├── Defn.Val [0;17]\n│   ├── Pat.Var [4;5]\n│   │   └── Term.Name [4;5]   // x\n│   └── Term.ApplyInfix [8;17]\n│       ├── Lit.Int [8;9]     // 4\n│       ├── Term.Name [10;11] // +\n│       ├── Type.ArgClause [12;12]\n│       └── Term.ArgClause [12;17]\n│           └── Lit.String [12;17] // \"abc\"\n└── Term.Apply [18;37]\n    ├── Term.Name [18;25]     // println\n    └── Term.ArgClause [25;37]\n        └── Term.Select [26;36]\n            ├── Term.Name [26;27]   // x\n            └── Term.Name [28;36]   // getClass\n",[3370],{"type":17,"tag":200,"props":3371,"children":3372},{"__ignoreMap":7},[3373],{"type":31,"value":3368},{"type":17,"tag":39,"props":3375,"children":3376},{},[3377,3379,3385,3387,3393,3395,3401,3403,3408,3410,3416,3418,3423],{"type":31,"value":3378},"也就是说 ",{"type":17,"tag":200,"props":3380,"children":3382},{"className":3381},[],[3383],{"type":31,"value":3384},"4",{"type":31,"value":3386}," 是被编译器推理到了是 ",{"type":17,"tag":200,"props":3388,"children":3390},{"className":3389},[],[3391],{"type":31,"value":3392},"Int",{"type":31,"value":3394}," 类型的，",{"type":17,"tag":200,"props":3396,"children":3398},{"className":3397},[],[3399],{"type":31,"value":3400},"abc",{"type":31,"value":3402}," 是 ",{"type":17,"tag":200,"props":3404,"children":3406},{"className":3405},[],[3407],{"type":31,"value":3302},{"type":31,"value":3409}," 虽然最后组合成了 ",{"type":17,"tag":200,"props":3411,"children":3413},{"className":3412},[],[3414],{"type":31,"value":3415},"4abc",{"type":31,"value":3417}," 也还是 ",{"type":17,"tag":200,"props":3419,"children":3421},{"className":3420},[],[3422],{"type":31,"value":3302},{"type":31,"value":3424}," 但你不觉得看到了编译过程不还是很酷的吗？",{"type":17,"tag":1239,"props":3426,"children":3427},{},[],{"type":17,"tag":457,"props":3429,"children":3431},{"id":3430},"泛型-1",[3432],{"type":31,"value":3433},"泛型 1",{"type":17,"tag":34,"props":3435,"children":3437},{"t":3436},"泛型",[],{"type":17,"tag":39,"props":3439,"children":3440},{},[3441,3443,3448],{"type":31,"value":3442},"泛型（Generics）类型是一个 ",{"type":17,"tag":97,"props":3444,"children":3445},{},[3446],{"type":31,"value":3447},"在程序设计中用于定义可以处理不同类型的类、特质或函数",{"type":31,"value":3449}," 方式。泛型类型的基本概念：",{"type":17,"tag":175,"props":3451,"children":3452},{},[3453,3458],{"type":17,"tag":179,"props":3454,"children":3455},{},[3456],{"type":31,"value":3457},"类型参数：可以为类、特质或函数提供一个占位符类型，这个类型在使用时会被实际的类型所替代。",{"type":17,"tag":179,"props":3459,"children":3460},{},[3461],{"type":31,"value":3462},"类型推断：Scala 会根据您传递的具体类型自动推断出类型参数。",{"type":17,"tag":39,"props":3464,"children":3465},{},[3466,3468,3473],{"type":31,"value":3467},"简单点来说，其作用在于 ",{"type":17,"tag":97,"props":3469,"children":3470},{},[3471],{"type":31,"value":3472},"在定义类、特质、或方法时，使用类型参数来使其可以处理不同类型的数据",{"type":31,"value":3474},"。让方法或类处理不同类型的数据，而不需要为每种类型都写一个单独的实现。",{"type":17,"tag":195,"props":3476,"children":3478},{"code":3477},"// 定义一个泛型类 Box\nclass Box[A](val value: A) {\n  def getValue: A = value\n}\n\nval intBox = new Box(10)       // A 被推断为 Int\nval stringBox = new Box(\"Hello\") // A 被推断为 String\n\nprintln(intBox.getValue)    // 输出: 10\nprintln(stringBox.getValue) // 输出: Hello\n",[3479],{"type":17,"tag":200,"props":3480,"children":3481},{"__ignoreMap":7},[3482],{"type":31,"value":3477},{"type":17,"tag":39,"props":3484,"children":3485},{},[3486,3488,3494],{"type":31,"value":3487},"泛型很像 TypeScript 中 ",{"type":17,"tag":200,"props":3489,"children":3491},{"className":3490},[],[3492],{"type":31,"value":3493},"Interface",{"type":31,"value":3495},", ：",{"type":17,"tag":195,"props":3497,"children":3499},{"code":3498},"// 定义一个泛型接口\ninterface Box\u003CT> {\n  value: T;\n  getValue(): T;\n}\n\n// 实现泛型接口\nclass NumberBox implements Box\u003Cnumber> {\n  constructor(public value: number) {}\n  getValue(): number {\n    return this.value;\n  }\n}\n\nclass StringBox implements Box\u003Cstring> {\n  constructor(public value: string) {}\n  getValue(): string {\n    return this.value;\n  }\n}\n\nconst numBox = new NumberBox(42);\nconsole.log(numBox.getValue()); // 输出: 42\n\nconst strBox = new StringBox(\"Hello\");\nconsole.log(strBox.getValue()); // 输出: Hello\n",[3500],{"type":17,"tag":200,"props":3501,"children":3502},{"__ignoreMap":7},[3503],{"type":31,"value":3498},{"type":17,"tag":1239,"props":3505,"children":3506},{},[],{"type":17,"tag":3508,"props":3509,"children":3511},"h4",{"id":3510},"eventbus-2",[3512],{"type":31,"value":3513},"EventBus 2",{"type":17,"tag":34,"props":3515,"children":3517},{"t":3516},"EventBus",[],{"type":17,"tag":39,"props":3519,"children":3520},{},[3521,3523,3530,3532,3537],{"type":31,"value":3522},"EventBus 是一个类型安全的概念，有点像是 Vue 中的 ",{"type":17,"tag":145,"props":3524,"children":3527},{"href":3525,"rel":3526},"https://v3-migration.vuejs.org/zh/breaking-changes/events-api.html",[149],[3528],{"type":31,"value":3529},"Events",{"type":31,"value":3531},"。不过类型安全好像远没有 ",{"type":17,"tag":97,"props":3533,"children":3534},{},[3535],{"type":31,"value":3536},"内存安全",{"type":31,"value":3538}," 那么让人感到欣喜，仿佛是必须的？",{"type":17,"tag":3094,"props":3540,"children":3541},{"type":3096},[3542],{"type":17,"tag":39,"props":3543,"children":3544},{},[3545],{"type":31,"value":3546},"一个类型安全的“事件通道”——你可以向里面发送（emit）事件，其他组件可以监听（subscribe）这些事件并作出反应。",{"type":17,"tag":195,"props":3548,"children":3550},{"code":3549},"enum CopyEvent:\n  case CopyWholeTree\n  case CopyNode(id: Int)\n\n... \nval copyEvents = EventBus[CopyEvent]()\n...\nonClick.mapToStrict(CopyEvent.CopyWholeTree) --> copyEvents\n...\n// in app scope: div(\ncopyEvents --> { \n  case CopyEvent.CopyWholeTree =>  ...\n  case CopyEvent.CopyNode(id) => ...\n}\n// ...)\n",[3551],{"type":17,"tag":200,"props":3552,"children":3553},{"__ignoreMap":7},[3554],{"type":31,"value":3549},{"type":17,"tag":3556,"props":3557,"children":3559},"h5",{"id":3558},"adt-3",[3560],{"type":31,"value":3561},"ADT 3",{"type":17,"tag":34,"props":3563,"children":3565},{"t":3564,"type":256},"代数数据类型",[],{"type":17,"tag":39,"props":3567,"children":3568},{},[3569],{"type":31,"value":3570},"密封的代数数据类型（Algebraic Data Types, ADTs）是函数式编程核心的类型系统之一，通常包括了：",{"type":17,"tag":175,"props":3572,"children":3573},{},[3574,3579],{"type":17,"tag":179,"props":3575,"children":3576},{},[3577],{"type":31,"value":3578},"积类型（Product Type） = A 和 B 一起出现（“组合”数据）",{"type":17,"tag":179,"props":3580,"children":3581},{},[3582],{"type":31,"value":3583},"和类型（Sum Type） = A 或 B 之一出现（“选择”数据）",{"type":17,"tag":39,"props":3585,"children":3586},{},[3587,3589,3595],{"type":31,"value":3588},"例如上面的 Code 就用到了 ADT 中的 ",{"type":17,"tag":200,"props":3590,"children":3592},{"className":3591},[],[3593],{"type":31,"value":3594},"Sum Types",{"type":31,"value":3596}," :",{"type":17,"tag":195,"props":3598,"children":3600},{"code":3599},"enum PaymentMethod:\n  case CreditCard(number: String)\n  case Cash\n  case PayPal(email: String)\n// 这表示付款方式只能是三种之一 —— 你不能“同时”用信用卡 + PayPal。\n",[3601],{"type":17,"tag":200,"props":3602,"children":3603},{"__ignoreMap":7},[3604],{"type":31,"value":3599},{"type":17,"tag":39,"props":3606,"children":3607},{},[3608],{"type":31,"value":3609},"如果是 Product type，那就是：",{"type":17,"tag":195,"props":3611,"children":3613},{"code":3612},"case class Person(name: String, age: Int)\n// Person 拥有 name 和 age，你无法只给其中一个，必须两个都有 —— 这就是积类型。\n",[3614],{"type":17,"tag":200,"props":3615,"children":3616},{"__ignoreMap":7},[3617],{"type":31,"value":3612},{"type":17,"tag":1239,"props":3619,"children":3620},{},[],{"type":17,"tag":457,"props":3622,"children":3624},{"id":3623},"trait-2",[3625],{"type":31,"value":3626},"trait 2",{"type":17,"tag":34,"props":3628,"children":3630},{"t":3629},"trait",[],{"type":17,"tag":39,"props":3632,"children":3633},{},[3634],{"type":31,"value":3635},"Trait (特质)，trait 和泛型几乎同时出没，所以要理解 trait 之前需要理解泛型。Trait 和接口很像，我觉得中文翻译成“特质”不太理解，“特征、特点”倒是很符合 Trait 实现的逻辑：",{"type":17,"tag":3094,"props":3637,"children":3638},{"type":3096},[3639,3659],{"type":17,"tag":39,"props":3640,"children":3641},{},[3642,3644,3651,3653,3658],{"type":31,"value":3643},"我觉得这里可以参考下 Rust 的文档 ",{"type":17,"tag":145,"props":3645,"children":3648},{"href":3646,"rel":3647},"https://doc.rust-lang.org/book/ch10-02-traits.html",[149],[3649],{"type":31,"value":3650},"Traits",{"type":31,"value":3652},": ",{"type":17,"tag":97,"props":3654,"children":3655},{},[3656],{"type":31,"value":3657},"Trait:定义共同行为",{"type":31,"value":1217},{"type":17,"tag":39,"props":3660,"children":3661},{},[3662,3664,3671],{"type":31,"value":3663},"Trait 在心理学中是一个理论，即 ",{"type":17,"tag":145,"props":3665,"children":3668},{"href":3666,"rel":3667},"https://en.wikipedia.org/wiki/Trait_theory",[149],[3669],{"type":31,"value":3670},"特质理论",{"type":31,"value":3672},"。是研究人类个性的一种方法，所以 Rust 的文档更符合 Trait 的意思。",{"type":17,"tag":39,"props":3674,"children":3675},{},[3676,3678,3684,3686,3692,3694],{"type":31,"value":3677},"比如下面 Code 就实现了一个 ",{"type":17,"tag":200,"props":3679,"children":3681},{"className":3680},[],[3682],{"type":31,"value":3683},"动物(Animal)",{"type":31,"value":3685}," 的 ",{"type":17,"tag":200,"props":3687,"children":3689},{"className":3688},[],[3690],{"type":31,"value":3691},"Trait",{"type":31,"value":3693}," 即它们都会 ",{"type":17,"tag":200,"props":3695,"children":3697},{"className":3696},[],[3698],{"type":31,"value":3699},"speak",{"type":17,"tag":195,"props":3701,"children":3703},{"code":3702},"// 定义 trait\ntrait Animal:\n  def speak(): String\n\n// 定义实现 trait 的类\nclass Dog extends Animal:\n  def speak(): String = \"Woof!\"\n\nclass Cat extends Animal:\n  def speak(): String = \"Meow!\"\n\n// 创建实例\nval dog = new Dog()\nval cat = new Cat()\n\n// 调用方法\nprintln(dog.speak()) // 输出: Woof!\nprintln(cat.speak()) // 输出: Meow!\n",[3704],{"type":17,"tag":200,"props":3705,"children":3706},{"__ignoreMap":7},[3707],{"type":31,"value":3702},{"type":17,"tag":39,"props":3709,"children":3710},{},[3711,3713,3719],{"type":31,"value":3712},"如果用 ",{"type":17,"tag":200,"props":3714,"children":3716},{"className":3715},[],[3717],{"type":31,"value":3718},"interface",{"type":31,"value":3720}," 的话，比如 Java:",{"type":17,"tag":195,"props":3722,"children":3724},{"code":3723},"interface Animal {\n    String speak();\n}\n\nclass Dog implements Animal {\n    public String speak() {\n        return \"Woof!\";\n    }\n}\n\nclass Cat implements Animal {\n    public String speak() {\n        return \"Meow!\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal dog = new Dog();\n        Animal cat = new Cat();\n        System.out.println(dog.speak());  // Woof!\n        System.out.println(cat.speak());  // Meow!\n    }\n}\n",[3725],{"type":17,"tag":200,"props":3726,"children":3727},{"__ignoreMap":7},[3728],{"type":31,"value":3723},{"type":17,"tag":1239,"props":3730,"children":3731},{},[],{"type":17,"tag":457,"props":3733,"children":3735},{"id":3734},"隐式类型-3",[3736],{"type":31,"value":3737},"隐式类型 3",{"type":17,"tag":34,"props":3739,"children":3741},{"t":3740},"隐式类型",[],{"type":31,"value":3743},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":63,"props":3745,"children":3746},{},[3747,3773],{"type":17,"tag":67,"props":3748,"children":3749},{},[3750],{"type":17,"tag":71,"props":3751,"children":3752},{},[3753,3758,3763,3768],{"type":17,"tag":75,"props":3754,"children":3755},{},[3756],{"type":31,"value":3757},"机制类型",{"type":17,"tag":75,"props":3759,"children":3760},{},[3761],{"type":31,"value":3762},"英文名",{"type":17,"tag":75,"props":3764,"children":3765},{},[3766],{"type":31,"value":3767},"主要作用",{"type":17,"tag":75,"props":3769,"children":3770},{},[3771],{"type":31,"value":3772},"示例作用",{"type":17,"tag":86,"props":3774,"children":3775},{},[3776,3799,3822],{"type":17,"tag":71,"props":3777,"children":3778},{},[3779,3784,3789,3794],{"type":17,"tag":93,"props":3780,"children":3781},{},[3782],{"type":31,"value":3783},"隐式转换",{"type":17,"tag":93,"props":3785,"children":3786},{},[3787],{"type":31,"value":3788},"Implicit Conversion",{"type":17,"tag":93,"props":3790,"children":3791},{},[3792],{"type":31,"value":3793},"当类型不匹配时，自动将一个类型转换为另一个类型",{"type":17,"tag":93,"props":3795,"children":3796},{},[3797],{"type":31,"value":3798},"Int → String / 自定义类型转化",{"type":17,"tag":71,"props":3800,"children":3801},{},[3802,3807,3812,3817],{"type":17,"tag":93,"props":3803,"children":3804},{},[3805],{"type":31,"value":3806},"隐式参数",{"type":17,"tag":93,"props":3808,"children":3809},{},[3810],{"type":31,"value":3811},"Implicit Parameter",{"type":17,"tag":93,"props":3813,"children":3814},{},[3815],{"type":31,"value":3816},"自动填入函数所需的上下文参数",{"type":17,"tag":93,"props":3818,"children":3819},{},[3820],{"type":31,"value":3821},"注入默认值、依赖注入、上下文控制",{"type":17,"tag":71,"props":3823,"children":3824},{},[3825,3830,3835,3840],{"type":17,"tag":93,"props":3826,"children":3827},{},[3828],{"type":31,"value":3829},"隐式类",{"type":17,"tag":93,"props":3831,"children":3832},{},[3833],{"type":31,"value":3834},"Implicit Class",{"type":17,"tag":93,"props":3836,"children":3837},{},[3838],{"type":31,"value":3839},"为已有类型添加新方法（类似扩展方法）",{"type":17,"tag":93,"props":3841,"children":3842},{},[3843,3845,3851],{"type":31,"value":3844},"给 Int 添加 ",{"type":17,"tag":200,"props":3846,"children":3848},{"className":3847},[],[3849],{"type":31,"value":3850},"squared",{"type":31,"value":3852}," 方法",{"type":17,"tag":3508,"props":3854,"children":3856},{"id":3855},"隐式类型转换-2",[3857],{"type":31,"value":3858},"隐式类型转换 2",{"type":17,"tag":34,"props":3860,"children":3862},{"t":3861,"type":256},"隐式类型转换",[],{"type":17,"tag":39,"props":3864,"children":3865},{},[3866,3868,3874,3875,3882,3884],{"type":31,"value":3867},"如果要学习一个语言，那么类型系统无非是重要的。在 Scala 中是支持类型推断的，也就是不像静态语言那样需要自己指定类型 ",{"type":17,"tag":200,"props":3869,"children":3871},{"className":3870},[],[3872],{"type":31,"value":3873},"let x: number = 42;",{"type":31,"value":1217},{"type":17,"tag":145,"props":3876,"children":3879},{"href":3877,"rel":3878},"https://en.wikipedia.org/wiki/Type_conversion#Implicit_type_conversion",[149],[3880],{"type":31,"value":3881},"隐式类型(Implicit type conversion)",{"type":31,"value":3883},"转换, ",{"type":17,"tag":97,"props":3885,"children":3886},{},[3887],{"type":31,"value":3888},"是由编译器自动执行的类型转换。",{"type":17,"tag":39,"props":3890,"children":3891},{},[3892,3894,3900,3902,3907],{"type":31,"value":3893},"也就是说，当一个类型不符合预期时，编译器会尝试通过一个标记为 ",{"type":17,"tag":200,"props":3895,"children":3897},{"className":3896},[],[3898],{"type":31,"value":3899},"implicit",{"type":31,"value":3901}," 的函数将其自动转换为所需的类型。如果你将之前的插值放到 AST 里面，就会看到 ",{"type":17,"tag":200,"props":3903,"children":3905},{"className":3904},[],[3906],{"type":31,"value":3899},{"type":31,"value":2533},{"type":17,"tag":195,"props":3909,"children":3911},{"code":3910},"val pi = 3.14159\nprintln(f\"Pi is approximately $pi%1.2f\")\n\n---\n\nSource [0;57]\n├── Defn.Val [0;16]\n│   ├── Pat.Var [4;6]\n│   │   └── Term.Name [4;6]         // pi\n│   └── Lit.Double [9;16]           // 3.14159\n└── Term.Apply [17;57]\n    ├── Term.Name [17;24]           // println\n    └── Term.ArgClause [24;57]\n        └── Term.Interpolate [25;56]\n            ├── Term.Name [25;26]       // f (interpolator)\n            ├── Lit.String [27;47]      // \"Pi is approximately \"\n            ├── Term.Name [48;50]       // pi (in interpolation)\n            └── Lit.String [50;55]      // \"%1.2f\"\n",[3912],{"type":17,"tag":200,"props":3913,"children":3914},{"__ignoreMap":7},[3915],{"type":31,"value":3910},{"type":17,"tag":3508,"props":3917,"children":3919},{"id":3918},"隐式类型参数-1",[3920],{"type":31,"value":3921},"隐式类型参数 1",{"type":17,"tag":34,"props":3923,"children":3925},{"t":3924,"type":256},"隐式类型参数",[],{"type":17,"tag":39,"props":3927,"children":3928},{},[3929,3931,3935],{"type":31,"value":3930},"隐式类型参数我的理解就是一种 ",{"type":17,"tag":97,"props":3932,"children":3933},{},[3934],{"type":31,"value":3251},{"type":31,"value":3936}," 安全的注入机制，例如：",{"type":17,"tag":195,"props":3938,"children":3940},{"code":3939},"implicit val defaultGreeting: String = \"Hello\"\n\ndef greet(name: String)(implicit greeting: String) = println(s\"$greeting, $name\")\n\ngreet(\"Alice\") // Alice, Hello \n",[3941],{"type":17,"tag":200,"props":3942,"children":3943},{"__ignoreMap":7},[3944],{"type":31,"value":3939},{"type":17,"tag":39,"props":3946,"children":3947},{},[3948,3950,3955,3957,3963,3965,3971],{"type":31,"value":3949},"通过 ",{"type":17,"tag":145,"props":3951,"children":3953},{"href":3352,"rel":3952},[149],[3954],{"type":31,"value":3356},{"type":31,"value":3956}," 可以看到，",{"type":17,"tag":200,"props":3958,"children":3960},{"className":3959},[],[3961],{"type":31,"value":3962},"$greeting",{"type":31,"value":3964}," 在编译的时候，是会被 ",{"type":17,"tag":200,"props":3966,"children":3968},{"className":3967},[],[3969],{"type":31,"value":3970},"Interpolate",{"type":31,"value":3972}," 占位的：",{"type":17,"tag":195,"props":3974,"children":3976},{"code":3975},"- Term.Interpolate [109;128]\n    Term.Name [109;110]\n    Lit.String [111;111]\n    Lit.String [120;122]\n    Lit.String [127;127]\n    Term.Name [112;120]\n    Term.Name [123;127]\n",[3977],{"type":17,"tag":200,"props":3978,"children":3979},{"__ignoreMap":7},[3980],{"type":31,"value":3975},{"type":17,"tag":39,"props":3982,"children":3983},{},[3984],{"type":31,"value":3985},"如果不依赖隐式类型参数来写，那么就会是这样的：",{"type":17,"tag":195,"props":3987,"children":3989},{"code":3988},"def greet(name: String, greeting: String) = println(s\"$greeting, $name\")\n\nval defaultGreeting = \"Hello\"\n\ngreet(\"Alice\", defaultGreeting) // Hello, Alice\n",[3990],{"type":17,"tag":200,"props":3991,"children":3992},{"__ignoreMap":7},[3993],{"type":31,"value":3988},{"type":17,"tag":3508,"props":3995,"children":3997},{"id":3996},"隐式类-1",[3998],{"type":31,"value":3999},"隐式类 1",{"type":17,"tag":34,"props":4001,"children":4002},{"t":3829,"type":256},[],{"type":17,"tag":39,"props":4004,"children":4005},{},[4006,4008,4014],{"type":31,"value":4007},"隐式类非常好理解，很像 JavaScript 中的 ",{"type":17,"tag":200,"props":4009,"children":4011},{"className":4010},[],[4012],{"type":31,"value":4013},"prototype",{"type":31,"value":4015}," 例如：",{"type":17,"tag":195,"props":4017,"children":4019},{"code":4018},"implicit class RichInt(val x: Int) {\n  def squared: Int = x * x\n}\n\nprintln(4.squared)  // 16\n",[4020],{"type":17,"tag":200,"props":4021,"children":4022},{"__ignoreMap":7},[4023],{"type":31,"value":4018},{"type":17,"tag":39,"props":4025,"children":4026},{},[4027],{"type":31,"value":4028},"在 Javascript 中就是：",{"type":17,"tag":195,"props":4030,"children":4032},{"code":4031},"Number.prototype.square = function() {\n  return this * this;\n};\n\nconsole.log((5).square()); // 25\n",[4033],{"type":17,"tag":200,"props":4034,"children":4035},{"__ignoreMap":7},[4036],{"type":31,"value":4031},{"type":17,"tag":1239,"props":4038,"children":4039},{},[],{"type":17,"tag":45,"props":4041,"children":4043},{"id":4042},"不可变性-2",[4044],{"type":31,"value":4045},"不可变性 2",{"type":17,"tag":34,"props":4047,"children":4049},{"t":4048},"不可变性",[],{"type":17,"tag":39,"props":4051,"children":4052},{},[4053,4055,4062,4064,4070,4072,4077],{"type":31,"value":4054},"感觉这本书上讲的一些 Scala 特性，在 2025 年的现在好像都是现代语言的必需品了(可能当时确实是比较新颖的)。对于不可变性好像函数式语言都支持？起码 JavaScript 是这样的。在 English 中，",{"type":17,"tag":145,"props":4056,"children":4059},{"href":4057,"rel":4058},"https://en.wikipedia.org/wiki/Immutable_object",[149],[4060],{"type":31,"value":4061},"不可变性（Immutability）",{"type":31,"value":4063}," 通常会在后面加一个 ",{"type":17,"tag":200,"props":4065,"children":4067},{"className":4066},[],[4068],{"type":31,"value":4069},"object",{"type":31,"value":4071},"，组合起来就是 ",{"type":17,"tag":97,"props":4073,"children":4074},{},[4075],{"type":31,"value":4076},"不可变对象",{"type":31,"value":1217},{"type":17,"tag":39,"props":4079,"children":4080},{},[4081,4083,4087,4088,4093,4095,4101,4103,4109],{"type":31,"value":4082},"所以不可变性包含了 ",{"type":17,"tag":97,"props":4084,"children":4085},{},[4086],{"type":31,"value":4076},{"type":31,"value":1551},{"type":17,"tag":97,"props":4089,"children":4090},{},[4091],{"type":31,"value":4092},"不可变函数/变量",{"type":31,"value":4094},", 比如在 scala 中，",{"type":17,"tag":200,"props":4096,"children":4098},{"className":4097},[],[4099],{"type":31,"value":4100},"var",{"type":31,"value":4102}," 是可变的，",{"type":17,"tag":200,"props":4104,"children":4106},{"className":4105},[],[4107],{"type":31,"value":4108},"val",{"type":31,"value":4110}," 就不可变:",{"type":17,"tag":195,"props":4112,"children":4114},{"code":4113},"var a = \"mutable\"\na = \"changed\"   // OK\n\nval b = \"immutable\"\nb = \"change\"     // 编译错误\n",[4115],{"type":17,"tag":200,"props":4116,"children":4117},{"__ignoreMap":7},[4118],{"type":31,"value":4113},{"type":17,"tag":39,"props":4120,"children":4121},{},[4122,4124,4131,4133,4138],{"type":31,"value":4123},"Scala 明确区分了可变（mutable）对象和不可变（immutable）类，具体可以参考 ",{"type":17,"tag":145,"props":4125,"children":4128},{"href":4126,"rel":4127},"https://docs.scala-lang.org/overviews/collections-2.13/concrete-mutable-collection-classes.html",[149],[4129],{"type":31,"value":4130},"Concrete Mutable Collection Classes",{"type":31,"value":4132},", ",{"type":17,"tag":97,"props":4134,"children":4135},{},[4136],{"type":31,"value":4137},"也就是将可变的和不可变的都弄了个类型",{"type":31,"value":173},{"type":31,"value":4140},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",{"type":17,"tag":63,"props":4142,"children":4143},{},[4144,4170],{"type":17,"tag":67,"props":4145,"children":4146},{},[4147],{"type":17,"tag":71,"props":4148,"children":4149},{},[4150,4155,4160,4165],{"type":17,"tag":75,"props":4151,"children":4152},{},[4153],{"type":31,"value":4154},"集合类型",{"type":17,"tag":75,"props":4156,"children":4157},{},[4158],{"type":31,"value":4159},"不可变版本（immutable）",{"type":17,"tag":75,"props":4161,"children":4162},{},[4163],{"type":31,"value":4164},"可变版本（mutable）",{"type":17,"tag":75,"props":4166,"children":4167},{},[4168],{"type":31,"value":4169},"特点说明",{"type":17,"tag":86,"props":4171,"children":4172},{},[4173,4225,4263,4308,4346,4381],{"type":17,"tag":71,"props":4174,"children":4175},{},[4176,4181,4197,4220],{"type":17,"tag":93,"props":4177,"children":4178},{},[4179],{"type":31,"value":4180},"序列（seq）",{"type":17,"tag":93,"props":4182,"children":4183},{},[4184,4190,4191],{"type":17,"tag":200,"props":4185,"children":4187},{"className":4186},[],[4188],{"type":31,"value":4189},"list",{"type":31,"value":4132},{"type":17,"tag":200,"props":4192,"children":4194},{"className":4193},[],[4195],{"type":31,"value":4196},"vector",{"type":17,"tag":93,"props":4198,"children":4199},{},[4200,4206,4207,4213,4214],{"type":17,"tag":200,"props":4201,"children":4203},{"className":4202},[],[4204],{"type":31,"value":4205},"arraybuffer",{"type":31,"value":4132},{"type":17,"tag":200,"props":4208,"children":4210},{"className":4209},[],[4211],{"type":31,"value":4212},"listbuffer",{"type":31,"value":4132},{"type":17,"tag":200,"props":4215,"children":4217},{"className":4216},[],[4218],{"type":31,"value":4219},"queue",{"type":17,"tag":93,"props":4221,"children":4222},{},[4223],{"type":31,"value":4224},"list 是不可变链表，vector 性能更平衡，arraybuffer 可变、适合追加",{"type":17,"tag":71,"props":4226,"children":4227},{},[4228,4233,4249,4258],{"type":17,"tag":93,"props":4229,"children":4230},{},[4231],{"type":31,"value":4232},"集合（set）",{"type":17,"tag":93,"props":4234,"children":4235},{},[4236,4242,4243],{"type":17,"tag":200,"props":4237,"children":4239},{"className":4238},[],[4240],{"type":31,"value":4241},"set",{"type":31,"value":4132},{"type":17,"tag":200,"props":4244,"children":4246},{"className":4245},[],[4247],{"type":31,"value":4248},"sortedset",{"type":17,"tag":93,"props":4250,"children":4251},{},[4252],{"type":17,"tag":200,"props":4253,"children":4255},{"className":4254},[],[4256],{"type":31,"value":4257},"hashset",{"type":17,"tag":93,"props":4259,"children":4260},{},[4261],{"type":31,"value":4262},"不可变集合默认使用 hash 实现，可变集合有更多实现",{"type":17,"tag":71,"props":4264,"children":4265},{},[4266,4271,4286,4303],{"type":17,"tag":93,"props":4267,"children":4268},{},[4269],{"type":31,"value":4270},"映射（map）",{"type":17,"tag":93,"props":4272,"children":4273},{},[4274,4279,4280],{"type":17,"tag":200,"props":4275,"children":4277},{"className":4276},[],[4278],{"type":31,"value":2418},{"type":31,"value":372},{"type":17,"tag":200,"props":4281,"children":4283},{"className":4282},[],[4284],{"type":31,"value":4285},"SortedMap",{"type":17,"tag":93,"props":4287,"children":4288},{},[4289,4295,4297],{"type":17,"tag":200,"props":4290,"children":4292},{"className":4291},[],[4293],{"type":31,"value":4294},"hashmap",{"type":31,"value":4296}," , ",{"type":17,"tag":200,"props":4298,"children":4300},{"className":4299},[],[4301],{"type":31,"value":4302},"weakhashmap",{"type":17,"tag":93,"props":4304,"children":4305},{},[4306],{"type":31,"value":4307},"不可变 map 默认使用 hashmap，可变版本适合高性能需求",{"type":17,"tag":71,"props":4309,"children":4310},{},[4311,4316,4319,4341],{"type":17,"tag":93,"props":4312,"children":4313},{},[4314],{"type":31,"value":4315},"栈 / 队列",{"type":17,"tag":93,"props":4317,"children":4318},{},[],{"type":17,"tag":93,"props":4320,"children":4321},{},[4322,4327,4328,4334,4335],{"type":17,"tag":200,"props":4323,"children":4325},{"className":4324},[],[4326],{"type":31,"value":4219},{"type":31,"value":4132},{"type":17,"tag":200,"props":4329,"children":4331},{"className":4330},[],[4332],{"type":31,"value":4333},"stack",{"type":31,"value":4132},{"type":17,"tag":200,"props":4336,"children":4338},{"className":4337},[],[4339],{"type":31,"value":4340},"arraydeque",{"type":17,"tag":93,"props":4342,"children":4343},{},[4344],{"type":31,"value":4345},"可变和不可变队列同名，但位于不同包中",{"type":17,"tag":71,"props":4347,"children":4348},{},[4349,4354,4363,4371],{"type":17,"tag":93,"props":4350,"children":4351},{},[4352],{"type":31,"value":4353},"数组",{"type":17,"tag":93,"props":4355,"children":4356},{},[4357],{"type":17,"tag":200,"props":4358,"children":4360},{"className":4359},[],[4361],{"type":31,"value":4362},"array",{"type":17,"tag":93,"props":4364,"children":4365},{},[4366],{"type":17,"tag":200,"props":4367,"children":4369},{"className":4368},[],[4370],{"type":31,"value":4205},{"type":17,"tag":93,"props":4372,"children":4373},{},[4374,4379],{"type":17,"tag":200,"props":4375,"children":4377},{"className":4376},[],[4378],{"type":31,"value":4362},{"type":31,"value":4380}," 不是集合框架成员，但常用",{"type":17,"tag":71,"props":4382,"children":4383},{},[4384,4389,4405,4408],{"type":17,"tag":93,"props":4385,"children":4386},{},[4387],{"type":31,"value":4388},"特殊集合",{"type":17,"tag":93,"props":4390,"children":4391},{},[4392,4398,4399],{"type":17,"tag":200,"props":4393,"children":4395},{"className":4394},[],[4396],{"type":31,"value":4397},"range",{"type":31,"value":4132},{"type":17,"tag":200,"props":4400,"children":4402},{"className":4401},[],[4403],{"type":31,"value":4404},"emptyset",{"type":17,"tag":93,"props":4406,"children":4407},{},[],{"type":17,"tag":93,"props":4409,"children":4410},{},[4411],{"type":31,"value":4412},"用于构造或默认空集合值",{"type":17,"tag":39,"props":4414,"children":4415},{},[4416],{"type":31,"value":4417},"(真的是太多了，可能不是很全，大致了解下)",{"type":17,"tag":1239,"props":4419,"children":4420},{},[],{"type":17,"tag":45,"props":4422,"children":4424},{"id":4423},"并发-2",[4425],{"type":31,"value":4426},"并发 2",{"type":17,"tag":34,"props":4428,"children":4430},{"t":4429},"并发",[],{"type":17,"tag":3094,"props":4432,"children":4433},{"type":3096},[4434],{"type":17,"tag":39,"props":4435,"children":4436},{},[4437],{"type":31,"value":4438},"一个语言对可变性和不可变性的支持程度，直接影响它在并发编程中的优势与设计难度。",{"type":17,"tag":39,"props":4440,"children":4441},{},[4442],{"type":31,"value":4443},"上面这句话基本上就可以衡量一个语言在并发上的优势。例如不可变结构在多线程共享、无锁共享数据结构使用场景。但在此之前，我可以借助 scala 了解下一些并发模型，这样可以更加理解并发，同时适应于其他语言(毕竟模型一样，只不过语法变了)。",{"type":17,"tag":457,"props":4445,"children":4447},{"id":4446},"future-promise-1",[4448],{"type":31,"value":4449},"Future / Promise 1",{"type":17,"tag":34,"props":4451,"children":4453},{"t":4452,"type":256},"Future / Promise",[],{"type":17,"tag":39,"props":4455,"children":4456},{},[4457,4463],{"type":17,"tag":145,"props":4458,"children":4461},{"href":4459,"rel":4460},"https://en.wikipedia.org/wiki/Futures_and_promises",[149],[4462],{"type":31,"value":4452},{"type":31,"value":4464}," 一般他们是同时出现的，中文直译就是 “未来与承诺”。但是在 CS 中，有很多关于并发的专业名字，例如：",{"type":31,"value":803},{"type":17,"tag":63,"props":4467,"children":4468},{},[4469,4490],{"type":17,"tag":67,"props":4470,"children":4471},{},[4472],{"type":17,"tag":71,"props":4473,"children":4474},{},[4475,4480,4485],{"type":17,"tag":75,"props":4476,"children":4477},{},[4478],{"type":31,"value":4479},"Name",{"type":17,"tag":75,"props":4481,"children":4482},{},[4483],{"type":31,"value":4484},"Desc",{"type":17,"tag":75,"props":4486,"children":4487},{},[4488],{"type":31,"value":4489},"Chinese",{"type":17,"tag":86,"props":4491,"children":4492},{},[4493,4511,4529,4547],{"type":17,"tag":71,"props":4494,"children":4495},{},[4496,4501,4506],{"type":17,"tag":93,"props":4497,"children":4498},{},[4499],{"type":31,"value":4500},"future",{"type":17,"tag":93,"props":4502,"children":4503},{},[4504],{"type":31,"value":4505},"值将在未来某时可用。通常由系统或框架执行任务并返回。",{"type":17,"tag":93,"props":4507,"children":4508},{},[4509],{"type":31,"value":4510},"未来",{"type":17,"tag":71,"props":4512,"children":4513},{},[4514,4519,4524],{"type":17,"tag":93,"props":4515,"children":4516},{},[4517],{"type":31,"value":4518},"promise",{"type":17,"tag":93,"props":4520,"children":4521},{},[4522],{"type":31,"value":4523},"手动控制 Future 的完成。开发者显式 resolve/reject",{"type":17,"tag":93,"props":4525,"children":4526},{},[4527],{"type":31,"value":4528},"承诺",{"type":17,"tag":71,"props":4530,"children":4531},{},[4532,4537,4542],{"type":17,"tag":93,"props":4533,"children":4534},{},[4535],{"type":31,"value":4536},"delay",{"type":17,"tag":93,"props":4538,"children":4539},{},[4540],{"type":31,"value":4541},"尚未开始执行的任务（延迟计算），强调“推迟”",{"type":17,"tag":93,"props":4543,"children":4544},{},[4545],{"type":31,"value":4546},"延迟",{"type":17,"tag":71,"props":4548,"children":4549},{},[4550,4555,4560],{"type":17,"tag":93,"props":4551,"children":4552},{},[4553],{"type":31,"value":4554},"deferred",{"type":17,"tag":93,"props":4556,"children":4557},{},[4558],{"type":31,"value":4559},"一种控制句柄，表示延迟+手动完成的组合",{"type":17,"tag":93,"props":4561,"children":4562},{},[4563],{"type":31,"value":4564},"推迟",{"type":17,"tag":39,"props":4566,"children":4567},{},[4568,4570,4577,4579,4585,4587,4594],{"type":31,"value":4569},"在 Scala 文档的 ",{"type":17,"tag":145,"props":4571,"children":4574},{"href":4572,"rel":4573},"https://docs.scala-lang.org/scala3/book/concurrency.html",[149],[4575],{"type":31,"value":4576},"Concurrency",{"type":31,"value":4578}," 部分中，介绍了 ",{"type":17,"tag":200,"props":4580,"children":4582},{"className":4581},[],[4583],{"type":31,"value":4584},"scala.concurrent.Future",{"type":31,"value":4586}," 并且也有社区写的文档，例如 ",{"type":17,"tag":145,"props":4588,"children":4591},{"href":4589,"rel":4590},"https://docs.scala-lang.org/overviews/core/futures.html",[149],[4592],{"type":31,"value":4593},"Future and Promise",{"type":31,"value":2533},{"type":17,"tag":195,"props":4596,"children":4598},{"code":4597},"import scala.concurrent.{Future, Promise}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.util.{Success, Failure}\nimport scala.concurrent.Await\nimport scala.concurrent.duration._\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    // Future\n    val future = Future {\n      Thread.sleep(1000)\n      \"Hello from Future!\"\n    }\n    \n    future.onComplete {\n      case Success(msg) => println(msg)\n      case Failure(e) => println(s\"Error: ${e.getMessage}\")\n    }\n    \n    // Promise\n    val promise = Promise[String]()\n    val futureFromPromise = promise.future\n    \n    futureFromPromise.foreach(msg => println(msg))\n    \n    Future {\n      Thread.sleep(800)\n      promise.success(\"Hello from Promise!\")\n    }\n \n    // 最多等待 3ms\n    Await.result(Future.sequence(Seq(future, futureFromPromise)), 3.seconds)\n    println(\"END\")\n  }\n}\n",[4599],{"type":17,"tag":200,"props":4600,"children":4601},{"__ignoreMap":7},[4602],{"type":31,"value":4597},{"type":17,"tag":4604,"props":4605,"children":4606},"style",{},[4607],{"type":31,"value":4608},"\nmjx-container[jax=\"SVG\"] {\n  direction: ltr;\n}\n\nmjx-container[jax=\"SVG\"] > svg {\n  overflow: visible;\n  min-height: 1px;\n  min-width: 1px;\n}\n\nmjx-container[jax=\"SVG\"] > svg a {\n  fill: blue;\n  stroke: blue;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"] {\n  display: block;\n  text-align: center;\n  margin: 1em 0;\n}\n\nmjx-container[jax=\"SVG\"][display=\"true\"][width=\"full\"] {\n  display: flex;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"left\"] {\n  text-align: left;\n}\n\nmjx-container[jax=\"SVG\"][justify=\"right\"] {\n  text-align: right;\n}\n\ng[data-mml-node=\"merror\"] > g {\n  fill: red;\n  stroke: red;\n}\n\ng[data-mml-node=\"merror\"] > rect[data-background] {\n  fill: yellow;\n  stroke: none;\n}\n\ng[data-mml-node=\"mtable\"] > line[data-line], svg[data-table] > g > line[data-line] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > rect[data-frame], svg[data-table] > g > rect[data-frame] {\n  stroke-width: 70px;\n  fill: none;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dashed, svg[data-table] > g > .mjx-dashed {\n  stroke-dasharray: 140;\n}\n\ng[data-mml-node=\"mtable\"] > .mjx-dotted, svg[data-table] > g > .mjx-dotted {\n  stroke-linecap: round;\n  stroke-dasharray: 0,140;\n}\n\ng[data-mml-node=\"mtable\"] > g > svg {\n  overflow: visible;\n}\n\n[jax=\"SVG\"] mjx-tool {\n  display: inline-block;\n  position: relative;\n  width: 0;\n  height: 0;\n}\n\n[jax=\"SVG\"] mjx-tool > mjx-tip {\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\nmjx-tool > mjx-tip {\n  display: inline-block;\n  padding: .2em;\n  border: 1px solid #888;\n  font-size: 70%;\n  background-color: #F8F8F8;\n  color: black;\n  box-shadow: 2px 2px 5px #AAAAAA;\n}\n\ng[data-mml-node=\"maction\"][data-toggle] {\n  cursor: pointer;\n}\n\nmjx-status {\n  display: block;\n  position: fixed;\n  left: 1em;\n  bottom: 1em;\n  min-width: 25%;\n  padding: .2em .4em;\n  border: 1px solid #888;\n  font-size: 90%;\n  background-color: #F8F8F8;\n  color: black;\n}\n\nforeignObject[data-mjx-xml] {\n  font-family: initial;\n  line-height: normal;\n  overflow: visible;\n}\n\nmjx-container[jax=\"SVG\"] path[data-c], mjx-container[jax=\"SVG\"] use[data-c] {\n  stroke-width: 3;\n}\n",{"title":7,"searchDepth":4610,"depth":4610,"links":4611},2,[4612,4613,4617,4621,4625,4630,4631,4637,4638],{"id":47,"depth":4610,"text":50},{"id":250,"depth":4610,"text":253,"children":4614},[4615],{"id":459,"depth":4616,"text":462},3,{"id":543,"depth":4610,"text":546,"children":4618},[4619,4620],{"id":937,"depth":4616,"text":940},{"id":1100,"depth":4616,"text":1103},{"id":1244,"depth":4610,"text":1247,"children":4622},[4623,4624],{"id":2301,"depth":4616,"text":2304},{"id":2357,"depth":4616,"text":2360},{"id":2433,"depth":4610,"text":2436,"children":4626},[4627,4628,4629],{"id":2482,"depth":4616,"text":2485},{"id":2544,"depth":4616,"text":2547},{"id":2964,"depth":4616,"text":2967},{"id":3073,"depth":4610,"text":3076},{"id":3245,"depth":4610,"text":3248,"children":4632},[4633,4634,4635,4636],{"id":3326,"depth":4616,"text":3329},{"id":3430,"depth":4616,"text":3433},{"id":3623,"depth":4616,"text":3626},{"id":3734,"depth":4616,"text":3737},{"id":4042,"depth":4610,"text":4045},{"id":4423,"depth":4610,"text":4426,"children":4639},[4640],{"id":4446,"depth":4616,"text":4449},"markdown","content:book:test.md","content","book/test.md","md",1747227364909]