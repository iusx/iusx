[{"data":1,"prerenderedAt":1849},["Reactive",2],{"equalLink":3},[4,119,450,619,874],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,0,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":448,"_source":116,"_file":449,"_extension":118},"/plan/programming/cds","programming","cds","2025.08.22","life/plan/cds/1.jpg","封面：This is cds",100,20,"percent",{"type":21,"children":130,"toc":446},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139,169,182,192,205,211,216,240,245,248,262,271,276,352,365,379,387,392,441],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/iusx/cdx",[],{"type":24,"tag":40,"props":140,"children":141},{},[142,144,151,153,159,161,167],{"type":44,"value":143},"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":24,"tag":145,"props":146,"children":148},"code",{"className":147},[],[149],{"type":44,"value":150},"cd",{"type":44,"value":152}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":24,"tag":145,"props":154,"children":156},{"className":155},[],[157],{"type":44,"value":158},"nix-shell",{"type":44,"value":160}," > ",{"type":24,"tag":145,"props":162,"children":164},{"className":163},[],[165],{"type":44,"value":166},"nvim .",{"type":44,"value":168}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":24,"tag":40,"props":170,"children":171},{},[172,174,180],{"type":44,"value":173},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":24,"tag":145,"props":175,"children":177},{"className":176},[],[178],{"type":44,"value":179},"zsh",{"type":44,"value":181}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":24,"tag":183,"props":184,"children":186},"text-space",{"type":185},"tip",[187],{"type":24,"tag":40,"props":188,"children":189},{},[190],{"type":44,"value":191},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":24,"tag":40,"props":193,"children":194},{},[195,197,203],{"type":44,"value":196},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":24,"tag":145,"props":198,"children":200},{"className":199},[],[201],{"type":44,"value":202},"~/.cds",{"type":44,"value":204}," 中。",{"type":24,"tag":206,"props":207,"children":210},"text-title",{"t":208,"type":209},"为什么用 nim?","2",[],{"type":24,"tag":135,"props":212,"children":215},{"url":213,"type":214},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":24,"tag":40,"props":217,"children":218},{},[219,221,230,232,238],{"type":44,"value":220},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":24,"tag":222,"props":223,"children":227},"a",{"href":224,"rel":225},"https://learnxinyminutes.com/zh-cn/nim/",[226],"nofollow",[228],{"type":44,"value":229},"Y分钟速成X",{"type":44,"value":231},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":24,"tag":145,"props":233,"children":235},{"className":234},[],[236],{"type":44,"value":237},"or [up-to-date community version]",{"type":44,"value":239}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"type":24,"tag":40,"props":241,"children":242},{},[243],{"type":44,"value":244},"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”",{"type":24,"tag":57,"props":246,"children":247},{},[],{"type":24,"tag":40,"props":249,"children":250},{},[251,253,260],{"type":44,"value":252},"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 ",{"type":24,"tag":222,"props":254,"children":257},{"href":255,"rel":256},"https://github.com/ajeetdsouza/zoxide",[226],[258],{"type":44,"value":259},"zoxide",{"type":44,"value":261}," 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。",{"type":24,"tag":263,"props":264,"children":266},"pre",{"code":265},"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n",[267],{"type":24,"tag":145,"props":268,"children":269},{"__ignoreMap":8},[270],{"type":44,"value":265},{"type":24,"tag":40,"props":272,"children":273},{},[274],{"type":44,"value":275},"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化：",{"type":24,"tag":277,"props":278,"children":281},"ul",{"className":279},[280],"contains-task-list",[282,304,329],{"type":24,"tag":283,"props":284,"children":287},"li",{"className":285},[286],"task-list-item",[288,294,296,302],{"type":24,"tag":289,"props":290,"children":293},"input",{"disabled":291,"type":292},true,"checkbox",[],{"type":44,"value":295}," TUI：例如 ",{"type":24,"tag":145,"props":297,"children":299},{"className":298},[],[300],{"type":44,"value":301},"c list",{"type":44,"value":303}," 时候可以检索快捷方式",{"type":24,"tag":283,"props":305,"children":307},{"className":306},[286],[308,311,313,319,321,327],{"type":24,"tag":289,"props":309,"children":310},{"disabled":291,"type":292},[],{"type":44,"value":312}," 通过 ",{"type":24,"tag":145,"props":314,"children":316},{"className":315},[],[317],{"type":44,"value":318},"c c iusx",{"type":44,"value":320}," 进入到目录之后自动执行记录在 ",{"type":24,"tag":145,"props":322,"children":324},{"className":323},[],[325],{"type":44,"value":326},"~/.cds_config.json",{"type":44,"value":328}," 中的脚本命令",{"type":24,"tag":283,"props":330,"children":332},{"className":331},[286],[333,336,338,344,346],{"type":24,"tag":289,"props":334,"children":335},{"disabled":291,"type":292},[],{"type":44,"value":337}," Auto: 可以自动记录，例如 ",{"type":24,"tag":145,"props":339,"children":341},{"className":340},[],[342],{"type":44,"value":343},"/Users/uwu/Code/My/iusx",{"type":44,"value":345}," 的时候自动记录 ",{"type":24,"tag":145,"props":347,"children":349},{"className":348},[],[350],{"type":44,"value":351},"iusx: /Users/uwu/Code/My/iusx",{"type":24,"tag":40,"props":353,"children":354},{},[355,357,363],{"type":44,"value":356},"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 ",{"type":24,"tag":145,"props":358,"children":360},{"className":359},[],[361],{"type":44,"value":362},"brew install cds",{"type":44,"value":364}," 来进行安装了（貌似应该写一个安装脚本？。",{"type":24,"tag":40,"props":366,"children":367},{},[368,370,377],{"type":44,"value":369},"其实依赖 shell 环境也没什么的，毕竟连 Nim-lang 的 ",{"type":24,"tag":222,"props":371,"children":374},{"href":372,"rel":373},"https://github.com/nim-lang/choosenim",[226],[375],{"type":44,"value":376},"choosenim",{"type":44,"value":378}," 在安装完后也需要手动设置不是吗？",{"type":24,"tag":263,"props":380,"children":382},{"code":381},"choosenim-init: ChooseNim installed in /Users/uwu/.nimble/bin\nchoosenim-init: You must now ensure that the Nimble bin dir is in your PATH.\nchoosenim-init: Place the following line in the ~/.profile or ~/.bashrc file.\nchoosenim-init:     export PATH=/Users/uwu/.nimble/bin:$PATH\n",[383],{"type":24,"tag":145,"props":384,"children":385},{"__ignoreMap":8},[386],{"type":44,"value":381},{"type":24,"tag":40,"props":388,"children":389},{},[390],{"type":44,"value":391},"有时候就是这样，只有自己亲身体验才能体会一些奇妙的感觉。也就是踩坑，而不是照着答案去答题。最近看的 《心灵捕手》和 《萨利机长》刚好有这个情景，印象深刻的是《心灵捕手》中的一段对话：",{"type":24,"tag":96,"props":393,"children":396},{"by":394,"topic":395},"心灵捕手","知识与体验的区别",[397,402,411,416,421,426,431,436],{"type":24,"tag":40,"props":398,"children":399},{},[400],{"type":44,"value":401},"You've never been out of Boston.",{"type":24,"tag":403,"props":404,"children":405},"blockquote",{},[406],{"type":24,"tag":40,"props":407,"children":408},{},[409],{"type":44,"value":410},"Nope",{"type":24,"tag":40,"props":412,"children":413},{},[414],{"type":44,"value":415},"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written",{"type":24,"tag":40,"props":417,"children":418},{},[419],{"type":44,"value":420},"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope.",{"type":24,"tag":40,"props":422,"children":423},{},[424],{"type":44,"value":425},"Sexual orientation. the whole works, right?",{"type":24,"tag":40,"props":427,"children":428},{},[429],{"type":44,"value":430},"I bet you can't tell me what it smells like\nin the Sistione Chapel",{"type":24,"tag":40,"props":432,"children":433},{},[434],{"type":44,"value":435},"You never actually stood there\nlooked up ar that beautiful ceiling.",{"type":24,"tag":40,"props":437,"children":438},{},[439],{"type":44,"value":440},"Seen that",{"type":24,"tag":40,"props":442,"children":443},{},[444],{"type":44,"value":445},"有的时候就是这样，例如将 Linus 作为主系统自然就会学习到很多与其相关的知识。游玩 Minecraft 之后自然会想要知道光影、Mode、材质是怎么制作的，甚至与好友公共游玩他人服务器的时候脑海中也会浮现出：“我也想开一个服务器” 的这种想法，自然而然的就能接触到 Linux、Windows server，甚至是 Java。",{"title":8,"searchDepth":112,"depth":112,"links":447},[],"content:plan:programming:cds.md","plan/programming/cds.md",{"_path":451,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":452,"description":8,"director":11,"time":453,"types":13,"img":454,"info":455,"client":16,"target":126,"current":456,"displayType":128,"body":457,"_type":114,"_id":617,"_source":116,"_file":618,"_extension":118},"/plan/programming/command-hide","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",99.99,{"type":21,"children":458,"toc":615},[459],{"type":24,"tag":25,"props":460,"children":461},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[462,466,471,485,493,507,521,524,529,550,563,571],{"type":24,"tag":135,"props":463,"children":465},{"url":464},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":467,"children":470},{"url":468,"type":469},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":472,"children":473},{},[474,476,483],{"type":44,"value":475},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":222,"props":477,"children":480},{"href":478,"rel":479},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[226],[481],{"type":44,"value":482},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":484}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":183,"props":486,"children":487},{"type":185},[488],{"type":24,"tag":40,"props":489,"children":490},{},[491],{"type":44,"value":492},"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。",{"type":24,"tag":40,"props":494,"children":495},{},[496,498,505],{"type":44,"value":497},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":222,"props":499,"children":502},{"href":500,"rel":501},"https://github.com/folke/lazy.nvim",[226],[503],{"type":44,"value":504},"lazy.nvim",{"type":44,"value":506},"。",{"type":24,"tag":40,"props":508,"children":509},{},[510,512,519],{"type":44,"value":511},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":222,"props":513,"children":516},{"href":514,"rel":515},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[226],[517],{"type":44,"value":518},"dragove/nvim/.config/nvim",{"type":44,"value":520}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":522,"children":523},{},[],{"type":24,"tag":40,"props":525,"children":526},{},[527],{"type":44,"value":528},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":530,"children":531},{},[532,534,540,542,548],{"type":44,"value":533},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":145,"props":535,"children":537},{"className":536},[],[538],{"type":44,"value":539},"\u003Ctemplate>\u003C/template>",{"type":44,"value":541}," 中出现了 ",{"type":24,"tag":145,"props":543,"children":545},{"className":544},[],[546],{"type":44,"value":547},"\u003Cp>//\u003C/p>",{"type":44,"value":549}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":551,"children":552},{},[553,555,561],{"type":44,"value":554},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":145,"props":556,"children":558},{"className":557},[],[559],{"type":44,"value":560},"js\\html\\css",{"type":44,"value":562}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":263,"props":564,"children":566},{"code":565},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[567],{"type":24,"tag":145,"props":568,"children":569},{"__ignoreMap":8},[570],{"type":44,"value":565},{"type":24,"tag":40,"props":572,"children":573},{},[574,576,582,584,590,592,598,600,606,607,613],{"type":44,"value":575},"也就是说需要 ",{"type":24,"tag":145,"props":577,"children":579},{"className":578},[],[580],{"type":44,"value":581},"\u003Cscript>",{"type":44,"value":583}," 用 js 的注释, ",{"type":24,"tag":145,"props":585,"children":587},{"className":586},[],[588],{"type":44,"value":589},"\u003Ctemplate>",{"type":44,"value":591}," 用 ",{"type":24,"tag":145,"props":593,"children":595},{"className":594},[],[596],{"type":44,"value":597},"html",{"type":44,"value":599}," 的注释，",{"type":24,"tag":145,"props":601,"children":603},{"className":602},[],[604],{"type":44,"value":605},"style",{"type":44,"value":591},{"type":24,"tag":145,"props":608,"children":610},{"className":609},[],[611],{"type":44,"value":612},"css",{"type":44,"value":614}," 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（可能我成为不了一位优秀的 Coder 是有原因的，很大一部分原因是因为我懒。",{"title":8,"searchDepth":112,"depth":112,"links":616},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":620,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":621,"description":622,"director":11,"time":623,"types":13,"img":624,"info":625,"client":16,"target":126,"current":626,"displayType":128,"body":627,"_type":114,"_id":872,"_source":116,"_file":873,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/plan/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":628,"toc":870},[629],{"type":24,"tag":25,"props":630,"children":631},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[632,635,640,645,650,655,660,665,670,675,678,692,700,705,721,726,740,786,791,796,801,811,816,821,829,834,843,857,865],{"type":24,"tag":35,"props":633,"children":634},{":desc":37},[],{"type":24,"tag":40,"props":636,"children":637},{},[638],{"type":44,"value":639},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":183,"props":641,"children":644},{"img":642,"info":643},"life/plan/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":646,"children":647},{},[648],{"type":44,"value":649},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":651,"children":652},{},[653],{"type":44,"value":654},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":656,"children":657},{},[658],{"type":44,"value":659},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":183,"props":661,"children":664},{"img":662,"info":663},"life/plan/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":666,"children":667},{},[668],{"type":44,"value":669},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":671,"children":672},{},[673],{"type":44,"value":674},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":676,"children":677},{},[],{"type":24,"tag":40,"props":679,"children":680},{},[681,683,690],{"type":44,"value":682},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":222,"props":684,"children":687},{"href":685,"rel":686},"https://en.wikipedia.org/wiki/CSS_hack",[226],[688],{"type":44,"value":689},"CSS Hack",{"type":44,"value":691}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":263,"props":693,"children":695},{"code":694},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[696],{"type":24,"tag":145,"props":697,"children":698},{"__ignoreMap":8},[699],{"type":44,"value":694},{"type":24,"tag":40,"props":701,"children":702},{},[703],{"type":44,"value":704},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":706,"children":709},{"by":707,"topic":708},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[710],{"type":24,"tag":40,"props":711,"children":712},{},[713,715,719],{"type":44,"value":714},"Some of those people dont't do a lot",{"type":24,"tag":716,"props":717,"children":718},"br",{},[],{"type":44,"value":720},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":722,"children":723},{},[724],{"type":44,"value":725},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":727,"children":728},{},[729,731,738],{"type":44,"value":730},"最近在玩 ",{"type":24,"tag":222,"props":732,"children":735},{"href":733,"rel":734},"https://store.steampowered.com/app/2585110/_/",[226],[736],{"type":44,"value":737},"《我在疗养院送人上西天》",{"type":44,"value":739}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":741,"children":744},{"by":742,"topic":743},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[745],{"type":24,"tag":40,"props":746,"children":747},{},[748,750,753,755,758,760,763,765,768,771,773,776,778,781,783],{"type":44,"value":749},"but that's not everybody,",{"type":24,"tag":716,"props":751,"children":752},{},[],{"type":44,"value":754},"\ni care about the thechnology",{"type":24,"tag":716,"props":756,"children":757},{},[],{"type":44,"value":759},"\nthere are people who care about the ui",{"type":24,"tag":716,"props":761,"children":762},{},[],{"type":44,"value":764},"\ni can't do ui to save my life.",{"type":24,"tag":716,"props":766,"children":767},{},[],{"type":24,"tag":716,"props":769,"children":770},{},[],{"type":44,"value":772},"\ni mean, if i was stranded on an island,",{"type":24,"tag":716,"props":774,"children":775},{},[],{"type":44,"value":777},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":716,"props":779,"children":780},{},[],{"type":44,"value":782},"\ni'd die there.",{"type":24,"tag":716,"props":784,"children":785},{},[],{"type":24,"tag":40,"props":787,"children":788},{},[789],{"type":44,"value":790},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":792,"children":793},{},[794],{"type":44,"value":795},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":797,"children":798},{},[799],{"type":44,"value":800},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":802,"children":805},{"by":803,"topic":804},"Wikipedia","Frontend and backend",[806],{"type":24,"tag":40,"props":807,"children":808},{},[809],{"type":44,"value":810},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":812,"children":813},{},[814],{"type":44,"value":815},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":817,"children":818},{},[819],{"type":44,"value":820},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":183,"props":822,"children":823},{"type":185},[824],{"type":24,"tag":40,"props":825,"children":826},{},[827],{"type":44,"value":828},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":830,"children":831},{},[832],{"type":44,"value":833},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":835,"children":836},{},[837],{"type":24,"tag":838,"props":839,"children":840},"del",{},[841],{"type":44,"value":842},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":844,"children":845},{},[846,848,855],{"type":44,"value":847},"可能这个现象可以用 ",{"type":24,"tag":222,"props":849,"children":852},{"href":850,"rel":851},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[226],[853],{"type":44,"value":854},"Dunning–Kruger effect",{"type":44,"value":856}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":858,"children":859},{"by":803,"topic":854},[860],{"type":24,"tag":40,"props":861,"children":862},{},[863],{"type":44,"value":864},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":866,"children":867},{},[868],{"type":44,"value":869},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":871},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":875,"_dir":876,"_draft":7,"_partial":7,"_locale":8,"title":877,"description":8,"director":16,"img":878,"time":879,"plan":880,"target":126,"current":881,"displayType":128,"body":882,"_type":114,"_id":1847,"_source":116,"_file":1848,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":883,"toc":1837},[884],{"type":24,"tag":885,"props":886,"children":889},"book-content",{":by":887,":img":28,":plan":888,":title":31},"director","plan",[890,894,899,904,909,914,919,922,929,936,943,955,995,1009,1020,1042,1045,1051,1066,1088,1125,1147,1169,1185,1193,1201,1213,1221,1242,1250,1253,1259,1270,1290,1316,1321,1342,1390,1411,1416,1434,1447,1475,1480,1483,1489,1512,1566,1618,1638,1661,1671,1699,1707,1712,1720,1733,1741,1744,1750,1754,1766,1823,1829],{"type":24,"tag":206,"props":891,"children":893},{":t":892},"CVE is my dream.",[],{"type":24,"tag":40,"props":895,"children":896},{},[897],{"type":44,"value":898},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":900,"children":901},{},[902],{"type":44,"value":903},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":905,"children":906},{},[907],{"type":44,"value":908},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":910,"children":911},{},[912],{"type":44,"value":913},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":915,"children":916},{},[917],{"type":44,"value":918},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":920,"children":921},{},[],{"type":24,"tag":923,"props":924,"children":926},"h1",{"id":925},"rust-3",[927],{"type":44,"value":928},"rust 3",{"type":24,"tag":930,"props":931,"children":933},"h2",{"id":932},"github-3",[934],{"type":44,"value":935},"Github 3",{"type":24,"tag":937,"props":938,"children":940},"h3",{"id":939},"cve-2022-36114-1",[941],{"type":44,"value":942},"CVE-2022-36114 1",{"type":24,"tag":944,"props":945,"children":949},"cve-info",{":type":209,"cve":946,"to":947,":cwe":948},"CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[950],{"type":24,"tag":40,"props":951,"children":952},{},[953],{"type":44,"value":954},"不受控制的资源消耗",{"type":24,"tag":40,"props":956,"children":957},{},[958,960,967,969,976,978,984,986,993],{"type":44,"value":959},"利用 Cargo 的 ",{"type":24,"tag":222,"props":961,"children":964},{"href":962,"rel":963},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[226],[965],{"type":44,"value":966},"build script",{"type":44,"value":968}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":222,"props":970,"children":973},{"href":971,"rel":972},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[226],[974],{"type":44,"value":975},"procedural macros",{"type":44,"value":977},"，在执行 ",{"type":24,"tag":145,"props":979,"children":981},{"className":980},[],[982],{"type":44,"value":983},"cargo run",{"type":44,"value":985}," 的过程中触发了一个 ",{"type":24,"tag":222,"props":987,"children":990},{"href":988,"rel":989},"https://en.wikipedia.org/wiki/Zip_bomb",[226],[991],{"type":44,"value":992},"Zip Bomb",{"type":44,"value":994}," 行为。",{"type":24,"tag":40,"props":996,"children":997},{},[998,1000,1007],{"type":44,"value":999},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":222,"props":1001,"children":1004},{"href":1002,"rel":1003},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[226],[1005],{"type":44,"value":1006},"补丁修复",{"type":44,"value":1008}," Zip_bomb 的问题:",{"type":24,"tag":263,"props":1010,"children":1015},{"code":1011,"language":1012,"meta":8,"className":1013},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[1014],"language-c",[1016],{"type":24,"tag":145,"props":1017,"children":1018},{"__ignoreMap":8},[1019],{"type":44,"value":1011},{"type":24,"tag":40,"props":1021,"children":1022},{},[1023,1025,1031,1033,1040],{"type":44,"value":1024},"同时引入了 ",{"type":24,"tag":145,"props":1026,"children":1028},{"className":1027},[],[1029],{"type":44,"value":1030},"LimitErrorReader",{"type":44,"value":1032},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":222,"props":1034,"children":1037},{"href":1035,"rel":1036},"https://crates.io/",[226],[1038],{"type":44,"value":1039},"crates",{"type":44,"value":1041}," 上提交的 crate。",{"type":24,"tag":57,"props":1043,"children":1044},{},[],{"type":24,"tag":937,"props":1046,"children":1048},{"id":1047},"cve-2023-40030-1",[1049],{"type":44,"value":1050},"CVE-2023-40030 1",{"type":24,"tag":944,"props":1052,"children":1057},{":type":1053,"cve":1054,"to":1055,":cwe":1056},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[1058],{"type":24,"tag":40,"props":1059,"children":1060},{},[1061,1063],{"type":44,"value":1062},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":716,"props":1064,"children":1065},{},[],{"type":24,"tag":40,"props":1067,"children":1068},{},[1069,1071,1077,1079,1086],{"type":44,"value":1070},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":145,"props":1072,"children":1074},{"className":1073},[],[1075],{"type":44,"value":1076},"cargo build --timings",{"type":44,"value":1078}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":222,"props":1080,"children":1083},{"href":1081,"rel":1082},"https://doc.rust-lang.org/cargo/reference/timings.html",[226],[1084],{"type":44,"value":1085},"--timings",{"type":44,"value":1087}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":1089,"children":1090},{},[1091,1093,1099,1101,1107,1109,1115,1117,1123],{"type":44,"value":1092},"可以通过在 ",{"type":24,"tag":145,"props":1094,"children":1096},{"className":1095},[],[1097],{"type":44,"value":1098},"Cargo.toml",{"type":44,"value":1100}," 中加入 ",{"type":24,"tag":145,"props":1102,"children":1104},{"className":1103},[],[1105],{"type":44,"value":1106},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":1108}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":145,"props":1110,"children":1112},{"className":1111},[],[1113],{"type":44,"value":1114},"Warning",{"type":44,"value":1116},", 换成了 ",{"type":24,"tag":145,"props":1118,"children":1120},{"className":1119},[],[1121],{"type":44,"value":1122},"bail!",{"type":44,"value":1124}," 机制。",{"type":24,"tag":183,"props":1126,"children":1127},{"type":185},[1128],{"type":24,"tag":40,"props":1129,"children":1130},{},[1131,1136,1138,1145],{"type":24,"tag":145,"props":1132,"children":1134},{"className":1133},[],[1135],{"type":44,"value":1122},{"type":44,"value":1137}," 宏来自 ",{"type":24,"tag":222,"props":1139,"children":1142},{"href":1140,"rel":1141},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[226],[1143],{"type":44,"value":1144},"anyhow",{"type":44,"value":1146}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":1148,"children":1149},{},[1150,1152,1159,1161,1167],{"type":44,"value":1151},"可以看一下 ",{"type":24,"tag":222,"props":1153,"children":1156},{"href":1154,"rel":1155},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[226],[1157],{"type":44,"value":1158},"fix pr",{"type":44,"value":1160},"，非常有意思，比如 ",{"type":24,"tag":145,"props":1162,"children":1164},{"className":1163},[],[1165],{"type":44,"value":1166},"validate_feature_name",{"type":44,"value":1168}," 函数。",{"type":24,"tag":40,"props":1170,"children":1171},{},[1172,1174,1180,1182],{"type":44,"value":1173},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":145,"props":1175,"children":1177},{"className":1176},[],[1178],{"type":44,"value":1179},"warning",{"type":44,"value":1181},"，流程继续。",{"type":24,"tag":716,"props":1183,"children":1184},{},[],{"type":24,"tag":263,"props":1186,"children":1188},{"code":1187},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[1189],{"type":24,"tag":145,"props":1190,"children":1191},{"__ignoreMap":8},[1192],{"type":44,"value":1187},{"type":24,"tag":183,"props":1194,"children":1195},{"type":185},[1196],{"type":24,"tag":40,"props":1197,"children":1198},{},[1199],{"type":44,"value":1200},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":1202,"children":1203},{},[1204,1206,1211],{"type":44,"value":1205},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":145,"props":1207,"children":1209},{"className":1208},[],[1210],{"type":44,"value":1122},{"type":44,"value":1212},"，构建中止，用户必须修正。",{"type":24,"tag":263,"props":1214,"children":1216},{"code":1215}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[1217],{"type":24,"tag":145,"props":1218,"children":1219},{"__ignoreMap":8},[1220],{"type":44,"value":1215},{"type":24,"tag":40,"props":1222,"children":1223},{},[1224,1226,1232,1234,1240],{"type":44,"value":1225},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":145,"props":1227,"children":1229},{"className":1228},[],[1230],{"type":44,"value":1231},"is_ok()",{"type":44,"value":1233}," 是合法的，而 ",{"type":24,"tag":145,"props":1235,"children":1237},{"className":1236},[],[1238],{"type":44,"value":1239},"is_err()",{"type":44,"value":1241}," 是不合法的：",{"type":24,"tag":263,"props":1243,"children":1245},{"code":1244}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[1246],{"type":24,"tag":145,"props":1247,"children":1248},{"__ignoreMap":8},[1249],{"type":44,"value":1244},{"type":24,"tag":57,"props":1251,"children":1252},{},[],{"type":24,"tag":937,"props":1254,"children":1256},{"id":1255},"cve-2023-41051-1",[1257],{"type":44,"value":1258},"CVE-2023-41051 1",{"type":24,"tag":944,"props":1260,"children":1264},{":type":1053,"cve":1261,"to":1262,":cwe":1263},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[1265],{"type":24,"tag":40,"props":1266,"children":1267},{},[1268],{"type":44,"value":1269},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":1271,"children":1272},{},[1273,1280,1282,1288],{"type":24,"tag":222,"props":1274,"children":1277},{"href":1275,"rel":1276},"https://github.com/rust-vmm/vm-memory",[226],[1278],{"type":44,"value":1279},"vm-memory",{"type":44,"value":1281}," 的 ",{"type":24,"tag":145,"props":1283,"children":1285},{"className":1284},[],[1286],{"type":44,"value":1287},"VolatileMemory",{"type":44,"value":1289}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":1291,"props":1292,"children":1293},"ol",{},[1294,1305],{"type":24,"tag":283,"props":1295,"children":1296},{},[1297,1303],{"type":24,"tag":145,"props":1298,"children":1300},{"className":1299},[],[1301],{"type":44,"value":1302},"VolatileMemory::get_slice",{"type":44,"value":1304},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":283,"props":1306,"children":1307},{},[1308,1314],{"type":24,"tag":145,"props":1309,"children":1311},{"className":1310},[],[1312],{"type":44,"value":1313},"VolatileMemory::read/write",{"type":44,"value":1315},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":1317,"children":1318},{},[1319],{"type":44,"value":1320},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":1322,"children":1323},{},[1324,1326,1332,1334,1340],{"type":44,"value":1325},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":145,"props":1327,"children":1329},{"className":1328},[],[1330],{"type":44,"value":1331},"read/write",{"type":44,"value":1333},"，更多的是 ",{"type":24,"tag":145,"props":1335,"children":1337},{"className":1336},[],[1338],{"type":44,"value":1339},"get_slice",{"type":44,"value":1341}," 方法，例如：",{"type":24,"tag":1291,"props":1343,"children":1344},{},[1345,1354,1363,1372,1381],{"type":24,"tag":283,"props":1346,"children":1347},{},[1348],{"type":24,"tag":145,"props":1349,"children":1351},{"className":1350},[],[1352],{"type":44,"value":1353},"get_atomic_ref",{"type":24,"tag":283,"props":1355,"children":1356},{},[1357],{"type":24,"tag":145,"props":1358,"children":1360},{"className":1359},[],[1361],{"type":44,"value":1362},"aligned_as_ref",{"type":24,"tag":283,"props":1364,"children":1365},{},[1366],{"type":24,"tag":145,"props":1367,"children":1369},{"className":1368},[],[1370],{"type":44,"value":1371},"aligned_as_mut",{"type":24,"tag":283,"props":1373,"children":1374},{},[1375],{"type":24,"tag":145,"props":1376,"children":1378},{"className":1377},[],[1379],{"type":44,"value":1380},"get_ref",{"type":24,"tag":283,"props":1382,"children":1383},{},[1384],{"type":24,"tag":145,"props":1385,"children":1387},{"className":1386},[],[1388],{"type":44,"value":1389},"get_array_ref",{"type":24,"tag":40,"props":1391,"children":1392},{},[1393,1395,1401,1403,1409],{"type":44,"value":1394},"上述方法有个共同点，都是利用 ",{"type":24,"tag":145,"props":1396,"children":1398},{"className":1397},[],[1399],{"type":44,"value":1400},"ref",{"type":44,"value":1402}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":145,"props":1404,"children":1406},{"className":1405},[],[1407],{"type":44,"value":1408},"&[T]",{"type":44,"value":1410}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1412,"children":1413},{},[1414],{"type":44,"value":1415},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":1291,"props":1417,"children":1418},{},[1419,1424,1429],{"type":24,"tag":283,"props":1420,"children":1421},{},[1422],{"type":44,"value":1423},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":283,"props":1425,"children":1426},{},[1427],{"type":44,"value":1428},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":283,"props":1430,"children":1431},{},[1432],{"type":44,"value":1433},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1435,"children":1436},{},[1437,1439,1445],{"type":44,"value":1438},"仔细欣赏 ",{"type":24,"tag":222,"props":1440,"children":1443},{"href":1441,"rel":1442},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[226],[1444],{"type":44,"value":1158},{"type":44,"value":1446}," 你会发现：",{"type":24,"tag":40,"props":1448,"children":1449},{},[1450,1452,1458,1460,1465,1467,1473],{"type":44,"value":1451},"这些方法内部，都会调用 ",{"type":24,"tag":145,"props":1453,"children":1455},{"className":1454},[],[1456],{"type":44,"value":1457},"get_slice(offset, count)",{"type":44,"value":1459}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":145,"props":1461,"children":1463},{"className":1462},[],[1464],{"type":44,"value":1339},{"type":44,"value":1466}," 加上 ",{"type":24,"tag":145,"props":1468,"children":1470},{"className":1469},[],[1471],{"type":44,"value":1472},"assert_eq!",{"type":44,"value":1474}," 就意味着：",{"type":24,"tag":40,"props":1476,"children":1477},{},[1478],{"type":44,"value":1479},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1481,"children":1482},{},[],{"type":24,"tag":937,"props":1484,"children":1486},{"id":1485},"cve-2023-38497-1",[1487],{"type":44,"value":1488},"CVE-2023-38497 1",{"type":24,"tag":944,"props":1490,"children":1495},{":type":1491,"cve":1492,"to":1493,"cwe":1494},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1496,1504],{"type":24,"tag":40,"props":1497,"children":1498},{},[1499,1501],{"type":44,"value":1500},"278: 不安全的保留继承权限",{"type":24,"tag":716,"props":1502,"children":1503},{},[],{"type":24,"tag":277,"props":1505,"children":1506},{},[1507],{"type":24,"tag":283,"props":1508,"children":1509},{},[1510],{"type":44,"value":1511},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1513,"children":1514},{},[1515,1517,1524,1526,1532,1534,1539,1541,1548,1550,1556,1558,1564],{"type":44,"value":1516},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":222,"props":1518,"children":1521},{"href":1519,"rel":1520},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[226],[1522],{"type":44,"value":1523},"CVE-2005-1724",{"type":44,"value":1525},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1527,"props":1528,"children":1529},"strong",{},[1530],{"type":44,"value":1531},"权限限制”",{"type":44,"value":1533},"。总的来说 umask 是 ",{"type":24,"tag":1527,"props":1535,"children":1536},{},[1537],{"type":44,"value":1538},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1540},"，可以看看 ",{"type":24,"tag":222,"props":1542,"children":1545},{"href":1543,"rel":1544},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[226],[1546],{"type":44,"value":1547},"Linux中umask深入理解\n",{"type":44,"value":1549},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":145,"props":1551,"children":1553},{"className":1552},[],[1554],{"type":44,"value":1555},"bash",{"type":44,"value":1557}," 脚本的时候，会使用 ",{"type":24,"tag":145,"props":1559,"children":1561},{"className":1560},[],[1562],{"type":44,"value":1563},"chmod 777",{"type":44,"value":1565},", 要不然运行不了。",{"type":24,"tag":183,"props":1567,"children":1568},{"type":185},[1569,1579,1584,1605,1613],{"type":24,"tag":40,"props":1570,"children":1571},{},[1572,1574],{"type":44,"value":1573},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1527,"props":1575,"children":1576},{},[1577],{"type":44,"value":1578},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1580,"children":1581},{},[1582],{"type":44,"value":1583},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1585,"children":1586},{},[1587,1589,1595,1597,1603],{"type":44,"value":1588},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":145,"props":1590,"children":1592},{"className":1591},[],[1593],{"type":44,"value":1594},"-network",{"type":44,"value":1596}," 和 ",{"type":24,"tag":145,"props":1598,"children":1600},{"className":1599},[],[1601],{"type":44,"value":1602},"-mask",{"type":44,"value":1604},"：",{"type":24,"tag":263,"props":1606,"children":1608},{"code":1607},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1609],{"type":24,"tag":145,"props":1610,"children":1611},{"__ignoreMap":8},[1612],{"type":44,"value":1607},{"type":24,"tag":40,"props":1614,"children":1615},{},[1616],{"type":44,"value":1617},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1619,"children":1620},{},[1621,1623,1628,1630,1636],{"type":44,"value":1622},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1527,"props":1624,"children":1625},{},[1626],{"type":44,"value":1627},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1629},"。而 ",{"type":24,"tag":145,"props":1631,"children":1633},{"className":1632},[],[1634],{"type":44,"value":1635},"umask",{"type":44,"value":1637}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1639,"props":1640,"children":1642},"text-tip",{"type":1641},"big",[1643],{"type":24,"tag":40,"props":1644,"children":1645},{},[1646,1648,1654,1656,1659],{"type":44,"value":1647},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":145,"props":1649,"children":1651},{"className":1650},[],[1652],{"type":44,"value":1653},"777",{"type":44,"value":1655}," 权限构建攻击脚本。",{"type":24,"tag":716,"props":1657,"children":1658},{},[],{"type":44,"value":1660},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1662,"children":1663},{},[1664,1666],{"type":44,"value":1665},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1527,"props":1667,"children":1668},{},[1669],{"type":44,"value":1670},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1672,"children":1673},{},[1674,1676,1682,1684,1690,1692,1697],{"type":44,"value":1675},"在 ",{"type":24,"tag":145,"props":1677,"children":1679},{"className":1678},[],[1680],{"type":44,"value":1681},"src/cargo/util/mod.rs",{"type":44,"value":1683}," 中新增了 ",{"type":24,"tag":145,"props":1685,"children":1687},{"className":1686},[],[1688],{"type":44,"value":1689},"get_umask()",{"type":44,"value":1691}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":145,"props":1693,"children":1695},{"className":1694},[],[1696],{"type":44,"value":1635},{"type":44,"value":1698}," 限制新文件的权限。：",{"type":24,"tag":263,"props":1700,"children":1702},{"code":1701},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1703],{"type":24,"tag":145,"props":1704,"children":1705},{"__ignoreMap":8},[1706],{"type":44,"value":1701},{"type":24,"tag":40,"props":1708,"children":1709},{},[1710],{"type":44,"value":1711},"以及很有艺术性的一行 code:",{"type":24,"tag":263,"props":1713,"children":1715},{"code":1714},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1716],{"type":24,"tag":145,"props":1717,"children":1718},{"__ignoreMap":8},[1719],{"type":44,"value":1714},{"type":24,"tag":40,"props":1721,"children":1722},{},[1723,1725,1731],{"type":44,"value":1724},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":145,"props":1726,"children":1728},{"className":1727},[],[1729],{"type":44,"value":1730},"!umask",{"type":44,"value":1732}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":263,"props":1734,"children":1736},{"code":1735},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1737],{"type":24,"tag":145,"props":1738,"children":1739},{"__ignoreMap":8},[1740],{"type":44,"value":1735},{"type":24,"tag":57,"props":1742,"children":1743},{},[],{"type":24,"tag":930,"props":1745,"children":1747},{"id":1746},"polyduekes-3",[1748],{"type":44,"value":1749},"Polyduekes 3",{"type":24,"tag":206,"props":1751,"children":1753},{"t":1752},"Polyduekes",[],{"type":24,"tag":40,"props":1755,"children":1756},{},[1757,1759,1764],{"type":44,"value":1758},"在 telegram 认识到的热心群 U，得知我的目标是 Rust CVE 之后回复我了一个他整理过的合集。很有大佬的风范，特别是那句 ",{"type":24,"tag":1527,"props":1760,"children":1761},{},[1762],{"type":44,"value":1763},"the rust cve part is easy, just look at the stdlib",{"type":44,"value":1765},"。据我视奸过后，确实是一位经验丰富的大佬，例如：",{"type":24,"tag":1291,"props":1767,"children":1768},{},[1769,1778,1787,1796,1805,1814],{"type":24,"tag":283,"props":1770,"children":1771},{},[1772],{"type":24,"tag":222,"props":1773,"children":1776},{"href":1774,"rel":1775},"https://aur.archlinux.org/packages/pldget",[226],[1777],{"type":44,"value":1774},{"type":24,"tag":283,"props":1779,"children":1780},{},[1781],{"type":24,"tag":222,"props":1782,"children":1785},{"href":1783,"rel":1784},"https://git.sr.ht/~cdv/polydeukes",[226],[1786],{"type":44,"value":1783},{"type":24,"tag":283,"props":1788,"children":1789},{},[1790],{"type":24,"tag":222,"props":1791,"children":1794},{"href":1792,"rel":1793},"https://github.com/chrisvittal",[226],[1795],{"type":44,"value":1792},{"type":24,"tag":283,"props":1797,"children":1798},{},[1799],{"type":24,"tag":222,"props":1800,"children":1803},{"href":1801,"rel":1802},"https://git.sr.ht/~cdv/",[226],[1804],{"type":44,"value":1801},{"type":24,"tag":283,"props":1806,"children":1807},{},[1808],{"type":24,"tag":222,"props":1809,"children":1812},{"href":1810,"rel":1811},"https://chris.vittal.dev/",[226],[1813],{"type":44,"value":1810},{"type":24,"tag":283,"props":1815,"children":1816},{},[1817],{"type":24,"tag":222,"props":1818,"children":1821},{"href":1819,"rel":1820},"https://github.com/rust-lang/rust/commits?author=chrisvittal",[226],[1822],{"type":44,"value":1819},{"type":24,"tag":1824,"props":1825,"children":1828},"img-tip",{"text":1826,"url":1827},"之所以能机缘巧合得到大佬的这句话，源自于我看到了频道中转发的这个表情包，然后想起了小学时想用它攻击学校官网让其瘫痪的那个上午。\u003Cbr>\u003Cbr>不过攻击并没有成功，只是返回了 503, 换一台设备还能继续访问，可能当时需要通过类似 https://spys.one/en/ 这样的 IP 池才行。\u003Cbr>\u003Cbr>我当时一度认为这个软件没什么用，但频道的另一位管理员回复我说在他们那个年代，他通过这个软件让其一个论坛瘫痪掉了。\u003Cbr>\u003Cbr>有一说一十多年过去了，当时的界面就算拿到现在来看也并不过时。","cve/1.jpg",[],{"type":24,"tag":263,"props":1830,"children":1832},{"code":1831},"the rust cve part is easy, just look at the stdlib \nhttps://www.cve.org/CVERecord?id=CVE-2024-24576\nhttps://www.cve.org/CVERecord?id=CVE-2022-21658\nhttps://www.cve.org/CVERecord?id=CVE-2021-31162\nhttps://www.cve.org/CVERecord?id=CVE-2021-28879\nhttps://www.cve.org/CVERecord?id=CVE-2021-28878\nhttps://www.cve.org/CVERecord?id=CVE-2025-3416\n",[1833],{"type":24,"tag":145,"props":1834,"children":1835},{"__ignoreMap":8},[1836],{"type":44,"value":1831},{"title":8,"searchDepth":112,"depth":112,"links":1838},[1839,1846],{"id":932,"depth":112,"text":935,"children":1840},[1841,1843,1844,1845],{"id":939,"depth":1842,"text":942},3,{"id":1047,"depth":1842,"text":1050},{"id":1255,"depth":1842,"text":1258},{"id":1485,"depth":1842,"text":1488},{"id":1746,"depth":112,"text":1749},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1757443652205]