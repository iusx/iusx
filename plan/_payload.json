[{"data":1,"prerenderedAt":2086},["Reactive",2],{"equalLink":3},[4,154,641,826,1097],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118,"head":119},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-907.98,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"script":120,"meta":128},[121],{"id":122,"type":123,"processTemplateParams":124,"innerHTML":125,"tagPosition":126,"tagPriority":127},"nuxt-og-image-overrides","application/json",true,"[{\"title\":1,\"excerpt\":2,\"component\":3},\"Hongkong style room\",\"作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。\",\"OgImageCustom\"]","bodyClose",30,[129,132,135,138,141,143,146,148,150,152],{"property":130,"content":131},"og:image","/__og-image__/static/plan/life/pay-hongkong-style-room/og.png",{"property":133,"content":134},"og:image:width",1200,{"property":136,"content":137},"og:image:height",600,{"property":139,"content":140},"og:image:type","image/png",{"property":142},"og:image:alt",{"name":144,"content":145},"twitter:card","summary_large_image",{"name":147,"content":131},"twitter:image:src",{"name":149,"content":134},"twitter:image:width",{"name":151,"content":137},"twitter:image:height",{"name":153},"twitter:image:alt",{"_path":155,"_dir":156,"_draft":7,"_partial":7,"_locale":8,"title":157,"description":8,"director":11,"time":158,"types":13,"img":159,"info":160,"client":16,"target":161,"current":162,"displayType":163,"body":164,"_type":114,"_id":623,"_source":116,"_file":624,"_extension":118,"head":625},"/plan/programming/cds","programming","cds","2025.08.22","life/plan/cds/1.jpg","封面：This is cds",100,20,"percent",{"type":21,"children":165,"toc":621},[166],{"type":24,"tag":25,"props":167,"children":168},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[169,174,204,217,227,240,246,251,275,280,283,287,300,309,314,389,402,416,424,429,478,483,487,517,525,544,552,557,565,570,578,591,599,613],{"type":24,"tag":170,"props":171,"children":173},"git-info",{"url":172},"https://github.com/iusx/cdx",[],{"type":24,"tag":40,"props":175,"children":176},{},[177,179,186,188,194,196,202],{"type":44,"value":178},"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":24,"tag":180,"props":181,"children":183},"code",{"className":182},[],[184],{"type":44,"value":185},"cd",{"type":44,"value":187}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":24,"tag":180,"props":189,"children":191},{"className":190},[],[192],{"type":44,"value":193},"nix-shell",{"type":44,"value":195}," > ",{"type":24,"tag":180,"props":197,"children":199},{"className":198},[],[200],{"type":44,"value":201},"nvim .",{"type":44,"value":203}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":24,"tag":40,"props":205,"children":206},{},[207,209,215],{"type":44,"value":208},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":24,"tag":180,"props":210,"children":212},{"className":211},[],[213],{"type":44,"value":214},"zsh",{"type":44,"value":216}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":24,"tag":218,"props":219,"children":221},"text-space",{"type":220},"tip",[222],{"type":24,"tag":40,"props":223,"children":224},{},[225],{"type":44,"value":226},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":24,"tag":40,"props":228,"children":229},{},[230,232,238],{"type":44,"value":231},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":24,"tag":180,"props":233,"children":235},{"className":234},[],[236],{"type":44,"value":237},"~/.cds",{"type":44,"value":239}," 中。",{"type":24,"tag":241,"props":242,"children":245},"text-title",{"t":243,"type":244},"为什么用 nim?","2",[],{"type":24,"tag":170,"props":247,"children":250},{"url":248,"type":249},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":24,"tag":40,"props":252,"children":253},{},[254,256,265,267,273],{"type":44,"value":255},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":24,"tag":257,"props":258,"children":262},"a",{"href":259,"rel":260},"https://learnxinyminutes.com/zh-cn/nim/",[261],"nofollow",[263],{"type":44,"value":264},"Y分钟速成X",{"type":44,"value":266},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":24,"tag":180,"props":268,"children":270},{"className":269},[],[271],{"type":44,"value":272},"or [up-to-date community version]",{"type":44,"value":274}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"type":24,"tag":40,"props":276,"children":277},{},[278],{"type":44,"value":279},"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”",{"type":24,"tag":57,"props":281,"children":282},{},[],{"type":24,"tag":170,"props":284,"children":286},{"url":285},"https://github.com/ajeetdsouza/zoxide",[],{"type":24,"tag":40,"props":288,"children":289},{},[290,292,298],{"type":44,"value":291},"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 ",{"type":24,"tag":257,"props":293,"children":295},{"href":285,"rel":294},[261],[296],{"type":44,"value":297},"zoxide",{"type":44,"value":299}," 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。",{"type":24,"tag":301,"props":302,"children":304},"pre",{"code":303},"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n",[305],{"type":24,"tag":180,"props":306,"children":307},{"__ignoreMap":8},[308],{"type":44,"value":303},{"type":24,"tag":40,"props":310,"children":311},{},[312],{"type":44,"value":313},"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化：",{"type":24,"tag":315,"props":316,"children":319},"ul",{"className":317},[318],"contains-task-list",[320,341,366],{"type":24,"tag":321,"props":322,"children":325},"li",{"className":323},[324],"task-list-item",[326,331,333,339],{"type":24,"tag":327,"props":328,"children":330},"input",{"disabled":124,"type":329},"checkbox",[],{"type":44,"value":332}," 1. TUI：例如 ",{"type":24,"tag":180,"props":334,"children":336},{"className":335},[],[337],{"type":44,"value":338},"c list",{"type":44,"value":340}," 时候可以检索快捷方式",{"type":24,"tag":321,"props":342,"children":344},{"className":343},[324],[345,348,350,356,358,364],{"type":24,"tag":327,"props":346,"children":347},{"checked":124,"disabled":124,"type":329},[],{"type":44,"value":349}," 2. 通过 ",{"type":24,"tag":180,"props":351,"children":353},{"className":352},[],[354],{"type":44,"value":355},"c c iusx",{"type":44,"value":357}," 进入到目录之后自动执行记录在 ",{"type":24,"tag":180,"props":359,"children":361},{"className":360},[],[362],{"type":44,"value":363},"~/.cds_config.json",{"type":44,"value":365}," 中的脚本命令",{"type":24,"tag":321,"props":367,"children":369},{"className":368},[324],[370,373,375,381,383],{"type":24,"tag":327,"props":371,"children":372},{"checked":124,"disabled":124,"type":329},[],{"type":44,"value":374}," 3. Auto: 可以自动记录，例如 ",{"type":24,"tag":180,"props":376,"children":378},{"className":377},[],[379],{"type":44,"value":380},"/Users/uwu/Code/My/iusx",{"type":44,"value":382}," 的时候自动记录 ",{"type":24,"tag":180,"props":384,"children":386},{"className":385},[],[387],{"type":44,"value":388},"iusx: /Users/uwu/Code/My/iusx",{"type":24,"tag":40,"props":390,"children":391},{},[392,394,400],{"type":44,"value":393},"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 ",{"type":24,"tag":180,"props":395,"children":397},{"className":396},[],[398],{"type":44,"value":399},"brew install cds",{"type":44,"value":401}," 来进行安装了（貌似应该写一个安装脚本？。",{"type":24,"tag":40,"props":403,"children":404},{},[405,407,414],{"type":44,"value":406},"其实依赖 shell 环境也没什么的，毕竟连 Nim-lang 的 ",{"type":24,"tag":257,"props":408,"children":411},{"href":409,"rel":410},"https://github.com/nim-lang/choosenim",[261],[412],{"type":44,"value":413},"choosenim",{"type":44,"value":415}," 在安装完后也需要手动设置不是吗？",{"type":24,"tag":301,"props":417,"children":419},{"code":418},"choosenim-init: ChooseNim installed in /Users/uwu/.nimble/bin\nchoosenim-init: You must now ensure that the Nimble bin dir is in your PATH.\nchoosenim-init: Place the following line in the ~/.profile or ~/.bashrc file.\nchoosenim-init:     export PATH=/Users/uwu/.nimble/bin:$PATH\n",[420],{"type":24,"tag":180,"props":421,"children":422},{"__ignoreMap":8},[423],{"type":44,"value":418},{"type":24,"tag":40,"props":425,"children":426},{},[427],{"type":44,"value":428},"有时候就是这样，只有自己亲身体验才能体会一些奇妙的感觉。也就是踩坑，而不是照着答案去答题。最近看的 《心灵捕手》和 《萨利机长》刚好有这个情景，印象深刻的是《心灵捕手》中的一段对话：",{"type":24,"tag":96,"props":430,"children":433},{"by":431,"topic":432},"心灵捕手","知识与体验的区别",[434,439,448,453,458,463,468,473],{"type":24,"tag":40,"props":435,"children":436},{},[437],{"type":44,"value":438},"You've never been out of Boston.",{"type":24,"tag":440,"props":441,"children":442},"blockquote",{},[443],{"type":24,"tag":40,"props":444,"children":445},{},[446],{"type":44,"value":447},"Nope",{"type":24,"tag":40,"props":449,"children":450},{},[451],{"type":44,"value":452},"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written",{"type":24,"tag":40,"props":454,"children":455},{},[456],{"type":44,"value":457},"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope.",{"type":24,"tag":40,"props":459,"children":460},{},[461],{"type":44,"value":462},"Sexual orientation. the whole works, right?",{"type":24,"tag":40,"props":464,"children":465},{},[466],{"type":44,"value":467},"I bet you can't tell me what it smells like\nin the Sistione Chapel",{"type":24,"tag":40,"props":469,"children":470},{},[471],{"type":44,"value":472},"You never actually stood there\nlooked up ar that beautiful ceiling.",{"type":24,"tag":40,"props":474,"children":475},{},[476],{"type":44,"value":477},"Seen that",{"type":24,"tag":40,"props":479,"children":480},{},[481],{"type":44,"value":482},"有的时候就是这样，例如将 Linus 作为主系统自然就会学习到很多与其相关的知识。游玩 Minecraft 之后自然会想要知道光影、Mode、材质是怎么制作的，甚至与好友公共游玩他人服务器的时候脑海中也会浮现出：“我也想开一个服务器” 的这种想法，自然而然的就能接触到 Linux、Windows server，甚至是 Java。",{"type":24,"tag":241,"props":484,"children":486},{"t":485,"type":244},"实现自动记录",[],{"type":24,"tag":40,"props":488,"children":489},{},[490,492,498,500,506,508,515],{"type":44,"value":491},"要实现这个功能，需要使用到 ",{"type":24,"tag":180,"props":493,"children":495},{"className":494},[],[496],{"type":44,"value":497},"dirs",{"type":44,"value":499},"，算是内置命令。例如在 ",{"type":24,"tag":257,"props":501,"children":504},{"href":502,"rel":503},"https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Directory-Stack",[261],[505],{"type":44,"value":214},{"type":44,"value":507}," 和 ",{"type":24,"tag":257,"props":509,"children":512},{"href":510,"rel":511},"https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html",[261],[513],{"type":44,"value":514},"bash",{"type":44,"value":516}," 中均有记载，效果还是很不错的：",{"type":24,"tag":301,"props":518,"children":520},{"code":519},"macOS My/iusx ‹main*› » dirs\n~/Code/My/iusx\nmacOS My/iusx ‹main*› » cd ~/Code/Project/company\nmacOS Project/company » dirs\n~/Code/Project/company ~/Code/My/iusx\nmacOS Project/company »\n",[521],{"type":24,"tag":180,"props":522,"children":523},{"__ignoreMap":8},[524],{"type":44,"value":519},{"type":24,"tag":40,"props":526,"children":527},{},[528,530,535,537,542],{"type":44,"value":529},"唯一可惜的是只记录当前 shell 会话的目录栈，关闭终端或 shell 会话后就会丢失。因此还需要 shell 环境配合，最终效果就是每次 ",{"type":24,"tag":180,"props":531,"children":533},{"className":532},[],[534],{"type":44,"value":185},{"type":44,"value":536}," 目录的时候都会存储到 ",{"type":24,"tag":180,"props":538,"children":540},{"className":539},[],[541],{"type":44,"value":363},{"type":44,"value":543},":",{"type":24,"tag":301,"props":545,"children":547},{"code":546},"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ]\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": []\n  },\n  \"dotfiles\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"config\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": []\n  }\n}\n",[548],{"type":24,"tag":180,"props":549,"children":550},{"__ignoreMap":8},[551],{"type":44,"value":546},{"type":24,"tag":40,"props":553,"children":554},{},[555],{"type":44,"value":556},"但是这就会产生一个问题，之后我还需要 TUI 来进行快速访问，例如我进行了如下的操作：",{"type":24,"tag":301,"props":558,"children":560},{"code":559},"macOS My/cds ‹main*› » cd ~\nmacOS ~ » cd development/flutter/dev\nmacOS flutter/dev » pwd\n/Users/uwu/development/flutter/dev\nmacOS flutter/dev ‹stable› » cd bots\nmacOS dev/bots ‹stable› »\n",[561],{"type":24,"tag":180,"props":562,"children":563},{"__ignoreMap":8},[564],{"type":44,"value":559},{"type":24,"tag":40,"props":566,"children":567},{},[568],{"type":44,"value":569},"你会发现我在当前目录什么都没做，只是单纯的浏览，还是被记录下来了，而且很繁杂，几乎每次 cd 的停顿都会被记录：",{"type":24,"tag":301,"props":571,"children":573},{"code":572},"  \"dev\": {\n    \"path\": \"/Users/uwu/development/flutter/dev\",\n    \"commands\": []\n  },\n  \"bots\": {\n    \"path\": \"/Users/uwu/development/flutter/dev/bots\",\n    \"commands\": []\n  }\n",[574],{"type":24,"tag":180,"props":575,"children":576},{"__ignoreMap":8},[577],{"type":44,"value":572},{"type":24,"tag":40,"props":579,"children":580},{},[581,583,589],{"type":44,"value":582},"为此我增加了一个逻辑，也就是每次在当前目录执行命令，权重 ",{"type":24,"tag":180,"props":584,"children":586},{"className":585},[],[587],{"type":44,"value":588},"score",{"type":44,"value":590}," +1, 这会方便之后的 TUI 的数据展示，权重越高的越在前面，甚至还有升序降序:",{"type":24,"tag":301,"props":592,"children":594},{"code":593},"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ],\n    \"score\": 12\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": [],\n    \"score\": 5\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"video\": {\n    \"path\": \"/Users/uwu/Work/video\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"company\": {\n    \"path\": \"/Users/uwu/Code/Project/company\",\n    \"commands\": [],\n    \"score\": 2\n  }\n}\n",[595],{"type":24,"tag":180,"props":596,"children":597},{"__ignoreMap":8},[598],{"type":44,"value":593},{"type":24,"tag":40,"props":600,"children":601},{},[602,604,611],{"type":44,"value":603},"不过这些都是通过 shell 实现的，之后可能还需要写一个 Install 的脚本，毕竟连 zoxide 也是这么做的， ",{"type":24,"tag":257,"props":605,"children":608},{"href":606,"rel":607},"https://github.com/ajeetdsouza/zoxide/blob/main/src/shell.rs",[261],[609],{"type":44,"value":610},"src/shell.rs",{"type":44,"value":612}," 写的非常全，不过我貌似只是为了自己用，所以我自己用的舒服就好了，不需要考虑兼容下的问题？（或许吧:",{"type":24,"tag":301,"props":614,"children":616},{"code":615},"make_template!(Bash, \"bash.txt\");\nmake_template!(Elvish, \"elvish.txt\");\nmake_template!(Fish, \"fish.txt\");\nmake_template!(Nushell, \"nushell.txt\");\nmake_template!(Posix, \"posix.txt\");\nmake_template!(Powershell, \"powershell.txt\");\nmake_template!(Tcsh, \"tcsh.txt\");\nmake_template!(Xonsh, \"xonsh.txt\");\nmake_template!(Zsh, \"zsh.txt\");\n",[617],{"type":24,"tag":180,"props":618,"children":619},{"__ignoreMap":8},[620],{"type":44,"value":615},{"title":8,"searchDepth":112,"depth":112,"links":622},[],"content:plan:programming:cds.md","plan/programming/cds.md",{"script":626,"meta":629},[627],{"id":122,"type":123,"processTemplateParams":124,"innerHTML":628,"tagPosition":126,"tagPriority":127},"[{\"title\":1,\"excerpt\":-1,\"component\":2},\"cds\",\"OgImageCustom\"]",[630,632,633,634,635,636,637,638,639,640],{"property":130,"content":631},"/__og-image__/static/plan/programming/cds/og.png",{"property":133,"content":134},{"property":136,"content":137},{"property":139,"content":140},{"property":142},{"name":144,"content":145},{"name":147,"content":631},{"name":149,"content":134},{"name":151,"content":137},{"name":153},{"_path":642,"_dir":156,"_draft":7,"_partial":7,"_locale":8,"title":643,"description":8,"director":11,"time":644,"types":13,"img":645,"info":646,"client":16,"target":161,"current":647,"displayType":163,"body":648,"_type":114,"_id":808,"_source":116,"_file":809,"_extension":118,"head":810},"/plan/programming/command-hide","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",99.99,{"type":21,"children":649,"toc":806},[650],{"type":24,"tag":25,"props":651,"children":652},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[653,657,662,676,684,698,712,715,720,741,754,762],{"type":24,"tag":170,"props":654,"children":656},{"url":655},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":170,"props":658,"children":661},{"url":659,"type":660},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":663,"children":664},{},[665,667,674],{"type":44,"value":666},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":257,"props":668,"children":671},{"href":669,"rel":670},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[261],[672],{"type":44,"value":673},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":675}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":218,"props":677,"children":678},{"type":220},[679],{"type":24,"tag":40,"props":680,"children":681},{},[682],{"type":44,"value":683},"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。",{"type":24,"tag":40,"props":685,"children":686},{},[687,689,696],{"type":44,"value":688},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":257,"props":690,"children":693},{"href":691,"rel":692},"https://github.com/folke/lazy.nvim",[261],[694],{"type":44,"value":695},"lazy.nvim",{"type":44,"value":697},"。",{"type":24,"tag":40,"props":699,"children":700},{},[701,703,710],{"type":44,"value":702},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":257,"props":704,"children":707},{"href":705,"rel":706},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[261],[708],{"type":44,"value":709},"dragove/nvim/.config/nvim",{"type":44,"value":711}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":713,"children":714},{},[],{"type":24,"tag":40,"props":716,"children":717},{},[718],{"type":44,"value":719},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":721,"children":722},{},[723,725,731,733,739],{"type":44,"value":724},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":180,"props":726,"children":728},{"className":727},[],[729],{"type":44,"value":730},"\u003Ctemplate>\u003C/template>",{"type":44,"value":732}," 中出现了 ",{"type":24,"tag":180,"props":734,"children":736},{"className":735},[],[737],{"type":44,"value":738},"\u003Cp>//\u003C/p>",{"type":44,"value":740}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":742,"children":743},{},[744,746,752],{"type":44,"value":745},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":180,"props":747,"children":749},{"className":748},[],[750],{"type":44,"value":751},"js\\html\\css",{"type":44,"value":753}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":301,"props":755,"children":757},{"code":756},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[758],{"type":24,"tag":180,"props":759,"children":760},{"__ignoreMap":8},[761],{"type":44,"value":756},{"type":24,"tag":40,"props":763,"children":764},{},[765,767,773,775,781,783,789,791,797,798,804],{"type":44,"value":766},"也就是说需要 ",{"type":24,"tag":180,"props":768,"children":770},{"className":769},[],[771],{"type":44,"value":772},"\u003Cscript>",{"type":44,"value":774}," 用 js 的注释, ",{"type":24,"tag":180,"props":776,"children":778},{"className":777},[],[779],{"type":44,"value":780},"\u003Ctemplate>",{"type":44,"value":782}," 用 ",{"type":24,"tag":180,"props":784,"children":786},{"className":785},[],[787],{"type":44,"value":788},"html",{"type":44,"value":790}," 的注释，",{"type":24,"tag":180,"props":792,"children":794},{"className":793},[],[795],{"type":44,"value":796},"style",{"type":44,"value":782},{"type":24,"tag":180,"props":799,"children":801},{"className":800},[],[802],{"type":44,"value":803},"css",{"type":44,"value":805}," 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（可能我成为不了一位优秀的 Coder 是有原因的，很大一部分原因是因为我懒。",{"title":8,"searchDepth":112,"depth":112,"links":807},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"script":811,"meta":814},[812],{"id":122,"type":123,"processTemplateParams":124,"innerHTML":813,"tagPosition":126,"tagPriority":127},"[{\"title\":1,\"excerpt\":-1,\"component\":2},\"command-hide\",\"OgImageCustom\"]",[815,817,818,819,820,821,822,823,824,825],{"property":130,"content":816},"/__og-image__/static/plan/programming/command-hide/og.png",{"property":133,"content":134},{"property":136,"content":137},{"property":139,"content":140},{"property":142},{"name":144,"content":145},{"name":147,"content":816},{"name":149,"content":134},{"name":151,"content":137},{"name":153},{"_path":827,"_dir":156,"_draft":7,"_partial":7,"_locale":8,"title":828,"description":829,"director":11,"time":830,"types":13,"img":831,"info":832,"client":16,"target":161,"current":833,"displayType":163,"body":834,"_type":114,"_id":1079,"_source":116,"_file":1080,"_extension":118,"head":1081},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/plan/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":835,"toc":1077},[836],{"type":24,"tag":25,"props":837,"children":838},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[839,842,847,852,857,862,867,872,877,882,885,899,907,912,928,933,947,993,998,1003,1008,1018,1023,1028,1036,1041,1050,1064,1072],{"type":24,"tag":35,"props":840,"children":841},{":desc":37},[],{"type":24,"tag":40,"props":843,"children":844},{},[845],{"type":44,"value":846},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":218,"props":848,"children":851},{"img":849,"info":850},"life/plan/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":853,"children":854},{},[855],{"type":44,"value":856},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":858,"children":859},{},[860],{"type":44,"value":861},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":863,"children":864},{},[865],{"type":44,"value":866},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":218,"props":868,"children":871},{"img":869,"info":870},"life/plan/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":873,"children":874},{},[875],{"type":44,"value":876},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":878,"children":879},{},[880],{"type":44,"value":881},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":883,"children":884},{},[],{"type":24,"tag":40,"props":886,"children":887},{},[888,890,897],{"type":44,"value":889},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":257,"props":891,"children":894},{"href":892,"rel":893},"https://en.wikipedia.org/wiki/CSS_hack",[261],[895],{"type":44,"value":896},"CSS Hack",{"type":44,"value":898}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":301,"props":900,"children":902},{"code":901},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[903],{"type":24,"tag":180,"props":904,"children":905},{"__ignoreMap":8},[906],{"type":44,"value":901},{"type":24,"tag":40,"props":908,"children":909},{},[910],{"type":44,"value":911},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":913,"children":916},{"by":914,"topic":915},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[917],{"type":24,"tag":40,"props":918,"children":919},{},[920,922,926],{"type":44,"value":921},"Some of those people dont't do a lot",{"type":24,"tag":923,"props":924,"children":925},"br",{},[],{"type":44,"value":927},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":929,"children":930},{},[931],{"type":44,"value":932},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":934,"children":935},{},[936,938,945],{"type":44,"value":937},"最近在玩 ",{"type":24,"tag":257,"props":939,"children":942},{"href":940,"rel":941},"https://store.steampowered.com/app/2585110/_/",[261],[943],{"type":44,"value":944},"《我在疗养院送人上西天》",{"type":44,"value":946}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":948,"children":951},{"by":949,"topic":950},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[952],{"type":24,"tag":40,"props":953,"children":954},{},[955,957,960,962,965,967,970,972,975,978,980,983,985,988,990],{"type":44,"value":956},"but that's not everybody,",{"type":24,"tag":923,"props":958,"children":959},{},[],{"type":44,"value":961},"\ni care about the thechnology",{"type":24,"tag":923,"props":963,"children":964},{},[],{"type":44,"value":966},"\nthere are people who care about the ui",{"type":24,"tag":923,"props":968,"children":969},{},[],{"type":44,"value":971},"\ni can't do ui to save my life.",{"type":24,"tag":923,"props":973,"children":974},{},[],{"type":24,"tag":923,"props":976,"children":977},{},[],{"type":44,"value":979},"\ni mean, if i was stranded on an island,",{"type":24,"tag":923,"props":981,"children":982},{},[],{"type":44,"value":984},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":923,"props":986,"children":987},{},[],{"type":44,"value":989},"\ni'd die there.",{"type":24,"tag":923,"props":991,"children":992},{},[],{"type":24,"tag":40,"props":994,"children":995},{},[996],{"type":44,"value":997},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":999,"children":1000},{},[1001],{"type":44,"value":1002},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":1004,"children":1005},{},[1006],{"type":44,"value":1007},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":1009,"children":1012},{"by":1010,"topic":1011},"Wikipedia","Frontend and backend",[1013],{"type":24,"tag":40,"props":1014,"children":1015},{},[1016],{"type":44,"value":1017},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":1019,"children":1020},{},[1021],{"type":44,"value":1022},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":1024,"children":1025},{},[1026],{"type":44,"value":1027},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":218,"props":1029,"children":1030},{"type":220},[1031],{"type":24,"tag":40,"props":1032,"children":1033},{},[1034],{"type":44,"value":1035},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":1037,"children":1038},{},[1039],{"type":44,"value":1040},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":1042,"children":1043},{},[1044],{"type":24,"tag":1045,"props":1046,"children":1047},"del",{},[1048],{"type":44,"value":1049},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":1051,"children":1052},{},[1053,1055,1062],{"type":44,"value":1054},"可能这个现象可以用 ",{"type":24,"tag":257,"props":1056,"children":1059},{"href":1057,"rel":1058},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[261],[1060],{"type":44,"value":1061},"Dunning–Kruger effect",{"type":44,"value":1063}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":1065,"children":1066},{"by":1010,"topic":1061},[1067],{"type":24,"tag":40,"props":1068,"children":1069},{},[1070],{"type":44,"value":1071},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":1073,"children":1074},{},[1075],{"type":44,"value":1076},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":1078},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"script":1082,"meta":1085},[1083],{"id":122,"type":123,"processTemplateParams":124,"innerHTML":1084,"tagPosition":126,"tagPriority":127},"[{\"title\":1,\"excerpt\":2,\"component\":3},\"NEW BLOG THEME PLAN\",\"回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。\",\"OgImageCustom\"]",[1086,1088,1089,1090,1091,1092,1093,1094,1095,1096],{"property":130,"content":1087},"/__og-image__/static/plan/programming/new-blog-theme-plan/og.png",{"property":133,"content":134},{"property":136,"content":137},{"property":139,"content":140},{"property":142},{"name":144,"content":145},{"name":147,"content":1087},{"name":149,"content":134},{"name":151,"content":137},{"name":153},{"_path":1098,"_dir":1099,"_draft":7,"_partial":7,"_locale":8,"title":1100,"description":8,"director":16,"img":1101,"time":1102,"plan":1103,"target":161,"current":1104,"displayType":163,"body":1105,"_type":114,"_id":2068,"_source":116,"_file":2069,"_extension":118,"head":2070},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":1106,"toc":2058},[1107],{"type":24,"tag":1108,"props":1109,"children":1112},"book-content",{":by":1110,":img":28,":plan":1111,":title":31},"director","plan",[1113,1117,1122,1127,1132,1137,1142,1145,1152,1159,1166,1178,1218,1232,1243,1265,1268,1274,1289,1311,1348,1370,1392,1408,1416,1424,1436,1444,1465,1473,1476,1482,1493,1513,1539,1544,1565,1613,1634,1639,1657,1670,1698,1703,1706,1712,1735,1788,1839,1859,1882,1892,1920,1928,1933,1941,1954,1962,1965,1971,1975,1987,2044,2050],{"type":24,"tag":241,"props":1114,"children":1116},{":t":1115},"CVE is my dream.",[],{"type":24,"tag":40,"props":1118,"children":1119},{},[1120],{"type":44,"value":1121},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":1123,"children":1124},{},[1125],{"type":44,"value":1126},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":1128,"children":1129},{},[1130],{"type":44,"value":1131},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":1133,"children":1134},{},[1135],{"type":44,"value":1136},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":1138,"children":1139},{},[1140],{"type":44,"value":1141},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":1143,"children":1144},{},[],{"type":24,"tag":1146,"props":1147,"children":1149},"h1",{"id":1148},"rust-3",[1150],{"type":44,"value":1151},"rust 3",{"type":24,"tag":1153,"props":1154,"children":1156},"h2",{"id":1155},"github-3",[1157],{"type":44,"value":1158},"Github 3",{"type":24,"tag":1160,"props":1161,"children":1163},"h3",{"id":1162},"cve-2022-36114-1",[1164],{"type":44,"value":1165},"CVE-2022-36114 1",{"type":24,"tag":1167,"props":1168,"children":1172},"cve-info",{":type":244,"cve":1169,"to":1170,":cwe":1171},"CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[1173],{"type":24,"tag":40,"props":1174,"children":1175},{},[1176],{"type":44,"value":1177},"不受控制的资源消耗",{"type":24,"tag":40,"props":1179,"children":1180},{},[1181,1183,1190,1192,1199,1201,1207,1209,1216],{"type":44,"value":1182},"利用 Cargo 的 ",{"type":24,"tag":257,"props":1184,"children":1187},{"href":1185,"rel":1186},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[261],[1188],{"type":44,"value":1189},"build script",{"type":44,"value":1191}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":257,"props":1193,"children":1196},{"href":1194,"rel":1195},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[261],[1197],{"type":44,"value":1198},"procedural macros",{"type":44,"value":1200},"，在执行 ",{"type":24,"tag":180,"props":1202,"children":1204},{"className":1203},[],[1205],{"type":44,"value":1206},"cargo run",{"type":44,"value":1208}," 的过程中触发了一个 ",{"type":24,"tag":257,"props":1210,"children":1213},{"href":1211,"rel":1212},"https://en.wikipedia.org/wiki/Zip_bomb",[261],[1214],{"type":44,"value":1215},"Zip Bomb",{"type":44,"value":1217}," 行为。",{"type":24,"tag":40,"props":1219,"children":1220},{},[1221,1223,1230],{"type":44,"value":1222},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":257,"props":1224,"children":1227},{"href":1225,"rel":1226},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[261],[1228],{"type":44,"value":1229},"补丁修复",{"type":44,"value":1231}," Zip_bomb 的问题:",{"type":24,"tag":301,"props":1233,"children":1238},{"code":1234,"language":1235,"meta":8,"className":1236},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[1237],"language-c",[1239],{"type":24,"tag":180,"props":1240,"children":1241},{"__ignoreMap":8},[1242],{"type":44,"value":1234},{"type":24,"tag":40,"props":1244,"children":1245},{},[1246,1248,1254,1256,1263],{"type":44,"value":1247},"同时引入了 ",{"type":24,"tag":180,"props":1249,"children":1251},{"className":1250},[],[1252],{"type":44,"value":1253},"LimitErrorReader",{"type":44,"value":1255},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":257,"props":1257,"children":1260},{"href":1258,"rel":1259},"https://crates.io/",[261],[1261],{"type":44,"value":1262},"crates",{"type":44,"value":1264}," 上提交的 crate。",{"type":24,"tag":57,"props":1266,"children":1267},{},[],{"type":24,"tag":1160,"props":1269,"children":1271},{"id":1270},"cve-2023-40030-1",[1272],{"type":44,"value":1273},"CVE-2023-40030 1",{"type":24,"tag":1167,"props":1275,"children":1280},{":type":1276,"cve":1277,"to":1278,":cwe":1279},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[1281],{"type":24,"tag":40,"props":1282,"children":1283},{},[1284,1286],{"type":44,"value":1285},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":923,"props":1287,"children":1288},{},[],{"type":24,"tag":40,"props":1290,"children":1291},{},[1292,1294,1300,1302,1309],{"type":44,"value":1293},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":180,"props":1295,"children":1297},{"className":1296},[],[1298],{"type":44,"value":1299},"cargo build --timings",{"type":44,"value":1301}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":257,"props":1303,"children":1306},{"href":1304,"rel":1305},"https://doc.rust-lang.org/cargo/reference/timings.html",[261],[1307],{"type":44,"value":1308},"--timings",{"type":44,"value":1310}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":1312,"children":1313},{},[1314,1316,1322,1324,1330,1332,1338,1340,1346],{"type":44,"value":1315},"可以通过在 ",{"type":24,"tag":180,"props":1317,"children":1319},{"className":1318},[],[1320],{"type":44,"value":1321},"Cargo.toml",{"type":44,"value":1323}," 中加入 ",{"type":24,"tag":180,"props":1325,"children":1327},{"className":1326},[],[1328],{"type":44,"value":1329},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":1331}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":180,"props":1333,"children":1335},{"className":1334},[],[1336],{"type":44,"value":1337},"Warning",{"type":44,"value":1339},", 换成了 ",{"type":24,"tag":180,"props":1341,"children":1343},{"className":1342},[],[1344],{"type":44,"value":1345},"bail!",{"type":44,"value":1347}," 机制。",{"type":24,"tag":218,"props":1349,"children":1350},{"type":220},[1351],{"type":24,"tag":40,"props":1352,"children":1353},{},[1354,1359,1361,1368],{"type":24,"tag":180,"props":1355,"children":1357},{"className":1356},[],[1358],{"type":44,"value":1345},{"type":44,"value":1360}," 宏来自 ",{"type":24,"tag":257,"props":1362,"children":1365},{"href":1363,"rel":1364},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[261],[1366],{"type":44,"value":1367},"anyhow",{"type":44,"value":1369}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":1371,"children":1372},{},[1373,1375,1382,1384,1390],{"type":44,"value":1374},"可以看一下 ",{"type":24,"tag":257,"props":1376,"children":1379},{"href":1377,"rel":1378},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[261],[1380],{"type":44,"value":1381},"fix pr",{"type":44,"value":1383},"，非常有意思，比如 ",{"type":24,"tag":180,"props":1385,"children":1387},{"className":1386},[],[1388],{"type":44,"value":1389},"validate_feature_name",{"type":44,"value":1391}," 函数。",{"type":24,"tag":40,"props":1393,"children":1394},{},[1395,1397,1403,1405],{"type":44,"value":1396},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":180,"props":1398,"children":1400},{"className":1399},[],[1401],{"type":44,"value":1402},"warning",{"type":44,"value":1404},"，流程继续。",{"type":24,"tag":923,"props":1406,"children":1407},{},[],{"type":24,"tag":301,"props":1409,"children":1411},{"code":1410},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[1412],{"type":24,"tag":180,"props":1413,"children":1414},{"__ignoreMap":8},[1415],{"type":44,"value":1410},{"type":24,"tag":218,"props":1417,"children":1418},{"type":220},[1419],{"type":24,"tag":40,"props":1420,"children":1421},{},[1422],{"type":44,"value":1423},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":1425,"children":1426},{},[1427,1429,1434],{"type":44,"value":1428},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":180,"props":1430,"children":1432},{"className":1431},[],[1433],{"type":44,"value":1345},{"type":44,"value":1435},"，构建中止，用户必须修正。",{"type":24,"tag":301,"props":1437,"children":1439},{"code":1438}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[1440],{"type":24,"tag":180,"props":1441,"children":1442},{"__ignoreMap":8},[1443],{"type":44,"value":1438},{"type":24,"tag":40,"props":1445,"children":1446},{},[1447,1449,1455,1457,1463],{"type":44,"value":1448},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":180,"props":1450,"children":1452},{"className":1451},[],[1453],{"type":44,"value":1454},"is_ok()",{"type":44,"value":1456}," 是合法的，而 ",{"type":24,"tag":180,"props":1458,"children":1460},{"className":1459},[],[1461],{"type":44,"value":1462},"is_err()",{"type":44,"value":1464}," 是不合法的：",{"type":24,"tag":301,"props":1466,"children":1468},{"code":1467}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[1469],{"type":24,"tag":180,"props":1470,"children":1471},{"__ignoreMap":8},[1472],{"type":44,"value":1467},{"type":24,"tag":57,"props":1474,"children":1475},{},[],{"type":24,"tag":1160,"props":1477,"children":1479},{"id":1478},"cve-2023-41051-1",[1480],{"type":44,"value":1481},"CVE-2023-41051 1",{"type":24,"tag":1167,"props":1483,"children":1487},{":type":1276,"cve":1484,"to":1485,":cwe":1486},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[1488],{"type":24,"tag":40,"props":1489,"children":1490},{},[1491],{"type":44,"value":1492},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":1494,"children":1495},{},[1496,1503,1505,1511],{"type":24,"tag":257,"props":1497,"children":1500},{"href":1498,"rel":1499},"https://github.com/rust-vmm/vm-memory",[261],[1501],{"type":44,"value":1502},"vm-memory",{"type":44,"value":1504}," 的 ",{"type":24,"tag":180,"props":1506,"children":1508},{"className":1507},[],[1509],{"type":44,"value":1510},"VolatileMemory",{"type":44,"value":1512}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":1514,"props":1515,"children":1516},"ol",{},[1517,1528],{"type":24,"tag":321,"props":1518,"children":1519},{},[1520,1526],{"type":24,"tag":180,"props":1521,"children":1523},{"className":1522},[],[1524],{"type":44,"value":1525},"VolatileMemory::get_slice",{"type":44,"value":1527},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":321,"props":1529,"children":1530},{},[1531,1537],{"type":24,"tag":180,"props":1532,"children":1534},{"className":1533},[],[1535],{"type":44,"value":1536},"VolatileMemory::read/write",{"type":44,"value":1538},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":1540,"children":1541},{},[1542],{"type":44,"value":1543},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":1545,"children":1546},{},[1547,1549,1555,1557,1563],{"type":44,"value":1548},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":180,"props":1550,"children":1552},{"className":1551},[],[1553],{"type":44,"value":1554},"read/write",{"type":44,"value":1556},"，更多的是 ",{"type":24,"tag":180,"props":1558,"children":1560},{"className":1559},[],[1561],{"type":44,"value":1562},"get_slice",{"type":44,"value":1564}," 方法，例如：",{"type":24,"tag":1514,"props":1566,"children":1567},{},[1568,1577,1586,1595,1604],{"type":24,"tag":321,"props":1569,"children":1570},{},[1571],{"type":24,"tag":180,"props":1572,"children":1574},{"className":1573},[],[1575],{"type":44,"value":1576},"get_atomic_ref",{"type":24,"tag":321,"props":1578,"children":1579},{},[1580],{"type":24,"tag":180,"props":1581,"children":1583},{"className":1582},[],[1584],{"type":44,"value":1585},"aligned_as_ref",{"type":24,"tag":321,"props":1587,"children":1588},{},[1589],{"type":24,"tag":180,"props":1590,"children":1592},{"className":1591},[],[1593],{"type":44,"value":1594},"aligned_as_mut",{"type":24,"tag":321,"props":1596,"children":1597},{},[1598],{"type":24,"tag":180,"props":1599,"children":1601},{"className":1600},[],[1602],{"type":44,"value":1603},"get_ref",{"type":24,"tag":321,"props":1605,"children":1606},{},[1607],{"type":24,"tag":180,"props":1608,"children":1610},{"className":1609},[],[1611],{"type":44,"value":1612},"get_array_ref",{"type":24,"tag":40,"props":1614,"children":1615},{},[1616,1618,1624,1626,1632],{"type":44,"value":1617},"上述方法有个共同点，都是利用 ",{"type":24,"tag":180,"props":1619,"children":1621},{"className":1620},[],[1622],{"type":44,"value":1623},"ref",{"type":44,"value":1625}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":180,"props":1627,"children":1629},{"className":1628},[],[1630],{"type":44,"value":1631},"&[T]",{"type":44,"value":1633}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1635,"children":1636},{},[1637],{"type":44,"value":1638},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":1514,"props":1640,"children":1641},{},[1642,1647,1652],{"type":24,"tag":321,"props":1643,"children":1644},{},[1645],{"type":44,"value":1646},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":321,"props":1648,"children":1649},{},[1650],{"type":44,"value":1651},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":321,"props":1653,"children":1654},{},[1655],{"type":44,"value":1656},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1658,"children":1659},{},[1660,1662,1668],{"type":44,"value":1661},"仔细欣赏 ",{"type":24,"tag":257,"props":1663,"children":1666},{"href":1664,"rel":1665},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[261],[1667],{"type":44,"value":1381},{"type":44,"value":1669}," 你会发现：",{"type":24,"tag":40,"props":1671,"children":1672},{},[1673,1675,1681,1683,1688,1690,1696],{"type":44,"value":1674},"这些方法内部，都会调用 ",{"type":24,"tag":180,"props":1676,"children":1678},{"className":1677},[],[1679],{"type":44,"value":1680},"get_slice(offset, count)",{"type":44,"value":1682}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":180,"props":1684,"children":1686},{"className":1685},[],[1687],{"type":44,"value":1562},{"type":44,"value":1689}," 加上 ",{"type":24,"tag":180,"props":1691,"children":1693},{"className":1692},[],[1694],{"type":44,"value":1695},"assert_eq!",{"type":44,"value":1697}," 就意味着：",{"type":24,"tag":40,"props":1699,"children":1700},{},[1701],{"type":44,"value":1702},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1704,"children":1705},{},[],{"type":24,"tag":1160,"props":1707,"children":1709},{"id":1708},"cve-2023-38497-1",[1710],{"type":44,"value":1711},"CVE-2023-38497 1",{"type":24,"tag":1167,"props":1713,"children":1718},{":type":1714,"cve":1715,"to":1716,"cwe":1717},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1719,1727],{"type":24,"tag":40,"props":1720,"children":1721},{},[1722,1724],{"type":44,"value":1723},"278: 不安全的保留继承权限",{"type":24,"tag":923,"props":1725,"children":1726},{},[],{"type":24,"tag":315,"props":1728,"children":1729},{},[1730],{"type":24,"tag":321,"props":1731,"children":1732},{},[1733],{"type":44,"value":1734},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1736,"children":1737},{},[1738,1740,1747,1749,1755,1757,1762,1764,1771,1773,1778,1780,1786],{"type":44,"value":1739},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":257,"props":1741,"children":1744},{"href":1742,"rel":1743},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[261],[1745],{"type":44,"value":1746},"CVE-2005-1724",{"type":44,"value":1748},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1750,"props":1751,"children":1752},"strong",{},[1753],{"type":44,"value":1754},"权限限制”",{"type":44,"value":1756},"。总的来说 umask 是 ",{"type":24,"tag":1750,"props":1758,"children":1759},{},[1760],{"type":44,"value":1761},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1763},"，可以看看 ",{"type":24,"tag":257,"props":1765,"children":1768},{"href":1766,"rel":1767},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[261],[1769],{"type":44,"value":1770},"Linux中umask深入理解\n",{"type":44,"value":1772},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":180,"props":1774,"children":1776},{"className":1775},[],[1777],{"type":44,"value":514},{"type":44,"value":1779}," 脚本的时候，会使用 ",{"type":24,"tag":180,"props":1781,"children":1783},{"className":1782},[],[1784],{"type":44,"value":1785},"chmod 777",{"type":44,"value":1787},", 要不然运行不了。",{"type":24,"tag":218,"props":1789,"children":1790},{"type":220},[1791,1801,1806,1826,1834],{"type":24,"tag":40,"props":1792,"children":1793},{},[1794,1796],{"type":44,"value":1795},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1750,"props":1797,"children":1798},{},[1799],{"type":44,"value":1800},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1802,"children":1803},{},[1804],{"type":44,"value":1805},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1807,"children":1808},{},[1809,1811,1817,1818,1824],{"type":44,"value":1810},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":180,"props":1812,"children":1814},{"className":1813},[],[1815],{"type":44,"value":1816},"-network",{"type":44,"value":507},{"type":24,"tag":180,"props":1819,"children":1821},{"className":1820},[],[1822],{"type":44,"value":1823},"-mask",{"type":44,"value":1825},"：",{"type":24,"tag":301,"props":1827,"children":1829},{"code":1828},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1830],{"type":24,"tag":180,"props":1831,"children":1832},{"__ignoreMap":8},[1833],{"type":44,"value":1828},{"type":24,"tag":40,"props":1835,"children":1836},{},[1837],{"type":44,"value":1838},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1840,"children":1841},{},[1842,1844,1849,1851,1857],{"type":44,"value":1843},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1750,"props":1845,"children":1846},{},[1847],{"type":44,"value":1848},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1850},"。而 ",{"type":24,"tag":180,"props":1852,"children":1854},{"className":1853},[],[1855],{"type":44,"value":1856},"umask",{"type":44,"value":1858}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1860,"props":1861,"children":1863},"text-tip",{"type":1862},"big",[1864],{"type":24,"tag":40,"props":1865,"children":1866},{},[1867,1869,1875,1877,1880],{"type":44,"value":1868},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":180,"props":1870,"children":1872},{"className":1871},[],[1873],{"type":44,"value":1874},"777",{"type":44,"value":1876}," 权限构建攻击脚本。",{"type":24,"tag":923,"props":1878,"children":1879},{},[],{"type":44,"value":1881},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1883,"children":1884},{},[1885,1887],{"type":44,"value":1886},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1750,"props":1888,"children":1889},{},[1890],{"type":44,"value":1891},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1893,"children":1894},{},[1895,1897,1903,1905,1911,1913,1918],{"type":44,"value":1896},"在 ",{"type":24,"tag":180,"props":1898,"children":1900},{"className":1899},[],[1901],{"type":44,"value":1902},"src/cargo/util/mod.rs",{"type":44,"value":1904}," 中新增了 ",{"type":24,"tag":180,"props":1906,"children":1908},{"className":1907},[],[1909],{"type":44,"value":1910},"get_umask()",{"type":44,"value":1912}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":180,"props":1914,"children":1916},{"className":1915},[],[1917],{"type":44,"value":1856},{"type":44,"value":1919}," 限制新文件的权限。：",{"type":24,"tag":301,"props":1921,"children":1923},{"code":1922},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1924],{"type":24,"tag":180,"props":1925,"children":1926},{"__ignoreMap":8},[1927],{"type":44,"value":1922},{"type":24,"tag":40,"props":1929,"children":1930},{},[1931],{"type":44,"value":1932},"以及很有艺术性的一行 code:",{"type":24,"tag":301,"props":1934,"children":1936},{"code":1935},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1937],{"type":24,"tag":180,"props":1938,"children":1939},{"__ignoreMap":8},[1940],{"type":44,"value":1935},{"type":24,"tag":40,"props":1942,"children":1943},{},[1944,1946,1952],{"type":44,"value":1945},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":180,"props":1947,"children":1949},{"className":1948},[],[1950],{"type":44,"value":1951},"!umask",{"type":44,"value":1953}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":301,"props":1955,"children":1957},{"code":1956},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1958],{"type":24,"tag":180,"props":1959,"children":1960},{"__ignoreMap":8},[1961],{"type":44,"value":1956},{"type":24,"tag":57,"props":1963,"children":1964},{},[],{"type":24,"tag":1153,"props":1966,"children":1968},{"id":1967},"polyduekes-3",[1969],{"type":44,"value":1970},"Polyduekes 3",{"type":24,"tag":241,"props":1972,"children":1974},{"t":1973},"Polyduekes",[],{"type":24,"tag":40,"props":1976,"children":1977},{},[1978,1980,1985],{"type":44,"value":1979},"在 telegram 认识到的热心群 U，得知我的目标是 Rust CVE 之后回复我了一个他整理过的合集。很有大佬的风范，特别是那句 ",{"type":24,"tag":1750,"props":1981,"children":1982},{},[1983],{"type":44,"value":1984},"the rust cve part is easy, just look at the stdlib",{"type":44,"value":1986},"。据我视奸过后，确实是一位经验丰富的大佬，例如：",{"type":24,"tag":1514,"props":1988,"children":1989},{},[1990,1999,2008,2017,2026,2035],{"type":24,"tag":321,"props":1991,"children":1992},{},[1993],{"type":24,"tag":257,"props":1994,"children":1997},{"href":1995,"rel":1996},"https://aur.archlinux.org/packages/pldget",[261],[1998],{"type":44,"value":1995},{"type":24,"tag":321,"props":2000,"children":2001},{},[2002],{"type":24,"tag":257,"props":2003,"children":2006},{"href":2004,"rel":2005},"https://git.sr.ht/~cdv/polydeukes",[261],[2007],{"type":44,"value":2004},{"type":24,"tag":321,"props":2009,"children":2010},{},[2011],{"type":24,"tag":257,"props":2012,"children":2015},{"href":2013,"rel":2014},"https://github.com/chrisvittal",[261],[2016],{"type":44,"value":2013},{"type":24,"tag":321,"props":2018,"children":2019},{},[2020],{"type":24,"tag":257,"props":2021,"children":2024},{"href":2022,"rel":2023},"https://git.sr.ht/~cdv/",[261],[2025],{"type":44,"value":2022},{"type":24,"tag":321,"props":2027,"children":2028},{},[2029],{"type":24,"tag":257,"props":2030,"children":2033},{"href":2031,"rel":2032},"https://chris.vittal.dev/",[261],[2034],{"type":44,"value":2031},{"type":24,"tag":321,"props":2036,"children":2037},{},[2038],{"type":24,"tag":257,"props":2039,"children":2042},{"href":2040,"rel":2041},"https://github.com/rust-lang/rust/commits?author=chrisvittal",[261],[2043],{"type":44,"value":2040},{"type":24,"tag":2045,"props":2046,"children":2049},"img-tip",{"text":2047,"url":2048},"之所以能机缘巧合得到大佬的这句话，源自于我看到了频道中转发的这个表情包，然后想起了小学时想用它攻击学校官网让其瘫痪的那个上午。\u003Cbr>\u003Cbr>不过攻击并没有成功，只是返回了 503, 换一台设备还能继续访问，可能当时需要通过类似 https://spys.one/en/ 这样的 IP 池才行。\u003Cbr>\u003Cbr>我当时一度认为这个软件没什么用，但频道的另一位管理员回复我说在他们那个年代，他通过这个软件让其一个论坛瘫痪掉了。\u003Cbr>\u003Cbr>有一说一十多年过去了，当时的界面就算拿到现在来看也并不过时。","cve/1.jpg",[],{"type":24,"tag":301,"props":2051,"children":2053},{"code":2052},"the rust cve part is easy, just look at the stdlib \nhttps://www.cve.org/CVERecord?id=CVE-2024-24576\nhttps://www.cve.org/CVERecord?id=CVE-2022-21658\nhttps://www.cve.org/CVERecord?id=CVE-2021-31162\nhttps://www.cve.org/CVERecord?id=CVE-2021-28879\nhttps://www.cve.org/CVERecord?id=CVE-2021-28878\nhttps://www.cve.org/CVERecord?id=CVE-2025-3416\n",[2054],{"type":24,"tag":180,"props":2055,"children":2056},{"__ignoreMap":8},[2057],{"type":44,"value":2052},{"title":8,"searchDepth":112,"depth":112,"links":2059},[2060,2067],{"id":1155,"depth":112,"text":1158,"children":2061},[2062,2064,2065,2066],{"id":1162,"depth":2063,"text":1165},3,{"id":1270,"depth":2063,"text":1273},{"id":1478,"depth":2063,"text":1481},{"id":1708,"depth":2063,"text":1711},{"id":1967,"depth":112,"text":1970},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",{"script":2071,"meta":2074},[2072],{"id":122,"type":123,"processTemplateParams":124,"innerHTML":2073,"tagPosition":126,"tagPriority":127},"[{\"title\":1,\"excerpt\":-1,\"component\":2},\"CVE learn\",\"OgImageCustom\"]",[2075,2077,2078,2079,2080,2081,2082,2083,2084,2085],{"property":130,"content":2076},"/__og-image__/static/plan/security/cve-learn/og.png",{"property":133,"content":134},{"property":136,"content":137},{"property":139,"content":140},{"property":142},{"name":144,"content":145},{"name":147,"content":2076},{"name":149,"content":134},{"name":151,"content":137},{"name":153},1758894450063]