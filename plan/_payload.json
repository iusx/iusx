[{"data":1,"prerenderedAt":1561},["Reactive",2],{"equalLink":3},[4,119,244,414,669],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-585.15,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":242,"_source":116,"_file":243,"_extension":118},"/plan/programming/cds","programming","cds","2025.08.22","life/plan/cds/1.jpg","封面：This is cds",100,1,"percent",{"type":21,"children":130,"toc":240},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139,169,182,192,205,211,216],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/iusx/cdx",[],{"type":24,"tag":40,"props":140,"children":141},{},[142,144,151,153,159,161,167],{"type":44,"value":143},"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":24,"tag":145,"props":146,"children":148},"code",{"className":147},[],[149],{"type":44,"value":150},"cd",{"type":44,"value":152}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":24,"tag":145,"props":154,"children":156},{"className":155},[],[157],{"type":44,"value":158},"nix-shell",{"type":44,"value":160}," > ",{"type":24,"tag":145,"props":162,"children":164},{"className":163},[],[165],{"type":44,"value":166},"nvim .",{"type":44,"value":168}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":24,"tag":40,"props":170,"children":171},{},[172,174,180],{"type":44,"value":173},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":24,"tag":145,"props":175,"children":177},{"className":176},[],[178],{"type":44,"value":179},"zsh",{"type":44,"value":181}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":24,"tag":183,"props":184,"children":186},"text-space",{"type":185},"tip",[187],{"type":24,"tag":40,"props":188,"children":189},{},[190],{"type":44,"value":191},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":24,"tag":40,"props":193,"children":194},{},[195,197,203],{"type":44,"value":196},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":24,"tag":145,"props":198,"children":200},{"className":199},[],[201],{"type":44,"value":202},"~/.cds",{"type":44,"value":204}," 中。",{"type":24,"tag":206,"props":207,"children":210},"text-title",{"t":208,"type":209},"为什么用 nim?","2",[],{"type":24,"tag":135,"props":212,"children":215},{"url":213,"type":214},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":24,"tag":40,"props":217,"children":218},{},[219,221,230,232,238],{"type":44,"value":220},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":24,"tag":222,"props":223,"children":227},"a",{"href":224,"rel":225},"https://learnxinyminutes.com/zh-cn/nim/",[226],"nofollow",[228],{"type":44,"value":229},"Y分钟速成X",{"type":44,"value":231},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":24,"tag":145,"props":233,"children":235},{"className":234},[],[236],{"type":44,"value":237},"or [up-to-date community version]",{"type":44,"value":239}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"title":8,"searchDepth":112,"depth":112,"links":241},[],"content:plan:programming:cds.md","plan/programming/cds.md",{"_path":245,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":246,"description":8,"director":11,"time":247,"types":13,"img":248,"info":249,"client":16,"target":126,"current":250,"displayType":128,"body":251,"_type":114,"_id":412,"_source":116,"_file":413,"_extension":118},"/plan/programming/command-hide","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",99.99,{"type":21,"children":252,"toc":410},[253],{"type":24,"tag":25,"props":254,"children":255},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[256,260,265,279,287,301,315,318,323,344,357,366],{"type":24,"tag":135,"props":257,"children":259},{"url":258},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":261,"children":264},{"url":262,"type":263},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":266,"children":267},{},[268,270,277],{"type":44,"value":269},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":222,"props":271,"children":274},{"href":272,"rel":273},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[226],[275],{"type":44,"value":276},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":278}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":183,"props":280,"children":281},{"type":185},[282],{"type":24,"tag":40,"props":283,"children":284},{},[285],{"type":44,"value":286},"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。",{"type":24,"tag":40,"props":288,"children":289},{},[290,292,299],{"type":44,"value":291},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":222,"props":293,"children":296},{"href":294,"rel":295},"https://github.com/folke/lazy.nvim",[226],[297],{"type":44,"value":298},"lazy.nvim",{"type":44,"value":300},"。",{"type":24,"tag":40,"props":302,"children":303},{},[304,306,313],{"type":44,"value":305},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":222,"props":307,"children":310},{"href":308,"rel":309},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[226],[311],{"type":44,"value":312},"dragove/nvim/.config/nvim",{"type":44,"value":314}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":316,"children":317},{},[],{"type":24,"tag":40,"props":319,"children":320},{},[321],{"type":44,"value":322},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":324,"children":325},{},[326,328,334,336,342],{"type":44,"value":327},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":145,"props":329,"children":331},{"className":330},[],[332],{"type":44,"value":333},"\u003Ctemplate>\u003C/template>",{"type":44,"value":335}," 中出现了 ",{"type":24,"tag":145,"props":337,"children":339},{"className":338},[],[340],{"type":44,"value":341},"\u003Cp>//\u003C/p>",{"type":44,"value":343}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":345,"children":346},{},[347,349,355],{"type":44,"value":348},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":145,"props":350,"children":352},{"className":351},[],[353],{"type":44,"value":354},"js\\html\\css",{"type":44,"value":356}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":358,"props":359,"children":361},"pre",{"code":360},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[362],{"type":24,"tag":145,"props":363,"children":364},{"__ignoreMap":8},[365],{"type":44,"value":360},{"type":24,"tag":40,"props":367,"children":368},{},[369,371,377,379,385,387,393,395,401,402,408],{"type":44,"value":370},"也就是说需要 ",{"type":24,"tag":145,"props":372,"children":374},{"className":373},[],[375],{"type":44,"value":376},"\u003Cscript>",{"type":44,"value":378}," 用 js 的注释, ",{"type":24,"tag":145,"props":380,"children":382},{"className":381},[],[383],{"type":44,"value":384},"\u003Ctemplate>",{"type":44,"value":386}," 用 ",{"type":24,"tag":145,"props":388,"children":390},{"className":389},[],[391],{"type":44,"value":392},"html",{"type":44,"value":394}," 的注释，",{"type":24,"tag":145,"props":396,"children":398},{"className":397},[],[399],{"type":44,"value":400},"style",{"type":44,"value":386},{"type":24,"tag":145,"props":403,"children":405},{"className":404},[],[406],{"type":44,"value":407},"css",{"type":44,"value":409}," 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（",{"title":8,"searchDepth":112,"depth":112,"links":411},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":415,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":416,"description":417,"director":11,"time":418,"types":13,"img":419,"info":420,"client":16,"target":126,"current":421,"displayType":128,"body":422,"_type":114,"_id":667,"_source":116,"_file":668,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/plan/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":423,"toc":665},[424],{"type":24,"tag":25,"props":425,"children":426},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[427,430,435,440,445,450,455,460,465,470,473,487,495,500,516,521,535,581,586,591,596,606,611,616,624,629,638,652,660],{"type":24,"tag":35,"props":428,"children":429},{":desc":37},[],{"type":24,"tag":40,"props":431,"children":432},{},[433],{"type":44,"value":434},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":183,"props":436,"children":439},{"img":437,"info":438},"life/plan/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":441,"children":442},{},[443],{"type":44,"value":444},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":446,"children":447},{},[448],{"type":44,"value":449},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":451,"children":452},{},[453],{"type":44,"value":454},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":183,"props":456,"children":459},{"img":457,"info":458},"life/plan/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":461,"children":462},{},[463],{"type":44,"value":464},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":466,"children":467},{},[468],{"type":44,"value":469},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":471,"children":472},{},[],{"type":24,"tag":40,"props":474,"children":475},{},[476,478,485],{"type":44,"value":477},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":222,"props":479,"children":482},{"href":480,"rel":481},"https://en.wikipedia.org/wiki/CSS_hack",[226],[483],{"type":44,"value":484},"CSS Hack",{"type":44,"value":486}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":358,"props":488,"children":490},{"code":489},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[491],{"type":24,"tag":145,"props":492,"children":493},{"__ignoreMap":8},[494],{"type":44,"value":489},{"type":24,"tag":40,"props":496,"children":497},{},[498],{"type":44,"value":499},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":501,"children":504},{"by":502,"topic":503},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[505],{"type":24,"tag":40,"props":506,"children":507},{},[508,510,514],{"type":44,"value":509},"Some of those people dont't do a lot",{"type":24,"tag":511,"props":512,"children":513},"br",{},[],{"type":44,"value":515},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":517,"children":518},{},[519],{"type":44,"value":520},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":522,"children":523},{},[524,526,533],{"type":44,"value":525},"最近在玩 ",{"type":24,"tag":222,"props":527,"children":530},{"href":528,"rel":529},"https://store.steampowered.com/app/2585110/_/",[226],[531],{"type":44,"value":532},"《我在疗养院送人上西天》",{"type":44,"value":534}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":536,"children":539},{"by":537,"topic":538},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[540],{"type":24,"tag":40,"props":541,"children":542},{},[543,545,548,550,553,555,558,560,563,566,568,571,573,576,578],{"type":44,"value":544},"but that's not everybody,",{"type":24,"tag":511,"props":546,"children":547},{},[],{"type":44,"value":549},"\ni care about the thechnology",{"type":24,"tag":511,"props":551,"children":552},{},[],{"type":44,"value":554},"\nthere are people who care about the ui",{"type":24,"tag":511,"props":556,"children":557},{},[],{"type":44,"value":559},"\ni can't do ui to save my life.",{"type":24,"tag":511,"props":561,"children":562},{},[],{"type":24,"tag":511,"props":564,"children":565},{},[],{"type":44,"value":567},"\ni mean, if i was stranded on an island,",{"type":24,"tag":511,"props":569,"children":570},{},[],{"type":44,"value":572},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":511,"props":574,"children":575},{},[],{"type":44,"value":577},"\ni'd die there.",{"type":24,"tag":511,"props":579,"children":580},{},[],{"type":24,"tag":40,"props":582,"children":583},{},[584],{"type":44,"value":585},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":587,"children":588},{},[589],{"type":44,"value":590},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":592,"children":593},{},[594],{"type":44,"value":595},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":597,"children":600},{"by":598,"topic":599},"Wikipedia","Frontend and backend",[601],{"type":24,"tag":40,"props":602,"children":603},{},[604],{"type":44,"value":605},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":607,"children":608},{},[609],{"type":44,"value":610},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":612,"children":613},{},[614],{"type":44,"value":615},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":183,"props":617,"children":618},{"type":185},[619],{"type":24,"tag":40,"props":620,"children":621},{},[622],{"type":44,"value":623},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":625,"children":626},{},[627],{"type":44,"value":628},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":630,"children":631},{},[632],{"type":24,"tag":633,"props":634,"children":635},"del",{},[636],{"type":44,"value":637},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":639,"children":640},{},[641,643,650],{"type":44,"value":642},"可能这个现象可以用 ",{"type":24,"tag":222,"props":644,"children":647},{"href":645,"rel":646},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[226],[648],{"type":44,"value":649},"Dunning–Kruger effect",{"type":44,"value":651}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":653,"children":654},{"by":598,"topic":649},[655],{"type":24,"tag":40,"props":656,"children":657},{},[658],{"type":44,"value":659},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":661,"children":662},{},[663],{"type":44,"value":664},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":666},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":670,"_dir":671,"_draft":7,"_partial":7,"_locale":8,"title":672,"description":8,"director":16,"img":673,"time":674,"plan":675,"target":126,"current":127,"displayType":128,"body":676,"_type":114,"_id":1559,"_source":116,"_file":1560,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",{"type":21,"children":677,"toc":1553},[678],{"type":24,"tag":679,"props":680,"children":683},"book-content",{":by":681,":img":28,":plan":682,":title":31},"director","plan",[684,688,693,698,703,708,713,716,723,730,742,782,796,807,829,832,838,853,875,912,934,956,972,980,988,1000,1008,1029,1037,1040,1046,1057,1077,1104,1109,1130,1178,1199,1204,1222,1235,1263,1268,1271,1277,1301,1353,1405,1425,1448,1458,1486,1494,1499,1507,1520,1528],{"type":24,"tag":206,"props":685,"children":687},{":t":686},"CVE is my dream.",[],{"type":24,"tag":40,"props":689,"children":690},{},[691],{"type":44,"value":692},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":694,"children":695},{},[696],{"type":44,"value":697},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":699,"children":700},{},[701],{"type":44,"value":702},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":704,"children":705},{},[706],{"type":44,"value":707},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":709,"children":710},{},[711],{"type":44,"value":712},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":714,"children":715},{},[],{"type":24,"tag":717,"props":718,"children":720},"h1",{"id":719},"rust-3",[721],{"type":44,"value":722},"rust 3",{"type":24,"tag":724,"props":725,"children":727},"h2",{"id":726},"cve-2022-36114-1",[728],{"type":44,"value":729},"CVE-2022-36114 1",{"type":24,"tag":731,"props":732,"children":736},"cve-info",{":type":209,"cve":733,"to":734,":cwe":735},"CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[737],{"type":24,"tag":40,"props":738,"children":739},{},[740],{"type":44,"value":741},"不受控制的资源消耗",{"type":24,"tag":40,"props":743,"children":744},{},[745,747,754,756,763,765,771,773,780],{"type":44,"value":746},"利用 Cargo 的 ",{"type":24,"tag":222,"props":748,"children":751},{"href":749,"rel":750},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[226],[752],{"type":44,"value":753},"build script",{"type":44,"value":755}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":222,"props":757,"children":760},{"href":758,"rel":759},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[226],[761],{"type":44,"value":762},"procedural macros",{"type":44,"value":764},"，在执行 ",{"type":24,"tag":145,"props":766,"children":768},{"className":767},[],[769],{"type":44,"value":770},"cargo run",{"type":44,"value":772}," 的过程中触发了一个 ",{"type":24,"tag":222,"props":774,"children":777},{"href":775,"rel":776},"https://en.wikipedia.org/wiki/Zip_bomb",[226],[778],{"type":44,"value":779},"Zip Bomb",{"type":44,"value":781}," 行为。",{"type":24,"tag":40,"props":783,"children":784},{},[785,787,794],{"type":44,"value":786},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":222,"props":788,"children":791},{"href":789,"rel":790},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[226],[792],{"type":44,"value":793},"补丁修复",{"type":44,"value":795}," Zip_bomb 的问题:",{"type":24,"tag":358,"props":797,"children":802},{"code":798,"language":799,"meta":8,"className":800},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[801],"language-c",[803],{"type":24,"tag":145,"props":804,"children":805},{"__ignoreMap":8},[806],{"type":44,"value":798},{"type":24,"tag":40,"props":808,"children":809},{},[810,812,818,820,827],{"type":44,"value":811},"同时引入了 ",{"type":24,"tag":145,"props":813,"children":815},{"className":814},[],[816],{"type":44,"value":817},"LimitErrorReader",{"type":44,"value":819},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":222,"props":821,"children":824},{"href":822,"rel":823},"https://crates.io/",[226],[825],{"type":44,"value":826},"crates",{"type":44,"value":828}," 上提交的 crate。",{"type":24,"tag":57,"props":830,"children":831},{},[],{"type":24,"tag":724,"props":833,"children":835},{"id":834},"cve-2023-40030-1",[836],{"type":44,"value":837},"CVE-2023-40030 1",{"type":24,"tag":731,"props":839,"children":844},{":type":840,"cve":841,"to":842,":cwe":843},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[845],{"type":24,"tag":40,"props":846,"children":847},{},[848,850],{"type":44,"value":849},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":511,"props":851,"children":852},{},[],{"type":24,"tag":40,"props":854,"children":855},{},[856,858,864,866,873],{"type":44,"value":857},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":145,"props":859,"children":861},{"className":860},[],[862],{"type":44,"value":863},"cargo build --timings",{"type":44,"value":865}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":222,"props":867,"children":870},{"href":868,"rel":869},"https://doc.rust-lang.org/cargo/reference/timings.html",[226],[871],{"type":44,"value":872},"--timings",{"type":44,"value":874}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":876,"children":877},{},[878,880,886,888,894,896,902,904,910],{"type":44,"value":879},"可以通过在 ",{"type":24,"tag":145,"props":881,"children":883},{"className":882},[],[884],{"type":44,"value":885},"Cargo.toml",{"type":44,"value":887}," 中加入 ",{"type":24,"tag":145,"props":889,"children":891},{"className":890},[],[892],{"type":44,"value":893},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":895}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":145,"props":897,"children":899},{"className":898},[],[900],{"type":44,"value":901},"Warning",{"type":44,"value":903},", 换成了 ",{"type":24,"tag":145,"props":905,"children":907},{"className":906},[],[908],{"type":44,"value":909},"bail!",{"type":44,"value":911}," 机制。",{"type":24,"tag":183,"props":913,"children":914},{"type":185},[915],{"type":24,"tag":40,"props":916,"children":917},{},[918,923,925,932],{"type":24,"tag":145,"props":919,"children":921},{"className":920},[],[922],{"type":44,"value":909},{"type":44,"value":924}," 宏来自 ",{"type":24,"tag":222,"props":926,"children":929},{"href":927,"rel":928},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[226],[930],{"type":44,"value":931},"anyhow",{"type":44,"value":933}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":935,"children":936},{},[937,939,946,948,954],{"type":44,"value":938},"可以看一下 ",{"type":24,"tag":222,"props":940,"children":943},{"href":941,"rel":942},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[226],[944],{"type":44,"value":945},"fix pr",{"type":44,"value":947},"，非常有意思，比如 ",{"type":24,"tag":145,"props":949,"children":951},{"className":950},[],[952],{"type":44,"value":953},"validate_feature_name",{"type":44,"value":955}," 函数。",{"type":24,"tag":40,"props":957,"children":958},{},[959,961,967,969],{"type":44,"value":960},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":145,"props":962,"children":964},{"className":963},[],[965],{"type":44,"value":966},"warning",{"type":44,"value":968},"，流程继续。",{"type":24,"tag":511,"props":970,"children":971},{},[],{"type":24,"tag":358,"props":973,"children":975},{"code":974},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[976],{"type":24,"tag":145,"props":977,"children":978},{"__ignoreMap":8},[979],{"type":44,"value":974},{"type":24,"tag":183,"props":981,"children":982},{"type":185},[983],{"type":24,"tag":40,"props":984,"children":985},{},[986],{"type":44,"value":987},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":989,"children":990},{},[991,993,998],{"type":44,"value":992},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":145,"props":994,"children":996},{"className":995},[],[997],{"type":44,"value":909},{"type":44,"value":999},"，构建中止，用户必须修正。",{"type":24,"tag":358,"props":1001,"children":1003},{"code":1002}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[1004],{"type":24,"tag":145,"props":1005,"children":1006},{"__ignoreMap":8},[1007],{"type":44,"value":1002},{"type":24,"tag":40,"props":1009,"children":1010},{},[1011,1013,1019,1021,1027],{"type":44,"value":1012},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":145,"props":1014,"children":1016},{"className":1015},[],[1017],{"type":44,"value":1018},"is_ok()",{"type":44,"value":1020}," 是合法的，而 ",{"type":24,"tag":145,"props":1022,"children":1024},{"className":1023},[],[1025],{"type":44,"value":1026},"is_err()",{"type":44,"value":1028}," 是不合法的：",{"type":24,"tag":358,"props":1030,"children":1032},{"code":1031}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[1033],{"type":24,"tag":145,"props":1034,"children":1035},{"__ignoreMap":8},[1036],{"type":44,"value":1031},{"type":24,"tag":57,"props":1038,"children":1039},{},[],{"type":24,"tag":724,"props":1041,"children":1043},{"id":1042},"cve-2023-41051-1",[1044],{"type":44,"value":1045},"CVE-2023-41051 1",{"type":24,"tag":731,"props":1047,"children":1051},{":type":840,"cve":1048,"to":1049,":cwe":1050},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[1052],{"type":24,"tag":40,"props":1053,"children":1054},{},[1055],{"type":44,"value":1056},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":1058,"children":1059},{},[1060,1067,1069,1075],{"type":24,"tag":222,"props":1061,"children":1064},{"href":1062,"rel":1063},"https://github.com/rust-vmm/vm-memory",[226],[1065],{"type":44,"value":1066},"vm-memory",{"type":44,"value":1068}," 的 ",{"type":24,"tag":145,"props":1070,"children":1072},{"className":1071},[],[1073],{"type":44,"value":1074},"VolatileMemory",{"type":44,"value":1076}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":1078,"props":1079,"children":1080},"ol",{},[1081,1093],{"type":24,"tag":1082,"props":1083,"children":1084},"li",{},[1085,1091],{"type":24,"tag":145,"props":1086,"children":1088},{"className":1087},[],[1089],{"type":44,"value":1090},"VolatileMemory::get_slice",{"type":44,"value":1092},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":1082,"props":1094,"children":1095},{},[1096,1102],{"type":24,"tag":145,"props":1097,"children":1099},{"className":1098},[],[1100],{"type":44,"value":1101},"VolatileMemory::read/write",{"type":44,"value":1103},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":1105,"children":1106},{},[1107],{"type":44,"value":1108},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":1110,"children":1111},{},[1112,1114,1120,1122,1128],{"type":44,"value":1113},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":145,"props":1115,"children":1117},{"className":1116},[],[1118],{"type":44,"value":1119},"read/write",{"type":44,"value":1121},"，更多的是 ",{"type":24,"tag":145,"props":1123,"children":1125},{"className":1124},[],[1126],{"type":44,"value":1127},"get_slice",{"type":44,"value":1129}," 方法，例如：",{"type":24,"tag":1078,"props":1131,"children":1132},{},[1133,1142,1151,1160,1169],{"type":24,"tag":1082,"props":1134,"children":1135},{},[1136],{"type":24,"tag":145,"props":1137,"children":1139},{"className":1138},[],[1140],{"type":44,"value":1141},"get_atomic_ref",{"type":24,"tag":1082,"props":1143,"children":1144},{},[1145],{"type":24,"tag":145,"props":1146,"children":1148},{"className":1147},[],[1149],{"type":44,"value":1150},"aligned_as_ref",{"type":24,"tag":1082,"props":1152,"children":1153},{},[1154],{"type":24,"tag":145,"props":1155,"children":1157},{"className":1156},[],[1158],{"type":44,"value":1159},"aligned_as_mut",{"type":24,"tag":1082,"props":1161,"children":1162},{},[1163],{"type":24,"tag":145,"props":1164,"children":1166},{"className":1165},[],[1167],{"type":44,"value":1168},"get_ref",{"type":24,"tag":1082,"props":1170,"children":1171},{},[1172],{"type":24,"tag":145,"props":1173,"children":1175},{"className":1174},[],[1176],{"type":44,"value":1177},"get_array_ref",{"type":24,"tag":40,"props":1179,"children":1180},{},[1181,1183,1189,1191,1197],{"type":44,"value":1182},"上述方法有个共同点，都是利用 ",{"type":24,"tag":145,"props":1184,"children":1186},{"className":1185},[],[1187],{"type":44,"value":1188},"ref",{"type":44,"value":1190}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":145,"props":1192,"children":1194},{"className":1193},[],[1195],{"type":44,"value":1196},"&[T]",{"type":44,"value":1198}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1200,"children":1201},{},[1202],{"type":44,"value":1203},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":1078,"props":1205,"children":1206},{},[1207,1212,1217],{"type":24,"tag":1082,"props":1208,"children":1209},{},[1210],{"type":44,"value":1211},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":1082,"props":1213,"children":1214},{},[1215],{"type":44,"value":1216},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":1082,"props":1218,"children":1219},{},[1220],{"type":44,"value":1221},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1223,"children":1224},{},[1225,1227,1233],{"type":44,"value":1226},"仔细欣赏 ",{"type":24,"tag":222,"props":1228,"children":1231},{"href":1229,"rel":1230},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[226],[1232],{"type":44,"value":945},{"type":44,"value":1234}," 你会发现：",{"type":24,"tag":40,"props":1236,"children":1237},{},[1238,1240,1246,1248,1253,1255,1261],{"type":44,"value":1239},"这些方法内部，都会调用 ",{"type":24,"tag":145,"props":1241,"children":1243},{"className":1242},[],[1244],{"type":44,"value":1245},"get_slice(offset, count)",{"type":44,"value":1247}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":145,"props":1249,"children":1251},{"className":1250},[],[1252],{"type":44,"value":1127},{"type":44,"value":1254}," 加上 ",{"type":24,"tag":145,"props":1256,"children":1258},{"className":1257},[],[1259],{"type":44,"value":1260},"assert_eq!",{"type":44,"value":1262}," 就意味着：",{"type":24,"tag":40,"props":1264,"children":1265},{},[1266],{"type":44,"value":1267},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1269,"children":1270},{},[],{"type":24,"tag":724,"props":1272,"children":1274},{"id":1273},"cve-2023-38497-1",[1275],{"type":44,"value":1276},"CVE-2023-38497 1",{"type":24,"tag":731,"props":1278,"children":1283},{":type":1279,"cve":1280,"to":1281,"cwe":1282},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1284,1292],{"type":24,"tag":40,"props":1285,"children":1286},{},[1287,1289],{"type":44,"value":1288},"278: 不安全的保留继承权限",{"type":24,"tag":511,"props":1290,"children":1291},{},[],{"type":24,"tag":1293,"props":1294,"children":1295},"ul",{},[1296],{"type":24,"tag":1082,"props":1297,"children":1298},{},[1299],{"type":44,"value":1300},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1302,"children":1303},{},[1304,1306,1313,1315,1321,1323,1328,1330,1335,1337,1343,1345,1351],{"type":44,"value":1305},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":222,"props":1307,"children":1310},{"href":1308,"rel":1309},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[226],[1311],{"type":44,"value":1312},"CVE-2005-1724",{"type":44,"value":1314},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1316,"props":1317,"children":1318},"strong",{},[1319],{"type":44,"value":1320},"权限限制”",{"type":44,"value":1322},"。总的来说 umask 是 ",{"type":24,"tag":1316,"props":1324,"children":1325},{},[1326],{"type":44,"value":1327},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1329},"，可以看看 ",{"type":24,"tag":1331,"props":1332,"children":1333},"sup",{},[1334],{"type":44,"value":840},{"type":44,"value":1336},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":145,"props":1338,"children":1340},{"className":1339},[],[1341],{"type":44,"value":1342},"bash",{"type":44,"value":1344}," 脚本的时候，会使用 ",{"type":24,"tag":145,"props":1346,"children":1348},{"className":1347},[],[1349],{"type":44,"value":1350},"chmod 777",{"type":44,"value":1352},", 要不然运行不了。",{"type":24,"tag":183,"props":1354,"children":1355},{"type":185},[1356,1366,1371,1392,1400],{"type":24,"tag":40,"props":1357,"children":1358},{},[1359,1361],{"type":44,"value":1360},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1316,"props":1362,"children":1363},{},[1364],{"type":44,"value":1365},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1367,"children":1368},{},[1369],{"type":44,"value":1370},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1372,"children":1373},{},[1374,1376,1382,1384,1390],{"type":44,"value":1375},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":145,"props":1377,"children":1379},{"className":1378},[],[1380],{"type":44,"value":1381},"-network",{"type":44,"value":1383}," 和 ",{"type":24,"tag":145,"props":1385,"children":1387},{"className":1386},[],[1388],{"type":44,"value":1389},"-mask",{"type":44,"value":1391},"：",{"type":24,"tag":358,"props":1393,"children":1395},{"code":1394},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1396],{"type":24,"tag":145,"props":1397,"children":1398},{"__ignoreMap":8},[1399],{"type":44,"value":1394},{"type":24,"tag":40,"props":1401,"children":1402},{},[1403],{"type":44,"value":1404},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1406,"children":1407},{},[1408,1410,1415,1417,1423],{"type":44,"value":1409},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1316,"props":1411,"children":1412},{},[1413],{"type":44,"value":1414},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1416},"。而 ",{"type":24,"tag":145,"props":1418,"children":1420},{"className":1419},[],[1421],{"type":44,"value":1422},"umask",{"type":44,"value":1424}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1426,"props":1427,"children":1429},"text-tip",{"type":1428},"big",[1430],{"type":24,"tag":40,"props":1431,"children":1432},{},[1433,1435,1441,1443,1446],{"type":44,"value":1434},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":145,"props":1436,"children":1438},{"className":1437},[],[1439],{"type":44,"value":1440},"777",{"type":44,"value":1442}," 权限构建攻击脚本。",{"type":24,"tag":511,"props":1444,"children":1445},{},[],{"type":44,"value":1447},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1449,"children":1450},{},[1451,1453],{"type":44,"value":1452},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1316,"props":1454,"children":1455},{},[1456],{"type":44,"value":1457},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1459,"children":1460},{},[1461,1463,1469,1471,1477,1479,1484],{"type":44,"value":1462},"在 ",{"type":24,"tag":145,"props":1464,"children":1466},{"className":1465},[],[1467],{"type":44,"value":1468},"src/cargo/util/mod.rs",{"type":44,"value":1470}," 中新增了 ",{"type":24,"tag":145,"props":1472,"children":1474},{"className":1473},[],[1475],{"type":44,"value":1476},"get_umask()",{"type":44,"value":1478}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":145,"props":1480,"children":1482},{"className":1481},[],[1483],{"type":44,"value":1422},{"type":44,"value":1485}," 限制新文件的权限。：",{"type":24,"tag":358,"props":1487,"children":1489},{"code":1488},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1490],{"type":24,"tag":145,"props":1491,"children":1492},{"__ignoreMap":8},[1493],{"type":44,"value":1488},{"type":24,"tag":40,"props":1495,"children":1496},{},[1497],{"type":44,"value":1498},"以及很有艺术性的一行 code:",{"type":24,"tag":358,"props":1500,"children":1502},{"code":1501},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1503],{"type":24,"tag":145,"props":1504,"children":1505},{"__ignoreMap":8},[1506],{"type":44,"value":1501},{"type":24,"tag":40,"props":1508,"children":1509},{},[1510,1512,1518],{"type":44,"value":1511},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":145,"props":1513,"children":1515},{"className":1514},[],[1516],{"type":44,"value":1517},"!umask",{"type":44,"value":1519}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":358,"props":1521,"children":1523},{"code":1522},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1524],{"type":24,"tag":145,"props":1525,"children":1526},{"__ignoreMap":8},[1527],{"type":44,"value":1522},{"type":24,"tag":1529,"props":1530,"children":1533},"div",{"id":1531,"className":1532},"refer-anchor-1",[1188],[1534],{"type":24,"tag":1293,"props":1535,"children":1536},{},[1537],{"type":24,"tag":1082,"props":1538,"children":1539},{},[1540,1545,1547],{"type":24,"tag":1541,"props":1542,"children":1543},"span",{},[1544],{"type":44,"value":840},{"type":44,"value":1546}," ",{"type":24,"tag":222,"props":1548,"children":1551},{"href":1549,"rel":1550},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[226],[1552],{"type":44,"value":1549},{"title":8,"searchDepth":112,"depth":112,"links":1554},[1555,1556,1557,1558],{"id":726,"depth":112,"text":729},{"id":834,"depth":112,"text":837},{"id":1042,"depth":112,"text":1045},{"id":1273,"depth":112,"text":1276},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1756228281139]