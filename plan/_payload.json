[{"data":1,"prerenderedAt":1303},["Reactive",2],{"equalLink":3},[4,119,148,408],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-529.22,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":146,"_source":116,"_file":147,"_extension":118},"/plan/programming/command-hide","programming","command-hide","2025.07.06","des/01/hide.jpg","封面：command-hide.vscode version",100,99.99,"percent",{"type":21,"children":130,"toc":144},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":40,"props":140,"children":141},{},[142],{"type":44,"value":143},"test",{"title":8,"searchDepth":112,"depth":112,"links":145},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":149,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":150,"description":151,"director":11,"time":123,"types":13,"img":152,"info":153,"client":16,"target":126,"current":154,"displayType":128,"body":155,"_type":114,"_id":406,"_source":116,"_file":407,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","life/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":156,"toc":404},[157],{"type":24,"tag":25,"props":158,"children":159},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[160,163,168,174,179,184,189,194,199,204,207,223,233,238,254,259,273,319,324,329,334,344,349,354,363,368,377,391,399],{"type":24,"tag":35,"props":161,"children":162},{":desc":37},[],{"type":24,"tag":40,"props":164,"children":165},{},[166],{"type":44,"value":167},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":169,"props":170,"children":173},"text-space",{"img":171,"info":172},"life/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":175,"children":176},{},[177],{"type":44,"value":178},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":180,"children":181},{},[182],{"type":44,"value":183},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":185,"children":186},{},[187],{"type":44,"value":188},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":169,"props":190,"children":193},{"img":191,"info":192},"life/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":195,"children":196},{},[197],{"type":44,"value":198},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":200,"children":201},{},[202],{"type":44,"value":203},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":205,"children":206},{},[],{"type":24,"tag":40,"props":208,"children":209},{},[210,212,221],{"type":44,"value":211},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":213,"props":214,"children":218},"a",{"href":215,"rel":216},"https://en.wikipedia.org/wiki/CSS_hack",[217],"nofollow",[219],{"type":44,"value":220},"CSS Hack",{"type":44,"value":222}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":224,"props":225,"children":227},"pre",{"code":226},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[228],{"type":24,"tag":229,"props":230,"children":231},"code",{"__ignoreMap":8},[232],{"type":44,"value":226},{"type":24,"tag":40,"props":234,"children":235},{},[236],{"type":44,"value":237},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":239,"children":242},{"by":240,"topic":241},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[243],{"type":24,"tag":40,"props":244,"children":245},{},[246,248,252],{"type":44,"value":247},"Some of those people dont't do a lot",{"type":24,"tag":249,"props":250,"children":251},"br",{},[],{"type":44,"value":253},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":255,"children":256},{},[257],{"type":44,"value":258},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":260,"children":261},{},[262,264,271],{"type":44,"value":263},"最近在玩 ",{"type":24,"tag":213,"props":265,"children":268},{"href":266,"rel":267},"https://store.steampowered.com/app/2585110/_/",[217],[269],{"type":44,"value":270},"《我在疗养院送人上西天》",{"type":44,"value":272}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":274,"children":277},{"by":275,"topic":276},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[278],{"type":24,"tag":40,"props":279,"children":280},{},[281,283,286,288,291,293,296,298,301,304,306,309,311,314,316],{"type":44,"value":282},"but that's not everybody,",{"type":24,"tag":249,"props":284,"children":285},{},[],{"type":44,"value":287},"\ni care about the thechnology",{"type":24,"tag":249,"props":289,"children":290},{},[],{"type":44,"value":292},"\nthere are people who care about the ui",{"type":24,"tag":249,"props":294,"children":295},{},[],{"type":44,"value":297},"\ni can't do ui to save my life.",{"type":24,"tag":249,"props":299,"children":300},{},[],{"type":24,"tag":249,"props":302,"children":303},{},[],{"type":44,"value":305},"\ni mean, if i was stranded on an island,",{"type":24,"tag":249,"props":307,"children":308},{},[],{"type":44,"value":310},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":249,"props":312,"children":313},{},[],{"type":44,"value":315},"\ni'd die there.",{"type":24,"tag":249,"props":317,"children":318},{},[],{"type":24,"tag":40,"props":320,"children":321},{},[322],{"type":44,"value":323},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":325,"children":326},{},[327],{"type":44,"value":328},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":330,"children":331},{},[332],{"type":44,"value":333},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":335,"children":338},{"by":336,"topic":337},"Wikipedia","Frontend and backend",[339],{"type":24,"tag":40,"props":340,"children":341},{},[342],{"type":44,"value":343},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":345,"children":346},{},[347],{"type":44,"value":348},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":350,"children":351},{},[352],{"type":44,"value":353},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":169,"props":355,"children":357},{"type":356},"tip",[358],{"type":24,"tag":40,"props":359,"children":360},{},[361],{"type":44,"value":362},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":364,"children":365},{},[366],{"type":44,"value":367},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":369,"children":370},{},[371],{"type":24,"tag":372,"props":373,"children":374},"del",{},[375],{"type":44,"value":376},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":378,"children":379},{},[380,382,389],{"type":44,"value":381},"可能这个现象可以用 ",{"type":24,"tag":213,"props":383,"children":386},{"href":384,"rel":385},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[217],[387],{"type":44,"value":388},"Dunning–Kruger effect",{"type":44,"value":390}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":392,"children":393},{"by":336,"topic":388},[394],{"type":24,"tag":40,"props":395,"children":396},{},[397],{"type":44,"value":398},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":400,"children":401},{},[402],{"type":44,"value":403},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":405},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":409,"_dir":410,"_draft":7,"_partial":7,"_locale":8,"title":411,"description":8,"director":16,"img":412,"time":413,"plan":414,"target":126,"current":415,"displayType":128,"body":416,"_type":114,"_id":1301,"_source":116,"_file":1302,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":417,"toc":1295},[418],{"type":24,"tag":419,"props":420,"children":423},"book-content",{":by":421,":img":28,":plan":422,":title":31},"director","plan",[424,429,434,439,444,449,454,457,464,471,484,524,538,549,571,574,580,595,617,654,676,698,714,722,730,742,750,771,779,782,788,799,819,846,851,872,920,941,946,964,977,1005,1010,1013,1019,1043,1095,1147,1167,1190,1200,1228,1236,1241,1249,1262,1270],{"type":24,"tag":425,"props":426,"children":428},"text-title",{":t":427},"CVE is my dream.",[],{"type":24,"tag":40,"props":430,"children":431},{},[432],{"type":44,"value":433},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":435,"children":436},{},[437],{"type":44,"value":438},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":440,"children":441},{},[442],{"type":44,"value":443},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":445,"children":446},{},[447],{"type":44,"value":448},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":450,"children":451},{},[452],{"type":44,"value":453},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":455,"children":456},{},[],{"type":24,"tag":458,"props":459,"children":461},"h1",{"id":460},"rust-3",[462],{"type":44,"value":463},"rust 3",{"type":24,"tag":465,"props":466,"children":468},"h2",{"id":467},"cve-2022-36114-1",[469],{"type":44,"value":470},"CVE-2022-36114 1",{"type":24,"tag":472,"props":473,"children":478},"cve-info",{":type":474,"cve":475,"to":476,":cwe":477},"2","CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[479],{"type":24,"tag":40,"props":480,"children":481},{},[482],{"type":44,"value":483},"不受控制的资源消耗",{"type":24,"tag":40,"props":485,"children":486},{},[487,489,496,498,505,507,513,515,522],{"type":44,"value":488},"利用 Cargo 的 ",{"type":24,"tag":213,"props":490,"children":493},{"href":491,"rel":492},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[217],[494],{"type":44,"value":495},"build script",{"type":44,"value":497}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":213,"props":499,"children":502},{"href":500,"rel":501},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[217],[503],{"type":44,"value":504},"procedural macros",{"type":44,"value":506},"，在执行 ",{"type":24,"tag":229,"props":508,"children":510},{"className":509},[],[511],{"type":44,"value":512},"cargo run",{"type":44,"value":514}," 的过程中触发了一个 ",{"type":24,"tag":213,"props":516,"children":519},{"href":517,"rel":518},"https://en.wikipedia.org/wiki/Zip_bomb",[217],[520],{"type":44,"value":521},"Zip Bomb",{"type":44,"value":523}," 行为。",{"type":24,"tag":40,"props":525,"children":526},{},[527,529,536],{"type":44,"value":528},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":213,"props":530,"children":533},{"href":531,"rel":532},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[217],[534],{"type":44,"value":535},"补丁修复",{"type":44,"value":537}," Zip_bomb 的问题:",{"type":24,"tag":224,"props":539,"children":544},{"code":540,"language":541,"meta":8,"className":542},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[543],"language-c",[545],{"type":24,"tag":229,"props":546,"children":547},{"__ignoreMap":8},[548],{"type":44,"value":540},{"type":24,"tag":40,"props":550,"children":551},{},[552,554,560,562,569],{"type":44,"value":553},"同时引入了 ",{"type":24,"tag":229,"props":555,"children":557},{"className":556},[],[558],{"type":44,"value":559},"LimitErrorReader",{"type":44,"value":561},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":213,"props":563,"children":566},{"href":564,"rel":565},"https://crates.io/",[217],[567],{"type":44,"value":568},"crates",{"type":44,"value":570}," 上提交的 crate。",{"type":24,"tag":57,"props":572,"children":573},{},[],{"type":24,"tag":465,"props":575,"children":577},{"id":576},"cve-2023-40030-1",[578],{"type":44,"value":579},"CVE-2023-40030 1",{"type":24,"tag":472,"props":581,"children":586},{":type":582,"cve":583,"to":584,":cwe":585},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[587],{"type":24,"tag":40,"props":588,"children":589},{},[590,592],{"type":44,"value":591},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":249,"props":593,"children":594},{},[],{"type":24,"tag":40,"props":596,"children":597},{},[598,600,606,608,615],{"type":44,"value":599},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":229,"props":601,"children":603},{"className":602},[],[604],{"type":44,"value":605},"cargo build --timings",{"type":44,"value":607}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":213,"props":609,"children":612},{"href":610,"rel":611},"https://doc.rust-lang.org/cargo/reference/timings.html",[217],[613],{"type":44,"value":614},"--timings",{"type":44,"value":616}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":618,"children":619},{},[620,622,628,630,636,638,644,646,652],{"type":44,"value":621},"可以通过在 ",{"type":24,"tag":229,"props":623,"children":625},{"className":624},[],[626],{"type":44,"value":627},"Cargo.toml",{"type":44,"value":629}," 中加入 ",{"type":24,"tag":229,"props":631,"children":633},{"className":632},[],[634],{"type":44,"value":635},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":637}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":229,"props":639,"children":641},{"className":640},[],[642],{"type":44,"value":643},"Warning",{"type":44,"value":645},", 换成了 ",{"type":24,"tag":229,"props":647,"children":649},{"className":648},[],[650],{"type":44,"value":651},"bail!",{"type":44,"value":653}," 机制。",{"type":24,"tag":169,"props":655,"children":656},{"type":356},[657],{"type":24,"tag":40,"props":658,"children":659},{},[660,665,667,674],{"type":24,"tag":229,"props":661,"children":663},{"className":662},[],[664],{"type":44,"value":651},{"type":44,"value":666}," 宏来自 ",{"type":24,"tag":213,"props":668,"children":671},{"href":669,"rel":670},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[217],[672],{"type":44,"value":673},"anyhow",{"type":44,"value":675}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":677,"children":678},{},[679,681,688,690,696],{"type":44,"value":680},"可以看一下 ",{"type":24,"tag":213,"props":682,"children":685},{"href":683,"rel":684},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[217],[686],{"type":44,"value":687},"fix pr",{"type":44,"value":689},"，非常有意思，比如 ",{"type":24,"tag":229,"props":691,"children":693},{"className":692},[],[694],{"type":44,"value":695},"validate_feature_name",{"type":44,"value":697}," 函数。",{"type":24,"tag":40,"props":699,"children":700},{},[701,703,709,711],{"type":44,"value":702},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":229,"props":704,"children":706},{"className":705},[],[707],{"type":44,"value":708},"warning",{"type":44,"value":710},"，流程继续。",{"type":24,"tag":249,"props":712,"children":713},{},[],{"type":24,"tag":224,"props":715,"children":717},{"code":716},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[718],{"type":24,"tag":229,"props":719,"children":720},{"__ignoreMap":8},[721],{"type":44,"value":716},{"type":24,"tag":169,"props":723,"children":724},{"type":356},[725],{"type":24,"tag":40,"props":726,"children":727},{},[728],{"type":44,"value":729},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":731,"children":732},{},[733,735,740],{"type":44,"value":734},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":229,"props":736,"children":738},{"className":737},[],[739],{"type":44,"value":651},{"type":44,"value":741},"，构建中止，用户必须修正。",{"type":24,"tag":224,"props":743,"children":745},{"code":744}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[746],{"type":24,"tag":229,"props":747,"children":748},{"__ignoreMap":8},[749],{"type":44,"value":744},{"type":24,"tag":40,"props":751,"children":752},{},[753,755,761,763,769],{"type":44,"value":754},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":229,"props":756,"children":758},{"className":757},[],[759],{"type":44,"value":760},"is_ok()",{"type":44,"value":762}," 是合法的，而 ",{"type":24,"tag":229,"props":764,"children":766},{"className":765},[],[767],{"type":44,"value":768},"is_err()",{"type":44,"value":770}," 是不合法的：",{"type":24,"tag":224,"props":772,"children":774},{"code":773}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[775],{"type":24,"tag":229,"props":776,"children":777},{"__ignoreMap":8},[778],{"type":44,"value":773},{"type":24,"tag":57,"props":780,"children":781},{},[],{"type":24,"tag":465,"props":783,"children":785},{"id":784},"cve-2023-41051-1",[786],{"type":44,"value":787},"CVE-2023-41051 1",{"type":24,"tag":472,"props":789,"children":793},{":type":582,"cve":790,"to":791,":cwe":792},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[794],{"type":24,"tag":40,"props":795,"children":796},{},[797],{"type":44,"value":798},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":800,"children":801},{},[802,809,811,817],{"type":24,"tag":213,"props":803,"children":806},{"href":804,"rel":805},"https://github.com/rust-vmm/vm-memory",[217],[807],{"type":44,"value":808},"vm-memory",{"type":44,"value":810}," 的 ",{"type":24,"tag":229,"props":812,"children":814},{"className":813},[],[815],{"type":44,"value":816},"VolatileMemory",{"type":44,"value":818}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":820,"props":821,"children":822},"ol",{},[823,835],{"type":24,"tag":824,"props":825,"children":826},"li",{},[827,833],{"type":24,"tag":229,"props":828,"children":830},{"className":829},[],[831],{"type":44,"value":832},"VolatileMemory::get_slice",{"type":44,"value":834},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":824,"props":836,"children":837},{},[838,844],{"type":24,"tag":229,"props":839,"children":841},{"className":840},[],[842],{"type":44,"value":843},"VolatileMemory::read/write",{"type":44,"value":845},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":847,"children":848},{},[849],{"type":44,"value":850},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":852,"children":853},{},[854,856,862,864,870],{"type":44,"value":855},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":229,"props":857,"children":859},{"className":858},[],[860],{"type":44,"value":861},"read/write",{"type":44,"value":863},"，更多的是 ",{"type":24,"tag":229,"props":865,"children":867},{"className":866},[],[868],{"type":44,"value":869},"get_slice",{"type":44,"value":871}," 方法，例如：",{"type":24,"tag":820,"props":873,"children":874},{},[875,884,893,902,911],{"type":24,"tag":824,"props":876,"children":877},{},[878],{"type":24,"tag":229,"props":879,"children":881},{"className":880},[],[882],{"type":44,"value":883},"get_atomic_ref",{"type":24,"tag":824,"props":885,"children":886},{},[887],{"type":24,"tag":229,"props":888,"children":890},{"className":889},[],[891],{"type":44,"value":892},"aligned_as_ref",{"type":24,"tag":824,"props":894,"children":895},{},[896],{"type":24,"tag":229,"props":897,"children":899},{"className":898},[],[900],{"type":44,"value":901},"aligned_as_mut",{"type":24,"tag":824,"props":903,"children":904},{},[905],{"type":24,"tag":229,"props":906,"children":908},{"className":907},[],[909],{"type":44,"value":910},"get_ref",{"type":24,"tag":824,"props":912,"children":913},{},[914],{"type":24,"tag":229,"props":915,"children":917},{"className":916},[],[918],{"type":44,"value":919},"get_array_ref",{"type":24,"tag":40,"props":921,"children":922},{},[923,925,931,933,939],{"type":44,"value":924},"上述方法有个共同点，都是利用 ",{"type":24,"tag":229,"props":926,"children":928},{"className":927},[],[929],{"type":44,"value":930},"ref",{"type":44,"value":932}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":229,"props":934,"children":936},{"className":935},[],[937],{"type":44,"value":938},"&[T]",{"type":44,"value":940}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":942,"children":943},{},[944],{"type":44,"value":945},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":820,"props":947,"children":948},{},[949,954,959],{"type":24,"tag":824,"props":950,"children":951},{},[952],{"type":44,"value":953},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":824,"props":955,"children":956},{},[957],{"type":44,"value":958},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":824,"props":960,"children":961},{},[962],{"type":44,"value":963},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":965,"children":966},{},[967,969,975],{"type":44,"value":968},"仔细欣赏 ",{"type":24,"tag":213,"props":970,"children":973},{"href":971,"rel":972},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[217],[974],{"type":44,"value":687},{"type":44,"value":976}," 你会发现：",{"type":24,"tag":40,"props":978,"children":979},{},[980,982,988,990,995,997,1003],{"type":44,"value":981},"这些方法内部，都会调用 ",{"type":24,"tag":229,"props":983,"children":985},{"className":984},[],[986],{"type":44,"value":987},"get_slice(offset, count)",{"type":44,"value":989}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":229,"props":991,"children":993},{"className":992},[],[994],{"type":44,"value":869},{"type":44,"value":996}," 加上 ",{"type":24,"tag":229,"props":998,"children":1000},{"className":999},[],[1001],{"type":44,"value":1002},"assert_eq!",{"type":44,"value":1004}," 就意味着：",{"type":24,"tag":40,"props":1006,"children":1007},{},[1008],{"type":44,"value":1009},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1011,"children":1012},{},[],{"type":24,"tag":465,"props":1014,"children":1016},{"id":1015},"cve-2023-38497-1",[1017],{"type":44,"value":1018},"CVE-2023-38497 1",{"type":24,"tag":472,"props":1020,"children":1025},{":type":1021,"cve":1022,"to":1023,"cwe":1024},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1026,1034],{"type":24,"tag":40,"props":1027,"children":1028},{},[1029,1031],{"type":44,"value":1030},"278: 不安全的保留继承权限",{"type":24,"tag":249,"props":1032,"children":1033},{},[],{"type":24,"tag":1035,"props":1036,"children":1037},"ul",{},[1038],{"type":24,"tag":824,"props":1039,"children":1040},{},[1041],{"type":44,"value":1042},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1044,"children":1045},{},[1046,1048,1055,1057,1063,1065,1070,1072,1077,1079,1085,1087,1093],{"type":44,"value":1047},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":213,"props":1049,"children":1052},{"href":1050,"rel":1051},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[217],[1053],{"type":44,"value":1054},"CVE-2005-1724",{"type":44,"value":1056},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1058,"props":1059,"children":1060},"strong",{},[1061],{"type":44,"value":1062},"权限限制”",{"type":44,"value":1064},"。总的来说 umask 是 ",{"type":24,"tag":1058,"props":1066,"children":1067},{},[1068],{"type":44,"value":1069},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1071},"，可以看看 ",{"type":24,"tag":1073,"props":1074,"children":1075},"sup",{},[1076],{"type":44,"value":582},{"type":44,"value":1078},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":229,"props":1080,"children":1082},{"className":1081},[],[1083],{"type":44,"value":1084},"bash",{"type":44,"value":1086}," 脚本的时候，会使用 ",{"type":24,"tag":229,"props":1088,"children":1090},{"className":1089},[],[1091],{"type":44,"value":1092},"chmod 777",{"type":44,"value":1094},", 要不然运行不了。",{"type":24,"tag":169,"props":1096,"children":1097},{"type":356},[1098,1108,1113,1134,1142],{"type":24,"tag":40,"props":1099,"children":1100},{},[1101,1103],{"type":44,"value":1102},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1058,"props":1104,"children":1105},{},[1106],{"type":44,"value":1107},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1109,"children":1110},{},[1111],{"type":44,"value":1112},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1114,"children":1115},{},[1116,1118,1124,1126,1132],{"type":44,"value":1117},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":229,"props":1119,"children":1121},{"className":1120},[],[1122],{"type":44,"value":1123},"-network",{"type":44,"value":1125}," 和 ",{"type":24,"tag":229,"props":1127,"children":1129},{"className":1128},[],[1130],{"type":44,"value":1131},"-mask",{"type":44,"value":1133},"：",{"type":24,"tag":224,"props":1135,"children":1137},{"code":1136},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1138],{"type":24,"tag":229,"props":1139,"children":1140},{"__ignoreMap":8},[1141],{"type":44,"value":1136},{"type":24,"tag":40,"props":1143,"children":1144},{},[1145],{"type":44,"value":1146},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1148,"children":1149},{},[1150,1152,1157,1159,1165],{"type":44,"value":1151},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1058,"props":1153,"children":1154},{},[1155],{"type":44,"value":1156},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1158},"。而 ",{"type":24,"tag":229,"props":1160,"children":1162},{"className":1161},[],[1163],{"type":44,"value":1164},"umask",{"type":44,"value":1166}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1168,"props":1169,"children":1171},"text-tip",{"type":1170},"big",[1172],{"type":24,"tag":40,"props":1173,"children":1174},{},[1175,1177,1183,1185,1188],{"type":44,"value":1176},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":229,"props":1178,"children":1180},{"className":1179},[],[1181],{"type":44,"value":1182},"777",{"type":44,"value":1184}," 权限构建攻击脚本。",{"type":24,"tag":249,"props":1186,"children":1187},{},[],{"type":44,"value":1189},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1191,"children":1192},{},[1193,1195],{"type":44,"value":1194},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1058,"props":1196,"children":1197},{},[1198],{"type":44,"value":1199},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1201,"children":1202},{},[1203,1205,1211,1213,1219,1221,1226],{"type":44,"value":1204},"在 ",{"type":24,"tag":229,"props":1206,"children":1208},{"className":1207},[],[1209],{"type":44,"value":1210},"src/cargo/util/mod.rs",{"type":44,"value":1212}," 中新增了 ",{"type":24,"tag":229,"props":1214,"children":1216},{"className":1215},[],[1217],{"type":44,"value":1218},"get_umask()",{"type":44,"value":1220}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":229,"props":1222,"children":1224},{"className":1223},[],[1225],{"type":44,"value":1164},{"type":44,"value":1227}," 限制新文件的权限。：",{"type":24,"tag":224,"props":1229,"children":1231},{"code":1230},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1232],{"type":24,"tag":229,"props":1233,"children":1234},{"__ignoreMap":8},[1235],{"type":44,"value":1230},{"type":24,"tag":40,"props":1237,"children":1238},{},[1239],{"type":44,"value":1240},"以及很有艺术性的一行 code:",{"type":24,"tag":224,"props":1242,"children":1244},{"code":1243},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1245],{"type":24,"tag":229,"props":1246,"children":1247},{"__ignoreMap":8},[1248],{"type":44,"value":1243},{"type":24,"tag":40,"props":1250,"children":1251},{},[1252,1254,1260],{"type":44,"value":1253},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":229,"props":1255,"children":1257},{"className":1256},[],[1258],{"type":44,"value":1259},"!umask",{"type":44,"value":1261}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":224,"props":1263,"children":1265},{"code":1264},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1266],{"type":24,"tag":229,"props":1267,"children":1268},{"__ignoreMap":8},[1269],{"type":44,"value":1264},{"type":24,"tag":1271,"props":1272,"children":1275},"div",{"id":1273,"className":1274},"refer-anchor-1",[930],[1276],{"type":24,"tag":1035,"props":1277,"children":1278},{},[1279],{"type":24,"tag":824,"props":1280,"children":1281},{},[1282,1287,1289],{"type":24,"tag":1283,"props":1284,"children":1285},"span",{},[1286],{"type":44,"value":582},{"type":44,"value":1288}," ",{"type":24,"tag":213,"props":1290,"children":1293},{"href":1291,"rel":1292},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[217],[1294],{"type":44,"value":1291},{"title":8,"searchDepth":112,"depth":112,"links":1296},[1297,1298,1299,1300],{"id":467,"depth":112,"text":470},{"id":576,"depth":112,"text":579},{"id":784,"depth":112,"text":787},{"id":1015,"depth":112,"text":1018},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1755813691900]