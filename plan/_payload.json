[{"data":1,"prerenderedAt":1302},["Reactive",2],{"equalLink":3},[4,119,147,407],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-529.22,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":145,"_source":116,"_file":146,"_extension":118},"/plan/programming/command-hide","programming","command-hide","2025.07.06","des/01/hide.jpg","封面：command-hide.vscode version",100,99.99,"percent",{"type":21,"children":130,"toc":143},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":140,"children":142},{"url":141},"https://github.com/jiangxue-analysis/nvim.comment-hide",[],{"title":8,"searchDepth":112,"depth":112,"links":144},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":148,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":149,"description":150,"director":11,"time":123,"types":13,"img":151,"info":152,"client":16,"target":126,"current":153,"displayType":128,"body":154,"_type":114,"_id":405,"_source":116,"_file":406,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","life/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":155,"toc":403},[156],{"type":24,"tag":25,"props":157,"children":158},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[159,162,167,173,178,183,188,193,198,203,206,222,232,237,253,258,272,318,323,328,333,343,348,353,362,367,376,390,398],{"type":24,"tag":35,"props":160,"children":161},{":desc":37},[],{"type":24,"tag":40,"props":163,"children":164},{},[165],{"type":44,"value":166},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":168,"props":169,"children":172},"text-space",{"img":170,"info":171},"life/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":174,"children":175},{},[176],{"type":44,"value":177},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":179,"children":180},{},[181],{"type":44,"value":182},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":184,"children":185},{},[186],{"type":44,"value":187},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":168,"props":189,"children":192},{"img":190,"info":191},"life/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":194,"children":195},{},[196],{"type":44,"value":197},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":199,"children":200},{},[201],{"type":44,"value":202},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":204,"children":205},{},[],{"type":24,"tag":40,"props":207,"children":208},{},[209,211,220],{"type":44,"value":210},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":212,"props":213,"children":217},"a",{"href":214,"rel":215},"https://en.wikipedia.org/wiki/CSS_hack",[216],"nofollow",[218],{"type":44,"value":219},"CSS Hack",{"type":44,"value":221}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":223,"props":224,"children":226},"pre",{"code":225},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[227],{"type":24,"tag":228,"props":229,"children":230},"code",{"__ignoreMap":8},[231],{"type":44,"value":225},{"type":24,"tag":40,"props":233,"children":234},{},[235],{"type":44,"value":236},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":238,"children":241},{"by":239,"topic":240},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[242],{"type":24,"tag":40,"props":243,"children":244},{},[245,247,251],{"type":44,"value":246},"Some of those people dont't do a lot",{"type":24,"tag":248,"props":249,"children":250},"br",{},[],{"type":44,"value":252},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":254,"children":255},{},[256],{"type":44,"value":257},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":259,"children":260},{},[261,263,270],{"type":44,"value":262},"最近在玩 ",{"type":24,"tag":212,"props":264,"children":267},{"href":265,"rel":266},"https://store.steampowered.com/app/2585110/_/",[216],[268],{"type":44,"value":269},"《我在疗养院送人上西天》",{"type":44,"value":271}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":273,"children":276},{"by":274,"topic":275},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[277],{"type":24,"tag":40,"props":278,"children":279},{},[280,282,285,287,290,292,295,297,300,303,305,308,310,313,315],{"type":44,"value":281},"but that's not everybody,",{"type":24,"tag":248,"props":283,"children":284},{},[],{"type":44,"value":286},"\ni care about the thechnology",{"type":24,"tag":248,"props":288,"children":289},{},[],{"type":44,"value":291},"\nthere are people who care about the ui",{"type":24,"tag":248,"props":293,"children":294},{},[],{"type":44,"value":296},"\ni can't do ui to save my life.",{"type":24,"tag":248,"props":298,"children":299},{},[],{"type":24,"tag":248,"props":301,"children":302},{},[],{"type":44,"value":304},"\ni mean, if i was stranded on an island,",{"type":24,"tag":248,"props":306,"children":307},{},[],{"type":44,"value":309},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":248,"props":311,"children":312},{},[],{"type":44,"value":314},"\ni'd die there.",{"type":24,"tag":248,"props":316,"children":317},{},[],{"type":24,"tag":40,"props":319,"children":320},{},[321],{"type":44,"value":322},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":324,"children":325},{},[326],{"type":44,"value":327},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":329,"children":330},{},[331],{"type":44,"value":332},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":334,"children":337},{"by":335,"topic":336},"Wikipedia","Frontend and backend",[338],{"type":24,"tag":40,"props":339,"children":340},{},[341],{"type":44,"value":342},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":344,"children":345},{},[346],{"type":44,"value":347},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":349,"children":350},{},[351],{"type":44,"value":352},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":168,"props":354,"children":356},{"type":355},"tip",[357],{"type":24,"tag":40,"props":358,"children":359},{},[360],{"type":44,"value":361},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":363,"children":364},{},[365],{"type":44,"value":366},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":368,"children":369},{},[370],{"type":24,"tag":371,"props":372,"children":373},"del",{},[374],{"type":44,"value":375},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":377,"children":378},{},[379,381,388],{"type":44,"value":380},"可能这个现象可以用 ",{"type":24,"tag":212,"props":382,"children":385},{"href":383,"rel":384},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[216],[386],{"type":44,"value":387},"Dunning–Kruger effect",{"type":44,"value":389}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":391,"children":392},{"by":335,"topic":387},[393],{"type":24,"tag":40,"props":394,"children":395},{},[396],{"type":44,"value":397},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":399,"children":400},{},[401],{"type":44,"value":402},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":404},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":408,"_dir":409,"_draft":7,"_partial":7,"_locale":8,"title":410,"description":8,"director":16,"img":411,"time":412,"plan":413,"target":126,"current":414,"displayType":128,"body":415,"_type":114,"_id":1300,"_source":116,"_file":1301,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":416,"toc":1294},[417],{"type":24,"tag":418,"props":419,"children":422},"book-content",{":by":420,":img":28,":plan":421,":title":31},"director","plan",[423,428,433,438,443,448,453,456,463,470,483,523,537,548,570,573,579,594,616,653,675,697,713,721,729,741,749,770,778,781,787,798,818,845,850,871,919,940,945,963,976,1004,1009,1012,1018,1042,1094,1146,1166,1189,1199,1227,1235,1240,1248,1261,1269],{"type":24,"tag":424,"props":425,"children":427},"text-title",{":t":426},"CVE is my dream.",[],{"type":24,"tag":40,"props":429,"children":430},{},[431],{"type":44,"value":432},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":434,"children":435},{},[436],{"type":44,"value":437},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":439,"children":440},{},[441],{"type":44,"value":442},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":444,"children":445},{},[446],{"type":44,"value":447},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":449,"children":450},{},[451],{"type":44,"value":452},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":454,"children":455},{},[],{"type":24,"tag":457,"props":458,"children":460},"h1",{"id":459},"rust-3",[461],{"type":44,"value":462},"rust 3",{"type":24,"tag":464,"props":465,"children":467},"h2",{"id":466},"cve-2022-36114-1",[468],{"type":44,"value":469},"CVE-2022-36114 1",{"type":24,"tag":471,"props":472,"children":477},"cve-info",{":type":473,"cve":474,"to":475,":cwe":476},"2","CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[478],{"type":24,"tag":40,"props":479,"children":480},{},[481],{"type":44,"value":482},"不受控制的资源消耗",{"type":24,"tag":40,"props":484,"children":485},{},[486,488,495,497,504,506,512,514,521],{"type":44,"value":487},"利用 Cargo 的 ",{"type":24,"tag":212,"props":489,"children":492},{"href":490,"rel":491},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[216],[493],{"type":44,"value":494},"build script",{"type":44,"value":496}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":212,"props":498,"children":501},{"href":499,"rel":500},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[216],[502],{"type":44,"value":503},"procedural macros",{"type":44,"value":505},"，在执行 ",{"type":24,"tag":228,"props":507,"children":509},{"className":508},[],[510],{"type":44,"value":511},"cargo run",{"type":44,"value":513}," 的过程中触发了一个 ",{"type":24,"tag":212,"props":515,"children":518},{"href":516,"rel":517},"https://en.wikipedia.org/wiki/Zip_bomb",[216],[519],{"type":44,"value":520},"Zip Bomb",{"type":44,"value":522}," 行为。",{"type":24,"tag":40,"props":524,"children":525},{},[526,528,535],{"type":44,"value":527},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":212,"props":529,"children":532},{"href":530,"rel":531},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[216],[533],{"type":44,"value":534},"补丁修复",{"type":44,"value":536}," Zip_bomb 的问题:",{"type":24,"tag":223,"props":538,"children":543},{"code":539,"language":540,"meta":8,"className":541},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[542],"language-c",[544],{"type":24,"tag":228,"props":545,"children":546},{"__ignoreMap":8},[547],{"type":44,"value":539},{"type":24,"tag":40,"props":549,"children":550},{},[551,553,559,561,568],{"type":44,"value":552},"同时引入了 ",{"type":24,"tag":228,"props":554,"children":556},{"className":555},[],[557],{"type":44,"value":558},"LimitErrorReader",{"type":44,"value":560},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":212,"props":562,"children":565},{"href":563,"rel":564},"https://crates.io/",[216],[566],{"type":44,"value":567},"crates",{"type":44,"value":569}," 上提交的 crate。",{"type":24,"tag":57,"props":571,"children":572},{},[],{"type":24,"tag":464,"props":574,"children":576},{"id":575},"cve-2023-40030-1",[577],{"type":44,"value":578},"CVE-2023-40030 1",{"type":24,"tag":471,"props":580,"children":585},{":type":581,"cve":582,"to":583,":cwe":584},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[586],{"type":24,"tag":40,"props":587,"children":588},{},[589,591],{"type":44,"value":590},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":248,"props":592,"children":593},{},[],{"type":24,"tag":40,"props":595,"children":596},{},[597,599,605,607,614],{"type":44,"value":598},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":228,"props":600,"children":602},{"className":601},[],[603],{"type":44,"value":604},"cargo build --timings",{"type":44,"value":606}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":212,"props":608,"children":611},{"href":609,"rel":610},"https://doc.rust-lang.org/cargo/reference/timings.html",[216],[612],{"type":44,"value":613},"--timings",{"type":44,"value":615}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":617,"children":618},{},[619,621,627,629,635,637,643,645,651],{"type":44,"value":620},"可以通过在 ",{"type":24,"tag":228,"props":622,"children":624},{"className":623},[],[625],{"type":44,"value":626},"Cargo.toml",{"type":44,"value":628}," 中加入 ",{"type":24,"tag":228,"props":630,"children":632},{"className":631},[],[633],{"type":44,"value":634},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":636}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":228,"props":638,"children":640},{"className":639},[],[641],{"type":44,"value":642},"Warning",{"type":44,"value":644},", 换成了 ",{"type":24,"tag":228,"props":646,"children":648},{"className":647},[],[649],{"type":44,"value":650},"bail!",{"type":44,"value":652}," 机制。",{"type":24,"tag":168,"props":654,"children":655},{"type":355},[656],{"type":24,"tag":40,"props":657,"children":658},{},[659,664,666,673],{"type":24,"tag":228,"props":660,"children":662},{"className":661},[],[663],{"type":44,"value":650},{"type":44,"value":665}," 宏来自 ",{"type":24,"tag":212,"props":667,"children":670},{"href":668,"rel":669},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[216],[671],{"type":44,"value":672},"anyhow",{"type":44,"value":674}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":676,"children":677},{},[678,680,687,689,695],{"type":44,"value":679},"可以看一下 ",{"type":24,"tag":212,"props":681,"children":684},{"href":682,"rel":683},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[216],[685],{"type":44,"value":686},"fix pr",{"type":44,"value":688},"，非常有意思，比如 ",{"type":24,"tag":228,"props":690,"children":692},{"className":691},[],[693],{"type":44,"value":694},"validate_feature_name",{"type":44,"value":696}," 函数。",{"type":24,"tag":40,"props":698,"children":699},{},[700,702,708,710],{"type":44,"value":701},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":228,"props":703,"children":705},{"className":704},[],[706],{"type":44,"value":707},"warning",{"type":44,"value":709},"，流程继续。",{"type":24,"tag":248,"props":711,"children":712},{},[],{"type":24,"tag":223,"props":714,"children":716},{"code":715},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[717],{"type":24,"tag":228,"props":718,"children":719},{"__ignoreMap":8},[720],{"type":44,"value":715},{"type":24,"tag":168,"props":722,"children":723},{"type":355},[724],{"type":24,"tag":40,"props":725,"children":726},{},[727],{"type":44,"value":728},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":730,"children":731},{},[732,734,739],{"type":44,"value":733},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":228,"props":735,"children":737},{"className":736},[],[738],{"type":44,"value":650},{"type":44,"value":740},"，构建中止，用户必须修正。",{"type":24,"tag":223,"props":742,"children":744},{"code":743}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[745],{"type":24,"tag":228,"props":746,"children":747},{"__ignoreMap":8},[748],{"type":44,"value":743},{"type":24,"tag":40,"props":750,"children":751},{},[752,754,760,762,768],{"type":44,"value":753},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":228,"props":755,"children":757},{"className":756},[],[758],{"type":44,"value":759},"is_ok()",{"type":44,"value":761}," 是合法的，而 ",{"type":24,"tag":228,"props":763,"children":765},{"className":764},[],[766],{"type":44,"value":767},"is_err()",{"type":44,"value":769}," 是不合法的：",{"type":24,"tag":223,"props":771,"children":773},{"code":772}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[774],{"type":24,"tag":228,"props":775,"children":776},{"__ignoreMap":8},[777],{"type":44,"value":772},{"type":24,"tag":57,"props":779,"children":780},{},[],{"type":24,"tag":464,"props":782,"children":784},{"id":783},"cve-2023-41051-1",[785],{"type":44,"value":786},"CVE-2023-41051 1",{"type":24,"tag":471,"props":788,"children":792},{":type":581,"cve":789,"to":790,":cwe":791},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[793],{"type":24,"tag":40,"props":794,"children":795},{},[796],{"type":44,"value":797},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":799,"children":800},{},[801,808,810,816],{"type":24,"tag":212,"props":802,"children":805},{"href":803,"rel":804},"https://github.com/rust-vmm/vm-memory",[216],[806],{"type":44,"value":807},"vm-memory",{"type":44,"value":809}," 的 ",{"type":24,"tag":228,"props":811,"children":813},{"className":812},[],[814],{"type":44,"value":815},"VolatileMemory",{"type":44,"value":817}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":819,"props":820,"children":821},"ol",{},[822,834],{"type":24,"tag":823,"props":824,"children":825},"li",{},[826,832],{"type":24,"tag":228,"props":827,"children":829},{"className":828},[],[830],{"type":44,"value":831},"VolatileMemory::get_slice",{"type":44,"value":833},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":823,"props":835,"children":836},{},[837,843],{"type":24,"tag":228,"props":838,"children":840},{"className":839},[],[841],{"type":44,"value":842},"VolatileMemory::read/write",{"type":44,"value":844},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":846,"children":847},{},[848],{"type":44,"value":849},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":851,"children":852},{},[853,855,861,863,869],{"type":44,"value":854},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":228,"props":856,"children":858},{"className":857},[],[859],{"type":44,"value":860},"read/write",{"type":44,"value":862},"，更多的是 ",{"type":24,"tag":228,"props":864,"children":866},{"className":865},[],[867],{"type":44,"value":868},"get_slice",{"type":44,"value":870}," 方法，例如：",{"type":24,"tag":819,"props":872,"children":873},{},[874,883,892,901,910],{"type":24,"tag":823,"props":875,"children":876},{},[877],{"type":24,"tag":228,"props":878,"children":880},{"className":879},[],[881],{"type":44,"value":882},"get_atomic_ref",{"type":24,"tag":823,"props":884,"children":885},{},[886],{"type":24,"tag":228,"props":887,"children":889},{"className":888},[],[890],{"type":44,"value":891},"aligned_as_ref",{"type":24,"tag":823,"props":893,"children":894},{},[895],{"type":24,"tag":228,"props":896,"children":898},{"className":897},[],[899],{"type":44,"value":900},"aligned_as_mut",{"type":24,"tag":823,"props":902,"children":903},{},[904],{"type":24,"tag":228,"props":905,"children":907},{"className":906},[],[908],{"type":44,"value":909},"get_ref",{"type":24,"tag":823,"props":911,"children":912},{},[913],{"type":24,"tag":228,"props":914,"children":916},{"className":915},[],[917],{"type":44,"value":918},"get_array_ref",{"type":24,"tag":40,"props":920,"children":921},{},[922,924,930,932,938],{"type":44,"value":923},"上述方法有个共同点，都是利用 ",{"type":24,"tag":228,"props":925,"children":927},{"className":926},[],[928],{"type":44,"value":929},"ref",{"type":44,"value":931}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":228,"props":933,"children":935},{"className":934},[],[936],{"type":44,"value":937},"&[T]",{"type":44,"value":939}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":941,"children":942},{},[943],{"type":44,"value":944},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":819,"props":946,"children":947},{},[948,953,958],{"type":24,"tag":823,"props":949,"children":950},{},[951],{"type":44,"value":952},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":823,"props":954,"children":955},{},[956],{"type":44,"value":957},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":823,"props":959,"children":960},{},[961],{"type":44,"value":962},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":964,"children":965},{},[966,968,974],{"type":44,"value":967},"仔细欣赏 ",{"type":24,"tag":212,"props":969,"children":972},{"href":970,"rel":971},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[216],[973],{"type":44,"value":686},{"type":44,"value":975}," 你会发现：",{"type":24,"tag":40,"props":977,"children":978},{},[979,981,987,989,994,996,1002],{"type":44,"value":980},"这些方法内部，都会调用 ",{"type":24,"tag":228,"props":982,"children":984},{"className":983},[],[985],{"type":44,"value":986},"get_slice(offset, count)",{"type":44,"value":988}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":228,"props":990,"children":992},{"className":991},[],[993],{"type":44,"value":868},{"type":44,"value":995}," 加上 ",{"type":24,"tag":228,"props":997,"children":999},{"className":998},[],[1000],{"type":44,"value":1001},"assert_eq!",{"type":44,"value":1003}," 就意味着：",{"type":24,"tag":40,"props":1005,"children":1006},{},[1007],{"type":44,"value":1008},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1010,"children":1011},{},[],{"type":24,"tag":464,"props":1013,"children":1015},{"id":1014},"cve-2023-38497-1",[1016],{"type":44,"value":1017},"CVE-2023-38497 1",{"type":24,"tag":471,"props":1019,"children":1024},{":type":1020,"cve":1021,"to":1022,"cwe":1023},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1025,1033],{"type":24,"tag":40,"props":1026,"children":1027},{},[1028,1030],{"type":44,"value":1029},"278: 不安全的保留继承权限",{"type":24,"tag":248,"props":1031,"children":1032},{},[],{"type":24,"tag":1034,"props":1035,"children":1036},"ul",{},[1037],{"type":24,"tag":823,"props":1038,"children":1039},{},[1040],{"type":44,"value":1041},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1043,"children":1044},{},[1045,1047,1054,1056,1062,1064,1069,1071,1076,1078,1084,1086,1092],{"type":44,"value":1046},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":212,"props":1048,"children":1051},{"href":1049,"rel":1050},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[216],[1052],{"type":44,"value":1053},"CVE-2005-1724",{"type":44,"value":1055},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1057,"props":1058,"children":1059},"strong",{},[1060],{"type":44,"value":1061},"权限限制”",{"type":44,"value":1063},"。总的来说 umask 是 ",{"type":24,"tag":1057,"props":1065,"children":1066},{},[1067],{"type":44,"value":1068},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1070},"，可以看看 ",{"type":24,"tag":1072,"props":1073,"children":1074},"sup",{},[1075],{"type":44,"value":581},{"type":44,"value":1077},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":228,"props":1079,"children":1081},{"className":1080},[],[1082],{"type":44,"value":1083},"bash",{"type":44,"value":1085}," 脚本的时候，会使用 ",{"type":24,"tag":228,"props":1087,"children":1089},{"className":1088},[],[1090],{"type":44,"value":1091},"chmod 777",{"type":44,"value":1093},", 要不然运行不了。",{"type":24,"tag":168,"props":1095,"children":1096},{"type":355},[1097,1107,1112,1133,1141],{"type":24,"tag":40,"props":1098,"children":1099},{},[1100,1102],{"type":44,"value":1101},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1057,"props":1103,"children":1104},{},[1105],{"type":44,"value":1106},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1108,"children":1109},{},[1110],{"type":44,"value":1111},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1113,"children":1114},{},[1115,1117,1123,1125,1131],{"type":44,"value":1116},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":228,"props":1118,"children":1120},{"className":1119},[],[1121],{"type":44,"value":1122},"-network",{"type":44,"value":1124}," 和 ",{"type":24,"tag":228,"props":1126,"children":1128},{"className":1127},[],[1129],{"type":44,"value":1130},"-mask",{"type":44,"value":1132},"：",{"type":24,"tag":223,"props":1134,"children":1136},{"code":1135},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1137],{"type":24,"tag":228,"props":1138,"children":1139},{"__ignoreMap":8},[1140],{"type":44,"value":1135},{"type":24,"tag":40,"props":1142,"children":1143},{},[1144],{"type":44,"value":1145},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1147,"children":1148},{},[1149,1151,1156,1158,1164],{"type":44,"value":1150},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1057,"props":1152,"children":1153},{},[1154],{"type":44,"value":1155},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1157},"。而 ",{"type":24,"tag":228,"props":1159,"children":1161},{"className":1160},[],[1162],{"type":44,"value":1163},"umask",{"type":44,"value":1165}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1167,"props":1168,"children":1170},"text-tip",{"type":1169},"big",[1171],{"type":24,"tag":40,"props":1172,"children":1173},{},[1174,1176,1182,1184,1187],{"type":44,"value":1175},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":228,"props":1177,"children":1179},{"className":1178},[],[1180],{"type":44,"value":1181},"777",{"type":44,"value":1183}," 权限构建攻击脚本。",{"type":24,"tag":248,"props":1185,"children":1186},{},[],{"type":44,"value":1188},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1190,"children":1191},{},[1192,1194],{"type":44,"value":1193},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1057,"props":1195,"children":1196},{},[1197],{"type":44,"value":1198},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1200,"children":1201},{},[1202,1204,1210,1212,1218,1220,1225],{"type":44,"value":1203},"在 ",{"type":24,"tag":228,"props":1205,"children":1207},{"className":1206},[],[1208],{"type":44,"value":1209},"src/cargo/util/mod.rs",{"type":44,"value":1211}," 中新增了 ",{"type":24,"tag":228,"props":1213,"children":1215},{"className":1214},[],[1216],{"type":44,"value":1217},"get_umask()",{"type":44,"value":1219}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":228,"props":1221,"children":1223},{"className":1222},[],[1224],{"type":44,"value":1163},{"type":44,"value":1226}," 限制新文件的权限。：",{"type":24,"tag":223,"props":1228,"children":1230},{"code":1229},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1231],{"type":24,"tag":228,"props":1232,"children":1233},{"__ignoreMap":8},[1234],{"type":44,"value":1229},{"type":24,"tag":40,"props":1236,"children":1237},{},[1238],{"type":44,"value":1239},"以及很有艺术性的一行 code:",{"type":24,"tag":223,"props":1241,"children":1243},{"code":1242},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1244],{"type":24,"tag":228,"props":1245,"children":1246},{"__ignoreMap":8},[1247],{"type":44,"value":1242},{"type":24,"tag":40,"props":1249,"children":1250},{},[1251,1253,1259],{"type":44,"value":1252},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":228,"props":1254,"children":1256},{"className":1255},[],[1257],{"type":44,"value":1258},"!umask",{"type":44,"value":1260}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":223,"props":1262,"children":1264},{"code":1263},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1265],{"type":24,"tag":228,"props":1266,"children":1267},{"__ignoreMap":8},[1268],{"type":44,"value":1263},{"type":24,"tag":1270,"props":1271,"children":1274},"div",{"id":1272,"className":1273},"refer-anchor-1",[929],[1275],{"type":24,"tag":1034,"props":1276,"children":1277},{},[1278],{"type":24,"tag":823,"props":1279,"children":1280},{},[1281,1286,1288],{"type":24,"tag":1282,"props":1283,"children":1284},"span",{},[1285],{"type":44,"value":581},{"type":44,"value":1287}," ",{"type":24,"tag":212,"props":1289,"children":1292},{"href":1290,"rel":1291},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[216],[1293],{"type":44,"value":1290},{"title":8,"searchDepth":112,"depth":112,"links":1295},[1296,1297,1298,1299],{"id":466,"depth":112,"text":469},{"id":575,"depth":112,"text":578},{"id":783,"depth":112,"text":786},{"id":1014,"depth":112,"text":1017},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1755860680768]