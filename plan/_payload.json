[{"data":1,"prerenderedAt":1988},["Reactive",2],{"equalLink":3},[4,119,591,760,1015],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-907.98,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":589,"_source":116,"_file":590,"_extension":118},"/plan/programming/cds","programming","cds","2025.08.22","life/plan/cds/1.jpg","封面：This is cds",100,20,"percent",{"type":21,"children":130,"toc":587},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139,169,182,192,205,211,216,240,245,248,252,265,274,279,355,368,382,390,395,444,449,453,483,491,510,518,523,531,536,544,557,565,579],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/iusx/cdx",[],{"type":24,"tag":40,"props":140,"children":141},{},[142,144,151,153,159,161,167],{"type":44,"value":143},"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":24,"tag":145,"props":146,"children":148},"code",{"className":147},[],[149],{"type":44,"value":150},"cd",{"type":44,"value":152}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":24,"tag":145,"props":154,"children":156},{"className":155},[],[157],{"type":44,"value":158},"nix-shell",{"type":44,"value":160}," > ",{"type":24,"tag":145,"props":162,"children":164},{"className":163},[],[165],{"type":44,"value":166},"nvim .",{"type":44,"value":168}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":24,"tag":40,"props":170,"children":171},{},[172,174,180],{"type":44,"value":173},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":24,"tag":145,"props":175,"children":177},{"className":176},[],[178],{"type":44,"value":179},"zsh",{"type":44,"value":181}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":24,"tag":183,"props":184,"children":186},"text-space",{"type":185},"tip",[187],{"type":24,"tag":40,"props":188,"children":189},{},[190],{"type":44,"value":191},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":24,"tag":40,"props":193,"children":194},{},[195,197,203],{"type":44,"value":196},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":24,"tag":145,"props":198,"children":200},{"className":199},[],[201],{"type":44,"value":202},"~/.cds",{"type":44,"value":204}," 中。",{"type":24,"tag":206,"props":207,"children":210},"text-title",{"t":208,"type":209},"为什么用 nim?","2",[],{"type":24,"tag":135,"props":212,"children":215},{"url":213,"type":214},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":24,"tag":40,"props":217,"children":218},{},[219,221,230,232,238],{"type":44,"value":220},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":24,"tag":222,"props":223,"children":227},"a",{"href":224,"rel":225},"https://learnxinyminutes.com/zh-cn/nim/",[226],"nofollow",[228],{"type":44,"value":229},"Y分钟速成X",{"type":44,"value":231},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":24,"tag":145,"props":233,"children":235},{"className":234},[],[236],{"type":44,"value":237},"or [up-to-date community version]",{"type":44,"value":239}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"type":24,"tag":40,"props":241,"children":242},{},[243],{"type":44,"value":244},"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”",{"type":24,"tag":57,"props":246,"children":247},{},[],{"type":24,"tag":135,"props":249,"children":251},{"url":250},"https://github.com/ajeetdsouza/zoxide",[],{"type":24,"tag":40,"props":253,"children":254},{},[255,257,263],{"type":44,"value":256},"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 ",{"type":24,"tag":222,"props":258,"children":260},{"href":250,"rel":259},[226],[261],{"type":44,"value":262},"zoxide",{"type":44,"value":264}," 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。",{"type":24,"tag":266,"props":267,"children":269},"pre",{"code":268},"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n",[270],{"type":24,"tag":145,"props":271,"children":272},{"__ignoreMap":8},[273],{"type":44,"value":268},{"type":24,"tag":40,"props":275,"children":276},{},[277],{"type":44,"value":278},"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化：",{"type":24,"tag":280,"props":281,"children":284},"ul",{"className":282},[283],"contains-task-list",[285,307,332],{"type":24,"tag":286,"props":287,"children":290},"li",{"className":288},[289],"task-list-item",[291,297,299,305],{"type":24,"tag":292,"props":293,"children":296},"input",{"disabled":294,"type":295},true,"checkbox",[],{"type":44,"value":298}," 1. TUI：例如 ",{"type":24,"tag":145,"props":300,"children":302},{"className":301},[],[303],{"type":44,"value":304},"c list",{"type":44,"value":306}," 时候可以检索快捷方式",{"type":24,"tag":286,"props":308,"children":310},{"className":309},[289],[311,314,316,322,324,330],{"type":24,"tag":292,"props":312,"children":313},{"checked":294,"disabled":294,"type":295},[],{"type":44,"value":315}," 2. 通过 ",{"type":24,"tag":145,"props":317,"children":319},{"className":318},[],[320],{"type":44,"value":321},"c c iusx",{"type":44,"value":323}," 进入到目录之后自动执行记录在 ",{"type":24,"tag":145,"props":325,"children":327},{"className":326},[],[328],{"type":44,"value":329},"~/.cds_config.json",{"type":44,"value":331}," 中的脚本命令",{"type":24,"tag":286,"props":333,"children":335},{"className":334},[289],[336,339,341,347,349],{"type":24,"tag":292,"props":337,"children":338},{"checked":294,"disabled":294,"type":295},[],{"type":44,"value":340}," 3. Auto: 可以自动记录，例如 ",{"type":24,"tag":145,"props":342,"children":344},{"className":343},[],[345],{"type":44,"value":346},"/Users/uwu/Code/My/iusx",{"type":44,"value":348}," 的时候自动记录 ",{"type":24,"tag":145,"props":350,"children":352},{"className":351},[],[353],{"type":44,"value":354},"iusx: /Users/uwu/Code/My/iusx",{"type":24,"tag":40,"props":356,"children":357},{},[358,360,366],{"type":44,"value":359},"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 ",{"type":24,"tag":145,"props":361,"children":363},{"className":362},[],[364],{"type":44,"value":365},"brew install cds",{"type":44,"value":367}," 来进行安装了（貌似应该写一个安装脚本？。",{"type":24,"tag":40,"props":369,"children":370},{},[371,373,380],{"type":44,"value":372},"其实依赖 shell 环境也没什么的，毕竟连 Nim-lang 的 ",{"type":24,"tag":222,"props":374,"children":377},{"href":375,"rel":376},"https://github.com/nim-lang/choosenim",[226],[378],{"type":44,"value":379},"choosenim",{"type":44,"value":381}," 在安装完后也需要手动设置不是吗？",{"type":24,"tag":266,"props":383,"children":385},{"code":384},"choosenim-init: ChooseNim installed in /Users/uwu/.nimble/bin\nchoosenim-init: You must now ensure that the Nimble bin dir is in your PATH.\nchoosenim-init: Place the following line in the ~/.profile or ~/.bashrc file.\nchoosenim-init:     export PATH=/Users/uwu/.nimble/bin:$PATH\n",[386],{"type":24,"tag":145,"props":387,"children":388},{"__ignoreMap":8},[389],{"type":44,"value":384},{"type":24,"tag":40,"props":391,"children":392},{},[393],{"type":44,"value":394},"有时候就是这样，只有自己亲身体验才能体会一些奇妙的感觉。也就是踩坑，而不是照着答案去答题。最近看的 《心灵捕手》和 《萨利机长》刚好有这个情景，印象深刻的是《心灵捕手》中的一段对话：",{"type":24,"tag":96,"props":396,"children":399},{"by":397,"topic":398},"心灵捕手","知识与体验的区别",[400,405,414,419,424,429,434,439],{"type":24,"tag":40,"props":401,"children":402},{},[403],{"type":44,"value":404},"You've never been out of Boston.",{"type":24,"tag":406,"props":407,"children":408},"blockquote",{},[409],{"type":24,"tag":40,"props":410,"children":411},{},[412],{"type":44,"value":413},"Nope",{"type":24,"tag":40,"props":415,"children":416},{},[417],{"type":44,"value":418},"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written",{"type":24,"tag":40,"props":420,"children":421},{},[422],{"type":44,"value":423},"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope.",{"type":24,"tag":40,"props":425,"children":426},{},[427],{"type":44,"value":428},"Sexual orientation. the whole works, right?",{"type":24,"tag":40,"props":430,"children":431},{},[432],{"type":44,"value":433},"I bet you can't tell me what it smells like\nin the Sistione Chapel",{"type":24,"tag":40,"props":435,"children":436},{},[437],{"type":44,"value":438},"You never actually stood there\nlooked up ar that beautiful ceiling.",{"type":24,"tag":40,"props":440,"children":441},{},[442],{"type":44,"value":443},"Seen that",{"type":24,"tag":40,"props":445,"children":446},{},[447],{"type":44,"value":448},"有的时候就是这样，例如将 Linus 作为主系统自然就会学习到很多与其相关的知识。游玩 Minecraft 之后自然会想要知道光影、Mode、材质是怎么制作的，甚至与好友公共游玩他人服务器的时候脑海中也会浮现出：“我也想开一个服务器” 的这种想法，自然而然的就能接触到 Linux、Windows server，甚至是 Java。",{"type":24,"tag":206,"props":450,"children":452},{"t":451,"type":209},"实现自动记录",[],{"type":24,"tag":40,"props":454,"children":455},{},[456,458,464,466,472,474,481],{"type":44,"value":457},"要实现这个功能，需要使用到 ",{"type":24,"tag":145,"props":459,"children":461},{"className":460},[],[462],{"type":44,"value":463},"dirs",{"type":44,"value":465},"，算是内置命令。例如在 ",{"type":24,"tag":222,"props":467,"children":470},{"href":468,"rel":469},"https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Directory-Stack",[226],[471],{"type":44,"value":179},{"type":44,"value":473}," 和 ",{"type":24,"tag":222,"props":475,"children":478},{"href":476,"rel":477},"https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html",[226],[479],{"type":44,"value":480},"bash",{"type":44,"value":482}," 中均有记载，效果还是很不错的：",{"type":24,"tag":266,"props":484,"children":486},{"code":485},"macOS My/iusx ‹main*› » dirs\n~/Code/My/iusx\nmacOS My/iusx ‹main*› » cd ~/Code/Project/company\nmacOS Project/company » dirs\n~/Code/Project/company ~/Code/My/iusx\nmacOS Project/company »\n",[487],{"type":24,"tag":145,"props":488,"children":489},{"__ignoreMap":8},[490],{"type":44,"value":485},{"type":24,"tag":40,"props":492,"children":493},{},[494,496,501,503,508],{"type":44,"value":495},"唯一可惜的是只记录当前 shell 会话的目录栈，关闭终端或 shell 会话后就会丢失。因此还需要 shell 环境配合，最终效果就是每次 ",{"type":24,"tag":145,"props":497,"children":499},{"className":498},[],[500],{"type":44,"value":150},{"type":44,"value":502}," 目录的时候都会存储到 ",{"type":24,"tag":145,"props":504,"children":506},{"className":505},[],[507],{"type":44,"value":329},{"type":44,"value":509},":",{"type":24,"tag":266,"props":511,"children":513},{"code":512},"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ]\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": []\n  },\n  \"dotfiles\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"config\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": []\n  }\n}\n",[514],{"type":24,"tag":145,"props":515,"children":516},{"__ignoreMap":8},[517],{"type":44,"value":512},{"type":24,"tag":40,"props":519,"children":520},{},[521],{"type":44,"value":522},"但是这就会产生一个问题，之后我还需要 TUI 来进行快速访问，例如我进行了如下的操作：",{"type":24,"tag":266,"props":524,"children":526},{"code":525},"macOS My/cds ‹main*› » cd ~\nmacOS ~ » cd development/flutter/dev\nmacOS flutter/dev » pwd\n/Users/uwu/development/flutter/dev\nmacOS flutter/dev ‹stable› » cd bots\nmacOS dev/bots ‹stable› »\n",[527],{"type":24,"tag":145,"props":528,"children":529},{"__ignoreMap":8},[530],{"type":44,"value":525},{"type":24,"tag":40,"props":532,"children":533},{},[534],{"type":44,"value":535},"你会发现我在当前目录什么都没做，只是单纯的浏览，还是被记录下来了，而且很繁杂，几乎每次 cd 的停顿都会被记录：",{"type":24,"tag":266,"props":537,"children":539},{"code":538},"  \"dev\": {\n    \"path\": \"/Users/uwu/development/flutter/dev\",\n    \"commands\": []\n  },\n  \"bots\": {\n    \"path\": \"/Users/uwu/development/flutter/dev/bots\",\n    \"commands\": []\n  }\n",[540],{"type":24,"tag":145,"props":541,"children":542},{"__ignoreMap":8},[543],{"type":44,"value":538},{"type":24,"tag":40,"props":545,"children":546},{},[547,549,555],{"type":44,"value":548},"为此我增加了一个逻辑，也就是每次在当前目录执行命令，权重 ",{"type":24,"tag":145,"props":550,"children":552},{"className":551},[],[553],{"type":44,"value":554},"score",{"type":44,"value":556}," +1, 这会方便之后的 TUI 的数据展示，权重越高的越在前面，甚至还有升序降序:",{"type":24,"tag":266,"props":558,"children":560},{"code":559},"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ],\n    \"score\": 12\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": [],\n    \"score\": 5\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"video\": {\n    \"path\": \"/Users/uwu/Work/video\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"company\": {\n    \"path\": \"/Users/uwu/Code/Project/company\",\n    \"commands\": [],\n    \"score\": 2\n  }\n}\n",[561],{"type":24,"tag":145,"props":562,"children":563},{"__ignoreMap":8},[564],{"type":44,"value":559},{"type":24,"tag":40,"props":566,"children":567},{},[568,570,577],{"type":44,"value":569},"不过这些都是通过 shell 实现的，之后可能还需要写一个 Install 的脚本，毕竟连 zoxide 也是这么做的， ",{"type":24,"tag":222,"props":571,"children":574},{"href":572,"rel":573},"https://github.com/ajeetdsouza/zoxide/blob/main/src/shell.rs",[226],[575],{"type":44,"value":576},"src/shell.rs",{"type":44,"value":578}," 写的非常全，不过我貌似只是为了自己用，所以我自己用的舒服就好了，不需要考虑兼容下的问题？（或许吧:",{"type":24,"tag":266,"props":580,"children":582},{"code":581},"make_template!(Bash, \"bash.txt\");\nmake_template!(Elvish, \"elvish.txt\");\nmake_template!(Fish, \"fish.txt\");\nmake_template!(Nushell, \"nushell.txt\");\nmake_template!(Posix, \"posix.txt\");\nmake_template!(Powershell, \"powershell.txt\");\nmake_template!(Tcsh, \"tcsh.txt\");\nmake_template!(Xonsh, \"xonsh.txt\");\nmake_template!(Zsh, \"zsh.txt\");\n",[583],{"type":24,"tag":145,"props":584,"children":585},{"__ignoreMap":8},[586],{"type":44,"value":581},{"title":8,"searchDepth":112,"depth":112,"links":588},[],"content:plan:programming:cds.md","plan/programming/cds.md",{"_path":592,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":593,"description":8,"director":11,"time":594,"types":13,"img":595,"info":596,"client":16,"target":126,"current":597,"displayType":128,"body":598,"_type":114,"_id":758,"_source":116,"_file":759,"_extension":118},"/plan/programming/command-hide","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",99.99,{"type":21,"children":599,"toc":756},[600],{"type":24,"tag":25,"props":601,"children":602},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[603,607,612,626,634,648,662,665,670,691,704,712],{"type":24,"tag":135,"props":604,"children":606},{"url":605},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":608,"children":611},{"url":609,"type":610},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":613,"children":614},{},[615,617,624],{"type":44,"value":616},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":222,"props":618,"children":621},{"href":619,"rel":620},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[226],[622],{"type":44,"value":623},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":625}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":183,"props":627,"children":628},{"type":185},[629],{"type":24,"tag":40,"props":630,"children":631},{},[632],{"type":44,"value":633},"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。",{"type":24,"tag":40,"props":635,"children":636},{},[637,639,646],{"type":44,"value":638},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":222,"props":640,"children":643},{"href":641,"rel":642},"https://github.com/folke/lazy.nvim",[226],[644],{"type":44,"value":645},"lazy.nvim",{"type":44,"value":647},"。",{"type":24,"tag":40,"props":649,"children":650},{},[651,653,660],{"type":44,"value":652},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":222,"props":654,"children":657},{"href":655,"rel":656},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[226],[658],{"type":44,"value":659},"dragove/nvim/.config/nvim",{"type":44,"value":661}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":663,"children":664},{},[],{"type":24,"tag":40,"props":666,"children":667},{},[668],{"type":44,"value":669},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":671,"children":672},{},[673,675,681,683,689],{"type":44,"value":674},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":145,"props":676,"children":678},{"className":677},[],[679],{"type":44,"value":680},"\u003Ctemplate>\u003C/template>",{"type":44,"value":682}," 中出现了 ",{"type":24,"tag":145,"props":684,"children":686},{"className":685},[],[687],{"type":44,"value":688},"\u003Cp>//\u003C/p>",{"type":44,"value":690}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":692,"children":693},{},[694,696,702],{"type":44,"value":695},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":145,"props":697,"children":699},{"className":698},[],[700],{"type":44,"value":701},"js\\html\\css",{"type":44,"value":703}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":266,"props":705,"children":707},{"code":706},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[708],{"type":24,"tag":145,"props":709,"children":710},{"__ignoreMap":8},[711],{"type":44,"value":706},{"type":24,"tag":40,"props":713,"children":714},{},[715,717,723,725,731,733,739,741,747,748,754],{"type":44,"value":716},"也就是说需要 ",{"type":24,"tag":145,"props":718,"children":720},{"className":719},[],[721],{"type":44,"value":722},"\u003Cscript>",{"type":44,"value":724}," 用 js 的注释, ",{"type":24,"tag":145,"props":726,"children":728},{"className":727},[],[729],{"type":44,"value":730},"\u003Ctemplate>",{"type":44,"value":732}," 用 ",{"type":24,"tag":145,"props":734,"children":736},{"className":735},[],[737],{"type":44,"value":738},"html",{"type":44,"value":740}," 的注释，",{"type":24,"tag":145,"props":742,"children":744},{"className":743},[],[745],{"type":44,"value":746},"style",{"type":44,"value":732},{"type":24,"tag":145,"props":749,"children":751},{"className":750},[],[752],{"type":44,"value":753},"css",{"type":44,"value":755}," 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（可能我成为不了一位优秀的 Coder 是有原因的，很大一部分原因是因为我懒。",{"title":8,"searchDepth":112,"depth":112,"links":757},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":761,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":762,"description":763,"director":11,"time":764,"types":13,"img":765,"info":766,"client":16,"target":126,"current":767,"displayType":128,"body":768,"_type":114,"_id":1013,"_source":116,"_file":1014,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/plan/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":769,"toc":1011},[770],{"type":24,"tag":25,"props":771,"children":772},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[773,776,781,786,791,796,801,806,811,816,819,833,841,846,862,867,881,927,932,937,942,952,957,962,970,975,984,998,1006],{"type":24,"tag":35,"props":774,"children":775},{":desc":37},[],{"type":24,"tag":40,"props":777,"children":778},{},[779],{"type":44,"value":780},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":183,"props":782,"children":785},{"img":783,"info":784},"life/plan/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":787,"children":788},{},[789],{"type":44,"value":790},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":792,"children":793},{},[794],{"type":44,"value":795},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":797,"children":798},{},[799],{"type":44,"value":800},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":183,"props":802,"children":805},{"img":803,"info":804},"life/plan/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":807,"children":808},{},[809],{"type":44,"value":810},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":812,"children":813},{},[814],{"type":44,"value":815},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":817,"children":818},{},[],{"type":24,"tag":40,"props":820,"children":821},{},[822,824,831],{"type":44,"value":823},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":222,"props":825,"children":828},{"href":826,"rel":827},"https://en.wikipedia.org/wiki/CSS_hack",[226],[829],{"type":44,"value":830},"CSS Hack",{"type":44,"value":832}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":266,"props":834,"children":836},{"code":835},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[837],{"type":24,"tag":145,"props":838,"children":839},{"__ignoreMap":8},[840],{"type":44,"value":835},{"type":24,"tag":40,"props":842,"children":843},{},[844],{"type":44,"value":845},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":847,"children":850},{"by":848,"topic":849},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[851],{"type":24,"tag":40,"props":852,"children":853},{},[854,856,860],{"type":44,"value":855},"Some of those people dont't do a lot",{"type":24,"tag":857,"props":858,"children":859},"br",{},[],{"type":44,"value":861},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":863,"children":864},{},[865],{"type":44,"value":866},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":868,"children":869},{},[870,872,879],{"type":44,"value":871},"最近在玩 ",{"type":24,"tag":222,"props":873,"children":876},{"href":874,"rel":875},"https://store.steampowered.com/app/2585110/_/",[226],[877],{"type":44,"value":878},"《我在疗养院送人上西天》",{"type":44,"value":880}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":882,"children":885},{"by":883,"topic":884},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[886],{"type":24,"tag":40,"props":887,"children":888},{},[889,891,894,896,899,901,904,906,909,912,914,917,919,922,924],{"type":44,"value":890},"but that's not everybody,",{"type":24,"tag":857,"props":892,"children":893},{},[],{"type":44,"value":895},"\ni care about the thechnology",{"type":24,"tag":857,"props":897,"children":898},{},[],{"type":44,"value":900},"\nthere are people who care about the ui",{"type":24,"tag":857,"props":902,"children":903},{},[],{"type":44,"value":905},"\ni can't do ui to save my life.",{"type":24,"tag":857,"props":907,"children":908},{},[],{"type":24,"tag":857,"props":910,"children":911},{},[],{"type":44,"value":913},"\ni mean, if i was stranded on an island,",{"type":24,"tag":857,"props":915,"children":916},{},[],{"type":44,"value":918},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":857,"props":920,"children":921},{},[],{"type":44,"value":923},"\ni'd die there.",{"type":24,"tag":857,"props":925,"children":926},{},[],{"type":24,"tag":40,"props":928,"children":929},{},[930],{"type":44,"value":931},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":933,"children":934},{},[935],{"type":44,"value":936},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":938,"children":939},{},[940],{"type":44,"value":941},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":943,"children":946},{"by":944,"topic":945},"Wikipedia","Frontend and backend",[947],{"type":24,"tag":40,"props":948,"children":949},{},[950],{"type":44,"value":951},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":953,"children":954},{},[955],{"type":44,"value":956},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":958,"children":959},{},[960],{"type":44,"value":961},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":183,"props":963,"children":964},{"type":185},[965],{"type":24,"tag":40,"props":966,"children":967},{},[968],{"type":44,"value":969},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":971,"children":972},{},[973],{"type":44,"value":974},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":976,"children":977},{},[978],{"type":24,"tag":979,"props":980,"children":981},"del",{},[982],{"type":44,"value":983},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":985,"children":986},{},[987,989,996],{"type":44,"value":988},"可能这个现象可以用 ",{"type":24,"tag":222,"props":990,"children":993},{"href":991,"rel":992},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[226],[994],{"type":44,"value":995},"Dunning–Kruger effect",{"type":44,"value":997}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":999,"children":1000},{"by":944,"topic":995},[1001],{"type":24,"tag":40,"props":1002,"children":1003},{},[1004],{"type":44,"value":1005},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":1007,"children":1008},{},[1009],{"type":44,"value":1010},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":1012},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":1016,"_dir":1017,"_draft":7,"_partial":7,"_locale":8,"title":1018,"description":8,"director":16,"img":1019,"time":1020,"plan":1021,"target":126,"current":1022,"displayType":128,"body":1023,"_type":114,"_id":1986,"_source":116,"_file":1987,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":1024,"toc":1976},[1025],{"type":24,"tag":1026,"props":1027,"children":1030},"book-content",{":by":1028,":img":28,":plan":1029,":title":31},"director","plan",[1031,1035,1040,1045,1050,1055,1060,1063,1070,1077,1084,1096,1136,1150,1161,1183,1186,1192,1207,1229,1266,1288,1310,1326,1334,1342,1354,1362,1383,1391,1394,1400,1411,1431,1457,1462,1483,1531,1552,1557,1575,1588,1616,1621,1624,1630,1653,1706,1757,1777,1800,1810,1838,1846,1851,1859,1872,1880,1883,1889,1893,1905,1962,1968],{"type":24,"tag":206,"props":1032,"children":1034},{":t":1033},"CVE is my dream.",[],{"type":24,"tag":40,"props":1036,"children":1037},{},[1038],{"type":44,"value":1039},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":1041,"children":1042},{},[1043],{"type":44,"value":1044},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":1046,"children":1047},{},[1048],{"type":44,"value":1049},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":1051,"children":1052},{},[1053],{"type":44,"value":1054},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":1056,"children":1057},{},[1058],{"type":44,"value":1059},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":1061,"children":1062},{},[],{"type":24,"tag":1064,"props":1065,"children":1067},"h1",{"id":1066},"rust-3",[1068],{"type":44,"value":1069},"rust 3",{"type":24,"tag":1071,"props":1072,"children":1074},"h2",{"id":1073},"github-3",[1075],{"type":44,"value":1076},"Github 3",{"type":24,"tag":1078,"props":1079,"children":1081},"h3",{"id":1080},"cve-2022-36114-1",[1082],{"type":44,"value":1083},"CVE-2022-36114 1",{"type":24,"tag":1085,"props":1086,"children":1090},"cve-info",{":type":209,"cve":1087,"to":1088,":cwe":1089},"CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[1091],{"type":24,"tag":40,"props":1092,"children":1093},{},[1094],{"type":44,"value":1095},"不受控制的资源消耗",{"type":24,"tag":40,"props":1097,"children":1098},{},[1099,1101,1108,1110,1117,1119,1125,1127,1134],{"type":44,"value":1100},"利用 Cargo 的 ",{"type":24,"tag":222,"props":1102,"children":1105},{"href":1103,"rel":1104},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[226],[1106],{"type":44,"value":1107},"build script",{"type":44,"value":1109}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":222,"props":1111,"children":1114},{"href":1112,"rel":1113},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[226],[1115],{"type":44,"value":1116},"procedural macros",{"type":44,"value":1118},"，在执行 ",{"type":24,"tag":145,"props":1120,"children":1122},{"className":1121},[],[1123],{"type":44,"value":1124},"cargo run",{"type":44,"value":1126}," 的过程中触发了一个 ",{"type":24,"tag":222,"props":1128,"children":1131},{"href":1129,"rel":1130},"https://en.wikipedia.org/wiki/Zip_bomb",[226],[1132],{"type":44,"value":1133},"Zip Bomb",{"type":44,"value":1135}," 行为。",{"type":24,"tag":40,"props":1137,"children":1138},{},[1139,1141,1148],{"type":44,"value":1140},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":222,"props":1142,"children":1145},{"href":1143,"rel":1144},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[226],[1146],{"type":44,"value":1147},"补丁修复",{"type":44,"value":1149}," Zip_bomb 的问题:",{"type":24,"tag":266,"props":1151,"children":1156},{"code":1152,"language":1153,"meta":8,"className":1154},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[1155],"language-c",[1157],{"type":24,"tag":145,"props":1158,"children":1159},{"__ignoreMap":8},[1160],{"type":44,"value":1152},{"type":24,"tag":40,"props":1162,"children":1163},{},[1164,1166,1172,1174,1181],{"type":44,"value":1165},"同时引入了 ",{"type":24,"tag":145,"props":1167,"children":1169},{"className":1168},[],[1170],{"type":44,"value":1171},"LimitErrorReader",{"type":44,"value":1173},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":222,"props":1175,"children":1178},{"href":1176,"rel":1177},"https://crates.io/",[226],[1179],{"type":44,"value":1180},"crates",{"type":44,"value":1182}," 上提交的 crate。",{"type":24,"tag":57,"props":1184,"children":1185},{},[],{"type":24,"tag":1078,"props":1187,"children":1189},{"id":1188},"cve-2023-40030-1",[1190],{"type":44,"value":1191},"CVE-2023-40030 1",{"type":24,"tag":1085,"props":1193,"children":1198},{":type":1194,"cve":1195,"to":1196,":cwe":1197},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[1199],{"type":24,"tag":40,"props":1200,"children":1201},{},[1202,1204],{"type":44,"value":1203},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":857,"props":1205,"children":1206},{},[],{"type":24,"tag":40,"props":1208,"children":1209},{},[1210,1212,1218,1220,1227],{"type":44,"value":1211},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":145,"props":1213,"children":1215},{"className":1214},[],[1216],{"type":44,"value":1217},"cargo build --timings",{"type":44,"value":1219}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":222,"props":1221,"children":1224},{"href":1222,"rel":1223},"https://doc.rust-lang.org/cargo/reference/timings.html",[226],[1225],{"type":44,"value":1226},"--timings",{"type":44,"value":1228}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":1230,"children":1231},{},[1232,1234,1240,1242,1248,1250,1256,1258,1264],{"type":44,"value":1233},"可以通过在 ",{"type":24,"tag":145,"props":1235,"children":1237},{"className":1236},[],[1238],{"type":44,"value":1239},"Cargo.toml",{"type":44,"value":1241}," 中加入 ",{"type":24,"tag":145,"props":1243,"children":1245},{"className":1244},[],[1246],{"type":44,"value":1247},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":1249}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":145,"props":1251,"children":1253},{"className":1252},[],[1254],{"type":44,"value":1255},"Warning",{"type":44,"value":1257},", 换成了 ",{"type":24,"tag":145,"props":1259,"children":1261},{"className":1260},[],[1262],{"type":44,"value":1263},"bail!",{"type":44,"value":1265}," 机制。",{"type":24,"tag":183,"props":1267,"children":1268},{"type":185},[1269],{"type":24,"tag":40,"props":1270,"children":1271},{},[1272,1277,1279,1286],{"type":24,"tag":145,"props":1273,"children":1275},{"className":1274},[],[1276],{"type":44,"value":1263},{"type":44,"value":1278}," 宏来自 ",{"type":24,"tag":222,"props":1280,"children":1283},{"href":1281,"rel":1282},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[226],[1284],{"type":44,"value":1285},"anyhow",{"type":44,"value":1287}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":1289,"children":1290},{},[1291,1293,1300,1302,1308],{"type":44,"value":1292},"可以看一下 ",{"type":24,"tag":222,"props":1294,"children":1297},{"href":1295,"rel":1296},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[226],[1298],{"type":44,"value":1299},"fix pr",{"type":44,"value":1301},"，非常有意思，比如 ",{"type":24,"tag":145,"props":1303,"children":1305},{"className":1304},[],[1306],{"type":44,"value":1307},"validate_feature_name",{"type":44,"value":1309}," 函数。",{"type":24,"tag":40,"props":1311,"children":1312},{},[1313,1315,1321,1323],{"type":44,"value":1314},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":145,"props":1316,"children":1318},{"className":1317},[],[1319],{"type":44,"value":1320},"warning",{"type":44,"value":1322},"，流程继续。",{"type":24,"tag":857,"props":1324,"children":1325},{},[],{"type":24,"tag":266,"props":1327,"children":1329},{"code":1328},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[1330],{"type":24,"tag":145,"props":1331,"children":1332},{"__ignoreMap":8},[1333],{"type":44,"value":1328},{"type":24,"tag":183,"props":1335,"children":1336},{"type":185},[1337],{"type":24,"tag":40,"props":1338,"children":1339},{},[1340],{"type":44,"value":1341},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":1343,"children":1344},{},[1345,1347,1352],{"type":44,"value":1346},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":145,"props":1348,"children":1350},{"className":1349},[],[1351],{"type":44,"value":1263},{"type":44,"value":1353},"，构建中止，用户必须修正。",{"type":24,"tag":266,"props":1355,"children":1357},{"code":1356}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[1358],{"type":24,"tag":145,"props":1359,"children":1360},{"__ignoreMap":8},[1361],{"type":44,"value":1356},{"type":24,"tag":40,"props":1363,"children":1364},{},[1365,1367,1373,1375,1381],{"type":44,"value":1366},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":145,"props":1368,"children":1370},{"className":1369},[],[1371],{"type":44,"value":1372},"is_ok()",{"type":44,"value":1374}," 是合法的，而 ",{"type":24,"tag":145,"props":1376,"children":1378},{"className":1377},[],[1379],{"type":44,"value":1380},"is_err()",{"type":44,"value":1382}," 是不合法的：",{"type":24,"tag":266,"props":1384,"children":1386},{"code":1385}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[1387],{"type":24,"tag":145,"props":1388,"children":1389},{"__ignoreMap":8},[1390],{"type":44,"value":1385},{"type":24,"tag":57,"props":1392,"children":1393},{},[],{"type":24,"tag":1078,"props":1395,"children":1397},{"id":1396},"cve-2023-41051-1",[1398],{"type":44,"value":1399},"CVE-2023-41051 1",{"type":24,"tag":1085,"props":1401,"children":1405},{":type":1194,"cve":1402,"to":1403,":cwe":1404},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[1406],{"type":24,"tag":40,"props":1407,"children":1408},{},[1409],{"type":44,"value":1410},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":1412,"children":1413},{},[1414,1421,1423,1429],{"type":24,"tag":222,"props":1415,"children":1418},{"href":1416,"rel":1417},"https://github.com/rust-vmm/vm-memory",[226],[1419],{"type":44,"value":1420},"vm-memory",{"type":44,"value":1422}," 的 ",{"type":24,"tag":145,"props":1424,"children":1426},{"className":1425},[],[1427],{"type":44,"value":1428},"VolatileMemory",{"type":44,"value":1430}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":1432,"props":1433,"children":1434},"ol",{},[1435,1446],{"type":24,"tag":286,"props":1436,"children":1437},{},[1438,1444],{"type":24,"tag":145,"props":1439,"children":1441},{"className":1440},[],[1442],{"type":44,"value":1443},"VolatileMemory::get_slice",{"type":44,"value":1445},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":286,"props":1447,"children":1448},{},[1449,1455],{"type":24,"tag":145,"props":1450,"children":1452},{"className":1451},[],[1453],{"type":44,"value":1454},"VolatileMemory::read/write",{"type":44,"value":1456},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":1458,"children":1459},{},[1460],{"type":44,"value":1461},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":1463,"children":1464},{},[1465,1467,1473,1475,1481],{"type":44,"value":1466},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":145,"props":1468,"children":1470},{"className":1469},[],[1471],{"type":44,"value":1472},"read/write",{"type":44,"value":1474},"，更多的是 ",{"type":24,"tag":145,"props":1476,"children":1478},{"className":1477},[],[1479],{"type":44,"value":1480},"get_slice",{"type":44,"value":1482}," 方法，例如：",{"type":24,"tag":1432,"props":1484,"children":1485},{},[1486,1495,1504,1513,1522],{"type":24,"tag":286,"props":1487,"children":1488},{},[1489],{"type":24,"tag":145,"props":1490,"children":1492},{"className":1491},[],[1493],{"type":44,"value":1494},"get_atomic_ref",{"type":24,"tag":286,"props":1496,"children":1497},{},[1498],{"type":24,"tag":145,"props":1499,"children":1501},{"className":1500},[],[1502],{"type":44,"value":1503},"aligned_as_ref",{"type":24,"tag":286,"props":1505,"children":1506},{},[1507],{"type":24,"tag":145,"props":1508,"children":1510},{"className":1509},[],[1511],{"type":44,"value":1512},"aligned_as_mut",{"type":24,"tag":286,"props":1514,"children":1515},{},[1516],{"type":24,"tag":145,"props":1517,"children":1519},{"className":1518},[],[1520],{"type":44,"value":1521},"get_ref",{"type":24,"tag":286,"props":1523,"children":1524},{},[1525],{"type":24,"tag":145,"props":1526,"children":1528},{"className":1527},[],[1529],{"type":44,"value":1530},"get_array_ref",{"type":24,"tag":40,"props":1532,"children":1533},{},[1534,1536,1542,1544,1550],{"type":44,"value":1535},"上述方法有个共同点，都是利用 ",{"type":24,"tag":145,"props":1537,"children":1539},{"className":1538},[],[1540],{"type":44,"value":1541},"ref",{"type":44,"value":1543}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":145,"props":1545,"children":1547},{"className":1546},[],[1548],{"type":44,"value":1549},"&[T]",{"type":44,"value":1551}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1553,"children":1554},{},[1555],{"type":44,"value":1556},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":1432,"props":1558,"children":1559},{},[1560,1565,1570],{"type":24,"tag":286,"props":1561,"children":1562},{},[1563],{"type":44,"value":1564},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":286,"props":1566,"children":1567},{},[1568],{"type":44,"value":1569},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":286,"props":1571,"children":1572},{},[1573],{"type":44,"value":1574},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1576,"children":1577},{},[1578,1580,1586],{"type":44,"value":1579},"仔细欣赏 ",{"type":24,"tag":222,"props":1581,"children":1584},{"href":1582,"rel":1583},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[226],[1585],{"type":44,"value":1299},{"type":44,"value":1587}," 你会发现：",{"type":24,"tag":40,"props":1589,"children":1590},{},[1591,1593,1599,1601,1606,1608,1614],{"type":44,"value":1592},"这些方法内部，都会调用 ",{"type":24,"tag":145,"props":1594,"children":1596},{"className":1595},[],[1597],{"type":44,"value":1598},"get_slice(offset, count)",{"type":44,"value":1600}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":145,"props":1602,"children":1604},{"className":1603},[],[1605],{"type":44,"value":1480},{"type":44,"value":1607}," 加上 ",{"type":24,"tag":145,"props":1609,"children":1611},{"className":1610},[],[1612],{"type":44,"value":1613},"assert_eq!",{"type":44,"value":1615}," 就意味着：",{"type":24,"tag":40,"props":1617,"children":1618},{},[1619],{"type":44,"value":1620},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1622,"children":1623},{},[],{"type":24,"tag":1078,"props":1625,"children":1627},{"id":1626},"cve-2023-38497-1",[1628],{"type":44,"value":1629},"CVE-2023-38497 1",{"type":24,"tag":1085,"props":1631,"children":1636},{":type":1632,"cve":1633,"to":1634,"cwe":1635},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1637,1645],{"type":24,"tag":40,"props":1638,"children":1639},{},[1640,1642],{"type":44,"value":1641},"278: 不安全的保留继承权限",{"type":24,"tag":857,"props":1643,"children":1644},{},[],{"type":24,"tag":280,"props":1646,"children":1647},{},[1648],{"type":24,"tag":286,"props":1649,"children":1650},{},[1651],{"type":44,"value":1652},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1654,"children":1655},{},[1656,1658,1665,1667,1673,1675,1680,1682,1689,1691,1696,1698,1704],{"type":44,"value":1657},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":222,"props":1659,"children":1662},{"href":1660,"rel":1661},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[226],[1663],{"type":44,"value":1664},"CVE-2005-1724",{"type":44,"value":1666},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1668,"props":1669,"children":1670},"strong",{},[1671],{"type":44,"value":1672},"权限限制”",{"type":44,"value":1674},"。总的来说 umask 是 ",{"type":24,"tag":1668,"props":1676,"children":1677},{},[1678],{"type":44,"value":1679},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1681},"，可以看看 ",{"type":24,"tag":222,"props":1683,"children":1686},{"href":1684,"rel":1685},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[226],[1687],{"type":44,"value":1688},"Linux中umask深入理解\n",{"type":44,"value":1690},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":145,"props":1692,"children":1694},{"className":1693},[],[1695],{"type":44,"value":480},{"type":44,"value":1697}," 脚本的时候，会使用 ",{"type":24,"tag":145,"props":1699,"children":1701},{"className":1700},[],[1702],{"type":44,"value":1703},"chmod 777",{"type":44,"value":1705},", 要不然运行不了。",{"type":24,"tag":183,"props":1707,"children":1708},{"type":185},[1709,1719,1724,1744,1752],{"type":24,"tag":40,"props":1710,"children":1711},{},[1712,1714],{"type":44,"value":1713},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1668,"props":1715,"children":1716},{},[1717],{"type":44,"value":1718},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1720,"children":1721},{},[1722],{"type":44,"value":1723},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1725,"children":1726},{},[1727,1729,1735,1736,1742],{"type":44,"value":1728},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":145,"props":1730,"children":1732},{"className":1731},[],[1733],{"type":44,"value":1734},"-network",{"type":44,"value":473},{"type":24,"tag":145,"props":1737,"children":1739},{"className":1738},[],[1740],{"type":44,"value":1741},"-mask",{"type":44,"value":1743},"：",{"type":24,"tag":266,"props":1745,"children":1747},{"code":1746},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1748],{"type":24,"tag":145,"props":1749,"children":1750},{"__ignoreMap":8},[1751],{"type":44,"value":1746},{"type":24,"tag":40,"props":1753,"children":1754},{},[1755],{"type":44,"value":1756},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1758,"children":1759},{},[1760,1762,1767,1769,1775],{"type":44,"value":1761},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1668,"props":1763,"children":1764},{},[1765],{"type":44,"value":1766},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1768},"。而 ",{"type":24,"tag":145,"props":1770,"children":1772},{"className":1771},[],[1773],{"type":44,"value":1774},"umask",{"type":44,"value":1776}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1778,"props":1779,"children":1781},"text-tip",{"type":1780},"big",[1782],{"type":24,"tag":40,"props":1783,"children":1784},{},[1785,1787,1793,1795,1798],{"type":44,"value":1786},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":145,"props":1788,"children":1790},{"className":1789},[],[1791],{"type":44,"value":1792},"777",{"type":44,"value":1794}," 权限构建攻击脚本。",{"type":24,"tag":857,"props":1796,"children":1797},{},[],{"type":44,"value":1799},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1801,"children":1802},{},[1803,1805],{"type":44,"value":1804},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1668,"props":1806,"children":1807},{},[1808],{"type":44,"value":1809},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1811,"children":1812},{},[1813,1815,1821,1823,1829,1831,1836],{"type":44,"value":1814},"在 ",{"type":24,"tag":145,"props":1816,"children":1818},{"className":1817},[],[1819],{"type":44,"value":1820},"src/cargo/util/mod.rs",{"type":44,"value":1822}," 中新增了 ",{"type":24,"tag":145,"props":1824,"children":1826},{"className":1825},[],[1827],{"type":44,"value":1828},"get_umask()",{"type":44,"value":1830}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":145,"props":1832,"children":1834},{"className":1833},[],[1835],{"type":44,"value":1774},{"type":44,"value":1837}," 限制新文件的权限。：",{"type":24,"tag":266,"props":1839,"children":1841},{"code":1840},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1842],{"type":24,"tag":145,"props":1843,"children":1844},{"__ignoreMap":8},[1845],{"type":44,"value":1840},{"type":24,"tag":40,"props":1847,"children":1848},{},[1849],{"type":44,"value":1850},"以及很有艺术性的一行 code:",{"type":24,"tag":266,"props":1852,"children":1854},{"code":1853},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1855],{"type":24,"tag":145,"props":1856,"children":1857},{"__ignoreMap":8},[1858],{"type":44,"value":1853},{"type":24,"tag":40,"props":1860,"children":1861},{},[1862,1864,1870],{"type":44,"value":1863},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":145,"props":1865,"children":1867},{"className":1866},[],[1868],{"type":44,"value":1869},"!umask",{"type":44,"value":1871}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":266,"props":1873,"children":1875},{"code":1874},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1876],{"type":24,"tag":145,"props":1877,"children":1878},{"__ignoreMap":8},[1879],{"type":44,"value":1874},{"type":24,"tag":57,"props":1881,"children":1882},{},[],{"type":24,"tag":1071,"props":1884,"children":1886},{"id":1885},"polyduekes-3",[1887],{"type":44,"value":1888},"Polyduekes 3",{"type":24,"tag":206,"props":1890,"children":1892},{"t":1891},"Polyduekes",[],{"type":24,"tag":40,"props":1894,"children":1895},{},[1896,1898,1903],{"type":44,"value":1897},"在 telegram 认识到的热心群 U，得知我的目标是 Rust CVE 之后回复我了一个他整理过的合集。很有大佬的风范，特别是那句 ",{"type":24,"tag":1668,"props":1899,"children":1900},{},[1901],{"type":44,"value":1902},"the rust cve part is easy, just look at the stdlib",{"type":44,"value":1904},"。据我视奸过后，确实是一位经验丰富的大佬，例如：",{"type":24,"tag":1432,"props":1906,"children":1907},{},[1908,1917,1926,1935,1944,1953],{"type":24,"tag":286,"props":1909,"children":1910},{},[1911],{"type":24,"tag":222,"props":1912,"children":1915},{"href":1913,"rel":1914},"https://aur.archlinux.org/packages/pldget",[226],[1916],{"type":44,"value":1913},{"type":24,"tag":286,"props":1918,"children":1919},{},[1920],{"type":24,"tag":222,"props":1921,"children":1924},{"href":1922,"rel":1923},"https://git.sr.ht/~cdv/polydeukes",[226],[1925],{"type":44,"value":1922},{"type":24,"tag":286,"props":1927,"children":1928},{},[1929],{"type":24,"tag":222,"props":1930,"children":1933},{"href":1931,"rel":1932},"https://github.com/chrisvittal",[226],[1934],{"type":44,"value":1931},{"type":24,"tag":286,"props":1936,"children":1937},{},[1938],{"type":24,"tag":222,"props":1939,"children":1942},{"href":1940,"rel":1941},"https://git.sr.ht/~cdv/",[226],[1943],{"type":44,"value":1940},{"type":24,"tag":286,"props":1945,"children":1946},{},[1947],{"type":24,"tag":222,"props":1948,"children":1951},{"href":1949,"rel":1950},"https://chris.vittal.dev/",[226],[1952],{"type":44,"value":1949},{"type":24,"tag":286,"props":1954,"children":1955},{},[1956],{"type":24,"tag":222,"props":1957,"children":1960},{"href":1958,"rel":1959},"https://github.com/rust-lang/rust/commits?author=chrisvittal",[226],[1961],{"type":44,"value":1958},{"type":24,"tag":1963,"props":1964,"children":1967},"img-tip",{"text":1965,"url":1966},"之所以能机缘巧合得到大佬的这句话，源自于我看到了频道中转发的这个表情包，然后想起了小学时想用它攻击学校官网让其瘫痪的那个上午。\u003Cbr>\u003Cbr>不过攻击并没有成功，只是返回了 503, 换一台设备还能继续访问，可能当时需要通过类似 https://spys.one/en/ 这样的 IP 池才行。\u003Cbr>\u003Cbr>我当时一度认为这个软件没什么用，但频道的另一位管理员回复我说在他们那个年代，他通过这个软件让其一个论坛瘫痪掉了。\u003Cbr>\u003Cbr>有一说一十多年过去了，当时的界面就算拿到现在来看也并不过时。","cve/1.jpg",[],{"type":24,"tag":266,"props":1969,"children":1971},{"code":1970},"the rust cve part is easy, just look at the stdlib \nhttps://www.cve.org/CVERecord?id=CVE-2024-24576\nhttps://www.cve.org/CVERecord?id=CVE-2022-21658\nhttps://www.cve.org/CVERecord?id=CVE-2021-31162\nhttps://www.cve.org/CVERecord?id=CVE-2021-28879\nhttps://www.cve.org/CVERecord?id=CVE-2021-28878\nhttps://www.cve.org/CVERecord?id=CVE-2025-3416\n",[1972],{"type":24,"tag":145,"props":1973,"children":1974},{"__ignoreMap":8},[1975],{"type":44,"value":1970},{"title":8,"searchDepth":112,"depth":112,"links":1977},[1978,1985],{"id":1073,"depth":112,"text":1076,"children":1979},[1980,1982,1983,1984],{"id":1080,"depth":1981,"text":1083},3,{"id":1188,"depth":1981,"text":1191},{"id":1396,"depth":1981,"text":1399},{"id":1626,"depth":1981,"text":1629},{"id":1885,"depth":112,"text":1888},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1758888488948]