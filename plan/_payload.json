[{"data":1,"prerenderedAt":1440},["Reactive",2],{"equalLink":3},[4,119,288,545],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-529.22,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":286,"_source":116,"_file":287,"_extension":118},"/plan/programming/command-hide","programming","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",100,99.99,"percent",{"type":21,"children":130,"toc":284},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139,144,160,174,188,191,196,218,231,240],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":140,"children":143},{"url":141,"type":142},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":145,"children":146},{},[147,149,158],{"type":44,"value":148},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":150,"props":151,"children":155},"a",{"href":152,"rel":153},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[154],"nofollow",[156],{"type":44,"value":157},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":159}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":40,"props":161,"children":162},{},[163,165,172],{"type":44,"value":164},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":150,"props":166,"children":169},{"href":167,"rel":168},"https://github.com/folke/lazy.nvim",[154],[170],{"type":44,"value":171},"lazy.nvim",{"type":44,"value":173},"。",{"type":24,"tag":40,"props":175,"children":176},{},[177,179,186],{"type":44,"value":178},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":150,"props":180,"children":183},{"href":181,"rel":182},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[154],[184],{"type":44,"value":185},"dragove/nvim/.config/nvim",{"type":44,"value":187}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":189,"children":190},{},[],{"type":24,"tag":40,"props":192,"children":193},{},[194],{"type":44,"value":195},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":197,"children":198},{},[199,201,208,210,216],{"type":44,"value":200},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":202,"props":203,"children":205},"code",{"className":204},[],[206],{"type":44,"value":207},"\u003Ctemplate>\u003C/template>",{"type":44,"value":209}," 中出现了 ",{"type":24,"tag":202,"props":211,"children":213},{"className":212},[],[214],{"type":44,"value":215},"\u003Cp>//\u003C/p>",{"type":44,"value":217}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":219,"children":220},{},[221,223,229],{"type":44,"value":222},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":202,"props":224,"children":226},{"className":225},[],[227],{"type":44,"value":228},"js\\html\\css",{"type":44,"value":230}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":232,"props":233,"children":235},"pre",{"code":234},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[236],{"type":24,"tag":202,"props":237,"children":238},{"__ignoreMap":8},[239],{"type":44,"value":234},{"type":24,"tag":40,"props":241,"children":242},{},[243,245,251,253,259,261,267,269,275,276,282],{"type":44,"value":244},"也就是说需要 ",{"type":24,"tag":202,"props":246,"children":248},{"className":247},[],[249],{"type":44,"value":250},"\u003Cscript>",{"type":44,"value":252}," 用 js 的注释, ",{"type":24,"tag":202,"props":254,"children":256},{"className":255},[],[257],{"type":44,"value":258},"\u003Ctemplate>",{"type":44,"value":260}," 用 ",{"type":24,"tag":202,"props":262,"children":264},{"className":263},[],[265],{"type":44,"value":266},"html",{"type":44,"value":268}," 的注释，",{"type":24,"tag":202,"props":270,"children":272},{"className":271},[],[273],{"type":44,"value":274},"style",{"type":44,"value":260},{"type":24,"tag":202,"props":277,"children":279},{"className":278},[],[280],{"type":44,"value":281},"css",{"type":44,"value":283}," 的注释",{"title":8,"searchDepth":112,"depth":112,"links":285},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":289,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":290,"description":291,"director":11,"time":292,"types":13,"img":293,"info":294,"client":16,"target":126,"current":295,"displayType":128,"body":296,"_type":114,"_id":543,"_source":116,"_file":544,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":297,"toc":541},[298],{"type":24,"tag":25,"props":299,"children":300},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[301,304,309,315,320,325,330,335,340,345,348,362,370,375,391,396,410,456,461,466,471,481,486,491,500,505,514,528,536],{"type":24,"tag":35,"props":302,"children":303},{":desc":37},[],{"type":24,"tag":40,"props":305,"children":306},{},[307],{"type":44,"value":308},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":310,"props":311,"children":314},"text-space",{"img":312,"info":313},"life/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":316,"children":317},{},[318],{"type":44,"value":319},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":321,"children":322},{},[323],{"type":44,"value":324},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":326,"children":327},{},[328],{"type":44,"value":329},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":310,"props":331,"children":334},{"img":332,"info":333},"life/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":336,"children":337},{},[338],{"type":44,"value":339},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":341,"children":342},{},[343],{"type":44,"value":344},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":346,"children":347},{},[],{"type":24,"tag":40,"props":349,"children":350},{},[351,353,360],{"type":44,"value":352},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":150,"props":354,"children":357},{"href":355,"rel":356},"https://en.wikipedia.org/wiki/CSS_hack",[154],[358],{"type":44,"value":359},"CSS Hack",{"type":44,"value":361}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":232,"props":363,"children":365},{"code":364},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[366],{"type":24,"tag":202,"props":367,"children":368},{"__ignoreMap":8},[369],{"type":44,"value":364},{"type":24,"tag":40,"props":371,"children":372},{},[373],{"type":44,"value":374},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":376,"children":379},{"by":377,"topic":378},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[380],{"type":24,"tag":40,"props":381,"children":382},{},[383,385,389],{"type":44,"value":384},"Some of those people dont't do a lot",{"type":24,"tag":386,"props":387,"children":388},"br",{},[],{"type":44,"value":390},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":392,"children":393},{},[394],{"type":44,"value":395},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":397,"children":398},{},[399,401,408],{"type":44,"value":400},"最近在玩 ",{"type":24,"tag":150,"props":402,"children":405},{"href":403,"rel":404},"https://store.steampowered.com/app/2585110/_/",[154],[406],{"type":44,"value":407},"《我在疗养院送人上西天》",{"type":44,"value":409}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":411,"children":414},{"by":412,"topic":413},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[415],{"type":24,"tag":40,"props":416,"children":417},{},[418,420,423,425,428,430,433,435,438,441,443,446,448,451,453],{"type":44,"value":419},"but that's not everybody,",{"type":24,"tag":386,"props":421,"children":422},{},[],{"type":44,"value":424},"\ni care about the thechnology",{"type":24,"tag":386,"props":426,"children":427},{},[],{"type":44,"value":429},"\nthere are people who care about the ui",{"type":24,"tag":386,"props":431,"children":432},{},[],{"type":44,"value":434},"\ni can't do ui to save my life.",{"type":24,"tag":386,"props":436,"children":437},{},[],{"type":24,"tag":386,"props":439,"children":440},{},[],{"type":44,"value":442},"\ni mean, if i was stranded on an island,",{"type":24,"tag":386,"props":444,"children":445},{},[],{"type":44,"value":447},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":386,"props":449,"children":450},{},[],{"type":44,"value":452},"\ni'd die there.",{"type":24,"tag":386,"props":454,"children":455},{},[],{"type":24,"tag":40,"props":457,"children":458},{},[459],{"type":44,"value":460},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":462,"children":463},{},[464],{"type":44,"value":465},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":467,"children":468},{},[469],{"type":44,"value":470},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":472,"children":475},{"by":473,"topic":474},"Wikipedia","Frontend and backend",[476],{"type":24,"tag":40,"props":477,"children":478},{},[479],{"type":44,"value":480},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":482,"children":483},{},[484],{"type":44,"value":485},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":487,"children":488},{},[489],{"type":44,"value":490},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":310,"props":492,"children":494},{"type":493},"tip",[495],{"type":24,"tag":40,"props":496,"children":497},{},[498],{"type":44,"value":499},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":501,"children":502},{},[503],{"type":44,"value":504},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":506,"children":507},{},[508],{"type":24,"tag":509,"props":510,"children":511},"del",{},[512],{"type":44,"value":513},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":515,"children":516},{},[517,519,526],{"type":44,"value":518},"可能这个现象可以用 ",{"type":24,"tag":150,"props":520,"children":523},{"href":521,"rel":522},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[154],[524],{"type":44,"value":525},"Dunning–Kruger effect",{"type":44,"value":527}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":529,"children":530},{"by":473,"topic":525},[531],{"type":24,"tag":40,"props":532,"children":533},{},[534],{"type":44,"value":535},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":537,"children":538},{},[539],{"type":44,"value":540},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":542},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":546,"_dir":547,"_draft":7,"_partial":7,"_locale":8,"title":548,"description":8,"director":16,"img":549,"time":550,"plan":551,"target":126,"current":552,"displayType":128,"body":553,"_type":114,"_id":1438,"_source":116,"_file":1439,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":554,"toc":1432},[555],{"type":24,"tag":556,"props":557,"children":560},"book-content",{":by":558,":img":28,":plan":559,":title":31},"director","plan",[561,566,571,576,581,586,591,594,601,608,621,661,675,686,708,711,717,732,754,791,813,835,851,859,867,879,887,908,916,919,925,936,956,983,988,1009,1057,1078,1083,1101,1114,1142,1147,1150,1156,1180,1232,1284,1304,1327,1337,1365,1373,1378,1386,1399,1407],{"type":24,"tag":562,"props":563,"children":565},"text-title",{":t":564},"CVE is my dream.",[],{"type":24,"tag":40,"props":567,"children":568},{},[569],{"type":44,"value":570},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":572,"children":573},{},[574],{"type":44,"value":575},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":577,"children":578},{},[579],{"type":44,"value":580},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":582,"children":583},{},[584],{"type":44,"value":585},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":587,"children":588},{},[589],{"type":44,"value":590},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":592,"children":593},{},[],{"type":24,"tag":595,"props":596,"children":598},"h1",{"id":597},"rust-3",[599],{"type":44,"value":600},"rust 3",{"type":24,"tag":602,"props":603,"children":605},"h2",{"id":604},"cve-2022-36114-1",[606],{"type":44,"value":607},"CVE-2022-36114 1",{"type":24,"tag":609,"props":610,"children":615},"cve-info",{":type":611,"cve":612,"to":613,":cwe":614},"2","CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[616],{"type":24,"tag":40,"props":617,"children":618},{},[619],{"type":44,"value":620},"不受控制的资源消耗",{"type":24,"tag":40,"props":622,"children":623},{},[624,626,633,635,642,644,650,652,659],{"type":44,"value":625},"利用 Cargo 的 ",{"type":24,"tag":150,"props":627,"children":630},{"href":628,"rel":629},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[154],[631],{"type":44,"value":632},"build script",{"type":44,"value":634}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":150,"props":636,"children":639},{"href":637,"rel":638},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[154],[640],{"type":44,"value":641},"procedural macros",{"type":44,"value":643},"，在执行 ",{"type":24,"tag":202,"props":645,"children":647},{"className":646},[],[648],{"type":44,"value":649},"cargo run",{"type":44,"value":651}," 的过程中触发了一个 ",{"type":24,"tag":150,"props":653,"children":656},{"href":654,"rel":655},"https://en.wikipedia.org/wiki/Zip_bomb",[154],[657],{"type":44,"value":658},"Zip Bomb",{"type":44,"value":660}," 行为。",{"type":24,"tag":40,"props":662,"children":663},{},[664,666,673],{"type":44,"value":665},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":150,"props":667,"children":670},{"href":668,"rel":669},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[154],[671],{"type":44,"value":672},"补丁修复",{"type":44,"value":674}," Zip_bomb 的问题:",{"type":24,"tag":232,"props":676,"children":681},{"code":677,"language":678,"meta":8,"className":679},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[680],"language-c",[682],{"type":24,"tag":202,"props":683,"children":684},{"__ignoreMap":8},[685],{"type":44,"value":677},{"type":24,"tag":40,"props":687,"children":688},{},[689,691,697,699,706],{"type":44,"value":690},"同时引入了 ",{"type":24,"tag":202,"props":692,"children":694},{"className":693},[],[695],{"type":44,"value":696},"LimitErrorReader",{"type":44,"value":698},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":150,"props":700,"children":703},{"href":701,"rel":702},"https://crates.io/",[154],[704],{"type":44,"value":705},"crates",{"type":44,"value":707}," 上提交的 crate。",{"type":24,"tag":57,"props":709,"children":710},{},[],{"type":24,"tag":602,"props":712,"children":714},{"id":713},"cve-2023-40030-1",[715],{"type":44,"value":716},"CVE-2023-40030 1",{"type":24,"tag":609,"props":718,"children":723},{":type":719,"cve":720,"to":721,":cwe":722},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[724],{"type":24,"tag":40,"props":725,"children":726},{},[727,729],{"type":44,"value":728},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":386,"props":730,"children":731},{},[],{"type":24,"tag":40,"props":733,"children":734},{},[735,737,743,745,752],{"type":44,"value":736},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":202,"props":738,"children":740},{"className":739},[],[741],{"type":44,"value":742},"cargo build --timings",{"type":44,"value":744}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":150,"props":746,"children":749},{"href":747,"rel":748},"https://doc.rust-lang.org/cargo/reference/timings.html",[154],[750],{"type":44,"value":751},"--timings",{"type":44,"value":753}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":755,"children":756},{},[757,759,765,767,773,775,781,783,789],{"type":44,"value":758},"可以通过在 ",{"type":24,"tag":202,"props":760,"children":762},{"className":761},[],[763],{"type":44,"value":764},"Cargo.toml",{"type":44,"value":766}," 中加入 ",{"type":24,"tag":202,"props":768,"children":770},{"className":769},[],[771],{"type":44,"value":772},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":774}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":202,"props":776,"children":778},{"className":777},[],[779],{"type":44,"value":780},"Warning",{"type":44,"value":782},", 换成了 ",{"type":24,"tag":202,"props":784,"children":786},{"className":785},[],[787],{"type":44,"value":788},"bail!",{"type":44,"value":790}," 机制。",{"type":24,"tag":310,"props":792,"children":793},{"type":493},[794],{"type":24,"tag":40,"props":795,"children":796},{},[797,802,804,811],{"type":24,"tag":202,"props":798,"children":800},{"className":799},[],[801],{"type":44,"value":788},{"type":44,"value":803}," 宏来自 ",{"type":24,"tag":150,"props":805,"children":808},{"href":806,"rel":807},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[154],[809],{"type":44,"value":810},"anyhow",{"type":44,"value":812}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":814,"children":815},{},[816,818,825,827,833],{"type":44,"value":817},"可以看一下 ",{"type":24,"tag":150,"props":819,"children":822},{"href":820,"rel":821},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[154],[823],{"type":44,"value":824},"fix pr",{"type":44,"value":826},"，非常有意思，比如 ",{"type":24,"tag":202,"props":828,"children":830},{"className":829},[],[831],{"type":44,"value":832},"validate_feature_name",{"type":44,"value":834}," 函数。",{"type":24,"tag":40,"props":836,"children":837},{},[838,840,846,848],{"type":44,"value":839},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":202,"props":841,"children":843},{"className":842},[],[844],{"type":44,"value":845},"warning",{"type":44,"value":847},"，流程继续。",{"type":24,"tag":386,"props":849,"children":850},{},[],{"type":24,"tag":232,"props":852,"children":854},{"code":853},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[855],{"type":24,"tag":202,"props":856,"children":857},{"__ignoreMap":8},[858],{"type":44,"value":853},{"type":24,"tag":310,"props":860,"children":861},{"type":493},[862],{"type":24,"tag":40,"props":863,"children":864},{},[865],{"type":44,"value":866},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":868,"children":869},{},[870,872,877],{"type":44,"value":871},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":202,"props":873,"children":875},{"className":874},[],[876],{"type":44,"value":788},{"type":44,"value":878},"，构建中止，用户必须修正。",{"type":24,"tag":232,"props":880,"children":882},{"code":881}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[883],{"type":24,"tag":202,"props":884,"children":885},{"__ignoreMap":8},[886],{"type":44,"value":881},{"type":24,"tag":40,"props":888,"children":889},{},[890,892,898,900,906],{"type":44,"value":891},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":202,"props":893,"children":895},{"className":894},[],[896],{"type":44,"value":897},"is_ok()",{"type":44,"value":899}," 是合法的，而 ",{"type":24,"tag":202,"props":901,"children":903},{"className":902},[],[904],{"type":44,"value":905},"is_err()",{"type":44,"value":907}," 是不合法的：",{"type":24,"tag":232,"props":909,"children":911},{"code":910}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[912],{"type":24,"tag":202,"props":913,"children":914},{"__ignoreMap":8},[915],{"type":44,"value":910},{"type":24,"tag":57,"props":917,"children":918},{},[],{"type":24,"tag":602,"props":920,"children":922},{"id":921},"cve-2023-41051-1",[923],{"type":44,"value":924},"CVE-2023-41051 1",{"type":24,"tag":609,"props":926,"children":930},{":type":719,"cve":927,"to":928,":cwe":929},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[931],{"type":24,"tag":40,"props":932,"children":933},{},[934],{"type":44,"value":935},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":937,"children":938},{},[939,946,948,954],{"type":24,"tag":150,"props":940,"children":943},{"href":941,"rel":942},"https://github.com/rust-vmm/vm-memory",[154],[944],{"type":44,"value":945},"vm-memory",{"type":44,"value":947}," 的 ",{"type":24,"tag":202,"props":949,"children":951},{"className":950},[],[952],{"type":44,"value":953},"VolatileMemory",{"type":44,"value":955}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":957,"props":958,"children":959},"ol",{},[960,972],{"type":24,"tag":961,"props":962,"children":963},"li",{},[964,970],{"type":24,"tag":202,"props":965,"children":967},{"className":966},[],[968],{"type":44,"value":969},"VolatileMemory::get_slice",{"type":44,"value":971},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":961,"props":973,"children":974},{},[975,981],{"type":24,"tag":202,"props":976,"children":978},{"className":977},[],[979],{"type":44,"value":980},"VolatileMemory::read/write",{"type":44,"value":982},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":984,"children":985},{},[986],{"type":44,"value":987},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":989,"children":990},{},[991,993,999,1001,1007],{"type":44,"value":992},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":202,"props":994,"children":996},{"className":995},[],[997],{"type":44,"value":998},"read/write",{"type":44,"value":1000},"，更多的是 ",{"type":24,"tag":202,"props":1002,"children":1004},{"className":1003},[],[1005],{"type":44,"value":1006},"get_slice",{"type":44,"value":1008}," 方法，例如：",{"type":24,"tag":957,"props":1010,"children":1011},{},[1012,1021,1030,1039,1048],{"type":24,"tag":961,"props":1013,"children":1014},{},[1015],{"type":24,"tag":202,"props":1016,"children":1018},{"className":1017},[],[1019],{"type":44,"value":1020},"get_atomic_ref",{"type":24,"tag":961,"props":1022,"children":1023},{},[1024],{"type":24,"tag":202,"props":1025,"children":1027},{"className":1026},[],[1028],{"type":44,"value":1029},"aligned_as_ref",{"type":24,"tag":961,"props":1031,"children":1032},{},[1033],{"type":24,"tag":202,"props":1034,"children":1036},{"className":1035},[],[1037],{"type":44,"value":1038},"aligned_as_mut",{"type":24,"tag":961,"props":1040,"children":1041},{},[1042],{"type":24,"tag":202,"props":1043,"children":1045},{"className":1044},[],[1046],{"type":44,"value":1047},"get_ref",{"type":24,"tag":961,"props":1049,"children":1050},{},[1051],{"type":24,"tag":202,"props":1052,"children":1054},{"className":1053},[],[1055],{"type":44,"value":1056},"get_array_ref",{"type":24,"tag":40,"props":1058,"children":1059},{},[1060,1062,1068,1070,1076],{"type":44,"value":1061},"上述方法有个共同点，都是利用 ",{"type":24,"tag":202,"props":1063,"children":1065},{"className":1064},[],[1066],{"type":44,"value":1067},"ref",{"type":44,"value":1069}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":202,"props":1071,"children":1073},{"className":1072},[],[1074],{"type":44,"value":1075},"&[T]",{"type":44,"value":1077}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1079,"children":1080},{},[1081],{"type":44,"value":1082},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":957,"props":1084,"children":1085},{},[1086,1091,1096],{"type":24,"tag":961,"props":1087,"children":1088},{},[1089],{"type":44,"value":1090},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":961,"props":1092,"children":1093},{},[1094],{"type":44,"value":1095},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":961,"props":1097,"children":1098},{},[1099],{"type":44,"value":1100},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1102,"children":1103},{},[1104,1106,1112],{"type":44,"value":1105},"仔细欣赏 ",{"type":24,"tag":150,"props":1107,"children":1110},{"href":1108,"rel":1109},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[154],[1111],{"type":44,"value":824},{"type":44,"value":1113}," 你会发现：",{"type":24,"tag":40,"props":1115,"children":1116},{},[1117,1119,1125,1127,1132,1134,1140],{"type":44,"value":1118},"这些方法内部，都会调用 ",{"type":24,"tag":202,"props":1120,"children":1122},{"className":1121},[],[1123],{"type":44,"value":1124},"get_slice(offset, count)",{"type":44,"value":1126}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":202,"props":1128,"children":1130},{"className":1129},[],[1131],{"type":44,"value":1006},{"type":44,"value":1133}," 加上 ",{"type":24,"tag":202,"props":1135,"children":1137},{"className":1136},[],[1138],{"type":44,"value":1139},"assert_eq!",{"type":44,"value":1141}," 就意味着：",{"type":24,"tag":40,"props":1143,"children":1144},{},[1145],{"type":44,"value":1146},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1148,"children":1149},{},[],{"type":24,"tag":602,"props":1151,"children":1153},{"id":1152},"cve-2023-38497-1",[1154],{"type":44,"value":1155},"CVE-2023-38497 1",{"type":24,"tag":609,"props":1157,"children":1162},{":type":1158,"cve":1159,"to":1160,"cwe":1161},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1163,1171],{"type":24,"tag":40,"props":1164,"children":1165},{},[1166,1168],{"type":44,"value":1167},"278: 不安全的保留继承权限",{"type":24,"tag":386,"props":1169,"children":1170},{},[],{"type":24,"tag":1172,"props":1173,"children":1174},"ul",{},[1175],{"type":24,"tag":961,"props":1176,"children":1177},{},[1178],{"type":44,"value":1179},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1181,"children":1182},{},[1183,1185,1192,1194,1200,1202,1207,1209,1214,1216,1222,1224,1230],{"type":44,"value":1184},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":150,"props":1186,"children":1189},{"href":1187,"rel":1188},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[154],[1190],{"type":44,"value":1191},"CVE-2005-1724",{"type":44,"value":1193},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1195,"props":1196,"children":1197},"strong",{},[1198],{"type":44,"value":1199},"权限限制”",{"type":44,"value":1201},"。总的来说 umask 是 ",{"type":24,"tag":1195,"props":1203,"children":1204},{},[1205],{"type":44,"value":1206},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1208},"，可以看看 ",{"type":24,"tag":1210,"props":1211,"children":1212},"sup",{},[1213],{"type":44,"value":719},{"type":44,"value":1215},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":202,"props":1217,"children":1219},{"className":1218},[],[1220],{"type":44,"value":1221},"bash",{"type":44,"value":1223}," 脚本的时候，会使用 ",{"type":24,"tag":202,"props":1225,"children":1227},{"className":1226},[],[1228],{"type":44,"value":1229},"chmod 777",{"type":44,"value":1231},", 要不然运行不了。",{"type":24,"tag":310,"props":1233,"children":1234},{"type":493},[1235,1245,1250,1271,1279],{"type":24,"tag":40,"props":1236,"children":1237},{},[1238,1240],{"type":44,"value":1239},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1195,"props":1241,"children":1242},{},[1243],{"type":44,"value":1244},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1246,"children":1247},{},[1248],{"type":44,"value":1249},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1251,"children":1252},{},[1253,1255,1261,1263,1269],{"type":44,"value":1254},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":202,"props":1256,"children":1258},{"className":1257},[],[1259],{"type":44,"value":1260},"-network",{"type":44,"value":1262}," 和 ",{"type":24,"tag":202,"props":1264,"children":1266},{"className":1265},[],[1267],{"type":44,"value":1268},"-mask",{"type":44,"value":1270},"：",{"type":24,"tag":232,"props":1272,"children":1274},{"code":1273},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1275],{"type":24,"tag":202,"props":1276,"children":1277},{"__ignoreMap":8},[1278],{"type":44,"value":1273},{"type":24,"tag":40,"props":1280,"children":1281},{},[1282],{"type":44,"value":1283},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1285,"children":1286},{},[1287,1289,1294,1296,1302],{"type":44,"value":1288},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1195,"props":1290,"children":1291},{},[1292],{"type":44,"value":1293},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1295},"。而 ",{"type":24,"tag":202,"props":1297,"children":1299},{"className":1298},[],[1300],{"type":44,"value":1301},"umask",{"type":44,"value":1303}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1305,"props":1306,"children":1308},"text-tip",{"type":1307},"big",[1309],{"type":24,"tag":40,"props":1310,"children":1311},{},[1312,1314,1320,1322,1325],{"type":44,"value":1313},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":202,"props":1315,"children":1317},{"className":1316},[],[1318],{"type":44,"value":1319},"777",{"type":44,"value":1321}," 权限构建攻击脚本。",{"type":24,"tag":386,"props":1323,"children":1324},{},[],{"type":44,"value":1326},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1328,"children":1329},{},[1330,1332],{"type":44,"value":1331},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1195,"props":1333,"children":1334},{},[1335],{"type":44,"value":1336},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1338,"children":1339},{},[1340,1342,1348,1350,1356,1358,1363],{"type":44,"value":1341},"在 ",{"type":24,"tag":202,"props":1343,"children":1345},{"className":1344},[],[1346],{"type":44,"value":1347},"src/cargo/util/mod.rs",{"type":44,"value":1349}," 中新增了 ",{"type":24,"tag":202,"props":1351,"children":1353},{"className":1352},[],[1354],{"type":44,"value":1355},"get_umask()",{"type":44,"value":1357}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":202,"props":1359,"children":1361},{"className":1360},[],[1362],{"type":44,"value":1301},{"type":44,"value":1364}," 限制新文件的权限。：",{"type":24,"tag":232,"props":1366,"children":1368},{"code":1367},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1369],{"type":24,"tag":202,"props":1370,"children":1371},{"__ignoreMap":8},[1372],{"type":44,"value":1367},{"type":24,"tag":40,"props":1374,"children":1375},{},[1376],{"type":44,"value":1377},"以及很有艺术性的一行 code:",{"type":24,"tag":232,"props":1379,"children":1381},{"code":1380},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1382],{"type":24,"tag":202,"props":1383,"children":1384},{"__ignoreMap":8},[1385],{"type":44,"value":1380},{"type":24,"tag":40,"props":1387,"children":1388},{},[1389,1391,1397],{"type":44,"value":1390},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":202,"props":1392,"children":1394},{"className":1393},[],[1395],{"type":44,"value":1396},"!umask",{"type":44,"value":1398}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":232,"props":1400,"children":1402},{"code":1401},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1403],{"type":24,"tag":202,"props":1404,"children":1405},{"__ignoreMap":8},[1406],{"type":44,"value":1401},{"type":24,"tag":1408,"props":1409,"children":1412},"div",{"id":1410,"className":1411},"refer-anchor-1",[1067],[1413],{"type":24,"tag":1172,"props":1414,"children":1415},{},[1416],{"type":24,"tag":961,"props":1417,"children":1418},{},[1419,1424,1426],{"type":24,"tag":1420,"props":1421,"children":1422},"span",{},[1423],{"type":44,"value":719},{"type":44,"value":1425}," ",{"type":24,"tag":150,"props":1427,"children":1430},{"href":1428,"rel":1429},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[154],[1431],{"type":44,"value":1428},{"title":8,"searchDepth":112,"depth":112,"links":1433},[1434,1435,1436,1437],{"id":604,"depth":112,"text":607},{"id":713,"depth":112,"text":716},{"id":921,"depth":112,"text":924},{"id":1152,"depth":112,"text":1155},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1755865391630]