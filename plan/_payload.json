[{"data":1,"prerenderedAt":1684},["Reactive",2],{"equalLink":3},[4,119,369,538,793],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-585.15,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":367,"_source":116,"_file":368,"_extension":118},"/plan/programming/cds","programming","cds","2025.08.22","life/plan/cds/1.jpg","封面：This is cds",100,20,"percent",{"type":21,"children":130,"toc":365},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139,169,182,192,205,211,216,240,245,248,262,271,276,352],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/iusx/cdx",[],{"type":24,"tag":40,"props":140,"children":141},{},[142,144,151,153,159,161,167],{"type":44,"value":143},"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":24,"tag":145,"props":146,"children":148},"code",{"className":147},[],[149],{"type":44,"value":150},"cd",{"type":44,"value":152}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":24,"tag":145,"props":154,"children":156},{"className":155},[],[157],{"type":44,"value":158},"nix-shell",{"type":44,"value":160}," > ",{"type":24,"tag":145,"props":162,"children":164},{"className":163},[],[165],{"type":44,"value":166},"nvim .",{"type":44,"value":168}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":24,"tag":40,"props":170,"children":171},{},[172,174,180],{"type":44,"value":173},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":24,"tag":145,"props":175,"children":177},{"className":176},[],[178],{"type":44,"value":179},"zsh",{"type":44,"value":181}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":24,"tag":183,"props":184,"children":186},"text-space",{"type":185},"tip",[187],{"type":24,"tag":40,"props":188,"children":189},{},[190],{"type":44,"value":191},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":24,"tag":40,"props":193,"children":194},{},[195,197,203],{"type":44,"value":196},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":24,"tag":145,"props":198,"children":200},{"className":199},[],[201],{"type":44,"value":202},"~/.cds",{"type":44,"value":204}," 中。",{"type":24,"tag":206,"props":207,"children":210},"text-title",{"t":208,"type":209},"为什么用 nim?","2",[],{"type":24,"tag":135,"props":212,"children":215},{"url":213,"type":214},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":24,"tag":40,"props":217,"children":218},{},[219,221,230,232,238],{"type":44,"value":220},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":24,"tag":222,"props":223,"children":227},"a",{"href":224,"rel":225},"https://learnxinyminutes.com/zh-cn/nim/",[226],"nofollow",[228],{"type":44,"value":229},"Y分钟速成X",{"type":44,"value":231},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":24,"tag":145,"props":233,"children":235},{"className":234},[],[236],{"type":44,"value":237},"or [up-to-date community version]",{"type":44,"value":239}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"type":24,"tag":40,"props":241,"children":242},{},[243],{"type":44,"value":244},"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”",{"type":24,"tag":57,"props":246,"children":247},{},[],{"type":24,"tag":40,"props":249,"children":250},{},[251,253,260],{"type":44,"value":252},"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 ",{"type":24,"tag":222,"props":254,"children":257},{"href":255,"rel":256},"https://github.com/ajeetdsouza/zoxide",[226],[258],{"type":44,"value":259},"zoxide",{"type":44,"value":261}," 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。",{"type":24,"tag":263,"props":264,"children":266},"pre",{"code":265},"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n",[267],{"type":24,"tag":145,"props":268,"children":269},{"__ignoreMap":8},[270],{"type":44,"value":265},{"type":24,"tag":40,"props":272,"children":273},{},[274],{"type":44,"value":275},"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化：",{"type":24,"tag":277,"props":278,"children":281},"ul",{"className":279},[280],"contains-task-list",[282,304,329],{"type":24,"tag":283,"props":284,"children":287},"li",{"className":285},[286],"task-list-item",[288,294,296,302],{"type":24,"tag":289,"props":290,"children":293},"input",{"disabled":291,"type":292},true,"checkbox",[],{"type":44,"value":295}," TUI：例如 ",{"type":24,"tag":145,"props":297,"children":299},{"className":298},[],[300],{"type":44,"value":301},"c list",{"type":44,"value":303}," 时候可以检索快捷方式",{"type":24,"tag":283,"props":305,"children":307},{"className":306},[286],[308,311,313,319,321,327],{"type":24,"tag":289,"props":309,"children":310},{"disabled":291,"type":292},[],{"type":44,"value":312}," 通过 ",{"type":24,"tag":145,"props":314,"children":316},{"className":315},[],[317],{"type":44,"value":318},"c c iusx",{"type":44,"value":320}," 进入到目录之后自动执行记录在 ",{"type":24,"tag":145,"props":322,"children":324},{"className":323},[],[325],{"type":44,"value":326},"~/.cds_config.json",{"type":44,"value":328}," 中的脚本命令",{"type":24,"tag":283,"props":330,"children":332},{"className":331},[286],[333,336,338,344,346],{"type":24,"tag":289,"props":334,"children":335},{"disabled":291,"type":292},[],{"type":44,"value":337}," Auto: 可以自动记录，例如 ",{"type":24,"tag":145,"props":339,"children":341},{"className":340},[],[342],{"type":44,"value":343},"/Users/uwu/Code/My/iusx",{"type":44,"value":345}," 的时候自动记录 ",{"type":24,"tag":145,"props":347,"children":349},{"className":348},[],[350],{"type":44,"value":351},"iusx: /Users/uwu/Code/My/iusx",{"type":24,"tag":40,"props":353,"children":354},{},[355,357,363],{"type":44,"value":356},"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 ",{"type":24,"tag":145,"props":358,"children":360},{"className":359},[],[361],{"type":44,"value":362},"brew install cds",{"type":44,"value":364}," 来进行安装了（貌似应该写一个安装脚本？，。",{"title":8,"searchDepth":112,"depth":112,"links":366},[],"content:plan:programming:cds.md","plan/programming/cds.md",{"_path":370,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":371,"description":8,"director":11,"time":372,"types":13,"img":373,"info":374,"client":16,"target":126,"current":375,"displayType":128,"body":376,"_type":114,"_id":536,"_source":116,"_file":537,"_extension":118},"/plan/programming/command-hide","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",99.99,{"type":21,"children":377,"toc":534},[378],{"type":24,"tag":25,"props":379,"children":380},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[381,385,390,404,412,426,440,443,448,469,482,490],{"type":24,"tag":135,"props":382,"children":384},{"url":383},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":386,"children":389},{"url":387,"type":388},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":391,"children":392},{},[393,395,402],{"type":44,"value":394},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":222,"props":396,"children":399},{"href":397,"rel":398},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[226],[400],{"type":44,"value":401},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":403}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":183,"props":405,"children":406},{"type":185},[407],{"type":24,"tag":40,"props":408,"children":409},{},[410],{"type":44,"value":411},"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。",{"type":24,"tag":40,"props":413,"children":414},{},[415,417,424],{"type":44,"value":416},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":222,"props":418,"children":421},{"href":419,"rel":420},"https://github.com/folke/lazy.nvim",[226],[422],{"type":44,"value":423},"lazy.nvim",{"type":44,"value":425},"。",{"type":24,"tag":40,"props":427,"children":428},{},[429,431,438],{"type":44,"value":430},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":222,"props":432,"children":435},{"href":433,"rel":434},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[226],[436],{"type":44,"value":437},"dragove/nvim/.config/nvim",{"type":44,"value":439}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":441,"children":442},{},[],{"type":24,"tag":40,"props":444,"children":445},{},[446],{"type":44,"value":447},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":449,"children":450},{},[451,453,459,461,467],{"type":44,"value":452},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":145,"props":454,"children":456},{"className":455},[],[457],{"type":44,"value":458},"\u003Ctemplate>\u003C/template>",{"type":44,"value":460}," 中出现了 ",{"type":24,"tag":145,"props":462,"children":464},{"className":463},[],[465],{"type":44,"value":466},"\u003Cp>//\u003C/p>",{"type":44,"value":468}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":470,"children":471},{},[472,474,480],{"type":44,"value":473},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":145,"props":475,"children":477},{"className":476},[],[478],{"type":44,"value":479},"js\\html\\css",{"type":44,"value":481}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":263,"props":483,"children":485},{"code":484},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[486],{"type":24,"tag":145,"props":487,"children":488},{"__ignoreMap":8},[489],{"type":44,"value":484},{"type":24,"tag":40,"props":491,"children":492},{},[493,495,501,503,509,511,517,519,525,526,532],{"type":44,"value":494},"也就是说需要 ",{"type":24,"tag":145,"props":496,"children":498},{"className":497},[],[499],{"type":44,"value":500},"\u003Cscript>",{"type":44,"value":502}," 用 js 的注释, ",{"type":24,"tag":145,"props":504,"children":506},{"className":505},[],[507],{"type":44,"value":508},"\u003Ctemplate>",{"type":44,"value":510}," 用 ",{"type":24,"tag":145,"props":512,"children":514},{"className":513},[],[515],{"type":44,"value":516},"html",{"type":44,"value":518}," 的注释，",{"type":24,"tag":145,"props":520,"children":522},{"className":521},[],[523],{"type":44,"value":524},"style",{"type":44,"value":510},{"type":24,"tag":145,"props":527,"children":529},{"className":528},[],[530],{"type":44,"value":531},"css",{"type":44,"value":533}," 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（可能我成为不了一位优秀的 Coder 是有原因的，很大一部分原因是因为我懒。",{"title":8,"searchDepth":112,"depth":112,"links":535},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":539,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":540,"description":541,"director":11,"time":542,"types":13,"img":543,"info":544,"client":16,"target":126,"current":545,"displayType":128,"body":546,"_type":114,"_id":791,"_source":116,"_file":792,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/plan/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":547,"toc":789},[548],{"type":24,"tag":25,"props":549,"children":550},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[551,554,559,564,569,574,579,584,589,594,597,611,619,624,640,645,659,705,710,715,720,730,735,740,748,753,762,776,784],{"type":24,"tag":35,"props":552,"children":553},{":desc":37},[],{"type":24,"tag":40,"props":555,"children":556},{},[557],{"type":44,"value":558},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":183,"props":560,"children":563},{"img":561,"info":562},"life/plan/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":565,"children":566},{},[567],{"type":44,"value":568},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":570,"children":571},{},[572],{"type":44,"value":573},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":575,"children":576},{},[577],{"type":44,"value":578},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":183,"props":580,"children":583},{"img":581,"info":582},"life/plan/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":585,"children":586},{},[587],{"type":44,"value":588},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":590,"children":591},{},[592],{"type":44,"value":593},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":595,"children":596},{},[],{"type":24,"tag":40,"props":598,"children":599},{},[600,602,609],{"type":44,"value":601},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":222,"props":603,"children":606},{"href":604,"rel":605},"https://en.wikipedia.org/wiki/CSS_hack",[226],[607],{"type":44,"value":608},"CSS Hack",{"type":44,"value":610}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":263,"props":612,"children":614},{"code":613},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[615],{"type":24,"tag":145,"props":616,"children":617},{"__ignoreMap":8},[618],{"type":44,"value":613},{"type":24,"tag":40,"props":620,"children":621},{},[622],{"type":44,"value":623},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":625,"children":628},{"by":626,"topic":627},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[629],{"type":24,"tag":40,"props":630,"children":631},{},[632,634,638],{"type":44,"value":633},"Some of those people dont't do a lot",{"type":24,"tag":635,"props":636,"children":637},"br",{},[],{"type":44,"value":639},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":641,"children":642},{},[643],{"type":44,"value":644},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":646,"children":647},{},[648,650,657],{"type":44,"value":649},"最近在玩 ",{"type":24,"tag":222,"props":651,"children":654},{"href":652,"rel":653},"https://store.steampowered.com/app/2585110/_/",[226],[655],{"type":44,"value":656},"《我在疗养院送人上西天》",{"type":44,"value":658}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":660,"children":663},{"by":661,"topic":662},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[664],{"type":24,"tag":40,"props":665,"children":666},{},[667,669,672,674,677,679,682,684,687,690,692,695,697,700,702],{"type":44,"value":668},"but that's not everybody,",{"type":24,"tag":635,"props":670,"children":671},{},[],{"type":44,"value":673},"\ni care about the thechnology",{"type":24,"tag":635,"props":675,"children":676},{},[],{"type":44,"value":678},"\nthere are people who care about the ui",{"type":24,"tag":635,"props":680,"children":681},{},[],{"type":44,"value":683},"\ni can't do ui to save my life.",{"type":24,"tag":635,"props":685,"children":686},{},[],{"type":24,"tag":635,"props":688,"children":689},{},[],{"type":44,"value":691},"\ni mean, if i was stranded on an island,",{"type":24,"tag":635,"props":693,"children":694},{},[],{"type":44,"value":696},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":635,"props":698,"children":699},{},[],{"type":44,"value":701},"\ni'd die there.",{"type":24,"tag":635,"props":703,"children":704},{},[],{"type":24,"tag":40,"props":706,"children":707},{},[708],{"type":44,"value":709},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":711,"children":712},{},[713],{"type":44,"value":714},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":716,"children":717},{},[718],{"type":44,"value":719},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":721,"children":724},{"by":722,"topic":723},"Wikipedia","Frontend and backend",[725],{"type":24,"tag":40,"props":726,"children":727},{},[728],{"type":44,"value":729},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":731,"children":732},{},[733],{"type":44,"value":734},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":736,"children":737},{},[738],{"type":44,"value":739},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":183,"props":741,"children":742},{"type":185},[743],{"type":24,"tag":40,"props":744,"children":745},{},[746],{"type":44,"value":747},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":749,"children":750},{},[751],{"type":44,"value":752},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":754,"children":755},{},[756],{"type":24,"tag":757,"props":758,"children":759},"del",{},[760],{"type":44,"value":761},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":763,"children":764},{},[765,767,774],{"type":44,"value":766},"可能这个现象可以用 ",{"type":24,"tag":222,"props":768,"children":771},{"href":769,"rel":770},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[226],[772],{"type":44,"value":773},"Dunning–Kruger effect",{"type":44,"value":775}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":777,"children":778},{"by":722,"topic":773},[779],{"type":24,"tag":40,"props":780,"children":781},{},[782],{"type":44,"value":783},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":785,"children":786},{},[787],{"type":44,"value":788},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":790},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":794,"_dir":795,"_draft":7,"_partial":7,"_locale":8,"title":796,"description":8,"director":16,"img":797,"time":798,"plan":799,"target":126,"current":800,"displayType":128,"body":801,"_type":114,"_id":1682,"_source":116,"_file":1683,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",1,{"type":21,"children":802,"toc":1676},[803],{"type":24,"tag":804,"props":805,"children":808},"book-content",{":by":806,":img":28,":plan":807,":title":31},"director","plan",[809,813,818,823,828,833,838,841,848,855,867,907,921,932,954,957,963,978,1000,1037,1059,1081,1097,1105,1113,1125,1133,1154,1162,1165,1171,1182,1202,1228,1233,1254,1302,1323,1328,1346,1359,1387,1392,1395,1401,1424,1476,1528,1548,1571,1581,1609,1617,1622,1630,1643,1651],{"type":24,"tag":206,"props":810,"children":812},{":t":811},"CVE is my dream.",[],{"type":24,"tag":40,"props":814,"children":815},{},[816],{"type":44,"value":817},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":819,"children":820},{},[821],{"type":44,"value":822},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":824,"children":825},{},[826],{"type":44,"value":827},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":829,"children":830},{},[831],{"type":44,"value":832},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":834,"children":835},{},[836],{"type":44,"value":837},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":839,"children":840},{},[],{"type":24,"tag":842,"props":843,"children":845},"h1",{"id":844},"rust-3",[846],{"type":44,"value":847},"rust 3",{"type":24,"tag":849,"props":850,"children":852},"h2",{"id":851},"cve-2022-36114-1",[853],{"type":44,"value":854},"CVE-2022-36114 1",{"type":24,"tag":856,"props":857,"children":861},"cve-info",{":type":209,"cve":858,"to":859,":cwe":860},"CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[862],{"type":24,"tag":40,"props":863,"children":864},{},[865],{"type":44,"value":866},"不受控制的资源消耗",{"type":24,"tag":40,"props":868,"children":869},{},[870,872,879,881,888,890,896,898,905],{"type":44,"value":871},"利用 Cargo 的 ",{"type":24,"tag":222,"props":873,"children":876},{"href":874,"rel":875},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[226],[877],{"type":44,"value":878},"build script",{"type":44,"value":880}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":222,"props":882,"children":885},{"href":883,"rel":884},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[226],[886],{"type":44,"value":887},"procedural macros",{"type":44,"value":889},"，在执行 ",{"type":24,"tag":145,"props":891,"children":893},{"className":892},[],[894],{"type":44,"value":895},"cargo run",{"type":44,"value":897}," 的过程中触发了一个 ",{"type":24,"tag":222,"props":899,"children":902},{"href":900,"rel":901},"https://en.wikipedia.org/wiki/Zip_bomb",[226],[903],{"type":44,"value":904},"Zip Bomb",{"type":44,"value":906}," 行为。",{"type":24,"tag":40,"props":908,"children":909},{},[910,912,919],{"type":44,"value":911},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":222,"props":913,"children":916},{"href":914,"rel":915},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[226],[917],{"type":44,"value":918},"补丁修复",{"type":44,"value":920}," Zip_bomb 的问题:",{"type":24,"tag":263,"props":922,"children":927},{"code":923,"language":924,"meta":8,"className":925},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[926],"language-c",[928],{"type":24,"tag":145,"props":929,"children":930},{"__ignoreMap":8},[931],{"type":44,"value":923},{"type":24,"tag":40,"props":933,"children":934},{},[935,937,943,945,952],{"type":44,"value":936},"同时引入了 ",{"type":24,"tag":145,"props":938,"children":940},{"className":939},[],[941],{"type":44,"value":942},"LimitErrorReader",{"type":44,"value":944},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":222,"props":946,"children":949},{"href":947,"rel":948},"https://crates.io/",[226],[950],{"type":44,"value":951},"crates",{"type":44,"value":953}," 上提交的 crate。",{"type":24,"tag":57,"props":955,"children":956},{},[],{"type":24,"tag":849,"props":958,"children":960},{"id":959},"cve-2023-40030-1",[961],{"type":44,"value":962},"CVE-2023-40030 1",{"type":24,"tag":856,"props":964,"children":969},{":type":965,"cve":966,"to":967,":cwe":968},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[970],{"type":24,"tag":40,"props":971,"children":972},{},[973,975],{"type":44,"value":974},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":635,"props":976,"children":977},{},[],{"type":24,"tag":40,"props":979,"children":980},{},[981,983,989,991,998],{"type":44,"value":982},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":145,"props":984,"children":986},{"className":985},[],[987],{"type":44,"value":988},"cargo build --timings",{"type":44,"value":990}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":222,"props":992,"children":995},{"href":993,"rel":994},"https://doc.rust-lang.org/cargo/reference/timings.html",[226],[996],{"type":44,"value":997},"--timings",{"type":44,"value":999}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":1001,"children":1002},{},[1003,1005,1011,1013,1019,1021,1027,1029,1035],{"type":44,"value":1004},"可以通过在 ",{"type":24,"tag":145,"props":1006,"children":1008},{"className":1007},[],[1009],{"type":44,"value":1010},"Cargo.toml",{"type":44,"value":1012}," 中加入 ",{"type":24,"tag":145,"props":1014,"children":1016},{"className":1015},[],[1017],{"type":44,"value":1018},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":1020}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":145,"props":1022,"children":1024},{"className":1023},[],[1025],{"type":44,"value":1026},"Warning",{"type":44,"value":1028},", 换成了 ",{"type":24,"tag":145,"props":1030,"children":1032},{"className":1031},[],[1033],{"type":44,"value":1034},"bail!",{"type":44,"value":1036}," 机制。",{"type":24,"tag":183,"props":1038,"children":1039},{"type":185},[1040],{"type":24,"tag":40,"props":1041,"children":1042},{},[1043,1048,1050,1057],{"type":24,"tag":145,"props":1044,"children":1046},{"className":1045},[],[1047],{"type":44,"value":1034},{"type":44,"value":1049}," 宏来自 ",{"type":24,"tag":222,"props":1051,"children":1054},{"href":1052,"rel":1053},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[226],[1055],{"type":44,"value":1056},"anyhow",{"type":44,"value":1058}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":1060,"children":1061},{},[1062,1064,1071,1073,1079],{"type":44,"value":1063},"可以看一下 ",{"type":24,"tag":222,"props":1065,"children":1068},{"href":1066,"rel":1067},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[226],[1069],{"type":44,"value":1070},"fix pr",{"type":44,"value":1072},"，非常有意思，比如 ",{"type":24,"tag":145,"props":1074,"children":1076},{"className":1075},[],[1077],{"type":44,"value":1078},"validate_feature_name",{"type":44,"value":1080}," 函数。",{"type":24,"tag":40,"props":1082,"children":1083},{},[1084,1086,1092,1094],{"type":44,"value":1085},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":145,"props":1087,"children":1089},{"className":1088},[],[1090],{"type":44,"value":1091},"warning",{"type":44,"value":1093},"，流程继续。",{"type":24,"tag":635,"props":1095,"children":1096},{},[],{"type":24,"tag":263,"props":1098,"children":1100},{"code":1099},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[1101],{"type":24,"tag":145,"props":1102,"children":1103},{"__ignoreMap":8},[1104],{"type":44,"value":1099},{"type":24,"tag":183,"props":1106,"children":1107},{"type":185},[1108],{"type":24,"tag":40,"props":1109,"children":1110},{},[1111],{"type":44,"value":1112},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":1114,"children":1115},{},[1116,1118,1123],{"type":44,"value":1117},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":145,"props":1119,"children":1121},{"className":1120},[],[1122],{"type":44,"value":1034},{"type":44,"value":1124},"，构建中止，用户必须修正。",{"type":24,"tag":263,"props":1126,"children":1128},{"code":1127}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[1129],{"type":24,"tag":145,"props":1130,"children":1131},{"__ignoreMap":8},[1132],{"type":44,"value":1127},{"type":24,"tag":40,"props":1134,"children":1135},{},[1136,1138,1144,1146,1152],{"type":44,"value":1137},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":145,"props":1139,"children":1141},{"className":1140},[],[1142],{"type":44,"value":1143},"is_ok()",{"type":44,"value":1145}," 是合法的，而 ",{"type":24,"tag":145,"props":1147,"children":1149},{"className":1148},[],[1150],{"type":44,"value":1151},"is_err()",{"type":44,"value":1153}," 是不合法的：",{"type":24,"tag":263,"props":1155,"children":1157},{"code":1156}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[1158],{"type":24,"tag":145,"props":1159,"children":1160},{"__ignoreMap":8},[1161],{"type":44,"value":1156},{"type":24,"tag":57,"props":1163,"children":1164},{},[],{"type":24,"tag":849,"props":1166,"children":1168},{"id":1167},"cve-2023-41051-1",[1169],{"type":44,"value":1170},"CVE-2023-41051 1",{"type":24,"tag":856,"props":1172,"children":1176},{":type":965,"cve":1173,"to":1174,":cwe":1175},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[1177],{"type":24,"tag":40,"props":1178,"children":1179},{},[1180],{"type":44,"value":1181},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":1183,"children":1184},{},[1185,1192,1194,1200],{"type":24,"tag":222,"props":1186,"children":1189},{"href":1187,"rel":1188},"https://github.com/rust-vmm/vm-memory",[226],[1190],{"type":44,"value":1191},"vm-memory",{"type":44,"value":1193}," 的 ",{"type":24,"tag":145,"props":1195,"children":1197},{"className":1196},[],[1198],{"type":44,"value":1199},"VolatileMemory",{"type":44,"value":1201}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":1203,"props":1204,"children":1205},"ol",{},[1206,1217],{"type":24,"tag":283,"props":1207,"children":1208},{},[1209,1215],{"type":24,"tag":145,"props":1210,"children":1212},{"className":1211},[],[1213],{"type":44,"value":1214},"VolatileMemory::get_slice",{"type":44,"value":1216},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":283,"props":1218,"children":1219},{},[1220,1226],{"type":24,"tag":145,"props":1221,"children":1223},{"className":1222},[],[1224],{"type":44,"value":1225},"VolatileMemory::read/write",{"type":44,"value":1227},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":1229,"children":1230},{},[1231],{"type":44,"value":1232},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":1234,"children":1235},{},[1236,1238,1244,1246,1252],{"type":44,"value":1237},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":145,"props":1239,"children":1241},{"className":1240},[],[1242],{"type":44,"value":1243},"read/write",{"type":44,"value":1245},"，更多的是 ",{"type":24,"tag":145,"props":1247,"children":1249},{"className":1248},[],[1250],{"type":44,"value":1251},"get_slice",{"type":44,"value":1253}," 方法，例如：",{"type":24,"tag":1203,"props":1255,"children":1256},{},[1257,1266,1275,1284,1293],{"type":24,"tag":283,"props":1258,"children":1259},{},[1260],{"type":24,"tag":145,"props":1261,"children":1263},{"className":1262},[],[1264],{"type":44,"value":1265},"get_atomic_ref",{"type":24,"tag":283,"props":1267,"children":1268},{},[1269],{"type":24,"tag":145,"props":1270,"children":1272},{"className":1271},[],[1273],{"type":44,"value":1274},"aligned_as_ref",{"type":24,"tag":283,"props":1276,"children":1277},{},[1278],{"type":24,"tag":145,"props":1279,"children":1281},{"className":1280},[],[1282],{"type":44,"value":1283},"aligned_as_mut",{"type":24,"tag":283,"props":1285,"children":1286},{},[1287],{"type":24,"tag":145,"props":1288,"children":1290},{"className":1289},[],[1291],{"type":44,"value":1292},"get_ref",{"type":24,"tag":283,"props":1294,"children":1295},{},[1296],{"type":24,"tag":145,"props":1297,"children":1299},{"className":1298},[],[1300],{"type":44,"value":1301},"get_array_ref",{"type":24,"tag":40,"props":1303,"children":1304},{},[1305,1307,1313,1315,1321],{"type":44,"value":1306},"上述方法有个共同点，都是利用 ",{"type":24,"tag":145,"props":1308,"children":1310},{"className":1309},[],[1311],{"type":44,"value":1312},"ref",{"type":44,"value":1314}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":145,"props":1316,"children":1318},{"className":1317},[],[1319],{"type":44,"value":1320},"&[T]",{"type":44,"value":1322}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1324,"children":1325},{},[1326],{"type":44,"value":1327},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":1203,"props":1329,"children":1330},{},[1331,1336,1341],{"type":24,"tag":283,"props":1332,"children":1333},{},[1334],{"type":44,"value":1335},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":283,"props":1337,"children":1338},{},[1339],{"type":44,"value":1340},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":283,"props":1342,"children":1343},{},[1344],{"type":44,"value":1345},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1347,"children":1348},{},[1349,1351,1357],{"type":44,"value":1350},"仔细欣赏 ",{"type":24,"tag":222,"props":1352,"children":1355},{"href":1353,"rel":1354},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[226],[1356],{"type":44,"value":1070},{"type":44,"value":1358}," 你会发现：",{"type":24,"tag":40,"props":1360,"children":1361},{},[1362,1364,1370,1372,1377,1379,1385],{"type":44,"value":1363},"这些方法内部，都会调用 ",{"type":24,"tag":145,"props":1365,"children":1367},{"className":1366},[],[1368],{"type":44,"value":1369},"get_slice(offset, count)",{"type":44,"value":1371}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":145,"props":1373,"children":1375},{"className":1374},[],[1376],{"type":44,"value":1251},{"type":44,"value":1378}," 加上 ",{"type":24,"tag":145,"props":1380,"children":1382},{"className":1381},[],[1383],{"type":44,"value":1384},"assert_eq!",{"type":44,"value":1386}," 就意味着：",{"type":24,"tag":40,"props":1388,"children":1389},{},[1390],{"type":44,"value":1391},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1393,"children":1394},{},[],{"type":24,"tag":849,"props":1396,"children":1398},{"id":1397},"cve-2023-38497-1",[1399],{"type":44,"value":1400},"CVE-2023-38497 1",{"type":24,"tag":856,"props":1402,"children":1407},{":type":1403,"cve":1404,"to":1405,"cwe":1406},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1408,1416],{"type":24,"tag":40,"props":1409,"children":1410},{},[1411,1413],{"type":44,"value":1412},"278: 不安全的保留继承权限",{"type":24,"tag":635,"props":1414,"children":1415},{},[],{"type":24,"tag":277,"props":1417,"children":1418},{},[1419],{"type":24,"tag":283,"props":1420,"children":1421},{},[1422],{"type":44,"value":1423},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1425,"children":1426},{},[1427,1429,1436,1438,1444,1446,1451,1453,1458,1460,1466,1468,1474],{"type":44,"value":1428},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":222,"props":1430,"children":1433},{"href":1431,"rel":1432},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[226],[1434],{"type":44,"value":1435},"CVE-2005-1724",{"type":44,"value":1437},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1439,"props":1440,"children":1441},"strong",{},[1442],{"type":44,"value":1443},"权限限制”",{"type":44,"value":1445},"。总的来说 umask 是 ",{"type":24,"tag":1439,"props":1447,"children":1448},{},[1449],{"type":44,"value":1450},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1452},"，可以看看 ",{"type":24,"tag":1454,"props":1455,"children":1456},"sup",{},[1457],{"type":44,"value":965},{"type":44,"value":1459},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":145,"props":1461,"children":1463},{"className":1462},[],[1464],{"type":44,"value":1465},"bash",{"type":44,"value":1467}," 脚本的时候，会使用 ",{"type":24,"tag":145,"props":1469,"children":1471},{"className":1470},[],[1472],{"type":44,"value":1473},"chmod 777",{"type":44,"value":1475},", 要不然运行不了。",{"type":24,"tag":183,"props":1477,"children":1478},{"type":185},[1479,1489,1494,1515,1523],{"type":24,"tag":40,"props":1480,"children":1481},{},[1482,1484],{"type":44,"value":1483},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1439,"props":1485,"children":1486},{},[1487],{"type":44,"value":1488},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1490,"children":1491},{},[1492],{"type":44,"value":1493},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1495,"children":1496},{},[1497,1499,1505,1507,1513],{"type":44,"value":1498},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":145,"props":1500,"children":1502},{"className":1501},[],[1503],{"type":44,"value":1504},"-network",{"type":44,"value":1506}," 和 ",{"type":24,"tag":145,"props":1508,"children":1510},{"className":1509},[],[1511],{"type":44,"value":1512},"-mask",{"type":44,"value":1514},"：",{"type":24,"tag":263,"props":1516,"children":1518},{"code":1517},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1519],{"type":24,"tag":145,"props":1520,"children":1521},{"__ignoreMap":8},[1522],{"type":44,"value":1517},{"type":24,"tag":40,"props":1524,"children":1525},{},[1526],{"type":44,"value":1527},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1529,"children":1530},{},[1531,1533,1538,1540,1546],{"type":44,"value":1532},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1439,"props":1534,"children":1535},{},[1536],{"type":44,"value":1537},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1539},"。而 ",{"type":24,"tag":145,"props":1541,"children":1543},{"className":1542},[],[1544],{"type":44,"value":1545},"umask",{"type":44,"value":1547}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1549,"props":1550,"children":1552},"text-tip",{"type":1551},"big",[1553],{"type":24,"tag":40,"props":1554,"children":1555},{},[1556,1558,1564,1566,1569],{"type":44,"value":1557},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":145,"props":1559,"children":1561},{"className":1560},[],[1562],{"type":44,"value":1563},"777",{"type":44,"value":1565}," 权限构建攻击脚本。",{"type":24,"tag":635,"props":1567,"children":1568},{},[],{"type":44,"value":1570},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1572,"children":1573},{},[1574,1576],{"type":44,"value":1575},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1439,"props":1577,"children":1578},{},[1579],{"type":44,"value":1580},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1582,"children":1583},{},[1584,1586,1592,1594,1600,1602,1607],{"type":44,"value":1585},"在 ",{"type":24,"tag":145,"props":1587,"children":1589},{"className":1588},[],[1590],{"type":44,"value":1591},"src/cargo/util/mod.rs",{"type":44,"value":1593}," 中新增了 ",{"type":24,"tag":145,"props":1595,"children":1597},{"className":1596},[],[1598],{"type":44,"value":1599},"get_umask()",{"type":44,"value":1601}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":145,"props":1603,"children":1605},{"className":1604},[],[1606],{"type":44,"value":1545},{"type":44,"value":1608}," 限制新文件的权限。：",{"type":24,"tag":263,"props":1610,"children":1612},{"code":1611},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1613],{"type":24,"tag":145,"props":1614,"children":1615},{"__ignoreMap":8},[1616],{"type":44,"value":1611},{"type":24,"tag":40,"props":1618,"children":1619},{},[1620],{"type":44,"value":1621},"以及很有艺术性的一行 code:",{"type":24,"tag":263,"props":1623,"children":1625},{"code":1624},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1626],{"type":24,"tag":145,"props":1627,"children":1628},{"__ignoreMap":8},[1629],{"type":44,"value":1624},{"type":24,"tag":40,"props":1631,"children":1632},{},[1633,1635,1641],{"type":44,"value":1634},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":145,"props":1636,"children":1638},{"className":1637},[],[1639],{"type":44,"value":1640},"!umask",{"type":44,"value":1642}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":263,"props":1644,"children":1646},{"code":1645},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1647],{"type":24,"tag":145,"props":1648,"children":1649},{"__ignoreMap":8},[1650],{"type":44,"value":1645},{"type":24,"tag":1652,"props":1653,"children":1656},"div",{"id":1654,"className":1655},"refer-anchor-1",[1312],[1657],{"type":24,"tag":277,"props":1658,"children":1659},{},[1660],{"type":24,"tag":283,"props":1661,"children":1662},{},[1663,1668,1670],{"type":24,"tag":1664,"props":1665,"children":1666},"span",{},[1667],{"type":44,"value":965},{"type":44,"value":1669}," ",{"type":24,"tag":222,"props":1671,"children":1674},{"href":1672,"rel":1673},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[226],[1675],{"type":44,"value":1672},{"title":8,"searchDepth":112,"depth":112,"links":1677},[1678,1679,1680,1681],{"id":851,"depth":112,"text":854},{"id":959,"depth":112,"text":962},{"id":1167,"depth":112,"text":1170},{"id":1397,"depth":112,"text":1400},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1756735567368]