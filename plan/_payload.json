[{"data":1,"prerenderedAt":1296},["Reactive",2],{"equalLink":3},[4,119,141,401],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"progress":18,"barClass":8,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",100,0,"percent",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":17,"current":126,"progress":17,"barClass":8,"displayType":19,"body":127,"_type":114,"_id":139,"_source":116,"_file":140,"_extension":118},"/plan/programming/command-hide","programming","command-hide","2025.07.06","des/01/hide.jpg","封面：command-hide.vscode version",99,{"type":21,"children":128,"toc":137},[129],{"type":24,"tag":25,"props":130,"children":131},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[132],{"type":24,"tag":133,"props":134,"children":136},"git-info",{"url":135},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"title":8,"searchDepth":112,"depth":112,"links":138},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":142,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":143,"description":144,"director":11,"time":123,"types":13,"img":145,"info":146,"client":16,"target":17,"current":147,"progress":18,"barClass":8,"displayType":19,"body":148,"_type":114,"_id":399,"_source":116,"_file":400,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","life/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":149,"toc":397},[150],{"type":24,"tag":25,"props":151,"children":152},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[153,156,161,167,172,177,182,187,192,197,200,216,226,231,247,252,266,312,317,322,327,337,342,347,356,361,370,384,392],{"type":24,"tag":35,"props":154,"children":155},{":desc":37},[],{"type":24,"tag":40,"props":157,"children":158},{},[159],{"type":44,"value":160},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":162,"props":163,"children":166},"text-space",{"img":164,"info":165},"life/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":168,"children":169},{},[170],{"type":44,"value":171},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":173,"children":174},{},[175],{"type":44,"value":176},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":178,"children":179},{},[180],{"type":44,"value":181},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":162,"props":183,"children":186},{"img":184,"info":185},"life/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":188,"children":189},{},[190],{"type":44,"value":191},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":193,"children":194},{},[195],{"type":44,"value":196},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":198,"children":199},{},[],{"type":24,"tag":40,"props":201,"children":202},{},[203,205,214],{"type":44,"value":204},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":206,"props":207,"children":211},"a",{"href":208,"rel":209},"https://en.wikipedia.org/wiki/CSS_hack",[210],"nofollow",[212],{"type":44,"value":213},"CSS Hack",{"type":44,"value":215}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":217,"props":218,"children":220},"pre",{"code":219},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[221],{"type":24,"tag":222,"props":223,"children":224},"code",{"__ignoreMap":8},[225],{"type":44,"value":219},{"type":24,"tag":40,"props":227,"children":228},{},[229],{"type":44,"value":230},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":232,"children":235},{"by":233,"topic":234},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[236],{"type":24,"tag":40,"props":237,"children":238},{},[239,241,245],{"type":44,"value":240},"Some of those people dont't do a lot",{"type":24,"tag":242,"props":243,"children":244},"br",{},[],{"type":44,"value":246},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":248,"children":249},{},[250],{"type":44,"value":251},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":253,"children":254},{},[255,257,264],{"type":44,"value":256},"最近在玩 ",{"type":24,"tag":206,"props":258,"children":261},{"href":259,"rel":260},"https://store.steampowered.com/app/2585110/_/",[210],[262],{"type":44,"value":263},"《我在疗养院送人上西天》",{"type":44,"value":265}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":267,"children":270},{"by":268,"topic":269},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[271],{"type":24,"tag":40,"props":272,"children":273},{},[274,276,279,281,284,286,289,291,294,297,299,302,304,307,309],{"type":44,"value":275},"but that's not everybody,",{"type":24,"tag":242,"props":277,"children":278},{},[],{"type":44,"value":280},"\ni care about the thechnology",{"type":24,"tag":242,"props":282,"children":283},{},[],{"type":44,"value":285},"\nthere are people who care about the ui",{"type":24,"tag":242,"props":287,"children":288},{},[],{"type":44,"value":290},"\ni can't do ui to save my life.",{"type":24,"tag":242,"props":292,"children":293},{},[],{"type":24,"tag":242,"props":295,"children":296},{},[],{"type":44,"value":298},"\ni mean, if i was stranded on an island,",{"type":24,"tag":242,"props":300,"children":301},{},[],{"type":44,"value":303},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":242,"props":305,"children":306},{},[],{"type":44,"value":308},"\ni'd die there.",{"type":24,"tag":242,"props":310,"children":311},{},[],{"type":24,"tag":40,"props":313,"children":314},{},[315],{"type":44,"value":316},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":318,"children":319},{},[320],{"type":44,"value":321},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":323,"children":324},{},[325],{"type":44,"value":326},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":328,"children":331},{"by":329,"topic":330},"Wikipedia","Frontend and backend",[332],{"type":24,"tag":40,"props":333,"children":334},{},[335],{"type":44,"value":336},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":338,"children":339},{},[340],{"type":44,"value":341},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":343,"children":344},{},[345],{"type":44,"value":346},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":162,"props":348,"children":350},{"type":349},"tip",[351],{"type":24,"tag":40,"props":352,"children":353},{},[354],{"type":44,"value":355},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":357,"children":358},{},[359],{"type":44,"value":360},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":362,"children":363},{},[364],{"type":24,"tag":365,"props":366,"children":367},"del",{},[368],{"type":44,"value":369},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":371,"children":372},{},[373,375,382],{"type":44,"value":374},"可能这个现象可以用 ",{"type":24,"tag":206,"props":376,"children":379},{"href":377,"rel":378},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[210],[380],{"type":44,"value":381},"Dunning–Kruger effect",{"type":44,"value":383}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":385,"children":386},{"by":329,"topic":381},[387],{"type":24,"tag":40,"props":388,"children":389},{},[390],{"type":44,"value":391},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":393,"children":394},{},[395],{"type":44,"value":396},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":398},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":402,"_dir":403,"_draft":7,"_partial":7,"_locale":8,"title":404,"description":8,"director":16,"time":405,"img":406,"plan":407,"target":17,"current":408,"progress":18,"barClass":8,"displayType":19,"body":409,"_type":114,"_id":1294,"_source":116,"_file":1295,"_extension":118},"/plan/security/cve-learn","security","CVE learn","2025","14/1.png","100,100",1,{"type":21,"children":410,"toc":1288},[411],{"type":24,"tag":412,"props":413,"children":416},"book-content",{":by":414,":img":28,":plan":415,":title":31},"director","plan",[417,422,427,432,437,442,447,450,457,464,477,517,531,542,564,567,573,588,610,647,669,691,707,715,723,735,743,764,772,775,781,792,812,839,844,865,913,934,939,957,970,998,1003,1006,1012,1036,1088,1140,1160,1183,1193,1221,1229,1234,1242,1255,1263],{"type":24,"tag":418,"props":419,"children":421},"text-title",{":t":420},"CVE is my dream.",[],{"type":24,"tag":40,"props":423,"children":424},{},[425],{"type":44,"value":426},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":428,"children":429},{},[430],{"type":44,"value":431},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":433,"children":434},{},[435],{"type":44,"value":436},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":438,"children":439},{},[440],{"type":44,"value":441},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":443,"children":444},{},[445],{"type":44,"value":446},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":448,"children":449},{},[],{"type":24,"tag":451,"props":452,"children":454},"h1",{"id":453},"rust-3",[455],{"type":44,"value":456},"rust 3",{"type":24,"tag":458,"props":459,"children":461},"h2",{"id":460},"cve-2022-36114-1",[462],{"type":44,"value":463},"CVE-2022-36114 1",{"type":24,"tag":465,"props":466,"children":471},"cve-info",{":type":467,"cve":468,"to":469,":cwe":470},"2","CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[472],{"type":24,"tag":40,"props":473,"children":474},{},[475],{"type":44,"value":476},"不受控制的资源消耗",{"type":24,"tag":40,"props":478,"children":479},{},[480,482,489,491,498,500,506,508,515],{"type":44,"value":481},"利用 Cargo 的 ",{"type":24,"tag":206,"props":483,"children":486},{"href":484,"rel":485},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[210],[487],{"type":44,"value":488},"build script",{"type":44,"value":490}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":206,"props":492,"children":495},{"href":493,"rel":494},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[210],[496],{"type":44,"value":497},"procedural macros",{"type":44,"value":499},"，在执行 ",{"type":24,"tag":222,"props":501,"children":503},{"className":502},[],[504],{"type":44,"value":505},"cargo run",{"type":44,"value":507}," 的过程中触发了一个 ",{"type":24,"tag":206,"props":509,"children":512},{"href":510,"rel":511},"https://en.wikipedia.org/wiki/Zip_bomb",[210],[513],{"type":44,"value":514},"Zip Bomb",{"type":44,"value":516}," 行为。",{"type":24,"tag":40,"props":518,"children":519},{},[520,522,529],{"type":44,"value":521},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":206,"props":523,"children":526},{"href":524,"rel":525},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[210],[527],{"type":44,"value":528},"补丁修复",{"type":44,"value":530}," Zip_bomb 的问题:",{"type":24,"tag":217,"props":532,"children":537},{"code":533,"language":534,"meta":8,"className":535},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[536],"language-c",[538],{"type":24,"tag":222,"props":539,"children":540},{"__ignoreMap":8},[541],{"type":44,"value":533},{"type":24,"tag":40,"props":543,"children":544},{},[545,547,553,555,562],{"type":44,"value":546},"同时引入了 ",{"type":24,"tag":222,"props":548,"children":550},{"className":549},[],[551],{"type":44,"value":552},"LimitErrorReader",{"type":44,"value":554},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":206,"props":556,"children":559},{"href":557,"rel":558},"https://crates.io/",[210],[560],{"type":44,"value":561},"crates",{"type":44,"value":563}," 上提交的 crate。",{"type":24,"tag":57,"props":565,"children":566},{},[],{"type":24,"tag":458,"props":568,"children":570},{"id":569},"cve-2023-40030-1",[571],{"type":44,"value":572},"CVE-2023-40030 1",{"type":24,"tag":465,"props":574,"children":579},{":type":575,"cve":576,"to":577,":cwe":578},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[580],{"type":24,"tag":40,"props":581,"children":582},{},[583,585],{"type":44,"value":584},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":242,"props":586,"children":587},{},[],{"type":24,"tag":40,"props":589,"children":590},{},[591,593,599,601,608],{"type":44,"value":592},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":222,"props":594,"children":596},{"className":595},[],[597],{"type":44,"value":598},"cargo build --timings",{"type":44,"value":600}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":206,"props":602,"children":605},{"href":603,"rel":604},"https://doc.rust-lang.org/cargo/reference/timings.html",[210],[606],{"type":44,"value":607},"--timings",{"type":44,"value":609}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":611,"children":612},{},[613,615,621,623,629,631,637,639,645],{"type":44,"value":614},"可以通过在 ",{"type":24,"tag":222,"props":616,"children":618},{"className":617},[],[619],{"type":44,"value":620},"Cargo.toml",{"type":44,"value":622}," 中加入 ",{"type":24,"tag":222,"props":624,"children":626},{"className":625},[],[627],{"type":44,"value":628},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":630}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":222,"props":632,"children":634},{"className":633},[],[635],{"type":44,"value":636},"Warning",{"type":44,"value":638},", 换成了 ",{"type":24,"tag":222,"props":640,"children":642},{"className":641},[],[643],{"type":44,"value":644},"bail!",{"type":44,"value":646}," 机制。",{"type":24,"tag":162,"props":648,"children":649},{"type":349},[650],{"type":24,"tag":40,"props":651,"children":652},{},[653,658,660,667],{"type":24,"tag":222,"props":654,"children":656},{"className":655},[],[657],{"type":44,"value":644},{"type":44,"value":659}," 宏来自 ",{"type":24,"tag":206,"props":661,"children":664},{"href":662,"rel":663},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[210],[665],{"type":44,"value":666},"anyhow",{"type":44,"value":668}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":670,"children":671},{},[672,674,681,683,689],{"type":44,"value":673},"可以看一下 ",{"type":24,"tag":206,"props":675,"children":678},{"href":676,"rel":677},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[210],[679],{"type":44,"value":680},"fix pr",{"type":44,"value":682},"，非常有意思，比如 ",{"type":24,"tag":222,"props":684,"children":686},{"className":685},[],[687],{"type":44,"value":688},"validate_feature_name",{"type":44,"value":690}," 函数。",{"type":24,"tag":40,"props":692,"children":693},{},[694,696,702,704],{"type":44,"value":695},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":222,"props":697,"children":699},{"className":698},[],[700],{"type":44,"value":701},"warning",{"type":44,"value":703},"，流程继续。",{"type":24,"tag":242,"props":705,"children":706},{},[],{"type":24,"tag":217,"props":708,"children":710},{"code":709},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[711],{"type":24,"tag":222,"props":712,"children":713},{"__ignoreMap":8},[714],{"type":44,"value":709},{"type":24,"tag":162,"props":716,"children":717},{"type":349},[718],{"type":24,"tag":40,"props":719,"children":720},{},[721],{"type":44,"value":722},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":724,"children":725},{},[726,728,733],{"type":44,"value":727},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":222,"props":729,"children":731},{"className":730},[],[732],{"type":44,"value":644},{"type":44,"value":734},"，构建中止，用户必须修正。",{"type":24,"tag":217,"props":736,"children":738},{"code":737}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[739],{"type":24,"tag":222,"props":740,"children":741},{"__ignoreMap":8},[742],{"type":44,"value":737},{"type":24,"tag":40,"props":744,"children":745},{},[746,748,754,756,762],{"type":44,"value":747},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":222,"props":749,"children":751},{"className":750},[],[752],{"type":44,"value":753},"is_ok()",{"type":44,"value":755}," 是合法的，而 ",{"type":24,"tag":222,"props":757,"children":759},{"className":758},[],[760],{"type":44,"value":761},"is_err()",{"type":44,"value":763}," 是不合法的：",{"type":24,"tag":217,"props":765,"children":767},{"code":766}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[768],{"type":24,"tag":222,"props":769,"children":770},{"__ignoreMap":8},[771],{"type":44,"value":766},{"type":24,"tag":57,"props":773,"children":774},{},[],{"type":24,"tag":458,"props":776,"children":778},{"id":777},"cve-2023-41051-1",[779],{"type":44,"value":780},"CVE-2023-41051 1",{"type":24,"tag":465,"props":782,"children":786},{":type":575,"cve":783,"to":784,":cwe":785},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[787],{"type":24,"tag":40,"props":788,"children":789},{},[790],{"type":44,"value":791},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":793,"children":794},{},[795,802,804,810],{"type":24,"tag":206,"props":796,"children":799},{"href":797,"rel":798},"https://github.com/rust-vmm/vm-memory",[210],[800],{"type":44,"value":801},"vm-memory",{"type":44,"value":803}," 的 ",{"type":24,"tag":222,"props":805,"children":807},{"className":806},[],[808],{"type":44,"value":809},"VolatileMemory",{"type":44,"value":811}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":813,"props":814,"children":815},"ol",{},[816,828],{"type":24,"tag":817,"props":818,"children":819},"li",{},[820,826],{"type":24,"tag":222,"props":821,"children":823},{"className":822},[],[824],{"type":44,"value":825},"VolatileMemory::get_slice",{"type":44,"value":827},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":817,"props":829,"children":830},{},[831,837],{"type":24,"tag":222,"props":832,"children":834},{"className":833},[],[835],{"type":44,"value":836},"VolatileMemory::read/write",{"type":44,"value":838},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":840,"children":841},{},[842],{"type":44,"value":843},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":845,"children":846},{},[847,849,855,857,863],{"type":44,"value":848},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":222,"props":850,"children":852},{"className":851},[],[853],{"type":44,"value":854},"read/write",{"type":44,"value":856},"，更多的是 ",{"type":24,"tag":222,"props":858,"children":860},{"className":859},[],[861],{"type":44,"value":862},"get_slice",{"type":44,"value":864}," 方法，例如：",{"type":24,"tag":813,"props":866,"children":867},{},[868,877,886,895,904],{"type":24,"tag":817,"props":869,"children":870},{},[871],{"type":24,"tag":222,"props":872,"children":874},{"className":873},[],[875],{"type":44,"value":876},"get_atomic_ref",{"type":24,"tag":817,"props":878,"children":879},{},[880],{"type":24,"tag":222,"props":881,"children":883},{"className":882},[],[884],{"type":44,"value":885},"aligned_as_ref",{"type":24,"tag":817,"props":887,"children":888},{},[889],{"type":24,"tag":222,"props":890,"children":892},{"className":891},[],[893],{"type":44,"value":894},"aligned_as_mut",{"type":24,"tag":817,"props":896,"children":897},{},[898],{"type":24,"tag":222,"props":899,"children":901},{"className":900},[],[902],{"type":44,"value":903},"get_ref",{"type":24,"tag":817,"props":905,"children":906},{},[907],{"type":24,"tag":222,"props":908,"children":910},{"className":909},[],[911],{"type":44,"value":912},"get_array_ref",{"type":24,"tag":40,"props":914,"children":915},{},[916,918,924,926,932],{"type":44,"value":917},"上述方法有个共同点，都是利用 ",{"type":24,"tag":222,"props":919,"children":921},{"className":920},[],[922],{"type":44,"value":923},"ref",{"type":44,"value":925}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":222,"props":927,"children":929},{"className":928},[],[930],{"type":44,"value":931},"&[T]",{"type":44,"value":933}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":935,"children":936},{},[937],{"type":44,"value":938},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":813,"props":940,"children":941},{},[942,947,952],{"type":24,"tag":817,"props":943,"children":944},{},[945],{"type":44,"value":946},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":817,"props":948,"children":949},{},[950],{"type":44,"value":951},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":817,"props":953,"children":954},{},[955],{"type":44,"value":956},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":958,"children":959},{},[960,962,968],{"type":44,"value":961},"仔细欣赏 ",{"type":24,"tag":206,"props":963,"children":966},{"href":964,"rel":965},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[210],[967],{"type":44,"value":680},{"type":44,"value":969}," 你会发现：",{"type":24,"tag":40,"props":971,"children":972},{},[973,975,981,983,988,990,996],{"type":44,"value":974},"这些方法内部，都会调用 ",{"type":24,"tag":222,"props":976,"children":978},{"className":977},[],[979],{"type":44,"value":980},"get_slice(offset, count)",{"type":44,"value":982}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":222,"props":984,"children":986},{"className":985},[],[987],{"type":44,"value":862},{"type":44,"value":989}," 加上 ",{"type":24,"tag":222,"props":991,"children":993},{"className":992},[],[994],{"type":44,"value":995},"assert_eq!",{"type":44,"value":997}," 就意味着：",{"type":24,"tag":40,"props":999,"children":1000},{},[1001],{"type":44,"value":1002},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1004,"children":1005},{},[],{"type":24,"tag":458,"props":1007,"children":1009},{"id":1008},"cve-2023-38497-1",[1010],{"type":44,"value":1011},"CVE-2023-38497 1",{"type":24,"tag":465,"props":1013,"children":1018},{":type":1014,"cve":1015,"to":1016,"cwe":1017},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1019,1027],{"type":24,"tag":40,"props":1020,"children":1021},{},[1022,1024],{"type":44,"value":1023},"278: 不安全的保留继承权限",{"type":24,"tag":242,"props":1025,"children":1026},{},[],{"type":24,"tag":1028,"props":1029,"children":1030},"ul",{},[1031],{"type":24,"tag":817,"props":1032,"children":1033},{},[1034],{"type":44,"value":1035},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1037,"children":1038},{},[1039,1041,1048,1050,1056,1058,1063,1065,1070,1072,1078,1080,1086],{"type":44,"value":1040},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":206,"props":1042,"children":1045},{"href":1043,"rel":1044},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[210],[1046],{"type":44,"value":1047},"CVE-2005-1724",{"type":44,"value":1049},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1051,"props":1052,"children":1053},"strong",{},[1054],{"type":44,"value":1055},"权限限制”",{"type":44,"value":1057},"。总的来说 umask 是 ",{"type":24,"tag":1051,"props":1059,"children":1060},{},[1061],{"type":44,"value":1062},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1064},"，可以看看 ",{"type":24,"tag":1066,"props":1067,"children":1068},"sup",{},[1069],{"type":44,"value":575},{"type":44,"value":1071},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":222,"props":1073,"children":1075},{"className":1074},[],[1076],{"type":44,"value":1077},"bash",{"type":44,"value":1079}," 脚本的时候，会使用 ",{"type":24,"tag":222,"props":1081,"children":1083},{"className":1082},[],[1084],{"type":44,"value":1085},"chmod 777",{"type":44,"value":1087},", 要不然运行不了。",{"type":24,"tag":162,"props":1089,"children":1090},{"type":349},[1091,1101,1106,1127,1135],{"type":24,"tag":40,"props":1092,"children":1093},{},[1094,1096],{"type":44,"value":1095},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1051,"props":1097,"children":1098},{},[1099],{"type":44,"value":1100},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1102,"children":1103},{},[1104],{"type":44,"value":1105},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1107,"children":1108},{},[1109,1111,1117,1119,1125],{"type":44,"value":1110},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":222,"props":1112,"children":1114},{"className":1113},[],[1115],{"type":44,"value":1116},"-network",{"type":44,"value":1118}," 和 ",{"type":24,"tag":222,"props":1120,"children":1122},{"className":1121},[],[1123],{"type":44,"value":1124},"-mask",{"type":44,"value":1126},"：",{"type":24,"tag":217,"props":1128,"children":1130},{"code":1129},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1131],{"type":24,"tag":222,"props":1132,"children":1133},{"__ignoreMap":8},[1134],{"type":44,"value":1129},{"type":24,"tag":40,"props":1136,"children":1137},{},[1138],{"type":44,"value":1139},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1141,"children":1142},{},[1143,1145,1150,1152,1158],{"type":44,"value":1144},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1051,"props":1146,"children":1147},{},[1148],{"type":44,"value":1149},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1151},"。而 ",{"type":24,"tag":222,"props":1153,"children":1155},{"className":1154},[],[1156],{"type":44,"value":1157},"umask",{"type":44,"value":1159}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1161,"props":1162,"children":1164},"text-tip",{"type":1163},"big",[1165],{"type":24,"tag":40,"props":1166,"children":1167},{},[1168,1170,1176,1178,1181],{"type":44,"value":1169},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":222,"props":1171,"children":1173},{"className":1172},[],[1174],{"type":44,"value":1175},"777",{"type":44,"value":1177}," 权限构建攻击脚本。",{"type":24,"tag":242,"props":1179,"children":1180},{},[],{"type":44,"value":1182},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1184,"children":1185},{},[1186,1188],{"type":44,"value":1187},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1051,"props":1189,"children":1190},{},[1191],{"type":44,"value":1192},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1194,"children":1195},{},[1196,1198,1204,1206,1212,1214,1219],{"type":44,"value":1197},"在 ",{"type":24,"tag":222,"props":1199,"children":1201},{"className":1200},[],[1202],{"type":44,"value":1203},"src/cargo/util/mod.rs",{"type":44,"value":1205}," 中新增了 ",{"type":24,"tag":222,"props":1207,"children":1209},{"className":1208},[],[1210],{"type":44,"value":1211},"get_umask()",{"type":44,"value":1213}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":222,"props":1215,"children":1217},{"className":1216},[],[1218],{"type":44,"value":1157},{"type":44,"value":1220}," 限制新文件的权限。：",{"type":24,"tag":217,"props":1222,"children":1224},{"code":1223},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1225],{"type":24,"tag":222,"props":1226,"children":1227},{"__ignoreMap":8},[1228],{"type":44,"value":1223},{"type":24,"tag":40,"props":1230,"children":1231},{},[1232],{"type":44,"value":1233},"以及很有艺术性的一行 code:",{"type":24,"tag":217,"props":1235,"children":1237},{"code":1236},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1238],{"type":24,"tag":222,"props":1239,"children":1240},{"__ignoreMap":8},[1241],{"type":44,"value":1236},{"type":24,"tag":40,"props":1243,"children":1244},{},[1245,1247,1253],{"type":44,"value":1246},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":222,"props":1248,"children":1250},{"className":1249},[],[1251],{"type":44,"value":1252},"!umask",{"type":44,"value":1254}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":217,"props":1256,"children":1258},{"code":1257},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1259],{"type":24,"tag":222,"props":1260,"children":1261},{"__ignoreMap":8},[1262],{"type":44,"value":1257},{"type":24,"tag":1264,"props":1265,"children":1268},"div",{"id":1266,"className":1267},"refer-anchor-1",[923],[1269],{"type":24,"tag":1028,"props":1270,"children":1271},{},[1272],{"type":24,"tag":817,"props":1273,"children":1274},{},[1275,1280,1282],{"type":24,"tag":1276,"props":1277,"children":1278},"span",{},[1279],{"type":44,"value":575},{"type":44,"value":1281}," ",{"type":24,"tag":206,"props":1283,"children":1286},{"href":1284,"rel":1285},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[210],[1287],{"type":44,"value":1284},{"title":8,"searchDepth":112,"depth":112,"links":1289},[1290,1291,1292,1293],{"id":460,"depth":112,"text":463},{"id":569,"depth":112,"text":572},{"id":777,"depth":112,"text":780},{"id":1008,"depth":112,"text":1011},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1755797085243]