[{"data":1,"prerenderedAt":1530},["Reactive",2],{"equalLink":3},[4,119,209,381,636],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"director":11,"time":12,"types":13,"img":14,"info":15,"client":16,"target":17,"current":18,"displayType":19,"body":20,"_type":114,"_id":115,"_source":116,"_file":117,"_extension":118},"/plan/life/pay-hongkong-style-room","life",false,"","Hongkong style room","作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","ritsu","2025.08.20","cc","life/plan/room/1.jpg","封面：正在安装 Arch linux","My",13926.8,-529.22,"usd",{"type":21,"children":22,"toc":111},"root",[23],{"type":24,"tag":25,"props":26,"children":33},"element","main-content",{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},"client","img","info","time","title","types",[34,39,46,51,56,60,65,70,75,80,85,90,95,106],{"type":24,"tag":35,"props":36,"children":38},"text-sum",{":desc":37},"description",[],{"type":24,"tag":40,"props":41,"children":42},"p",{},[43],{"type":44,"value":45},"text","自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。",{"type":24,"tag":40,"props":47,"children":48},{},[49],{"type":44,"value":50},"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）",{"type":24,"tag":40,"props":52,"children":53},{},[54],{"type":44,"value":55},"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。",{"type":24,"tag":57,"props":58,"children":59},"hr",{},[],{"type":24,"tag":40,"props":61,"children":62},{},[63],{"type":44,"value":64},"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）",{"type":24,"tag":40,"props":66,"children":67},{},[68],{"type":44,"value":69},"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。",{"type":24,"tag":40,"props":71,"children":72},{},[73],{"type":44,"value":74},"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）",{"type":24,"tag":40,"props":76,"children":77},{},[78],{"type":44,"value":79},"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。",{"type":24,"tag":40,"props":81,"children":82},{},[83],{"type":44,"value":84},"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。",{"type":24,"tag":40,"props":86,"children":87},{},[88],{"type":44,"value":89},"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。",{"type":24,"tag":40,"props":91,"children":92},{},[93],{"type":44,"value":94},"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即：",{"type":24,"tag":96,"props":97,"children":100},"wise-info",{"by":98,"topic":99},"马卡姆","捞钱的必要因素",[101],{"type":24,"tag":40,"props":102,"children":103},{},[104],{"type":44,"value":105},"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁",{"type":24,"tag":40,"props":107,"children":108},{},[109],{"type":44,"value":110},"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。",{"title":8,"searchDepth":112,"depth":112,"links":113},2,[],"markdown","content:plan:life:pay-hongkong-style-room.md","content","plan/life/pay-hongkong-style-room.md","md",{"_path":120,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":122,"description":8,"director":11,"time":123,"types":13,"img":124,"info":125,"client":16,"target":126,"current":127,"displayType":128,"body":129,"_type":114,"_id":207,"_source":116,"_file":208,"_extension":118},"/plan/programming/cds","programming","cds","2025.08.22","life/plan/cds/1.jpg","封面：This is cds",100,1,"percent",{"type":21,"children":130,"toc":205},[131],{"type":24,"tag":25,"props":132,"children":133},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[134,139,169,182,192],{"type":24,"tag":135,"props":136,"children":138},"git-info",{"url":137},"https://github.com/iusx/cdx",[],{"type":24,"tag":40,"props":140,"children":141},{},[142,144,151,153,159,161,167],{"type":44,"value":143},"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":24,"tag":145,"props":146,"children":148},"code",{"className":147},[],[149],{"type":44,"value":150},"cd",{"type":44,"value":152}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":24,"tag":145,"props":154,"children":156},{"className":155},[],[157],{"type":44,"value":158},"nix-shell",{"type":44,"value":160}," > ",{"type":24,"tag":145,"props":162,"children":164},{"className":163},[],[165],{"type":44,"value":166},"nvim .",{"type":44,"value":168}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":24,"tag":40,"props":170,"children":171},{},[172,174,180],{"type":44,"value":173},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":24,"tag":145,"props":175,"children":177},{"className":176},[],[178],{"type":44,"value":179},"zsh",{"type":44,"value":181}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":24,"tag":183,"props":184,"children":186},"text-space",{"type":185},"tip",[187],{"type":24,"tag":40,"props":188,"children":189},{},[190],{"type":44,"value":191},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":24,"tag":40,"props":193,"children":194},{},[195,197,203],{"type":44,"value":196},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":24,"tag":145,"props":198,"children":200},{"className":199},[],[201],{"type":44,"value":202},"~/.cds",{"type":44,"value":204}," 中。",{"title":8,"searchDepth":112,"depth":112,"links":206},[],"content:plan:programming:cds.md","plan/programming/cds.md",{"_path":210,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":211,"description":8,"director":11,"time":212,"types":13,"img":213,"info":214,"client":16,"target":126,"current":215,"displayType":128,"body":216,"_type":114,"_id":379,"_source":116,"_file":380,"_extension":118},"/plan/programming/command-hide","command-hide","2025.03.31","des/01/hide.jpg","封面：command-hide.vscode version",99.99,{"type":21,"children":217,"toc":377},[218],{"type":24,"tag":25,"props":219,"children":220},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[221,225,230,246,254,268,282,285,290,311,324,333],{"type":24,"tag":135,"props":222,"children":224},{"url":223},"https://github.com/jiangxue-analysis/vscode-comment-hide",[],{"type":24,"tag":135,"props":226,"children":229},{"url":227,"type":228},"https://github.com/jiangxue-analysis/nvim.comment-hide","iss",[],{"type":24,"tag":40,"props":231,"children":232},{},[233,235,244],{"type":44,"value":234},"我写了差不多一篇小软文，题目为 ",{"type":24,"tag":236,"props":237,"children":241},"a",{"href":238,"rel":239},"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf",[240],"nofollow",[242],{"type":44,"value":243},"VSCode plugin comment-hide: Dare to write comments!",{"type":44,"value":245}," 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。",{"type":24,"tag":183,"props":247,"children":248},{"type":185},[249],{"type":24,"tag":40,"props":250,"children":251},{},[252],{"type":44,"value":253},"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。",{"type":24,"tag":40,"props":255,"children":256},{},[257,259,266],{"type":44,"value":258},"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 ",{"type":24,"tag":236,"props":260,"children":263},{"href":261,"rel":262},"https://github.com/folke/lazy.nvim",[240],[264],{"type":44,"value":265},"lazy.nvim",{"type":44,"value":267},"。",{"type":24,"tag":40,"props":269,"children":270},{},[271,273,280],{"type":44,"value":272},"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 ",{"type":24,"tag":236,"props":274,"children":277},{"href":275,"rel":276},"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim",[240],[278],{"type":44,"value":279},"dragove/nvim/.config/nvim",{"type":44,"value":281}," 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。",{"type":24,"tag":57,"props":283,"children":284},{},[],{"type":24,"tag":40,"props":286,"children":287},{},[288],{"type":44,"value":289},"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”",{"type":24,"tag":40,"props":291,"children":292},{},[293,295,301,303,309],{"type":44,"value":294},"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 ",{"type":24,"tag":145,"props":296,"children":298},{"className":297},[],[299],{"type":44,"value":300},"\u003Ctemplate>\u003C/template>",{"type":44,"value":302}," 中出现了 ",{"type":24,"tag":145,"props":304,"children":306},{"className":305},[],[307],{"type":44,"value":308},"\u003Cp>//\u003C/p>",{"type":44,"value":310}," 就也会被认定是注释去除。",{"type":24,"tag":40,"props":312,"children":313},{},[314,316,322],{"type":44,"value":315},"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 ",{"type":24,"tag":145,"props":317,"children":319},{"className":318},[],[320],{"type":44,"value":321},"js\\html\\css",{"type":44,"value":323}," 三个注释逻辑，而不是目前的这种：",{"type":24,"tag":325,"props":326,"children":328},"pre",{"code":327},"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n",[329],{"type":24,"tag":145,"props":330,"children":331},{"__ignoreMap":8},[332],{"type":44,"value":327},{"type":24,"tag":40,"props":334,"children":335},{},[336,338,344,346,352,354,360,362,368,369,375],{"type":44,"value":337},"也就是说需要 ",{"type":24,"tag":145,"props":339,"children":341},{"className":340},[],[342],{"type":44,"value":343},"\u003Cscript>",{"type":44,"value":345}," 用 js 的注释, ",{"type":24,"tag":145,"props":347,"children":349},{"className":348},[],[350],{"type":44,"value":351},"\u003Ctemplate>",{"type":44,"value":353}," 用 ",{"type":24,"tag":145,"props":355,"children":357},{"className":356},[],[358],{"type":44,"value":359},"html",{"type":44,"value":361}," 的注释，",{"type":24,"tag":145,"props":363,"children":365},{"className":364},[],[366],{"type":44,"value":367},"style",{"type":44,"value":353},{"type":24,"tag":145,"props":370,"children":372},{"className":371},[],[373],{"type":44,"value":374},"css",{"type":44,"value":376}," 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（",{"title":8,"searchDepth":112,"depth":112,"links":378},[],"content:plan:programming:command-hide.md","plan/programming/command-hide.md",{"_path":382,"_dir":121,"_draft":7,"_partial":7,"_locale":8,"title":383,"description":384,"director":11,"time":385,"types":13,"img":386,"info":387,"client":16,"target":126,"current":388,"displayType":128,"body":389,"_type":114,"_id":634,"_source":116,"_file":635,"_extension":118},"/plan/programming/new-blog-theme-plan","NEW BLOG THEME PLAN","回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","2025.07.06","life/plan/new-blog/1.png","封面：构造 SMTP 协议发送信息",5,{"type":21,"children":390,"toc":632},[391],{"type":24,"tag":25,"props":392,"children":393},{":client":27,":img":28,":info":29,":time":30,":title":31,":types":32},[394,397,402,407,412,417,422,427,432,437,440,454,462,467,483,488,502,548,553,558,563,573,578,583,591,596,605,619,627],{"type":24,"tag":35,"props":395,"children":396},{":desc":37},[],{"type":24,"tag":40,"props":398,"children":399},{},[400],{"type":44,"value":401},"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。",{"type":24,"tag":183,"props":403,"children":406},{"img":404,"info":405},"life/plan/new-blog/2.png","图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了",[],{"type":24,"tag":40,"props":408,"children":409},{},[410],{"type":44,"value":411},"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。",{"type":24,"tag":40,"props":413,"children":414},{},[415],{"type":44,"value":416},"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。",{"type":24,"tag":40,"props":418,"children":419},{},[420],{"type":44,"value":421},"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。",{"type":24,"tag":183,"props":423,"children":426},{"img":424,"info":425},"life/plan/new-blog/3.png","图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。",[],{"type":24,"tag":40,"props":428,"children":429},{},[430],{"type":44,"value":431},"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。",{"type":24,"tag":40,"props":433,"children":434},{},[435],{"type":44,"value":436},"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？",{"type":24,"tag":57,"props":438,"children":439},{},[],{"type":24,"tag":40,"props":441,"children":442},{},[443,445,452],{"type":44,"value":444},"最近学习到了一个新的词汇，叫 ",{"type":24,"tag":236,"props":446,"children":449},{"href":447,"rel":448},"https://en.wikipedia.org/wiki/CSS_hack",[240],[450],{"type":44,"value":451},"CSS Hack",{"type":44,"value":453}," 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:",{"type":24,"tag":325,"props":455,"children":457},{"code":456},"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n",[458],{"type":24,"tag":145,"props":459,"children":460},{"__ignoreMap":8},[461],{"type":44,"value":456},{"type":24,"tag":40,"props":463,"children":464},{},[465],{"type":44,"value":466},"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:",{"type":24,"tag":96,"props":468,"children":471},{"by":469,"topic":470},"Linus Benedict Torvalds","The mind behind Linux | Linus Torvalds | TED",[472],{"type":24,"tag":40,"props":473,"children":474},{},[475,477,481],{"type":44,"value":476},"Some of those people dont't do a lot",{"type":24,"tag":478,"props":479,"children":480},"br",{},[],{"type":44,"value":482},"\nThere's a lot of people who make small,small changes,",{"type":24,"tag":40,"props":484,"children":485},{},[486],{"type":44,"value":487},"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。",{"type":24,"tag":40,"props":489,"children":490},{},[491,493,500],{"type":44,"value":492},"最近在玩 ",{"type":24,"tag":236,"props":494,"children":497},{"href":495,"rel":496},"https://store.steampowered.com/app/2585110/_/",[240],[498],{"type":44,"value":499},"《我在疗养院送人上西天》",{"type":44,"value":501}," 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。",{"type":24,"tag":96,"props":503,"children":506},{"by":504,"topic":505},"linus benedict torvalds","the mind behind linux | linus torvalds | ted",[507],{"type":24,"tag":40,"props":508,"children":509},{},[510,512,515,517,520,522,525,527,530,533,535,538,540,543,545],{"type":44,"value":511},"but that's not everybody,",{"type":24,"tag":478,"props":513,"children":514},{},[],{"type":44,"value":516},"\ni care about the thechnology",{"type":24,"tag":478,"props":518,"children":519},{},[],{"type":44,"value":521},"\nthere are people who care about the ui",{"type":24,"tag":478,"props":523,"children":524},{},[],{"type":44,"value":526},"\ni can't do ui to save my life.",{"type":24,"tag":478,"props":528,"children":529},{},[],{"type":24,"tag":478,"props":531,"children":532},{},[],{"type":44,"value":534},"\ni mean, if i was stranded on an island,",{"type":24,"tag":478,"props":536,"children":537},{},[],{"type":44,"value":539},"\nand the only way to get off that island was the make a pretty ui,",{"type":24,"tag":478,"props":541,"children":542},{},[],{"type":44,"value":544},"\ni'd die there.",{"type":24,"tag":478,"props":546,"children":547},{},[],{"type":24,"tag":40,"props":549,"children":550},{},[551],{"type":44,"value":552},"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)",{"type":24,"tag":40,"props":554,"children":555},{},[556],{"type":44,"value":557},"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。",{"type":24,"tag":40,"props":559,"children":560},{},[561],{"type":44,"value":562},"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。",{"type":24,"tag":96,"props":564,"children":567},{"by":565,"topic":566},"Wikipedia","Frontend and backend",[568],{"type":24,"tag":40,"props":569,"children":570},{},[571],{"type":44,"value":572},"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server.",{"type":24,"tag":40,"props":574,"children":575},{},[576],{"type":44,"value":577},"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。",{"type":24,"tag":40,"props":579,"children":580},{},[581],{"type":44,"value":582},"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。",{"type":24,"tag":183,"props":584,"children":585},{"type":185},[586],{"type":24,"tag":40,"props":587,"children":588},{},[589],{"type":44,"value":590},"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。",{"type":24,"tag":40,"props":592,"children":593},{},[594],{"type":44,"value":595},"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。",{"type":24,"tag":40,"props":597,"children":598},{},[599],{"type":24,"tag":600,"props":601,"children":602},"del",{},[603],{"type":44,"value":604},"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog",{"type":24,"tag":40,"props":606,"children":607},{},[608,610,617],{"type":44,"value":609},"可能这个现象可以用 ",{"type":24,"tag":236,"props":611,"children":614},{"href":612,"rel":613},"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect",[240],[615],{"type":44,"value":616},"Dunning–Kruger effect",{"type":44,"value":618}," 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。",{"type":24,"tag":96,"props":620,"children":621},{"by":565,"topic":616},[622],{"type":24,"tag":40,"props":623,"children":624},{},[625],{"type":44,"value":626},"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability",{"type":24,"tag":40,"props":628,"children":629},{},[630],{"type":44,"value":631},"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）",{"title":8,"searchDepth":112,"depth":112,"links":633},[],"content:plan:programming:new-blog-theme-plan.md","plan/programming/new-blog-theme-plan.md",{"_path":637,"_dir":638,"_draft":7,"_partial":7,"_locale":8,"title":639,"description":8,"director":16,"img":640,"time":641,"plan":642,"target":126,"current":127,"displayType":128,"body":643,"_type":114,"_id":1528,"_source":116,"_file":1529,"_extension":118},"/plan/security/cve-learn","security","CVE learn","14/1.png","2025.06.29","100,100",{"type":21,"children":644,"toc":1522},[645],{"type":24,"tag":646,"props":647,"children":650},"book-content",{":by":648,":img":28,":plan":649,":title":31},"director","plan",[651,656,661,666,671,676,681,684,691,698,711,751,765,776,798,801,807,822,844,881,903,925,941,949,957,969,977,998,1006,1009,1015,1026,1046,1073,1078,1099,1147,1168,1173,1191,1204,1232,1237,1240,1246,1270,1322,1374,1394,1417,1427,1455,1463,1468,1476,1489,1497],{"type":24,"tag":652,"props":653,"children":655},"text-title",{":t":654},"CVE is my dream.",[],{"type":24,"tag":40,"props":657,"children":658},{},[659],{"type":44,"value":660},"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。",{"type":24,"tag":40,"props":662,"children":663},{},[664],{"type":44,"value":665},"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。",{"type":24,"tag":40,"props":667,"children":668},{},[669],{"type":44,"value":670},"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。",{"type":24,"tag":40,"props":672,"children":673},{},[674],{"type":44,"value":675},"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。",{"type":24,"tag":40,"props":677,"children":678},{},[679],{"type":44,"value":680},"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。",{"type":24,"tag":57,"props":682,"children":683},{},[],{"type":24,"tag":685,"props":686,"children":688},"h1",{"id":687},"rust-3",[689],{"type":44,"value":690},"rust 3",{"type":24,"tag":692,"props":693,"children":695},"h2",{"id":694},"cve-2022-36114-1",[696],{"type":44,"value":697},"CVE-2022-36114 1",{"type":24,"tag":699,"props":700,"children":705},"cve-info",{":type":701,"cve":702,"to":703,":cwe":704},"2","CVE-2022-36114","https://nvd.nist.gov/vuln/detail/CVE-2022-36114","400",[706],{"type":24,"tag":40,"props":707,"children":708},{},[709],{"type":44,"value":710},"不受控制的资源消耗",{"type":24,"tag":40,"props":712,"children":713},{},[714,716,723,725,732,734,740,742,749],{"type":44,"value":715},"利用 Cargo 的 ",{"type":24,"tag":236,"props":717,"children":720},{"href":718,"rel":719},"https://doc.rust-lang.org/cargo/reference/build-scripts.html",[240],[721],{"type":44,"value":722},"build script",{"type":44,"value":724}," 在构建阶段编译第三方的非 Rust code，同时结合 ",{"type":24,"tag":236,"props":726,"children":729},{"href":727,"rel":728},"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro",[240],[730],{"type":44,"value":731},"procedural macros",{"type":44,"value":733},"，在执行 ",{"type":24,"tag":145,"props":735,"children":737},{"className":736},[],[738],{"type":44,"value":739},"cargo run",{"type":44,"value":741}," 的过程中触发了一个 ",{"type":24,"tag":236,"props":743,"children":746},{"href":744,"rel":745},"https://en.wikipedia.org/wiki/Zip_bomb",[240],[747],{"type":44,"value":748},"Zip Bomb",{"type":44,"value":750}," 行为。",{"type":24,"tag":40,"props":752,"children":753},{},[754,756,763],{"type":44,"value":755},"对于这个问题的修复，rust-lang 已经给出了一个 ",{"type":24,"tag":236,"props":757,"children":760},{"href":758,"rel":759},"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch",[240],[761],{"type":44,"value":762},"补丁修复",{"type":44,"value":764}," Zip_bomb 的问题:",{"type":24,"tag":325,"props":766,"children":771},{"code":767,"language":768,"meta":8,"className":769},"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","c",[770],"language-c",[772],{"type":24,"tag":145,"props":773,"children":774},{"__ignoreMap":8},[775],{"type":44,"value":767},{"type":24,"tag":40,"props":777,"children":778},{},[779,781,787,789,796],{"type":44,"value":780},"同时引入了 ",{"type":24,"tag":145,"props":782,"children":784},{"className":783},[],[785],{"type":44,"value":786},"LimitErrorReader",{"type":44,"value":788},": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 ",{"type":24,"tag":236,"props":790,"children":793},{"href":791,"rel":792},"https://crates.io/",[240],[794],{"type":44,"value":795},"crates",{"type":44,"value":797}," 上提交的 crate。",{"type":24,"tag":57,"props":799,"children":800},{},[],{"type":24,"tag":692,"props":802,"children":804},{"id":803},"cve-2023-40030-1",[805],{"type":44,"value":806},"CVE-2023-40030 1",{"type":24,"tag":699,"props":808,"children":813},{":type":809,"cve":810,"to":811,":cwe":812},"1","CVE-2023-40030","https://nvd.nist.gov/vuln/detail/cve-2023-40030","79",[814],{"type":24,"tag":40,"props":815,"children":816},{},[817,819],{"type":44,"value":818},"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS",{"type":24,"tag":478,"props":820,"children":821},{},[],{"type":24,"tag":40,"props":823,"children":824},{},[825,827,833,835,842],{"type":44,"value":826},"看到这篇通告的时候，我就回想起为什么我看 ",{"type":24,"tag":145,"props":828,"children":830},{"className":829},[],[831],{"type":44,"value":832},"cargo build --timings",{"type":44,"value":834}," 的时候肿么没想到会有 CWE-79。",{"type":24,"tag":236,"props":836,"children":839},{"href":837,"rel":838},"https://doc.rust-lang.org/cargo/reference/timings.html",[240],[840],{"type":44,"value":841},"--timings",{"type":44,"value":843}," 是一个生成 build 时间的 html 报告。",{"type":24,"tag":40,"props":845,"children":846},{},[847,849,855,857,863,865,871,873,879],{"type":44,"value":848},"可以通过在 ",{"type":24,"tag":145,"props":850,"children":852},{"className":851},[],[853],{"type":44,"value":854},"Cargo.toml",{"type":44,"value":856}," 中加入 ",{"type":24,"tag":145,"props":858,"children":860},{"className":859},[],[861],{"type":44,"value":862},"features = [\"\u003Cimg src='' onerror=alert(0)\"]",{"type":44,"value":864}," 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 ",{"type":24,"tag":145,"props":866,"children":868},{"className":867},[],[869],{"type":44,"value":870},"Warning",{"type":44,"value":872},", 换成了 ",{"type":24,"tag":145,"props":874,"children":876},{"className":875},[],[877],{"type":44,"value":878},"bail!",{"type":44,"value":880}," 机制。",{"type":24,"tag":183,"props":882,"children":883},{"type":185},[884],{"type":24,"tag":40,"props":885,"children":886},{},[887,892,894,901],{"type":24,"tag":145,"props":888,"children":890},{"className":889},[],[891],{"type":44,"value":878},{"type":44,"value":893}," 宏来自 ",{"type":24,"tag":236,"props":895,"children":898},{"href":896,"rel":897},"https://docs.rs/anyhow/latest/anyhow/macro.bail.html",[240],[899],{"type":44,"value":900},"anyhow",{"type":44,"value":902}," 用于方便地提前返回错误。",{"type":24,"tag":40,"props":904,"children":905},{},[906,908,915,917,923],{"type":44,"value":907},"可以看一下 ",{"type":24,"tag":236,"props":909,"children":912},{"href":910,"rel":911},"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446",[240],[913],{"type":44,"value":914},"fix pr",{"type":44,"value":916},"，非常有意思，比如 ",{"type":24,"tag":145,"props":918,"children":920},{"className":919},[],[921],{"type":44,"value":922},"validate_feature_name",{"type":44,"value":924}," 函数。",{"type":24,"tag":40,"props":926,"children":927},{},[928,930,936,938],{"type":44,"value":929},"原来：遇到非法 feature name，只输出 ",{"type":24,"tag":145,"props":931,"children":933},{"className":932},[],[934],{"type":44,"value":935},"warning",{"type":44,"value":937},"，流程继续。",{"type":24,"tag":478,"props":939,"children":940},{},[],{"type":24,"tag":325,"props":942,"children":944},{"code":943},"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n",[945],{"type":24,"tag":145,"props":946,"children":947},{"__ignoreMap":8},[948],{"type":44,"value":943},{"type":24,"tag":183,"props":950,"children":951},{"type":185},[952],{"type":24,"tag":40,"props":953,"children":954},{},[955],{"type":44,"value":956},"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！",{"type":24,"tag":40,"props":958,"children":959},{},[960,962,967],{"type":44,"value":961},"现在：遇到非法 feature name，直接 ",{"type":24,"tag":145,"props":963,"children":965},{"className":964},[],[966],{"type":44,"value":878},{"type":44,"value":968},"，构建中止，用户必须修正。",{"type":24,"tag":325,"props":970,"children":972},{"code":971}," if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n",[973],{"type":24,"tag":145,"props":974,"children":975},{"__ignoreMap":8},[976],{"type":44,"value":971},{"type":24,"tag":40,"props":978,"children":979},{},[980,982,988,990,996],{"type":44,"value":981},"在单元测试中，来验证 feature name 是否合法，例如只有 ",{"type":24,"tag":145,"props":983,"children":985},{"className":984},[],[986],{"type":44,"value":987},"is_ok()",{"type":44,"value":989}," 是合法的，而 ",{"type":24,"tag":145,"props":991,"children":993},{"className":992},[],[994],{"type":44,"value":995},"is_err()",{"type":44,"value":997}," 是不合法的：",{"type":24,"tag":325,"props":999,"children":1001},{"code":1000}," #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n",[1002],{"type":24,"tag":145,"props":1003,"children":1004},{"__ignoreMap":8},[1005],{"type":44,"value":1000},{"type":24,"tag":57,"props":1007,"children":1008},{},[],{"type":24,"tag":692,"props":1010,"children":1012},{"id":1011},"cve-2023-41051-1",[1013],{"type":44,"value":1014},"CVE-2023-41051 1",{"type":24,"tag":699,"props":1016,"children":1020},{":type":809,"cve":1017,"to":1018,":cwe":1019},"CVE-2023-51051","https://nvd.nist.gov/vuln/detail/cve-2023-41051","125",[1021],{"type":24,"tag":40,"props":1022,"children":1023},{},[1024],{"type":44,"value":1025},"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。",{"type":24,"tag":40,"props":1027,"children":1028},{},[1029,1036,1038,1044],{"type":24,"tag":236,"props":1030,"children":1033},{"href":1031,"rel":1032},"https://github.com/rust-vmm/vm-memory",[240],[1034],{"type":44,"value":1035},"vm-memory",{"type":44,"value":1037}," 的 ",{"type":24,"tag":145,"props":1039,"children":1041},{"className":1040},[],[1042],{"type":44,"value":1043},"VolatileMemory",{"type":44,"value":1045}," 实现未对边界进行严格校验，导致有可能读取到非法的内存区域：",{"type":24,"tag":1047,"props":1048,"children":1049},"ol",{},[1050,1062],{"type":24,"tag":1051,"props":1052,"children":1053},"li",{},[1054,1060],{"type":24,"tag":145,"props":1055,"children":1057},{"className":1056},[],[1058],{"type":44,"value":1059},"VolatileMemory::get_slice",{"type":44,"value":1061},": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作",{"type":24,"tag":1051,"props":1063,"children":1064},{},[1065,1071],{"type":24,"tag":145,"props":1066,"children":1068},{"className":1067},[],[1069],{"type":44,"value":1070},"VolatileMemory::read/write",{"type":44,"value":1072},": 直接从这块内存读/写数据，保证每次都实际发生内存访问",{"type":24,"tag":40,"props":1074,"children":1075},{},[1076],{"type":44,"value":1077},"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。",{"type":24,"tag":40,"props":1079,"children":1080},{},[1081,1083,1089,1091,1097],{"type":44,"value":1082},"但问题来了，这个通告并不涉及 ",{"type":24,"tag":145,"props":1084,"children":1086},{"className":1085},[],[1087],{"type":44,"value":1088},"read/write",{"type":44,"value":1090},"，更多的是 ",{"type":24,"tag":145,"props":1092,"children":1094},{"className":1093},[],[1095],{"type":44,"value":1096},"get_slice",{"type":44,"value":1098}," 方法，例如：",{"type":24,"tag":1047,"props":1100,"children":1101},{},[1102,1111,1120,1129,1138],{"type":24,"tag":1051,"props":1103,"children":1104},{},[1105],{"type":24,"tag":145,"props":1106,"children":1108},{"className":1107},[],[1109],{"type":44,"value":1110},"get_atomic_ref",{"type":24,"tag":1051,"props":1112,"children":1113},{},[1114],{"type":24,"tag":145,"props":1115,"children":1117},{"className":1116},[],[1118],{"type":44,"value":1119},"aligned_as_ref",{"type":24,"tag":1051,"props":1121,"children":1122},{},[1123],{"type":24,"tag":145,"props":1124,"children":1126},{"className":1125},[],[1127],{"type":44,"value":1128},"aligned_as_mut",{"type":24,"tag":1051,"props":1130,"children":1131},{},[1132],{"type":24,"tag":145,"props":1133,"children":1135},{"className":1134},[],[1136],{"type":44,"value":1137},"get_ref",{"type":24,"tag":1051,"props":1139,"children":1140},{},[1141],{"type":24,"tag":145,"props":1142,"children":1144},{"className":1143},[],[1145],{"type":44,"value":1146},"get_array_ref",{"type":24,"tag":40,"props":1148,"children":1149},{},[1150,1152,1158,1160,1166],{"type":44,"value":1151},"上述方法有个共同点，都是利用 ",{"type":24,"tag":145,"props":1153,"children":1155},{"className":1154},[],[1156],{"type":44,"value":1157},"ref",{"type":44,"value":1159}," 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、",{"type":24,"tag":145,"props":1161,"children":1163},{"className":1162},[],[1164],{"type":44,"value":1165},"&[T]",{"type":44,"value":1167}," 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。",{"type":24,"tag":40,"props":1169,"children":1170},{},[1171],{"type":44,"value":1172},"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如：",{"type":24,"tag":1047,"props":1174,"children":1175},{},[1176,1181,1186],{"type":24,"tag":1051,"props":1177,"children":1178},{},[1179],{"type":44,"value":1180},"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。",{"type":24,"tag":1051,"props":1182,"children":1183},{},[1184],{"type":44,"value":1185},"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）",{"type":24,"tag":1051,"props":1187,"children":1188},{},[1189],{"type":44,"value":1190},"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容",{"type":24,"tag":40,"props":1192,"children":1193},{},[1194,1196,1202],{"type":44,"value":1195},"仔细欣赏 ",{"type":24,"tag":236,"props":1197,"children":1200},{"href":1198,"rel":1199},"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275",[240],[1201],{"type":44,"value":914},{"type":44,"value":1203}," 你会发现：",{"type":24,"tag":40,"props":1205,"children":1206},{},[1207,1209,1215,1217,1222,1224,1230],{"type":44,"value":1208},"这些方法内部，都会调用 ",{"type":24,"tag":145,"props":1210,"children":1212},{"className":1211},[],[1213],{"type":44,"value":1214},"get_slice(offset, count)",{"type":44,"value":1216}," 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 ",{"type":24,"tag":145,"props":1218,"children":1220},{"className":1219},[],[1221],{"type":44,"value":1096},{"type":44,"value":1223}," 加上 ",{"type":24,"tag":145,"props":1225,"children":1227},{"className":1226},[],[1228],{"type":44,"value":1229},"assert_eq!",{"type":44,"value":1231}," 就意味着：",{"type":24,"tag":40,"props":1233,"children":1234},{},[1235],{"type":44,"value":1236},"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”",{"type":24,"tag":57,"props":1238,"children":1239},{},[],{"type":24,"tag":692,"props":1241,"children":1243},{"id":1242},"cve-2023-38497-1",[1244],{"type":44,"value":1245},"CVE-2023-38497 1",{"type":24,"tag":699,"props":1247,"children":1252},{":type":1248,"cve":1249,"to":1250,"cwe":1251},"3","CVE-2023-38497","https://nvd.nist.gov/vuln/detail/cve-2023-38497","278,732",[1253,1261],{"type":24,"tag":40,"props":1254,"children":1255},{},[1256,1258],{"type":44,"value":1257},"278: 不安全的保留继承权限",{"type":24,"tag":478,"props":1259,"children":1260},{},[],{"type":24,"tag":1262,"props":1263,"children":1264},"ul",{},[1265],{"type":24,"tag":1051,"props":1266,"children":1267},{},[1268],{"type":44,"value":1269},"732: 关键资源的权限分配错误",{"type":24,"tag":40,"props":1271,"children":1272},{},[1273,1275,1282,1284,1290,1292,1297,1299,1304,1306,1312,1314,1320],{"type":44,"value":1274},"CWE-278 还是较为冷门的，毕竟只有一个参考，既 ",{"type":24,"tag":236,"props":1276,"children":1279},{"href":1277,"rel":1278},"https://www.cve.org/CVERecord?id=CVE-2005-1724",[240],[1280],{"type":44,"value":1281},"CVE-2005-1724",{"type":44,"value":1283},"。CWE-278 这个类的漏洞常见表现之一就是 ",{"type":24,"tag":1285,"props":1286,"children":1287},"strong",{},[1288],{"type":44,"value":1289},"权限限制”",{"type":44,"value":1291},"。总的来说 umask 是 ",{"type":24,"tag":1285,"props":1293,"children":1294},{},[1295],{"type":44,"value":1296},"限制新建文件或目录默认权限的一个机制。",{"type":44,"value":1298},"，可以看看 ",{"type":24,"tag":1300,"props":1301,"children":1302},"sup",{},[1303],{"type":44,"value":809},{"type":44,"value":1305},"，我清晰记得有时候需要执行什么 ",{"type":24,"tag":145,"props":1307,"children":1309},{"className":1308},[],[1310],{"type":44,"value":1311},"bash",{"type":44,"value":1313}," 脚本的时候，会使用 ",{"type":24,"tag":145,"props":1315,"children":1317},{"className":1316},[],[1318],{"type":44,"value":1319},"chmod 777",{"type":44,"value":1321},", 要不然运行不了。",{"type":24,"tag":183,"props":1323,"children":1324},{"type":185},[1325,1335,1340,1361,1369],{"type":24,"tag":40,"props":1326,"children":1327},{},[1328,1330],{"type":44,"value":1329},"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 ",{"type":24,"tag":1285,"props":1331,"children":1332},{},[1333],{"type":44,"value":1334},"属于权限/访问控制失效问题。",{"type":24,"tag":40,"props":1336,"children":1337},{},[1338],{"type":44,"value":1339},"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。",{"type":24,"tag":40,"props":1341,"children":1342},{},[1343,1345,1351,1353,1359],{"type":44,"value":1344},"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 ",{"type":24,"tag":145,"props":1346,"children":1348},{"className":1347},[],[1349],{"type":44,"value":1350},"-network",{"type":44,"value":1352}," 和 ",{"type":24,"tag":145,"props":1354,"children":1356},{"className":1355},[],[1357],{"type":44,"value":1358},"-mask",{"type":44,"value":1360},"：",{"type":24,"tag":325,"props":1362,"children":1364},{"code":1363},"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n",[1365],{"type":24,"tag":145,"props":1366,"children":1367},{"__ignoreMap":8},[1368],{"type":44,"value":1363},{"type":24,"tag":40,"props":1370,"children":1371},{},[1372],{"type":44,"value":1373},"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278",{"type":24,"tag":40,"props":1375,"children":1376},{},[1377,1379,1384,1386,1392],{"type":44,"value":1378},"要想理解本次的 CVE，我们首先需要理解标题 ",{"type":24,"tag":1285,"props":1380,"children":1381},{},[1382],{"type":44,"value":1383},"Cargo 在解压 crate 包时未按照 umask 限制文件权限",{"type":44,"value":1385},"。而 ",{"type":24,"tag":145,"props":1387,"children":1389},{"className":1388},[],[1390],{"type":44,"value":1391},"umask",{"type":44,"value":1393}," 是默认权限，翻译成人话就是：",{"type":24,"tag":1395,"props":1396,"children":1398},"text-tip",{"type":1397},"big",[1399],{"type":24,"tag":40,"props":1400,"children":1401},{},[1402,1404,1410,1412,1415],{"type":44,"value":1403},"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 ",{"type":24,"tag":145,"props":1405,"children":1407},{"className":1406},[],[1408],{"type":44,"value":1409},"777",{"type":44,"value":1411}," 权限构建攻击脚本。",{"type":24,"tag":478,"props":1413,"children":1414},{},[],{"type":44,"value":1416},"\n↑ 可能不是很严谨",{"type":24,"tag":40,"props":1418,"children":1419},{},[1420,1422],{"type":44,"value":1421},"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），",{"type":24,"tag":1285,"props":1423,"children":1424},{},[1425],{"type":44,"value":1426},"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。",{"type":24,"tag":40,"props":1428,"children":1429},{},[1430,1432,1438,1440,1446,1448,1453],{"type":44,"value":1431},"在 ",{"type":24,"tag":145,"props":1433,"children":1435},{"className":1434},[],[1436],{"type":44,"value":1437},"src/cargo/util/mod.rs",{"type":44,"value":1439}," 中新增了 ",{"type":24,"tag":145,"props":1441,"children":1443},{"className":1442},[],[1444],{"type":44,"value":1445},"get_umask()",{"type":44,"value":1447}," 函数。以在解压文件时，强制用 ",{"type":24,"tag":145,"props":1449,"children":1451},{"className":1450},[],[1452],{"type":44,"value":1391},{"type":44,"value":1454}," 限制新文件的权限。：",{"type":24,"tag":325,"props":1456,"children":1458},{"code":1457},"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock\u003Clibc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n",[1459],{"type":24,"tag":145,"props":1460,"children":1461},{"__ignoreMap":8},[1462],{"type":44,"value":1457},{"type":24,"tag":40,"props":1464,"children":1465},{},[1466],{"type":44,"value":1467},"以及很有艺术性的一行 code:",{"type":24,"tag":325,"props":1469,"children":1471},{"code":1470},"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n",[1472],{"type":24,"tag":145,"props":1473,"children":1474},{"__ignoreMap":8},[1475],{"type":44,"value":1470},{"type":24,"tag":40,"props":1477,"children":1478},{},[1479,1481,1487],{"type":44,"value":1480},"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & ",{"type":24,"tag":145,"props":1482,"children":1484},{"className":1483},[],[1485],{"type":44,"value":1486},"!umask",{"type":44,"value":1488}," 得到最终权限，再 chmod 到文件上:",{"type":24,"tag":325,"props":1490,"children":1492},{"code":1491},"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n",[1493],{"type":24,"tag":145,"props":1494,"children":1495},{"__ignoreMap":8},[1496],{"type":44,"value":1491},{"type":24,"tag":1498,"props":1499,"children":1502},"div",{"id":1500,"className":1501},"refer-anchor-1",[1157],[1503],{"type":24,"tag":1262,"props":1504,"children":1505},{},[1506],{"type":24,"tag":1051,"props":1507,"children":1508},{},[1509,1514,1516],{"type":24,"tag":1510,"props":1511,"children":1512},"span",{},[1513],{"type":44,"value":809},{"type":44,"value":1515}," ",{"type":24,"tag":236,"props":1517,"children":1520},{"href":1518,"rel":1519},"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",[240],[1521],{"type":44,"value":1518},{"title":8,"searchDepth":112,"depth":112,"links":1523},[1524,1525,1526,1527],{"id":694,"depth":112,"text":697},{"id":803,"depth":112,"text":806},{"id":1011,"depth":112,"text":1014},{"id":1242,"depth":112,"text":1245},"content:plan:security:cve-learn.md","plan/security/cve-learn.md",1755938731974]