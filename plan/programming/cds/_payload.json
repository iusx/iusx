[{"data":1,"prerenderedAt":531},["Reactive",2],{"content-query-6B2swL3UYA":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"director":9,"time":10,"types":11,"img":12,"info":13,"client":14,"target":15,"current":16,"displayType":17,"body":18,"_type":492,"_id":493,"_source":494,"_file":495,"_extension":496,"head":497},"/plan/programming/cds","programming",false,"","cds","ritsu","2025.08.22","cc","life/plan/cds/1.jpg","封面：This is cds","My",100,20,"percent",{"type":19,"children":20,"toc":489},"root",[21],{"type":22,"tag":23,"props":24,"children":31},"element","main-content",{":client":25,":img":26,":info":27,":time":28,":title":29,":types":30},"client","img","info","time","title","types",[32,37,69,82,92,105,111,116,140,145,149,153,166,175,180,256,269,283,291,296,346,351,355,385,393,412,420,425,433,438,446,459,467,481],{"type":22,"tag":33,"props":34,"children":36},"git-info",{"url":35},"https://github.com/iusx/cdx",[],{"type":22,"tag":38,"props":39,"children":40},"p",{},[41,44,51,53,59,61,67],{"type":42,"value":43},"text","最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":22,"tag":45,"props":46,"children":48},"code",{"className":47},[],[49],{"type":42,"value":50},"cd",{"type":42,"value":52}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":22,"tag":45,"props":54,"children":56},{"className":55},[],[57],{"type":42,"value":58},"nix-shell",{"type":42,"value":60}," > ",{"type":22,"tag":45,"props":62,"children":64},{"className":63},[],[65],{"type":42,"value":66},"nvim .",{"type":42,"value":68}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":22,"tag":38,"props":70,"children":71},{},[72,74,80],{"type":42,"value":73},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":22,"tag":45,"props":75,"children":77},{"className":76},[],[78],{"type":42,"value":79},"zsh",{"type":42,"value":81}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":22,"tag":83,"props":84,"children":86},"text-space",{"type":85},"tip",[87],{"type":22,"tag":38,"props":88,"children":89},{},[90],{"type":42,"value":91},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":22,"tag":38,"props":93,"children":94},{},[95,97,103],{"type":42,"value":96},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":22,"tag":45,"props":98,"children":100},{"className":99},[],[101],{"type":42,"value":102},"~/.cds",{"type":42,"value":104}," 中。",{"type":22,"tag":106,"props":107,"children":110},"text-title",{"t":108,"type":109},"为什么用 nim?","2",[],{"type":22,"tag":33,"props":112,"children":115},{"url":113,"type":114},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":22,"tag":38,"props":117,"children":118},{},[119,121,130,132,138],{"type":42,"value":120},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":22,"tag":122,"props":123,"children":127},"a",{"href":124,"rel":125},"https://learnxinyminutes.com/zh-cn/nim/",[126],"nofollow",[128],{"type":42,"value":129},"Y分钟速成X",{"type":42,"value":131},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":22,"tag":45,"props":133,"children":135},{"className":134},[],[136],{"type":42,"value":137},"or [up-to-date community version]",{"type":42,"value":139}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"type":22,"tag":38,"props":141,"children":142},{},[143],{"type":42,"value":144},"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”",{"type":22,"tag":146,"props":147,"children":148},"hr",{},[],{"type":22,"tag":33,"props":150,"children":152},{"url":151},"https://github.com/ajeetdsouza/zoxide",[],{"type":22,"tag":38,"props":154,"children":155},{},[156,158,164],{"type":42,"value":157},"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 ",{"type":22,"tag":122,"props":159,"children":161},{"href":151,"rel":160},[126],[162],{"type":42,"value":163},"zoxide",{"type":42,"value":165}," 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。",{"type":22,"tag":167,"props":168,"children":170},"pre",{"code":169},"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n",[171],{"type":22,"tag":45,"props":172,"children":173},{"__ignoreMap":7},[174],{"type":42,"value":169},{"type":22,"tag":38,"props":176,"children":177},{},[178],{"type":42,"value":179},"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化：",{"type":22,"tag":181,"props":182,"children":185},"ul",{"className":183},[184],"contains-task-list",[186,208,233],{"type":22,"tag":187,"props":188,"children":191},"li",{"className":189},[190],"task-list-item",[192,198,200,206],{"type":22,"tag":193,"props":194,"children":197},"input",{"disabled":195,"type":196},true,"checkbox",[],{"type":42,"value":199}," 1. TUI：例如 ",{"type":22,"tag":45,"props":201,"children":203},{"className":202},[],[204],{"type":42,"value":205},"c list",{"type":42,"value":207}," 时候可以检索快捷方式",{"type":22,"tag":187,"props":209,"children":211},{"className":210},[190],[212,215,217,223,225,231],{"type":22,"tag":193,"props":213,"children":214},{"checked":195,"disabled":195,"type":196},[],{"type":42,"value":216}," 2. 通过 ",{"type":22,"tag":45,"props":218,"children":220},{"className":219},[],[221],{"type":42,"value":222},"c c iusx",{"type":42,"value":224}," 进入到目录之后自动执行记录在 ",{"type":22,"tag":45,"props":226,"children":228},{"className":227},[],[229],{"type":42,"value":230},"~/.cds_config.json",{"type":42,"value":232}," 中的脚本命令",{"type":22,"tag":187,"props":234,"children":236},{"className":235},[190],[237,240,242,248,250],{"type":22,"tag":193,"props":238,"children":239},{"checked":195,"disabled":195,"type":196},[],{"type":42,"value":241}," 3. Auto: 可以自动记录，例如 ",{"type":22,"tag":45,"props":243,"children":245},{"className":244},[],[246],{"type":42,"value":247},"/Users/uwu/Code/My/iusx",{"type":42,"value":249}," 的时候自动记录 ",{"type":22,"tag":45,"props":251,"children":253},{"className":252},[],[254],{"type":42,"value":255},"iusx: /Users/uwu/Code/My/iusx",{"type":22,"tag":38,"props":257,"children":258},{},[259,261,267],{"type":42,"value":260},"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 ",{"type":22,"tag":45,"props":262,"children":264},{"className":263},[],[265],{"type":42,"value":266},"brew install cds",{"type":42,"value":268}," 来进行安装了（貌似应该写一个安装脚本？。",{"type":22,"tag":38,"props":270,"children":271},{},[272,274,281],{"type":42,"value":273},"其实依赖 shell 环境也没什么的，毕竟连 Nim-lang 的 ",{"type":22,"tag":122,"props":275,"children":278},{"href":276,"rel":277},"https://github.com/nim-lang/choosenim",[126],[279],{"type":42,"value":280},"choosenim",{"type":42,"value":282}," 在安装完后也需要手动设置不是吗？",{"type":22,"tag":167,"props":284,"children":286},{"code":285},"choosenim-init: ChooseNim installed in /Users/uwu/.nimble/bin\nchoosenim-init: You must now ensure that the Nimble bin dir is in your PATH.\nchoosenim-init: Place the following line in the ~/.profile or ~/.bashrc file.\nchoosenim-init:     export PATH=/Users/uwu/.nimble/bin:$PATH\n",[287],{"type":22,"tag":45,"props":288,"children":289},{"__ignoreMap":7},[290],{"type":42,"value":285},{"type":22,"tag":38,"props":292,"children":293},{},[294],{"type":42,"value":295},"有时候就是这样，只有自己亲身体验才能体会一些奇妙的感觉。也就是踩坑，而不是照着答案去答题。最近看的 《心灵捕手》和 《萨利机长》刚好有这个情景，印象深刻的是《心灵捕手》中的一段对话：",{"type":22,"tag":297,"props":298,"children":301},"wise-info",{"by":299,"topic":300},"心灵捕手","知识与体验的区别",[302,307,316,321,326,331,336,341],{"type":22,"tag":38,"props":303,"children":304},{},[305],{"type":42,"value":306},"You've never been out of Boston.",{"type":22,"tag":308,"props":309,"children":310},"blockquote",{},[311],{"type":22,"tag":38,"props":312,"children":313},{},[314],{"type":42,"value":315},"Nope",{"type":22,"tag":38,"props":317,"children":318},{},[319],{"type":42,"value":320},"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written",{"type":22,"tag":38,"props":322,"children":323},{},[324],{"type":42,"value":325},"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope.",{"type":22,"tag":38,"props":327,"children":328},{},[329],{"type":42,"value":330},"Sexual orientation. the whole works, right?",{"type":22,"tag":38,"props":332,"children":333},{},[334],{"type":42,"value":335},"I bet you can't tell me what it smells like\nin the Sistione Chapel",{"type":22,"tag":38,"props":337,"children":338},{},[339],{"type":42,"value":340},"You never actually stood there\nlooked up ar that beautiful ceiling.",{"type":22,"tag":38,"props":342,"children":343},{},[344],{"type":42,"value":345},"Seen that",{"type":22,"tag":38,"props":347,"children":348},{},[349],{"type":42,"value":350},"有的时候就是这样，例如将 Linus 作为主系统自然就会学习到很多与其相关的知识。游玩 Minecraft 之后自然会想要知道光影、Mode、材质是怎么制作的，甚至与好友公共游玩他人服务器的时候脑海中也会浮现出：“我也想开一个服务器” 的这种想法，自然而然的就能接触到 Linux、Windows server，甚至是 Java。",{"type":22,"tag":106,"props":352,"children":354},{"t":353,"type":109},"实现自动记录",[],{"type":22,"tag":38,"props":356,"children":357},{},[358,360,366,368,374,376,383],{"type":42,"value":359},"要实现这个功能，需要使用到 ",{"type":22,"tag":45,"props":361,"children":363},{"className":362},[],[364],{"type":42,"value":365},"dirs",{"type":42,"value":367},"，算是内置命令。例如在 ",{"type":22,"tag":122,"props":369,"children":372},{"href":370,"rel":371},"https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Directory-Stack",[126],[373],{"type":42,"value":79},{"type":42,"value":375}," 和 ",{"type":22,"tag":122,"props":377,"children":380},{"href":378,"rel":379},"https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html",[126],[381],{"type":42,"value":382},"bash",{"type":42,"value":384}," 中均有记载，效果还是很不错的：",{"type":22,"tag":167,"props":386,"children":388},{"code":387},"macOS My/iusx ‹main*› » dirs\n~/Code/My/iusx\nmacOS My/iusx ‹main*› » cd ~/Code/Project/company\nmacOS Project/company » dirs\n~/Code/Project/company ~/Code/My/iusx\nmacOS Project/company »\n",[389],{"type":22,"tag":45,"props":390,"children":391},{"__ignoreMap":7},[392],{"type":42,"value":387},{"type":22,"tag":38,"props":394,"children":395},{},[396,398,403,405,410],{"type":42,"value":397},"唯一可惜的是只记录当前 shell 会话的目录栈，关闭终端或 shell 会话后就会丢失。因此还需要 shell 环境配合，最终效果就是每次 ",{"type":22,"tag":45,"props":399,"children":401},{"className":400},[],[402],{"type":42,"value":50},{"type":42,"value":404}," 目录的时候都会存储到 ",{"type":22,"tag":45,"props":406,"children":408},{"className":407},[],[409],{"type":42,"value":230},{"type":42,"value":411},":",{"type":22,"tag":167,"props":413,"children":415},{"code":414},"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ]\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": []\n  },\n  \"dotfiles\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"config\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": []\n  }\n}\n",[416],{"type":22,"tag":45,"props":417,"children":418},{"__ignoreMap":7},[419],{"type":42,"value":414},{"type":22,"tag":38,"props":421,"children":422},{},[423],{"type":42,"value":424},"但是这就会产生一个问题，之后我还需要 TUI 来进行快速访问，例如我进行了如下的操作：",{"type":22,"tag":167,"props":426,"children":428},{"code":427},"macOS My/cds ‹main*› » cd ~\nmacOS ~ » cd development/flutter/dev\nmacOS flutter/dev » pwd\n/Users/uwu/development/flutter/dev\nmacOS flutter/dev ‹stable› » cd bots\nmacOS dev/bots ‹stable› »\n",[429],{"type":22,"tag":45,"props":430,"children":431},{"__ignoreMap":7},[432],{"type":42,"value":427},{"type":22,"tag":38,"props":434,"children":435},{},[436],{"type":42,"value":437},"你会发现我在当前目录什么都没做，只是单纯的浏览，还是被记录下来了，而且很繁杂，几乎每次 cd 的停顿都会被记录：",{"type":22,"tag":167,"props":439,"children":441},{"code":440},"  \"dev\": {\n    \"path\": \"/Users/uwu/development/flutter/dev\",\n    \"commands\": []\n  },\n  \"bots\": {\n    \"path\": \"/Users/uwu/development/flutter/dev/bots\",\n    \"commands\": []\n  }\n",[442],{"type":22,"tag":45,"props":443,"children":444},{"__ignoreMap":7},[445],{"type":42,"value":440},{"type":22,"tag":38,"props":447,"children":448},{},[449,451,457],{"type":42,"value":450},"为此我增加了一个逻辑，也就是每次在当前目录执行命令，权重 ",{"type":22,"tag":45,"props":452,"children":454},{"className":453},[],[455],{"type":42,"value":456},"score",{"type":42,"value":458}," +1, 这会方便之后的 TUI 的数据展示，权重越高的越在前面，甚至还有升序降序:",{"type":22,"tag":167,"props":460,"children":462},{"code":461},"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ],\n    \"score\": 12\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": [],\n    \"score\": 5\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"video\": {\n    \"path\": \"/Users/uwu/Work/video\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"company\": {\n    \"path\": \"/Users/uwu/Code/Project/company\",\n    \"commands\": [],\n    \"score\": 2\n  }\n}\n",[463],{"type":22,"tag":45,"props":464,"children":465},{"__ignoreMap":7},[466],{"type":42,"value":461},{"type":22,"tag":38,"props":468,"children":469},{},[470,472,479],{"type":42,"value":471},"不过这些都是通过 shell 实现的，之后可能还需要写一个 Install 的脚本，毕竟连 zoxide 也是这么做的， ",{"type":22,"tag":122,"props":473,"children":476},{"href":474,"rel":475},"https://github.com/ajeetdsouza/zoxide/blob/main/src/shell.rs",[126],[477],{"type":42,"value":478},"src/shell.rs",{"type":42,"value":480}," 写的非常全，不过我貌似只是为了自己用，所以我自己用的舒服就好了，不需要考虑兼容下的问题？（或许吧:",{"type":22,"tag":167,"props":482,"children":484},{"code":483},"make_template!(Bash, \"bash.txt\");\nmake_template!(Elvish, \"elvish.txt\");\nmake_template!(Fish, \"fish.txt\");\nmake_template!(Nushell, \"nushell.txt\");\nmake_template!(Posix, \"posix.txt\");\nmake_template!(Powershell, \"powershell.txt\");\nmake_template!(Tcsh, \"tcsh.txt\");\nmake_template!(Xonsh, \"xonsh.txt\");\nmake_template!(Zsh, \"zsh.txt\");\n",[485],{"type":22,"tag":45,"props":486,"children":487},{"__ignoreMap":7},[488],{"type":42,"value":483},{"title":7,"searchDepth":490,"depth":490,"links":491},2,[],"markdown","content:plan:programming:cds.md","content","plan/programming/cds.md","md",{"script":498,"meta":505},[499],{"id":500,"type":501,"processTemplateParams":195,"innerHTML":502,"tagPosition":503,"tagPriority":504},"nuxt-og-image-overrides","application/json","[{\"title\":1,\"excerpt\":-1,\"component\":2},\"cds\",\"OgImageCustom\"]","bodyClose",30,[506,509,512,515,518,520,523,525,527,529],{"property":507,"content":508},"og:image","/__og-image__/static/plan/programming/cds/og.png",{"property":510,"content":511},"og:image:width",1200,{"property":513,"content":514},"og:image:height",600,{"property":516,"content":517},"og:image:type","image/png",{"property":519},"og:image:alt",{"name":521,"content":522},"twitter:card","summary_large_image",{"name":524,"content":508},"twitter:image:src",{"name":526,"content":511},"twitter:image:width",{"name":528,"content":514},"twitter:image:height",{"name":530},"twitter:image:alt",1758893980155]