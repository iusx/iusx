[{"data":1,"prerenderedAt":274},["Reactive",2],{"content-query-6B2swL3UYA":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"director":9,"time":10,"types":11,"img":12,"info":13,"client":14,"target":15,"current":16,"displayType":17,"body":18,"_type":269,"_id":270,"_source":271,"_file":272,"_extension":273},"/plan/programming/cds","programming",false,"","cds","ritsu","2025.08.22","cc","life/plan/cds/1.jpg","封面：This is cds","My",100,20,"percent",{"type":19,"children":20,"toc":266},"root",[21],{"type":22,"tag":23,"props":24,"children":31},"element","main-content",{":client":25,":img":26,":info":27,":time":28,":title":29,":types":30},"client","img","info","time","title","types",[32,37,69,82,92,105,111,116,140,145,149,163,172,177,253],{"type":22,"tag":33,"props":34,"children":36},"git-info",{"url":35},"https://github.com/iusx/cdx",[],{"type":22,"tag":38,"props":39,"children":40},"p",{},[41,44,51,53,59,61,67],{"type":42,"value":43},"text","最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 ",{"type":22,"tag":45,"props":46,"children":48},"code",{"className":47},[],[49],{"type":42,"value":50},"cd",{"type":42,"value":52}," 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 ",{"type":22,"tag":45,"props":54,"children":56},{"className":55},[],[57],{"type":42,"value":58},"nix-shell",{"type":42,"value":60}," > ",{"type":22,"tag":45,"props":62,"children":64},{"className":63},[],[65],{"type":42,"value":66},"nvim .",{"type":42,"value":68}," 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）",{"type":22,"tag":38,"props":70,"children":71},{},[72,74,80],{"type":42,"value":73},"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 ",{"type":22,"tag":45,"props":75,"children":77},{"className":76},[],[78],{"type":42,"value":79},"zsh",{"type":42,"value":81}," 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。",{"type":22,"tag":83,"props":84,"children":86},"text-space",{"type":85},"tip",[87],{"type":22,"tag":38,"props":88,"children":89},{},[90],{"type":42,"value":91},"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。",{"type":22,"tag":38,"props":93,"children":94},{},[95,97,103],{"type":42,"value":96},"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 ",{"type":22,"tag":45,"props":98,"children":100},{"className":99},[],[101],{"type":42,"value":102},"~/.cds",{"type":42,"value":104}," 中。",{"type":22,"tag":106,"props":107,"children":110},"text-title",{"t":108,"type":109},"为什么用 nim?","2",[],{"type":22,"tag":33,"props":112,"children":115},{"url":113,"type":114},"https://github.com/adambard/learnxinyminutes-docs/pull/5380","pr",[],{"type":22,"tag":38,"props":117,"children":118},{},[119,121,130,132,138],{"type":42,"value":120},"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（",{"type":22,"tag":122,"props":123,"children":127},"a",{"href":124,"rel":125},"https://learnxinyminutes.com/zh-cn/nim/",[126],"nofollow",[128],{"type":42,"value":129},"Y分钟速成X",{"type":42,"value":131},") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 ",{"type":22,"tag":45,"props":133,"children":135},{"className":134},[],[136],{"type":42,"value":137},"or [up-to-date community version]",{"type":42,"value":139}," 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)",{"type":22,"tag":38,"props":141,"children":142},{},[143],{"type":42,"value":144},"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”",{"type":22,"tag":146,"props":147,"children":148},"hr",{},[],{"type":22,"tag":38,"props":150,"children":151},{},[152,154,161],{"type":42,"value":153},"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 ",{"type":22,"tag":122,"props":155,"children":158},{"href":156,"rel":157},"https://github.com/ajeetdsouza/zoxide",[126],[159],{"type":42,"value":160},"zoxide",{"type":42,"value":162}," 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。",{"type":22,"tag":164,"props":165,"children":167},"pre",{"code":166},"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n",[168],{"type":22,"tag":45,"props":169,"children":170},{"__ignoreMap":7},[171],{"type":42,"value":166},{"type":22,"tag":38,"props":173,"children":174},{},[175],{"type":42,"value":176},"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化：",{"type":22,"tag":178,"props":179,"children":182},"ul",{"className":180},[181],"contains-task-list",[183,205,230],{"type":22,"tag":184,"props":185,"children":188},"li",{"className":186},[187],"task-list-item",[189,195,197,203],{"type":22,"tag":190,"props":191,"children":194},"input",{"disabled":192,"type":193},true,"checkbox",[],{"type":42,"value":196}," TUI：例如 ",{"type":22,"tag":45,"props":198,"children":200},{"className":199},[],[201],{"type":42,"value":202},"c list",{"type":42,"value":204}," 时候可以检索快捷方式",{"type":22,"tag":184,"props":206,"children":208},{"className":207},[187],[209,212,214,220,222,228],{"type":22,"tag":190,"props":210,"children":211},{"disabled":192,"type":193},[],{"type":42,"value":213}," 通过 ",{"type":22,"tag":45,"props":215,"children":217},{"className":216},[],[218],{"type":42,"value":219},"c c iusx",{"type":42,"value":221}," 进入到目录之后自动执行记录在 ",{"type":22,"tag":45,"props":223,"children":225},{"className":224},[],[226],{"type":42,"value":227},"~/.cds_config.json",{"type":42,"value":229}," 中的脚本命令",{"type":22,"tag":184,"props":231,"children":233},{"className":232},[187],[234,237,239,245,247],{"type":22,"tag":190,"props":235,"children":236},{"disabled":192,"type":193},[],{"type":42,"value":238}," Auto: 可以自动记录，例如 ",{"type":22,"tag":45,"props":240,"children":242},{"className":241},[],[243],{"type":42,"value":244},"/Users/uwu/Code/My/iusx",{"type":42,"value":246}," 的时候自动记录 ",{"type":22,"tag":45,"props":248,"children":250},{"className":249},[],[251],{"type":42,"value":252},"iusx: /Users/uwu/Code/My/iusx",{"type":22,"tag":38,"props":254,"children":255},{},[256,258,264],{"type":42,"value":257},"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 ",{"type":22,"tag":45,"props":259,"children":261},{"className":260},[],[262],{"type":42,"value":263},"brew install cds",{"type":42,"value":265}," 来进行安装了（貌似应该写一个安装脚本？，。",{"title":7,"searchDepth":267,"depth":267,"links":268},2,[],"markdown","content:plan:programming:cds.md","content","plan/programming/cds.md","md",1756626901071]