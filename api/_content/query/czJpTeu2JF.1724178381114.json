[{"_path":"/book/24-hour","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"24 hour","description":"","director":"RHYME.Q","time":"2024.7.22","img":"05/1.png","plan":"30","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"1~3 季"},"children":[]},{"type":"element","tag":"h1","props":{"id":"_13-季不要内耗-1"},"children":[{"type":"text","value":"1~3 季：不要内耗 1"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。"}]},{"type":"element","tag":"text-title","props":{":t":"Subchannel chip"},"children":[]},{"type":"element","tag":"h1","props":{"id":"子通道芯片-subchannel-chip-2"},"children":[{"type":"text","value":"子通道芯片: Subchannel chip 2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个芯片貌似是虚构的，是影视道具的一部分，"},{"type":"element","tag":"a","props":{"href":"https://24.fandom.com/wiki/Subchannel_chip","rel":["nofollow"]},"children":[{"type":"text","value":"24 Wiki"}]},{"type":"text","value":" 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage","rel":["nofollow"]},"children":[{"type":"text","value":"频率跳变(Frequency Hopping Spread Spectrum, FHSS)"}]},{"type":"text","value":"、"},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Ultra-wideband#","rel":["nofollow"]},"children":[{"type":"text","value":"超宽频(UWB, Ultra-wideband)"}]},{"type":"text","value":"，"},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Low-power_wide-area_network","rel":["nofollow"]},"children":[{"type":"text","value":"低功耗广域网(Low-power wide-area network, LPWAN)"}]},{"type":"text","value":" 所常用的 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments","rel":["nofollow"]},"children":[{"type":"text","value":"窄带物联网(Narrowband IoT\n, NB-IoT)"}]},{"type":"text","value":" 协议。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"名称"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"领域"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FHSS"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"无线电"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"UWB"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"无线电"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"NB-IoT"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"无线电与物联网"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:24-hour.md","_source":"content","_file":"book/24-hour.md","_extension":"md"},{"_path":"/book/attacking-network-protocols","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","description":"","director":"James Forshaw","time":"2024","img":"01/1.png","plan":"1","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"Google Project Zero"},"children":[]},{"type":"element","tag":"h1","props":{"id":"作者-1"},"children":[{"type":"text","value":"作者 1"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本书的作者是 "},{"type":"element","tag":"a","props":{"href":"https://github.com/tyranid","rel":["nofollow"]},"children":[{"type":"text","value":"James Forshaw"}]},{"type":"text","value":"，也是著名的 "},{"type":"element","tag":"a","props":{"href":"https://googleprojectzero.blogspot.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Google Project Zero"}]},{"type":"text","value":" 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"会议"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.blackhat.com/","rel":["nofollow"]},"children":[{"type":"text","value":"BlackHat"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.secwest.net/","rel":["nofollow"]},"children":[{"type":"text","value":"CanSecWest"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"加拿大著名的国际信息安全会议，负责举办 Pwn2Own"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://events.ccc.de/","rel":["nofollow"]},"children":[{"type":"text","value":"Chaos Computer Conference"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Line_management","rel":["nofollow"]},"children":[{"type":"text","value":"Leader(line manager)"}]},{"type":"text","value":" 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在规划职业路径阶段认识了 "},{"type":"element","tag":"a","props":{"href":"https://www.linkedin.com/in/mike-jordon-72193719/","rel":["nofollow"]},"children":[{"type":"text","value":"Mike Jordon"}]},{"type":"text","value":" 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"text-title","props":{":t":"协议是一切的基础"},"children":[]},{"type":"element","tag":"h1","props":{"id":"基础-2"},"children":[{"type":"text","value":"基础 2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项："}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"功能"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"维护会话状态"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"创建新的连接或终止连接"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"通过寻址识别节点"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"控制流量"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"保证传输数据的顺序"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"检测和纠正错误"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"格式化和编码数据"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型："}]},{"type":"element","tag":"pre","props":{"code":"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n"}]}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"协议模型"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"内容层 (文件请求)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"我想要一个 image.png 图片"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"编码层 (HTTP)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"GET /image.png HTTP/1.1"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"传输层 (TCP/IP)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"4500 0043 50d1 4000 8000 c0a8 0a6d "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":" d83a d544 40e0 0050 5dff a4e6 6ac2 ……"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"text-title","props":{":t":"流量捕获"},"children":[]},{"type":"element","tag":"h1","props":{"id":"捕获-3"},"children":[{"type":"text","value":"捕获 3"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"名称"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"特点"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"被动捕获"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"在线路上传输时提取数据，如 Wireshark"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"不直接与流量交互"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"主动捕获"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"直接与服务器之间的流量产生干扰甚至是拦截、篡改"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"只查看正在测试的应用程序的流量"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。"}]},{"type":"element","tag":"text-title","props":{":t":"系统调用跟踪",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"模式"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"特点"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"用户模式"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"操作系统普通应用程序和用户空间进程运行的模式"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"权限限制"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"隔离"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"限制对系统资源的直接访问"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"日常应用程序的运行"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"内核模式"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"操作系统核心代码，具有对系统资源的完全访问权限"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"完全权限"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"关键操作"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"直接访问和控制系统资源"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"系统级调用"}]}]}]}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。"}]},{"type":"element","tag":"pre","props":{"code":"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。"}]},{"type":"element","tag":"text-title","props":{":t":"网络编程的基础",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution","rel":["nofollow"]},"children":[{"type":"text","value":"Berkeley Software Distribution（BSD）"}]},{"type":"text","value":" 完成的。因此在网络通信领域中，就离不开 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Berkeley_sockets","rel":["nofollow"]},"children":[{"type":"text","value":"Berkeley Sockets"}]},{"type":"text","value":"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你是类 Unix 系统，可以在终端输入 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"man 2 syscall_name"}]},{"type":"text","value":" 在终端中查看手册，比如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"man 2 open"}]},{"type":"text","value":" 就可以查看系统调用第二章有关 open 的内容。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。"}]},{"type":"element","tag":"text-title","props":{":t":"不同平台之间的捕获",":type":"2"},"children":[]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"平台"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"应用"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Linux"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Strace"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"跟踪系统调用和信号"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"macOS"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"DTrace"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"跟踪系统调用, 可用于许多类 Unix 系统"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Windows"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Process Monitor"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Windows TEAM 提供的交互非常 Nice 的进程监视器"}]}]}]}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。"}]},{"type":"element","tag":"text-title","props":{":t":"主动捕获",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:attacking-network-protocols.md","_source":"content","_file":"book/attacking-network-protocols.md","_extension":"md"},{"_path":"/book/ex-president-moon-s-memoir","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"Ex-President Moon's memoir","description":"","director":"RHYME.Q","time":"2024","img":"04/4.png","body":{"type":"root","children":[{"type":"element","tag":"text-an-next","props":{},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:Ex-President-Moon-s-memoir.md","_source":"content","_file":"book/Ex-President-Moon-s-memoir.md","_extension":"md"},{"_path":"/book/the-calculus-lifesaver","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"The Calculus Lifesaver: All the Tools You Need to Excel at Calculus","description":"","director":"RHYME.Q","time":"2023","img":"03/3.png","body":{"type":"root","children":[{"type":"element","tag":"text-an-next","props":{},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:the-calculus-lifesaver.md","_source":"content","_file":"book/the-calculus-lifesaver.md","_extension":"md"}]