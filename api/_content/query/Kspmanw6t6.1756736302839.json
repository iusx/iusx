[{"_path":"/plan/life/pay-hongkong-style-room","_dir":"life","_draft":false,"_partial":false,"_locale":"","title":"Hongkong style room","description":"作者2023年逃离深圳到惠州，住父母养老房。两年间主要靠不定期的大佬项目救济，年收入约410851.49日元。这一年远程工作后日子渐好，解决了吃饭问题。作者意识到自身不足，想攒钱买房，预算10万左右，还总结出捞钱所需因素，但自认有所欠缺。","director":"ritsu","time":"2025.08.20","types":"cc","img":"life/plan/room/1.jpg","info":"封面：正在安装 Arch linux","client":"My","target":13926.8,"current":-585.15,"displayType":"usd","body":{"type":"root","children":[{"type":"element","tag":"main-content","props":{":client":"client",":img":"img",":info":"info",":time":"time",":title":"title",":types":"types"},"children":[{"type":"element","tag":"text-sum","props":{":desc":"description"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"自从 2023 年逃离深圳来到惠州，已经过了两年，住的是父母准备养老的房子？反正空了很多年了。在这两年中唯一的焦虑就是带宽和吃饭的生活费，大概每年靠大佬项目救济能年入 ≈ 410851.49 JPY。也就是一个月大概能有 1666.67 CNY，不过也不是每个月都有。经常的是这个月 200，下个月 500，下下个月 1000 CNY 的样子。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有钱的时候会添置家用电器，例如冰箱、洗衣机、电视(貌似自己只会待在自己房间，几乎很少去客厅活动，导致电视只有探亲的时候才会打开看）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"难得的是，在这两年中我得到了很多的成长。清晰的了解自己的不足，很长时间处在自嗨阶段。如果和科班的比，基础不是很扎实，Code 薄弱。UI 和 Design 也缺少很多体系化的学习，例如版式设计、色彩\\排版、等缺乏合理运用，导致做出来的项目只是看起来 niubbity，但很多大佬看一眼就知不是能落地的。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"日子也是最近一年才好起来的（混到了 Remote work），至少不需要提心吊胆的过日子。美团优选+京东弥补了吃饭的问题。摆脱了拼多多的多多买菜，虽然价格便宜一点点，但经常会收到和海鲜放在一起的苹果、橙子导致连带这些水果都有很大的海鲜异味（甚至在多多买菜买到过臭的黄瓜）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"惠州的菜市场真的很贵，同样的买苹果、橙子需要 70 CNY。而多多买菜和美团优选可能 20~30 CNY 解决。作为一个非常宅的，我可能一周、两周才会出门一次例如丢垃圾、拿菜等。考虑到家庭和睦，我决定攒点钱买个房子，可能预算 10W? 6w 买房其他的用来装修。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"曾经看了 The Brutalist 这部电影。我觉得水泥风也是挺好的，水泥风 + loft 非常不错！ 可能还有地方放椭圆机（每天都要有氧）我对空间的要求不是特别大，20~15 平米有卫浴间都能接受。（由于经常吃预制菜的原因，几乎不需要厨房，有一个电饭煲、微波炉就以解决我的饮食了）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"唯一需要考虑的是洗衣机、烘干机、椭圆机、冰箱（因为我觉得这些还挺占位置的）比较幸运的是赶上了房价暴跌，所以我几乎大概是买二手房捡漏的。有一说一我还是比较喜欢惠州这个城市的，毕竟有 “深圳后花园” 的美誉，Address 还可写 Shenzhen，做公交一个小时就到了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我的要求还比较低，比如外卖、网购送货上门方便即可。这两年在旅游区域待着真的是怕了，生活成本很高，只能依靠京东和线上买菜解决吃饭问题。即使是外卖都很贵，甚至没有拼好饭。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果按照一个月存 3000 的话，那么 10w 大概需要 34 个月。但很多时候都会有意外，例如 Team 倒闭了、破产了、散伙了等一系列不可控因素，还有一个因素就是好不容易攒了 7k。立马想着配一个主机去学 UE，就会 -7k 归零。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"考虑到父母还有大概 5 年退休，或许慢慢朝着 10W 这个目标努力比较好。当然可能 10W 买套 10~20 平米的房子很像老鼠窝。不如努力捞钱在后面加个 0 。经历过这两年的历练。我总结出了捞钱的必要因素，即："}]},{"type":"element","tag":"wise-info","props":{"by":"马卡姆","topic":"捞钱的必要因素"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"莫名其妙的勇气 + 无论见过任何做得比自己好的项目/作品，都觉得自己做的最好 + 放下道德枷锁"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这是我总结出来的共同特点，或许是环境因素导致的，目前我还缺少这三种必要的捞钱因素。经常处在 “看到大佬的作品就开始 emo” 的阶段。时不时有学习的动力，同时也间接性摆烂。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:plan:life:pay-hongkong-style-room.md","_source":"content","_file":"plan/life/pay-hongkong-style-room.md","_extension":"md"},{"_path":"/plan/programming/cds","_dir":"programming","_draft":false,"_partial":false,"_locale":"","title":"cds","description":"","director":"ritsu","time":"2025.08.22","types":"cc","img":"life/plan/cds/1.jpg","info":"封面：This is cds","client":"My","target":100,"current":20,"displayType":"percent","body":{"type":"root","children":[{"type":"element","tag":"main-content","props":{":client":"client",":img":"img",":info":"info",":time":"time",":title":"title",":types":"types"},"children":[{"type":"element","tag":"git-info","props":{"url":"https://github.com/iusx/cdx"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cd"}]},{"type":"text","value":" 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nix-shell"}]},{"type":"text","value":" > "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvim ."}]},{"type":"text","value":" 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"zsh"}]},{"type":"text","value":" 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。"}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~/.cds"}]},{"type":"text","value":" 中。"}]},{"type":"element","tag":"text-title","props":{"t":"为什么用 nim?","type":"2"},"children":[]},{"type":"element","tag":"git-info","props":{"url":"https://github.com/adambard/learnxinyminutes-docs/pull/5380","type":"pr"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（"},{"type":"element","tag":"a","props":{"href":"https://learnxinyminutes.com/zh-cn/nim/","rel":["nofollow"]},"children":[{"type":"text","value":"Y分钟速成X"}]},{"type":"text","value":") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"or [up-to-date community version]"}]},{"type":"text","value":" 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 "},{"type":"element","tag":"a","props":{"href":"https://github.com/ajeetdsouza/zoxide","rel":["nofollow"]},"children":[{"type":"text","value":"zoxide"}]},{"type":"text","value":" 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。"}]},{"type":"element","tag":"pre","props":{"code":"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化："}]},{"type":"element","tag":"ul","props":{"className":["contains-task-list"]},"children":[{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" TUI：例如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"c list"}]},{"type":"text","value":" 时候可以检索快捷方式"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" 通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"c c iusx"}]},{"type":"text","value":" 进入到目录之后自动执行记录在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~/.cds_config.json"}]},{"type":"text","value":" 中的脚本命令"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" Auto: 可以自动记录，例如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/Users/uwu/Code/My/iusx"}]},{"type":"text","value":" 的时候自动记录 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"iusx: /Users/uwu/Code/My/iusx"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"brew install cds"}]},{"type":"text","value":" 来进行安装了（貌似应该写一个安装脚本？，。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有时候就是这样，只有自己亲身体验才能体会一些奇妙的感觉。也就是踩坑，而不是照着答案去答题。最近看的 《心灵捕手》和 《萨利机长》刚好有这个情景，印象深刻的是《心灵捕手》中的一段对话："}]},{"type":"element","tag":"wise-info","props":{"by":"心灵捕手","topic":"知识与体验的区别"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You've never been out of Boston."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nope"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sexual orientation. the whole works, right?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I bet you can't tell me what it smells like\nin the Sistione Chapel"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You never actually stood there\nlooked up ar that beautiful ceiling."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Seen that"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有的时候就是这样，例如将 Linus 作为主系统自然就会学习到很多与其相关的知识。游玩 Minecraft 之后自然会想要知道光影、Mode、材质是怎么制作的，甚至与好友公共游玩他人服务器的时候脑海中也会浮现出：“我也想开一个服务器” 的这种想法，自然而然的就能接触到 Linux、Windows server，甚至是 Java。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:plan:programming:cds.md","_source":"content","_file":"plan/programming/cds.md","_extension":"md"},{"_path":"/plan/programming/command-hide","_dir":"programming","_draft":false,"_partial":false,"_locale":"","title":"command-hide","description":"","director":"ritsu","time":"2025.03.31","types":"cc","img":"des/01/hide.jpg","info":"封面：command-hide.vscode version","client":"My","target":100,"current":99.99,"displayType":"percent","body":{"type":"root","children":[{"type":"element","tag":"main-content","props":{":client":"client",":img":"img",":info":"info",":time":"time",":title":"title",":types":"types"},"children":[{"type":"element","tag":"git-info","props":{"url":"https://github.com/jiangxue-analysis/vscode-comment-hide"},"children":[]},{"type":"element","tag":"git-info","props":{"url":"https://github.com/jiangxue-analysis/nvim.comment-hide","type":"iss"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我写了差不多一篇小软文，题目为 "},{"type":"element","tag":"a","props":{"href":"https://dev.to/brights/why-doesnt-anyone-want-to-write-code-comments-anymore-40jf","rel":["nofollow"]},"children":[{"type":"text","value":"VSCode plugin comment-hide: Dare to write comments!"}]},{"type":"text","value":" 这篇文章打算投稿到 chokcoco 的 icss 前端趣闻的，但貌似大佬比较忙没时间审稿了（确信！）只好翻译成 English 发到 dev.to 上。如你所见我写了两个版本，一个是 VScode 另一个是 Neovim plugin。"}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之所以发 dev.to 很大程度上是一个账号可以刷 10 个赞，且一个 gmail 可以注册三次 DEV。风控并不是很严重，基本上很容易刷到 50 赞到社区首页。之后就会有一大堆 bot 搬到国内的内容农场（很有意思就对了）不过转化率很低，没 reddit 那么高。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之所以有两个版本是我中途切换到 neovim 了。因为在项目中 VScode 经常崩溃，甚至是闪退？Lsp 动不动就不起作用。只好换成了 neovim，前期用的是 Lazyvim。但用的时候发现动不动就给我报错，fzf 也一些子就各种 warnning 很烦。于是只好把 Lazyvim 删了换成了 "},{"type":"element","tag":"a","props":{"href":"https://github.com/folke/lazy.nvim","rel":["nofollow"]},"children":[{"type":"text","value":"lazy.nvim"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"需要什么我自己配什么，有一说一和搭积木一样，仿佛时间过得很快。参考了 "},{"type":"element","tag":"a","props":{"href":"https://github.com/dragove/dotfiles/tree/master/nvim/.config/nvim","rel":["nofollow"]},"children":[{"type":"text","value":"dragove/nvim/.config/nvim"}]},{"type":"text","value":" 的结构，看起来就很专业，自己配的话确实很舒服，完全按照自己的需求来搭配。解决了很多 Lazyvim 会遇到的问题，如果遇到了问题还可以调试下是那个 plugin 出现的，来进行点对点的解决，不会手忙脚乱。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由于我自己长时间用的都是 neovim，所以 vscode 的版本被我 archive 掉了。基本上逻辑用的都是正则来进行匹配，因此移植到 neovim 上比较简单。至于为什么写这个插件，可能是抱着长时间接触 Code 做准备吧。因为 code 有注释确实能方便阅读并理解。但如果作为公开的话，雀实会发生一些问题，例如：“怎么这么简单的逻辑还要写注释！”"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因此我觉得如果要公开的话，或者说每个人都能看到的话，我更希望将注释删掉。这样就可以装作很腻害的样子，注释只能自己看到。不过经历了我自己的长期使用，如果遇到类似 vue 这种一个文件有 html、css、js 的，只能处理简单的注释，比如如果在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<template></template>"}]},{"type":"text","value":" 中出现了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<p>//</p>"}]},{"type":"text","value":" 就也会被认定是注释去除。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要解决这个问题的话可能需要重构逻辑，例如对这种文件进行单独匹配，比如 vue 就需要单独调用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"js\\html\\css"}]},{"type":"text","value":" 三个注释逻辑，而不是目前的这种："}]},{"type":"element","tag":"pre","props":{"code":"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"vue = { multi_patterns.html, single_patterns.slash, multi_patterns.c },\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"也就是说需要 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<script>"}]},{"type":"text","value":" 用 js 的注释, "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<template>"}]},{"type":"text","value":" 用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"html"}]},{"type":"text","value":" 的注释，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"style"}]},{"type":"text","value":" 用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"css"}]},{"type":"text","value":" 的注释，不过我目前就只遇到过一次，如果遇到四五次的话，可能会修复这个问题（毕竟改动貌似挺大的（可能我成为不了一位优秀的 Coder 是有原因的，很大一部分原因是因为我懒。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:plan:programming:command-hide.md","_source":"content","_file":"plan/programming/command-hide.md","_extension":"md"},{"_path":"/plan/programming/new-blog-theme-plan","_dir":"programming","_draft":false,"_partial":false,"_locale":"","title":"NEW BLOG THEME PLAN","description":"回顾了 Blog 的设计历程，从最初简单的布局到使用 D3.js 实现动态效果，再到探索 Spine 动画技术的可能性。作者反思了过去的“自嗨”心态，意识到技术能力的不足，但也找到了新的方向——借鉴 Pinterest 上的风格，结合手绘或约稿，利用 Spine 实现更专业的交互效果。虽然计划可能耗时较长（甚至跨年），但希望通过学习提升，最终打造一个兼具科技感和美术风格的博客，以此增强自信并摆脱“loser”心态。","director":"ritsu","time":"2025.07.06","types":"cc","img":"life/plan/new-blog/1.png","info":"封面：构造 SMTP 协议发送信息","client":"My","target":100,"current":5,"displayType":"percent","body":{"type":"root","children":[{"type":"element","tag":"main-content","props":{":client":"client",":img":"img",":info":"info",":time":"time",":title":"title",":types":"types"},"children":[{"type":"element","tag":"text-sum","props":{":desc":"description"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"目前这个 BLOG 大概是在去年的七月份开始筹备的。总共设计了两次，第一版是一个很简单的布局，而第二版是通过 D3.JS 实现了一个类似 “心脏跳动” 的效果。但还是很制式风格，并没有什么特点。在此之前，我沉浸在自嗨的喜悦中，即使知道自己是个 loser，但依然不愿意承认自己是个 loser，每当觉得自己很 loser 的时候。"}]},{"type":"element","tag":"text-space","props":{"img":"life/plan/new-blog/2.png","info":"图 1 ｜ 第一版和第二版的 BLOG 设计（感觉第一版还挺好看的，第二版就显得沉默寡闻了"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"就会打开 Figma 开始幻想自己是多么腻害，多么 niubbity。沉浸在自己幻想的世界里无法自拔，直到我开始不那么故步自封。在 loser 的这个时间段中，我知道了自己在哪些地方的不足，以及了解了新的知识，例如 spine。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"spine 给我带来了一个无限可能。我可以利用 spine runtime 来实现我以前高攀不起的效果甚至是交互。主要还是自己基础不是很牢固，如果基础牢固，就不会有上面沉浸自嗨的环境中麻痹自己。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果自己很腻害，给 apache 开 20 个 pr 就能混进 apache。给 rust-lang 开 50 个 pr 也能混进 rust。这些 pr 都不是水一个很小的问题，更多事提供 “价值”。归根结底还是自己太菜，庆幸的是自己有很多时间学习。"}]},{"type":"element","tag":"text-space","props":{"img":"life/plan/new-blog/3.png","info":"图 2 ｜ 在 pinterest 上发现的 style，很个性，并且布局很合理。是我喜欢的类型，有 tech 的感觉。"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新的 style 会增加些许自信，在觉得自己是 loser 的时候可以看看自己的 blog 安慰下自己，起码美术很好不是吗？风格我已经确定好了，就是类似 图2 的那种。可能是我自己手绘？然后自己拆分下，在放到 spine 上做动画，之后利用下 spine runtime 实现交互。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个过程中我可以学习到特别想学的特效。不过自己画难免会有很多问题，或许我会选择花个 1k 的预算约一个画师帮我画三视图，之后自己拆分下。总之可能需要很久才能开始这个 plan，要学的太多了，可能会在今年？明年？完成这个 PLAN？"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最近学习到了一个新的词汇，叫 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/CSS_hack","rel":["nofollow"]},"children":[{"type":"text","value":"CSS Hack"}]},{"type":"text","value":" 是水 AOSC 的时候在 group 上有一个大佬指出来的（很严谨，学到很多:"}]},{"type":"element","tag":"pre","props":{"code":"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"table {\n  margin: 1em 0;\n+ display: block;\n+ overflow-x: auto;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其大概含义就是可能这么写不会生效，例如（Invalid or non-compliant CSS/Unsupported CSS）不过我 firefox 和 chrome 以及 safari 都看了一遍，确实解决了 overflow 的问题，所以我就没继续开 pr 去水（感觉老是水这种没什么意思，但又不敢水大的，一点一点水也很不错啦！毕竟 Linus 说过:"}]},{"type":"element","tag":"wise-info","props":{"by":"Linus Benedict Torvalds","topic":"The mind behind Linux | Linus Torvalds | TED"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Some of those people dont't do a lot"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nThere's a lot of people who make small,small changes,"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在视奸其他大佬之后发现有的大佬是向往无 CSS 、无 JavaScrip 这种追求的。很明显我不是，我想要的是最终效果达到且好看和设计时一样就好了。大概率是我还停留在应用，没有深入 V8,渲染、编译这一阶段。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最近在玩 "},{"type":"element","tag":"a","props":{"href":"https://store.steampowered.com/app/2585110/_/","rel":["nofollow"]},"children":[{"type":"text","value":"《我在疗养院送人上西天》"}]},{"type":"text","value":" 是一个推箱子玩法，据说是二消？根据我的游玩体验发现是需要用到 math 的。比如通过计算实现最小步数过关，而我没这个追求，我只想过关而已。"}]},{"type":"element","tag":"wise-info","props":{"by":"linus benedict torvalds","topic":"the mind behind linux | linus torvalds | ted"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"but that's not everybody,"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\ni care about the thechnology"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nthere are people who care about the ui"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\ni can't do ui to save my life."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\ni mean, if i was stranded on an island,"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nand the only way to get off that island was the make a pretty ui,"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\ni'd die there."},{"type":"element","tag":"br","props":{},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"(根据我视奸群u萌得出的一个暴论就是：前端可有可无，需要的时候直接拷打 AI)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"很明显我是 \"There are people who care about the UI\" 的那个人。但我又有那么一点点追求，你可以说我 code ,design, security 都是 🗑 但我都有那么一点点的小成就。这又回到了我初中时纠结的一点，是走 security 还是走 code，我选择的是后者。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因为我当初梳理的结论是 design > code > security > ui 因为 security 和 ui 都是建立在 code 之下的。没有 code 怎么实现，没有实现怎么 security test。之所以没有 desing，是因为 desing 无处不在，code 也需要精心 design 否则就会难以维护。design 决定了 code 的上限与下限，同样也决定了前端的上限与下限。"}]},{"type":"element","tag":"wise-info","props":{"by":"Wikipedia","topic":"Frontend and backend"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In software development, frontend refers to the presentation layer that users interact with, while backend involves the data management and processing behind the scenes, and full-stack development refers to mastering both. In the client–server model, the client is usually considered the frontend, handling user-facing tasks, and the server is the backend, managing data and logic. Some presentation tasks may also be performed by the server."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前端下限低上限高——比如你写 HTML/JS/CSS 也是前端，混进了 Node.js/W3C/TC39/LWJGL 也是前端，会套个 UI 组件库用个框架也是前端；从工具链来看，有人用记事本写 jQuery，有人参与构建 Babel/Webpack；从图形技术看，有人只会 CSS 画方块，有人用 WebGL/WebGPU 开发 3D 引擎；从标准化角度看，有人只会查 MDN，有人参与 W3C 标准制定。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同样的，design 也是下限低上限高——你 Figma 套个现成的也叫 UI design，拿了各种 IF、RED、IDEA、Core77 也叫 design；从交互设计看，有人拼凑现成组件，有人发明全新交互范式（如滑动解锁）；从设计系统看，有人用 Ant Design，有人打造 Material Design 这样的行业标准；从动态设计看，有人用 Canva 做动效，有人开发 Rive 这样的专业工具。"}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"肯定会有人觉得我是从事前端、design 的既得利益者，很可惜我并不从事这些行业，我只是当个消磨时间的爱好罢了。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"很讨厌那些 AI 魔怔人（不过有点背后蛐蛐人的意思，但还好以后都不会遇到了），什么都 AI，真希望 AI 早点淘汰掉这些人，希望他们公司 Leader 早点意识到让 AI 取代下他们工作，再原有的基础上加个 10% 倍 KPI，狠狠替代。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"del","props":{},"children":[{"type":"text","value":"一想到这些人会面临失业淘汰跑众包心里就舒服多了（可能有点阴暗角落老鼠思维，但好在没人看我 blog"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可能这个现象可以用 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect","rel":["nofollow"]},"children":[{"type":"text","value":"Dunning–Kruger effect"}]},{"type":"text","value":" 来解释，很爽。有时候在想，比我 niubbity 的自然会有比他 niubbity 的当球踢，比我 niubbity 没什么大不了的反正真正的大佬又不会在 Public Group 刷新，都是 LV2、LV3、LV4 的 NPC 再强不过 Top 10%,在弱不过 LV2。"}]},{"type":"element","tag":"wise-info","props":{"by":"Wikipedia","topic":"Dunning–Kruger effect"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Dunning–Kruger effect is defined as the tendency of people with low ability in a specific area to give overly positive assessments of this ability"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其实有时候在想。当一只井底之蛙没什么不好的，眼界高了，看的大佬们的作品之后难免会妄自菲薄？然后陷入学习循环，导致没有迈出去做的那一步，一直在学习，一直在吹毛求疵。但环境，家庭，运气和性格都是决定一个人走向的因素之一，每个人都是不同的（起码在基因上是这样）"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:plan:programming:new-blog-theme-plan.md","_source":"content","_file":"plan/programming/new-blog-theme-plan.md","_extension":"md"},{"_path":"/plan/security/cve-learn","_dir":"security","_draft":false,"_partial":false,"_locale":"","title":"CVE learn","description":"","director":"My","img":"14/1.png","time":"2025.06.29","plan":"100,100","target":100,"current":1,"displayType":"percent","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"CVE is my dream."},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"早在我上小学时，就觉得 CVE 很帅。步入初中时，在初三那年我拿到了广东电信 IPTV 的通用漏洞。步入社会时，我拿到了 Github 的 Bug bounty。但我始终没有去拿一个 CVE 的编号。因为水是可以水的，但我已经水了 CNVD 和 Hackerone，我希望我的第一个 CVE 编号可以是不那么水的，有一点含金量的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"虽然我并不是 Security 行业或领域的从业人员，只是一个爱好者。但我一直觉得 Security 很帅。同样的，虽然我不是 Design 行业的从业人员，但我觉得可以让自己做出来的 project 会好看，有个性。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我并不是一个专精的人。很多时候我每项感兴趣的领域单拎出来都会被降维打击。虽然我单项领域无法媲美专业的从业者，但我感兴趣的领域都有点建树和作品。将 Security、Design、Animation、Computer 合在一起，与之能媲美的人可能会少那么一点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而现在，我只有 Design 的代表作，而 Security、Animation、Computer 还没有一个能拿得出手的作品。因此我希望会在未来三年，尽可能的补全这些我感兴趣领域的代表作。可能因为 Work 比较闲的缘故，我的时间总会多那么一点来放到我感兴趣的领域上。即使达不到也没有关系，至少也是努力过了，无论如何三年后的自己总会比现在的自己稍微厉害那么一点点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因此这个页面会记录一些我感兴趣的 CVE 和 CWE 的编号来让我学习，可能会获取到一些新的思路和对某个方面的理解。来帮助我实现这个目标，顺便看看冷门的 CWE 方向，毕竟 OWASP TOP 10 个人没有太大的兴趣。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"rust-3"},"children":[{"type":"text","value":"rust 3"}]},{"type":"element","tag":"h2","props":{"id":"cve-2022-36114-1"},"children":[{"type":"text","value":"CVE-2022-36114 1"}]},{"type":"element","tag":"cve-info","props":{":type":"2","cve":"CVE-2022-36114","to":"https://nvd.nist.gov/vuln/detail/CVE-2022-36114",":cwe":"400"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不受控制的资源消耗"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"利用 Cargo 的 "},{"type":"element","tag":"a","props":{"href":"https://doc.rust-lang.org/cargo/reference/build-scripts.html","rel":["nofollow"]},"children":[{"type":"text","value":"build script"}]},{"type":"text","value":" 在构建阶段编译第三方的非 Rust code，同时结合 "},{"type":"element","tag":"a","props":{"href":"https://doc.rust-lang.org/book/ch20-05-macros.html#how-to-write-a-custom-derive-macro","rel":["nofollow"]},"children":[{"type":"text","value":"procedural macros"}]},{"type":"text","value":"，在执行 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cargo run"}]},{"type":"text","value":" 的过程中触发了一个 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Zip_bomb","rel":["nofollow"]},"children":[{"type":"text","value":"Zip Bomb"}]},{"type":"text","value":" 行为。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于这个问题的修复，rust-lang 已经给出了一个 "},{"type":"element","tag":"a","props":{"href":"https://github.com/rust-lang/wg-security-response/blob/4bbe734e6404ece6f4e85027564f8995d4ab70e0/patches/CVE-2022-36114/0001-CVE-2022-36114-limit-the-maximum-unpacked-size-of-a-.patch","rel":["nofollow"]},"children":[{"type":"text","value":"补丁修复"}]},{"type":"text","value":" Zip_bomb 的问题:"}]},{"type":"element","tag":"pre","props":{"code":"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n","language":"c","meta":"","className":["language-c"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 在解压 .crate 文件（tar.gz）时，限制最多只能解压出 512MB 的内容。\n+const MAX_UNPACK_SIZE: u64 = 512 * 1024 * 1024;\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同时引入了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"LimitErrorReader"}]},{"type":"text","value":": 超过就抛出错误，避免资源被耗尽（比如磁盘写爆）。除此之外并没有对 macros、build 加以限制，只是建议尽可能的用 "},{"type":"element","tag":"a","props":{"href":"https://crates.io/","rel":["nofollow"]},"children":[{"type":"text","value":"crates"}]},{"type":"text","value":" 上提交的 crate。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"cve-2023-40030-1"},"children":[{"type":"text","value":"CVE-2023-40030 1"}]},{"type":"element","tag":"cve-info","props":{":type":"1","cve":"CVE-2023-40030","to":"https://nvd.nist.gov/vuln/detail/cve-2023-40030",":cwe":"79"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"{OWASP TOP TEN}: 不恰当的网页生成输入中和 XSS"},{"type":"element","tag":"br","props":{},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看到这篇通告的时候，我就回想起为什么我看 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cargo build --timings"}]},{"type":"text","value":" 的时候肿么没想到会有 CWE-79。"},{"type":"element","tag":"a","props":{"href":"https://doc.rust-lang.org/cargo/reference/timings.html","rel":["nofollow"]},"children":[{"type":"text","value":"--timings"}]},{"type":"text","value":" 是一个生成 build 时间的 html 报告。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以通过在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Cargo.toml"}]},{"type":"text","value":" 中加入 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"features = [\"<img src='' onerror=alert(0)\"]"}]},{"type":"text","value":" 来触发一个 CWE-79, 因此对这个问题的修复就是，将之前的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Warning"}]},{"type":"text","value":", 换成了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"bail!"}]},{"type":"text","value":" 机制。"}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"bail!"}]},{"type":"text","value":" 宏来自 "},{"type":"element","tag":"a","props":{"href":"https://docs.rs/anyhow/latest/anyhow/macro.bail.html","rel":["nofollow"]},"children":[{"type":"text","value":"anyhow"}]},{"type":"text","value":" 用于方便地提前返回错误。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"可以看一下 "},{"type":"element","tag":"a","props":{"href":"https://github.com/rust-lang/cargo/commit/9835622853f08be9a4b58ebe29dcec8f43b64b33#diff-99a8f4b284589e7db1aec698aa8f9ef9390f3ee3ecddc399dd6be1aa9ee00388L440-L446","rel":["nofollow"]},"children":[{"type":"text","value":"fix pr"}]},{"type":"text","value":"，非常有意思，比如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"validate_feature_name"}]},{"type":"text","value":" 函数。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"原来：遇到非法 feature name，只输出 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"warning"}]},{"type":"text","value":"，流程继续。"},{"type":"element","tag":"br","props":{},"children":[]}]},{"type":"element","tag":"pre","props":{"code":"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            config.shell().warn(&format!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\\n\\\n                {}\",\n                ch, name, pkg_id, FUTURE\n            ))?;\n\n        }\n    }\n"}]}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我本来想看看 2025-6-27 的 src/cargo/core/summary.rs 这个 fix pr 的区别。但我发现了一个流量密码，那就是 Rc → Arc, 问就是 Thread Safety！"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在：遇到非法 feature name，直接 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"bail!"}]},{"type":"text","value":"，构建中止，用户必须修正。"}]},{"type":"element","tag":"pre","props":{"code":" if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" if let Some(ch) = chars.next() {Add commentMore actions\n        if !(unicode_xid::UnicodeXID::is_xid_start(ch) || ch == '_' || ch.is_digit(10)) {\n            bail!(\n                \"invalid character `{}` in feature `{}` in package {}, \\\n                the first character must be a Unicode XID start character or digit \\\n                (most letters or `_` or `0` to `9`)\",\n                ch,\n                name,\n                pkg_id\n            );\n        }\n    }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在单元测试中，来验证 feature name 是否合法，例如只有 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"is_ok()"}]},{"type":"text","value":" 是合法的，而 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"is_err()"}]},{"type":"text","value":" 是不合法的："}]},{"type":"element","tag":"pre","props":{"code":" #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" #[test]Add commentMore actions\n    fn valid_feature_names() {\n        let loc = CRATES_IO_INDEX.into_url().unwrap();\n        let source_id = SourceId::for_registry(&loc).unwrap();\n        let pkg_id = PackageId::new(\"foo\", \"1.0.0\", source_id).unwrap();\n\n        assert!(validate_feature_name(pkg_id, \"c++17\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"128bit\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"_foo\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat-name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"feat_name\").is_ok());\n        assert!(validate_feature_name(pkg_id, \"foo.bar\").is_ok());\n\n        assert!(validate_feature_name(pkg_id, \"+foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"-foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \".foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo:bar\").is_err());\n        assert!(validate_feature_name(pkg_id, \"foo?\").is_err());\n        assert!(validate_feature_name(pkg_id, \"?foo\").is_err());\n        assert!(validate_feature_name(pkg_id, \"ⒶⒷⒸ\").is_err());\n        assert!(validate_feature_name(pkg_id, \"a¼\").is_err());\n    }\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"cve-2023-41051-1"},"children":[{"type":"text","value":"CVE-2023-41051 1"}]},{"type":"element","tag":"cve-info","props":{":type":"1","cve":"CVE-2023-51051","to":"https://nvd.nist.gov/vuln/detail/cve-2023-41051",":cwe":"125"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"越界访问（out-of-bounds）: 访问了本不属于该内存区域的数据。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/rust-vmm/vm-memory","rel":["nofollow"]},"children":[{"type":"text","value":"vm-memory"}]},{"type":"text","value":" 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"VolatileMemory"}]},{"type":"text","value":" 实现未对边界进行严格校验，导致有可能读取到非法的内存区域："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"VolatileMemory::get_slice"}]},{"type":"text","value":": 返回一段“易失性切片”（VolatileSlice），用于后续的底层操作"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"VolatileMemory::read/write"}]},{"type":"text","value":": 直接从这块内存读/写数据，保证每次都实际发生内存访问"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"VolatileMemory trait 就是定义了一套访问“虚拟机物理内存”或“特殊硬件内存区域”的低层接口，保证每次读写都真实发生，且不被编译器优化。它让不同的底层实现都能用统一的 trait 操作。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但问题来了，这个通告并不涉及 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"read/write"}]},{"type":"text","value":"，更多的是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_slice"}]},{"type":"text","value":" 方法，例如："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_atomic_ref"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"aligned_as_ref"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"aligned_as_mut"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_ref"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_array_ref"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"上述方法有个共同点，都是利用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ref"}]},{"type":"text","value":" 类方法引起的。它们都尝试返回指向底层内存的 Rust 类型引用（如 &T、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"&[T]"}]},{"type":"text","value":" 等），而不是直接读写原始字节数据。它们的实现通常会调用 get_slice，假设返回的内存区域长度足够大。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果自定义实现的 get_slice 返回的切片长度不足，就会导致这些 ref 方法产生越界引用，造成内存安全风险。例如："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"这些方法假设 get_slice 返回的 VolatileSlice 长度是你要求的大小（比如 T 是 u32，就要 4 字节）。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"如果自定义实现的 get_slice 返回的 VolatileSlice 比你要求的短（比如只返回了2字节）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"这些方法还是会照常把这块内存强转成 &T，这时你访问 &T 时就可能会读到超出实际内存范围以外的内容"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"仔细欣赏 "},{"type":"element","tag":"a","props":{"href":"https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8#diff-0870facad91de878abbdf4dc43212b8de558021cf0971f62148c2cab381bd150R109-R275","rel":["nofollow"]},"children":[{"type":"text","value":"fix pr"}]},{"type":"text","value":" 你会发现："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这些方法内部，都会调用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_slice(offset, count)"}]},{"type":"text","value":" 拿到一块内存切片，然后把它 reinterpret_cast 成你要的类型引用。因此给 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_slice"}]},{"type":"text","value":" 加上 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"assert_eq!"}]},{"type":"text","value":" 就意味着："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"“如果你要 8 字节引用，必须实际拿到 8 字节的内存切片，否则直接 panic，不做 unsafe 操作！”"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"cve-2023-38497-1"},"children":[{"type":"text","value":"CVE-2023-38497 1"}]},{"type":"element","tag":"cve-info","props":{":type":"3","cve":"CVE-2023-38497","to":"https://nvd.nist.gov/vuln/detail/cve-2023-38497","cwe":"278,732"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"278: 不安全的保留继承权限"},{"type":"element","tag":"br","props":{},"children":[]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"732: 关键资源的权限分配错误"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CWE-278 还是较为冷门的，毕竟只有一个参考，既 "},{"type":"element","tag":"a","props":{"href":"https://www.cve.org/CVERecord?id=CVE-2005-1724","rel":["nofollow"]},"children":[{"type":"text","value":"CVE-2005-1724"}]},{"type":"text","value":"。CWE-278 这个类的漏洞常见表现之一就是 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"权限限制”"}]},{"type":"text","value":"。总的来说 umask 是 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"限制新建文件或目录默认权限的一个机制。"}]},{"type":"text","value":"，可以看看 "},{"type":"element","tag":"sup","props":{},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"，我清晰记得有时候需要执行什么 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" 脚本的时候，会使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"chmod 777"}]},{"type":"text","value":", 要不然运行不了。"}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CVE-2005-1724 是一个典型的“配置安全限制无效”型漏洞，使得 NFS 导出的目录被所有人都能访问，造成权限绕过和潜在的数据泄露/篡改风险。其归类于 CWE-278 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"属于权限/访问控制失效问题。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而 CWE-732 又是 CWE-278 的子类，因此会有两个 CWE 的分配。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比如 CVE-2005-1724 在正常情况下，在导出（export）NFS 文件系统时，通常会用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"-network"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"-mask"}]},{"type":"text","value":"："}]},{"type":"element","tag":"pre","props":{"code":"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/some/dir -network 192.168.1.0 -mask 255.255.255.0\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样本应只有 192.168.1.0/24 网络内的主机可以访问该目录。但在 Mac OS X 10.4.x 的 NFS 服务实现没有正确处理/生效这些参数。因此构成了 CWE-278"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要想理解本次的 CVE，我们首先需要理解标题 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Cargo 在解压 crate 包时未按照 umask 限制文件权限"}]},{"type":"text","value":"。而 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"umask"}]},{"type":"text","value":" 是默认权限，翻译成人话就是："}]},{"type":"element","tag":"text-tip","props":{"type":"big"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Cargo 在解压 crate 包时，没有按照 umask 分个默认的权限。攻击者可以利用这一点也就是 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"777"}]},{"type":"text","value":" 权限构建攻击脚本。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n↑ 可能不是很严谨"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"过去 Cargo 解压 .crate 包时，直接采用了压缩包内的文件权限（比如 777/666），"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"没有结合操作系统的 umask，导致解压后的文件权限过宽，其他本地用户可能能写入、篡改这些源码文件。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"src/cargo/util/mod.rs"}]},{"type":"text","value":" 中新增了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"get_umask()"}]},{"type":"text","value":" 函数。以在解压文件时，强制用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"umask"}]},{"type":"text","value":" 限制新文件的权限。："}]},{"type":"element","tag":"pre","props":{"code":"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock<libc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#[cfg(unix)]\npub fn get_umask() -> u32 {\n    use std::sync::OnceLock;\n    static UMASK: OnceLock<libc::mode_t> = OnceLock::new();\n    // SAFETY: Syscalls are unsafe. Calling `umask` twice is even unsafer for\n    // multithreading program, since it doesn't provide a way to retrive the\n    // value without modifications. We use a static `OnceLock` here to ensure\n    // it only gets call once during the entire program lifetime.\n    *UMASK.get_or_init(|| unsafe {\n        let umask = libc::umask(0o022);\n        libc::umask(umask);\n        umask\n    }) as u32 // it is u16 on macos\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以及很有艺术性的一行 code:"}]},{"type":"element","tag":"pre","props":{"code":"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"fs::set_permissions(path, Permissions::from_mode(final_mode)).unwrap();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"解压 crate 时，读取每个文件的原始权限（如 0o777），实际写入磁盘时，会用 原始权限 & "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"!umask"}]},{"type":"text","value":" 得到最终权限，再 chmod 到文件上:"}]},{"type":"element","tag":"pre","props":{"code":"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"assert_eq!(metadata.mode() & 0o777, 0o644 & !umask);\n"}]}]},{"type":"element","tag":"div","props":{"id":"refer-anchor-1","className":["ref"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/","rel":["nofollow"]},"children":[{"type":"text","value":"https://langzi989.github.io/2017/09/13/Linux%E4%B8%ADumash%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"}]}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"cve-2022-36114-1","depth":2,"text":"CVE-2022-36114 1"},{"id":"cve-2023-40030-1","depth":2,"text":"CVE-2023-40030 1"},{"id":"cve-2023-41051-1","depth":2,"text":"CVE-2023-41051 1"},{"id":"cve-2023-38497-1","depth":2,"text":"CVE-2023-38497 1"}]}},"_type":"markdown","_id":"content:plan:security:cve-learn.md","_source":"content","_file":"plan/security/cve-learn.md","_extension":"md"}]