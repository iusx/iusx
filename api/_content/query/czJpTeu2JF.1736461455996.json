[{"_path":"/book/24-hour","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"24 hour","description":"","director":"R/N","time":"2024.7.22","img":"05/1.png","plan":"30","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"1~3 季"},"children":[]},{"type":"element","tag":"h1","props":{"id":"_13-季不要内耗-1"},"children":[{"type":"text","value":"1~3 季：不要内耗 1"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看完了 1~2 季，看到了第三季突然想弃剧。第一次因为一个角色而丧失继续看下去的欲望。Bauer 的女儿 Kim 真的是太烦了，第三季竟然直接进入到了 CTU，令我大受震撼。第一季爱上保释期的罪犯也就算了，因为确实还挺帅的。但第一季 Kim 的表现总有一种：“我爹是 CTU，所有人都得让着我” 的感觉，特别是因为男友贩毒被抓了之后，对警长的态度，总感觉自己比其他人高人一等。最后警长运送 Kim 到 CTU 的途中还给车创了，还感觉挺可惜的，是一个非常有特色的角色。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"24 hour 讲述 24 小时内发生的事情非常有特色，很多人都针对这一点觉得这是开创性的？但我觉得这部剧表现出了个人英雄主义主角的家庭刻画，以及主角家庭因为主角所获得荣誉所得到的一些特权，在第二季表现的尤为明显。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在第二季中，Kim 直接成为了保姆，Bauer 因为家庭原因，从 CTU 离职（在此之前，Bauer 是 CTU 华盛顿地区主管)，Kim 因为母亲的死亡而怪罪 Bauer。但说实话，如果不是 Kim 母亲到处走动，Nina 根本不会对其动手。在第一季和第二季的大部分时间，Bauer 的家庭原因都占很多因素，而导致在任务过程中出现些许问题。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们先认为 Bauer 因为怕 Kim 担心而没有告知 CTU 工作的危险性，并且在第一季 Kim 被绑架后，Bauer 独自前去解救并亲眼目睹发生枪战后。依然熟视无睹跟她的绑匪男友谈情说爱。从安全屋脱险后，CTU 和毒贩之间，选择了信任毒贩的脑回路。之后被当地警察或是 DEA 拘留，警长在护送 Kim 前往 CTU 的途中，Kim 又又又被绑了。Bauer 在执行关键任务的时候又又又被 Kim 所分心，差点死辣。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是这事过去的一年后，Kim 依然觉得是 Bauer 害死了麻麻，我们可以理解。但作为一个保姆，Kim 简直太有职业道德了，间接将雇主害死，差一点让雇主的宝宝被一群恋童癖的变态拐走，又把雇主老公给鲨了。说实话，我看了第二季并没有心疼 Kim，而是心疼雇佣了 Kim 这一家，直接被 Kim 害的家破人亡，最后还一点事没有。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"或许雇主虐童有问题，但起码罪不至死，监狱关个 50 多年就出来了，但 Kim 间接让人家双亲死辣，本来人家麻麻还能活的，因为 Kim 带宝宝跑了人老公直接给打死辣，而且一点事没有。抛开事实不谈，我们这个可以理解，毕竟作为一个保姆，拥有非常强的职业道德，虽然害的宝宝失去双亲。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但 Kim 被孩子父亲以拐卖幼童、谋杀雇主的罪名发起全城通缉，给交警逮捕的情况下，和男友密谋逃脱。放火把车子点着，导致车直接滚下道路，男友直接截肢了一条腿，警察估计是死了，最后依然什么事没有。我们抛开事实不谈，Kim 是被冤枉的，和交警解释了也没用所以才这样的。但起码等回到警局再说吧，虽然有 Bauer 将核弹即将引爆的机密告诉了 Kim，但交警又不是 CTU，交警肯定质疑这条消息是假的，回到警局人家联系 CTU 就能把 Kim 放了，但 Kim 等不了，直接就点燃车子引发侧翻跑了的脑回路没什么问题。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后因为核弹的消息泄露，导致全城恐慌，Kim 去便利店，但店主都关门营业了，并且知道目前会发生恐慌所以不让任何人进来。但店主估计看 Kim 没什么危险性就让 Kim 进来了，结果有人想去便利店买点东西屯着，看 Kim 在里面来质疑店主：“为什么她可以进去买我不可以！” 可能觉得店主是歧视自己还是什么的，直接把店砸了。最后 Kim 鸣枪示警，人家直接把 Kim 的枪抢走意外的把店主鲨了。如果 Kim 没带枪的话，可能店主最起码也就医院待几天就出来了，被人家打一打就行了，结果店主直接就被枪杀了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这一系列行为之后，Kim 什么事都没有，CTU 一句话就摆平了，反而在两年后，成为了 CTU 的一分子。对于这两年 Kim 如何从和罪犯谈恋爱的恋爱脑、高中辍学成为保姆到 CTU 的阶级跃升的艰辛我们无从得知。但可以肯定的是，她那 CTU 华盛顿地区的主管父亲的功劳功不可没。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从第一季到第三季，编剧和导演不仅阐述了其犯罪题材，更替现出了个人英雄主义下的弊端，对其角色家庭的刻画非常具体，告诉了观众当一个人拥有非常高的荣誉之后，其家庭可能会出现什么样的问题和影响。同时，其行事作风也有很大的关系。我觉得 Kim 都可以出一部 《我的 CTU 华盛顿地区主管父亲》和《我的父亲与总统》这两本书了。"}]},{"type":"element","tag":"text-title","props":{":t":"Subchannel chip"},"children":[]},{"type":"element","tag":"h1","props":{"id":"子通道芯片-subchannel-chip-2"},"children":[{"type":"text","value":"子通道芯片: Subchannel chip 2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个芯片貌似是虚构的，是影视道具的一部分，"},{"type":"element","tag":"a","props":{"href":"https://24.fandom.com/wiki/Subchannel_chip","rel":["nofollow"]},"children":[{"type":"text","value":"24 Wiki"}]},{"type":"text","value":" 中有一点的描述。在现实生活中，想实现类似功能的设备有很多，比如 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Frequency-hopping_spread_spectrum#Usage","rel":["nofollow"]},"children":[{"type":"text","value":"频率跳变(Frequency Hopping Spread Spectrum, FHSS)"}]},{"type":"text","value":"、"},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Ultra-wideband#","rel":["nofollow"]},"children":[{"type":"text","value":"超宽频(UWB, Ultra-wideband)"}]},{"type":"text","value":"，"},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Low-power_wide-area_network","rel":["nofollow"]},"children":[{"type":"text","value":"低功耗广域网(Low-power wide-area network, LPWAN)"}]},{"type":"text","value":" 所常用的 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Narrowband_IoT#Deployments","rel":["nofollow"]},"children":[{"type":"text","value":"窄带物联网(Narrowband IoT\n, NB-IoT)"}]},{"type":"text","value":" 协议。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"名称"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"领域"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"FHSS"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"发送方快速改变频率，接收方根据已知的跳变顺序以解码信号"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"无线电"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"UWB"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"使用非常低的频谱，低功率密度传输。利用较高的频谱带宽进行传输，可以理解为广撒网。"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"无线电"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"NB-IoT"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"基于蜂窝网络的低功耗、窄带信号技术，支持大规模设备连接和身份认证管理"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"无线电与物联网"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这些技术或多或少都是无线电、物联网等领域的，因此想自己 DIY 一套类似的设备，也需要有一些相关的硬件设计的底子，比如自己画一个板子。找个第三方厂家生产或面包板设计设计原型，之后设计一个比较低调且沉稳的骨灰盒外壳。测试测试，也是非常不错的体验。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:24-hour.md","_source":"content","_file":"book/24-hour.md","_extension":"md"},{"_path":"/book/attacking-network-protocols","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"Attacking Network Protocols: A Hacker's Guide to Capture, Analysis, and Exploitation","description":"","director":"James Forshaw","time":"2024","img":"01/1.png","plan":"1","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"Google Project Zero"},"children":[]},{"type":"element","tag":"h1","props":{"id":"作者-1"},"children":[{"type":"text","value":"作者 1"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本书的作者是 "},{"type":"element","tag":"a","props":{"href":"https://github.com/tyranid","rel":["nofollow"]},"children":[{"type":"text","value":"James Forshaw"}]},{"type":"text","value":"，也是著名的 "},{"type":"element","tag":"a","props":{"href":"https://googleprojectzero.blogspot.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Google Project Zero"}]},{"type":"text","value":" 成员之一。他负责维护很多开源的分析工具，同时自己也根据多年的经验总结出自己想要的工具。并在一些会议中分享，甚至是 open source。到目前，他已经是一位高级猎食者，从当初的破解游戏机，到揭秘操作系统中的复杂问题，具有十余年应用网络协议分析、利用经验。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"会议"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.blackhat.com/","rel":["nofollow"]},"children":[{"type":"text","value":"BlackHat"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"国际公认的网络安全活动系列，提供最具技术性和相关性的信息安全研究"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.secwest.net/","rel":["nofollow"]},"children":[{"type":"text","value":"CanSecWest"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"加拿大著名的国际信息安全会议，负责举办 Pwn2Own"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://events.ccc.de/","rel":["nofollow"]},"children":[{"type":"text","value":"Chaos Computer Conference"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"由德国 CCC 组织，以其独特的社区文化、技术讨论和社会议题探讨而闻名"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作者的经历非常 Nice! 有一个良好的家庭，无论做什么都鼓励孩子的家长。走入职场有 Richard Nea 这样不内耗的好 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Line_management","rel":["nofollow"]},"children":[{"type":"text","value":"Leader(line manager)"}]},{"type":"text","value":" 同时发现了作者对 Security 领域有浓厚的兴趣并符合其性格。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"直线领导(Line manager) 通常指的是直接参与工作并需要对同事工作负责的领导，通常负责指导同事能在特定的职能领域下完成团队或公司的目标。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在规划职业路径阶段认识了 "},{"type":"element","tag":"a","props":{"href":"https://www.linkedin.com/in/mike-jordon-72193719/","rel":["nofollow"]},"children":[{"type":"text","value":"Mike Jordon"}]},{"type":"text","value":" 在初创阶段进入到了 Context Information Security。与公司的创始团队学习，并培养其网络协议分析方面的技能，并开发了 Canape 等工具。这些不内耗的好 Leader，给了其充足的时间进行有前途的安全研究。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2020 年 3 月，世界 500 TOP 之一的 NYSE: ACN 已收购领先的网络防御咨询公司 Context Information Security，该公司之前由母公司 Babcock International Group 所有。Context 成立于 1998 年，总部位于伦敦，是英国和全球金融服务领域最知名、最受尊敬的信息安全服务提供商之一。该公司提供高端网络防御、情报驱动的红队、漏洞研究和事件响应服务。他们曾参与处理业内一些最先进的事件响应案例。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Mike Jordon 曾经是 Context 的首席信息顾问，自 2020 年起为 Airis Security Technologies 的首席技术官。"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我之所以阅读这本书，是因为在我的生活中，几乎还未遇到和协议有关的事情（除了一些常见的场景，如 burp、nmap 这些基础的，或者一些涉及到流量分析的题目）。虽然我见过通过 Wireshark 来调试 API 的，但我认为这些远远不是 Wireshark 的全部功能。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在本书中虽然几乎都是用作者所开发的 Canape ，还包括了很多网络协议工具包，这些工具很多都是家喻户晓的，但成体系和系统性的学习，是我经历所缺少的部分。同时也希望提升自己在网络协议上面的见解，并扩充下眼界。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"text-title","props":{":t":"协议是一切的基础"},"children":[]},{"type":"element","tag":"h1","props":{"id":"基础-2"},"children":[{"type":"text","value":"基础 2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"对常见网络的构建和功能了解得越多，就越容易将这些知识应用于捕获、分析和利用新协议。\" 这句话出在第一章的概述，小时候。我就对 IETF 非常崇拜，并不是因为他们的宣传，而是朴实无华的运行风格。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"还记得第一次看到 IETF 的出版物，被 RFC 的简洁所震撼。这种朴实无华的风格，不仅简洁还充满了复古风味内容也相当丰富，记录了一个协议和提案标准的各类信息。以及协议提案的流程，该提案所经aaaa历过的所有环节依次公开。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个标准的协议具有很多或很少的功能，但他们几乎或多或少符合下面六项特点中的一项："}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"功能"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"维护会话状态"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"创建新的连接或终止连接"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"通过寻址识别节点"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"数据需要传输到对应的节点，因此协议通过寻址来识别特定的节点或组"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"控制流量"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"一次性通过网络传输的量是有限的。协议通过实施管理数据流，以提高吞吐减少延迟"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"保证传输数据的顺序"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"将发送和接收到分散且混乱的数据重新排序，以保证数据的正确顺序"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"检测和纠正错误"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"网络不是 100% 可靠的;数据可能会损坏。检测损坏并理想情况下纠正它非常重要"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"格式化和编码数据"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"数据并不适合在网络中传输，例如将英语文本编码为二进制值；协议可以指定对数据进行编码甚至加密"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们都了解很多传输协议，这些协议是基础的。但很多时候，这些协议都是背后的一条条数据流，我们浏览网页，使用 APP 不需要思考这些是如何进行的，死记硬背不仅内耗自己，还花了很多时间，但在工作中几乎只有面试时才会用到。而基础章节中，作者总结出了自己的一套模型："}]},{"type":"element","tag":"pre","props":{"code":"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n","language":"text","meta":"","className":["language-text"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"┌──────────────────────────────┐\n│        Protocol model        │\n│                              │\n│  ┌────────────────────────┐  │\n│  │     Content layer      │  │   I would like to get the file image.png\n│  │     (File request)     │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │     Encoding layer     │  │   GET /image.png HTTP/1.1\n│  │         (HTTP)         │  │\n│  └───────────▲────────────┘  │\n│              │               │\n│  ┌───────────▼────────────┐  │\n│  │    Transport layer     │  │   4500 0043 50d1 4000 8000 c0a8 0a6d\n│  │        (TCP/IP)        │  │   d83a d544 40e0 0050 5dff a4e6 6ac2\n│  └────────────────────────┘  │   ……\n│                              │\n└──────────────────────────────┘\n"}]}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"协议模型"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"内容层 (文件请求)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"我想要一个 image.png 图片"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"编码层 (HTTP)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"GET /image.png HTTP/1.1"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"传输层 (TCP/IP)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"4500 0043 50d1 4000 8000 c0a8 0a6d "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":" d83a d544 40e0 0050 5dff a4e6 6ac2 ……"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作者的这套网络模型，几乎概述了传输所涵盖的三个特点，即内容、寻址、传输等三个功能的概念化，因此适用于总结或对一个陌生的协议时的理解步骤。毕竟协议是可以自定义的，例如通过 Matrix 就可以自定义一个通信协议。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"以这种方式拆分模型可以降低特定于应用程序的协议的复杂性，因为它允许我们过滤掉不相关的网络协议详细信息。例如，因为我们并不真正关心 TCP/IP 是如何发送到远程节点的（我们理所当然地认为它会以某种方式到达那里），所以我们只是将 TCP/IP 数据视为正常工作的二进制传输。\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这一章节非常有意思，可以看一下原文 第一章：My Model for Network Protocol Analysis，给出了很多贴近该模型的案例。作者是一个不内耗的人，不会解说一堆 RFC 文件和 Wikipedia 中的内容，仅列举其作用和描述，让读者感兴趣的地方可以深入了解，并得出自己的见解。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"text-title","props":{":t":"流量捕获"},"children":[]},{"type":"element","tag":"h1","props":{"id":"捕获-2"},"children":[{"type":"text","value":"捕获 2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"针对流量的捕获分为主动和被动捕获，他们分别在不同的场景有不同的用处，对于主动捕获，甚至可以进行中间人攻击，如经常用到的 Burp Suite。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"名称"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"特点"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"被动捕获"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"在线路上传输时提取数据，如 Wireshark"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"不直接与流量交互"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"主动捕获"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"干扰客户端应用程序与服务器之间的流量，类似 Burp 中通过代理进行拦截。"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"直接与服务器之间的流量产生干扰甚至是拦截、篡改"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了 Wireshark 和 Burp，还有很多针对不同场景下会使用的工具，这里作者列举了几个我很感兴趣的场景，是不适用于被动捕获的："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在没有管理访问权限的系统或具有有限权限 shell 的移动设备上执行审计"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"只查看正在测试的应用程序的流量"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作者演示了通过各种工具，从系统的工作原理来实现如何从本地应用程序提取网络流量的演示，这是我非常感兴趣的。其中有很多涉及到了操作系统原理和设计，想必这就是为什么要学操作系统设计和原理吧。"}]},{"type":"element","tag":"text-title","props":{":t":"系统调用跟踪",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"许多现代系统提供了两种执行模式，分别为用户模式和内核模式。以提高系统的稳定性和安全性，保护系统免受不可信用户代码的影响。我体验过 Windows、Macos、Linux 这三个生态的系统，我的感受就是。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"模式"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"特点"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"用户模式"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"操作系统普通应用程序和用户空间进程运行的模式"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"权限限制"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"隔离"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"限制对系统资源的直接访问"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"日常应用程序的运行"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"内核模式"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"操作系统核心代码，具有对系统资源的完全访问权限"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"完全权限"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"关键操作"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"直接访问和控制系统资源"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"系统级调用"}]}]}]}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总结来说，内核模式以高权限运行，并包含实现操作系统核心功能的代码。用户模式是运行日常流程的地方，内核通过导出一组特殊系统调用为用户模式提供服务，允许用户访问文件、创建进程。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 Windows 系统中，你是 Administrators；在 Linux 中，你是 Developers；而在 macOS 中，你只是一个普普通通的 User。这是我对这三个生态中系统执行模式的切身感受。"}]},{"type":"element","tag":"pre","props":{"code":"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"┌─────────────────────────────────────────────────┐                                 \n│                                                 │                      ┌──────   ┐\n│                                                 │                      │       S │\n│   ┌────────────────────────┬────────────────┐   │                      │       e │\n│   │                        │    Network     │   │                      │       r │\n│   │         Kernel         │   subsystem    │◀──┼─────  Network  ──────┤       v │\n│   │                        │                │   │                      │       i │\n│   └────────────────────────┴─────────────▲──┘   │                      │       c │\n│                                          │      │                      │       e │\n│                                          │      │                      └──────   ┘\n│                                                 │                                 \n│                                          S      │                                 \n│                                          y      │                                 \n│                                          s      │                                 \n│                                          t      │                                 \n│                                          e      │                                 \n│   ──────────   Kernel/User model    ──── m      │                                 \n│                                                 │                                 \n│                                          c      │                                 \n│                                          a      │                                 \n│                                          l      │                                 \n│                                          l      │                                 \n│                                                 │                                 \n│                                          │      │                                 \n│                                          │      │                                 \n│   ┌──────────────────────────────────────┴──┐   │                                 \n│   │                                         │   │                                 \n│   │             System libraies             │   │                                 \n│   │                                         │   │                                 \n│   ├─────────────────────────────────────────┤   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   │           Client application            │   │                                 \n│   │                                         │   │                                 \n│   │                                         │   │                                 \n│   └─────────────────────────────────────────┘   │                                 \n│                                                 │                                 \n│                                                 │                                 \n└─────────────────────────────────────────────────┘                                 \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当应用程序想要连接远程服务器时，应用程序会向操作系统内核发出系统调用以打开连接。之后应用程序读取和写入网络数据，因此我们可以通过监测这之间的过程，而实现对目标应用程序的网络捕获，作者给出了一个非常通俗易懂的图，简单的概括了这其中的一系列过程，简洁明了。"}]},{"type":"element","tag":"text-title","props":{":t":"网络编程的基础",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"大多时候，我们在学习各类 code 语言的时。或多或少都会接触网络编程，比如耳熟能详的 Socket。这就要说到 IP 协议的首个实现是在 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution","rel":["nofollow"]},"children":[{"type":"text","value":"Berkeley Software Distribution（BSD）"}]},{"type":"text","value":" 完成的。因此在网络通信领域中，就离不开 "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Berkeley_sockets","rel":["nofollow"]},"children":[{"type":"text","value":"Berkeley Sockets"}]},{"type":"text","value":"，它作为网络编程的基础，提供了不同主机之间进行网络通信的标准接口。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你是类 Unix 系统，可以在终端输入 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"man 2 syscall_name"}]},{"type":"text","value":" 在终端中查看手册，比如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"man 2 open"}]},{"type":"text","value":" 就可以查看系统调用第二章有关 open 的内容。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"它主要定义了一系列的系统调用，允许应用程序通过网络发送和接收数据。广为人知的就是 close()、connect()、socket()、listen()、send(), 这些 Berkeley_sockets 被纳入 POSIX 标准的一部分。"}]},{"type":"element","tag":"text-title","props":{":t":"不同平台之间的捕获",":type":"2"},"children":[]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"平台"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"应用"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Linux"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Strace"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"跟踪系统调用和信号"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"macOS"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"DTrace"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"跟踪系统调用, 可用于许多类 Unix 系统"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Windows"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Process Monitor"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Windows TEAM 提供的交互非常 Nice 的进程监视器"}]}]}]}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"与类 Unix 系统相比，Windows 无需直接系统调用即可实现其用户模式网络功能。网络堆栈通过驱动程序公开，建立连接使用文件 open、read 和 write 系统调用来配置网络套接字以供使用。即使 Windows 支持类似于 strace 的工具，此实现也会使得在与其他平台相同的级别监视网络流量变得更加困难。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"从 Vista 及更高版本开始，Windows 支持事件生成框架，该框架允许应用程序监视网络活动。编写自己的实现会相当复杂，但幸运的是，已经有人编写了一个工具来为你做这件事：Microsoft 的进程监视器工具。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"尽管此解决方案不如监视其他平台上的系统调用有用，但当您只想确定特定应用程序正在使用的网络协议时，它在 Windows 中仍然很有用。您无法使用此技术捕获数据，但一旦确定了正在使用的协议，就可以通过更活跃的网络流量捕获将该信息添加到分析中。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"让我意外的是，Microsoft 的进程监视工具非常方便，它提供了应用程序在建立网络通信时的必要信息。同时还能捕获当前调用堆栈的状态，以确定在应用程序中建立网络连接的位置。对二进制文件进行逆向工程以制定网络协议时，这将变得很重要。"}]},{"type":"element","tag":"text-title","props":{":t":"主动捕获",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"主动捕获可能是分析和利用应用程序网络协议最有价值的技术\"，这一章节告诉我们，编写一个属于自己的网络代理有多么重要。这个程序要实现流量重定向到代理，同时以更加可观的形式输出 (虽然作者提供了自己写的代理库，但已经年久失修了)。"}]},{"type":"element","tag":"h1","props":{"id":"太阳底下没有新鲜事-3"},"children":[{"type":"text","value":"太阳底下没有新鲜事 3"}]},{"type":"element","tag":"text-title","props":{":t":"太阳底下没有新鲜事"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"开篇作者直接抛出了一句谚语：“太阳底下没有新鲜事 (There is nothing new under the sun)” 并告诉读者这句谚语在协议结构方式方面非常适用。二进制和文本协议遵循常见的模式和结构，一旦理解，就可以很容易地应用于任何新协议。"}]},{"type":"element","tag":"text-title","props":{":t":"一些进制的基础",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我属于是那种从来没有体系过学习的，之前读书的时候还会自己算一下 16 进制，但现在也都忘记了。很庆幸的是作者给出了非常清晰易懂的描述，以及图文结合的方式讲解二进制协议的结构。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"类型"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"描述"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"特点"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"二进制协议"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"以二进制格式传输数据"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"高效性"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"紧凑性"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"复杂性"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"依赖性"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"文本协议"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"以人类可读的形式传输数据（如 ASCII 或 UTF-8）"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"可读性"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"效率低"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"灵活性（容错性和可扩展性）"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们都知道二进制就是 0 和 1，处理单个位很难，因此在计算机中。通常以八位(Bit)为一组，8 bit 即一个字节(byte). 在网络和通信中，通常使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"octet"}]},{"type":"text","value":" 来确保每个单位确实是 8 位。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"八位字节是网络协议的实际单元。尽管八位字节可以分解为单个位（例如，表示一组标志），但我们将以 8 位单位处理所有网络数据"}]}]},{"type":"element","tag":"pre","props":{"code":"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"                                                                \n                  Bit 7/MSB                                     \n                                                                \n                   ^                                            \n                   |                                            \n                 +---+---+---+---+---+---+---+---+              \n  Bit format:    | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 |   = 0x41/65  \n                 +---+---+---+---+---+---+---+---+              \n                                               |                \n                                               v                \n                                                                \n Octet format: 0x41                      Bit 0/LSB              \n                                                                \n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先我们要做的就是，区分位编号方向。如果没有特殊说明,应该按照从左到右的方式来读取位编号。即最高有效位（MSB）在左侧，最低有效位（LSB）在右侧。这种方式是最常见的（常见于大多数计算机体系结构，如 x86 和 ARM）"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然也有从右到左的，比如 PowerPC 就使用这样的。最高有效位（MSB）位于右侧，最低有效位（LSB）位于左侧。"}]}]},{"type":"element","tag":"text-title","props":{":t":"数值数据",":type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"数值数据就是表示数字的数据值，是指适用不同的方式存储或描述一个数字。比如上图就将二进制，以十进制和十六进制的方式表达。0x41 是这个二进制数的十六进制表示方法;65 是这个二进制数的十进制表示方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这些基础的知识有很多，甚至有的人可以口算，而不需要用到转换器。但在大模型发展的今天，我们只需要 copy 就可以知道其中的信息甚至帮我们翻译成人类可读的形式。再加上 Wireshark 也会帮我们将一些人类不可读的进制转换成十六进制，也会将一些未使用加密的传输暴露在阳光之下。因此我认为全书重要的信息是，"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"协议结构"}]},{"type":"text","value":" 与逆向。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"前者可以知道这是什么协议魔改的，后者可以通过逆向工程知道其运转的逻辑，从而找出问题所在。也就是说，我们当看到一个 Wireshark 中看到一个流量请求中，要根据其 Type 来识别出该协议的具体 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"握手过程"}]},{"type":"text","value":" 来识别出加密套件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后，我们需要通过逆向工程不断的进行断点，以及指令的输出。观看程序的变化以及影响，结合 OWASP 常见漏洞进行分析，以发现程序的弱点与信息的变化。我想我会从 "},{"type":"element","tag":"the","props":{"ida":"","pro":"","book":""},"children":[{"type":"text","value":" 找到我想要的。"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:attacking-network-protocols.md","_source":"content","_file":"book/attacking-network-protocols.md","_extension":"md"},{"_path":"/book/criminal_minds","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"Criminal Minds","description":"","director":"R/N","time":"2024.10.11","img":"06/1.png","plan":"01","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"第一季"},"children":[]},{"type":"element","tag":"h1","props":{"id":"行为分析小组-0"},"children":[{"type":"text","value":"行为分析小组 0"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当初看 《联邦调查局》 的时候，就对侧写特别有意向，感觉是和社会科学有很大的关系。比如通过对个体和群体的特征描述，来进行预测可能会发生的事情；并结合家庭、社会、文化等因素继而进行分析。我喜欢看的很多剧都有类似的职位，比如《芝加哥警署》《24 hour》《FBI》……。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这些影视作品，突出了很多逻辑思维的对冲，和传统的打发时间的影视作品不同。是真的会根据其逻辑慢慢思考，即使错了也没关系，毕竟逻辑学在我所在的地方并不存在。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于类似分析的工作，很多时候，心理学、历史学等具有很强的作用。有时甚至会搭配数学，以及语言文化的研究和学习。这也是为什么很多类似情报部门，都比较喜欢去历史学院去招募，教会大学也很不错，他们有学习世界上语言的传统，而且很忠诚。比如传教大学毕业后的学生，会无偿的传教两年，在历史中，有很多的传教士去各个国家去传教。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比如 "},{"type":"element","tag":"a","props":{"href":"https://zh.wikipedia.org/wiki/%E6%B4%AA%E5%8D%9A%E5%9F%B9","rel":["nofollow"]},"children":[{"type":"text","value":"洪博培"}]},{"type":"text","value":" 就是 The Church of Jesus Christ of Latter-day Saints 派往台湾传教，并是近年美国唯一能讲汉语的州长。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"情报和信息有密切的关系，比如 OSINT，因此对于情报分析，特别是在舆情等领域，更多的考验来源于对信息的敏感度。如果说我最喜欢那一个情报官员的话，那金・费尔比必有一席之地。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:Criminal_Minds.md","_source":"content","_file":"book/Criminal_Minds.md","_extension":"md"},{"_path":"/book/fate-of-moon-jae-in","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"문재인의 운명","description":"","director":"문재인","time":"2024","img":"04/4.png","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"100",":title":"title"},"children":[{"type":"element","tag":"h1","props":{"id":"理念-1"},"children":[{"type":"text","value":"理念 1"}]},{"type":"element","tag":"text-title","props":{":t":"为什么看这本回忆录？"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我承认很大一部分原因是因为文在寅颜值比较高，比较好奇他是怎么摆脱「青瓦台魔咒」清算的。对于韩国这个邻国，我并不太了解这个国家的文化和习俗，但韩剧还是很不错的，毕竟全部颜值在线同时还是实力派。我有留意过一些韩国大学的学生 CV，是非常注重形象管理的，将颜值即正义这个理念贯彻始终。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果要评价，我觉得文在寅是一个比较完美的总统，包装和营销的很不错，对比历任韩国总统算是很优秀的。在任内推行了共同投票，决定国家大小事务，比如最著名的 N 号房事件。让政府变得更加现代化，让群众可以线上投票参与治理。这在某些国家和地区婆罗门遍地的地方是很难推行的，而在韩国这个中文互联网以 “偷国” 蔑称的地方，却在文在寅任内推行起来了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我有一个习惯，就是想了解一个国家的时候。我会查看他们的政府官网，文在寅在任时的青瓦台总统官网，显得就很别具一格："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以打开网站的第一版为例；"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有的政府官网，显示的是当权者的讲话和文件；"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有的政府官网，是一些便民的工具；"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有的政府官网，是国家的景色，旅游信息；"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"有的政府官网，是一些数据，一些便民信息；"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"打开 "},{"type":"element","tag":"a","props":{"href":"https://web.archive.org/web/20220319143845/https://www1.president.go.kr/petitions","rel":["nofollow"]},"children":[{"type":"text","value":"https://www.president.go.kr/"}]},{"type":"text","value":" 的时候，我比较在意 “국민소통 광장(国民沟通广场)” 这一板块，其中的内容就是投票几个比较多的话题，然后政府和青瓦台官员（各省厅长、青瓦台首席秘书、幕僚等）将做出回应。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\"정부 및 청와대 책임자(각 부처 및 기관의 장, 대통령 수석·비서관, 보좌관 등)가 답하겠습니다.\""}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然，这个我们也有，诸如领导留言板，市长热线什么的。但面对下面这张图，会感觉本质上的区别。"}]},{"type":"element","tag":"img-tip","props":{"text":"🕯烛光集会：2016 年大韩民国反朴槿惠示威","url":"04/WechatIMG4.jpg"},"children":[]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"“总统第一次被弹劾，就是韩国历史上发生的事情，人民是伟大的，当把社会看成一个总体，是论乱的。人民对总统的需求不断增大，这正是年轻人的未来。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这是我任期五年，我回去做公民，一刻都不能放松，来回匆忙的压力使得我们和人民永远清醒，有永不放弃那种自信和热情，它给你信心和勇气。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"五年来我们并肩作战的敌人，是时候完成或缺少，作为意识形态被永远铭记为前进的经验。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"希望公民，与此同时和我一起走出这段历史。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我感谢迄今为止很多支持我的人，我不会忘记，很多事情都是在人民的帮助下所完成的，记住，在韩国有了新的开始，我会支持你的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和一起变老的妻子，回到南方乡村，我会像抑郁症一样生活的很好。”"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"——文在寅"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"检察官-2"},"children":[{"type":"text","value":"检察官 2"}]},{"type":"element","tag":"text-title","props":{":t":"青瓦台魔咒"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看一个人从来不是他说了什么，而是他做了什么。韩国总统下台后就会遭到调查，很大一部分是韩国检察官的权利之高。如果你没问题，那就找你周边人的问题，朋友，亲戚，甚至是膝下儿女，总能发现一点蛛丝马迹。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"他最初想当法官。但因为青年时参与 “汉城之春” 被逮捕，所以只能成为律师，进入卢武铉的律所；最后两人成为一生挚友。两人在釜山期间，有两个字可以概述，那是一个违禁词。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:fate-of-moon-jae-in.md","_source":"content","_file":"book/fate-of-moon-jae-in.md","_extension":"md"},{"_path":"/book/journey-to-the-west","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"西游记","description":"","director":"吴承恩","time":"2025","img":"07/1.png","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"100",":title":"title"},"children":[{"type":"element","tag":"h1","props":{"id":"四大名著-1"},"children":[{"type":"text","value":"四大名著 1"}]},{"type":"element","tag":"text-title","props":{":t":"终于理解了为什么这几本书是四大名著"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在小时候。老师都说三国演义、水浒传、西游记、红楼梦是中国的四大名著。那时候还不解就四本书为什么含金量这么高。过了很多年初到社会再细品这四本书，发现这就是中国社会的缩影，其中不乏对人与人之间，国家运行时的一些隐晦表达，都在这四本书中一一体会。原来是我的打开方式不对，要读懂这几本书，要贴合现实发生的事情，来进行解读，就会发现目前现代社会和几百年前的社会并无不同，人与人和国家的运行时，都与当时大差不差。"}]},{"type":"element","tag":"h1","props":{"id":"八十一难-论功行赏-1"},"children":[{"type":"text","value":"八十一难 论功行赏 1"}]},{"type":"element","tag":"text-title","props":{":t":"论功行赏，八戒垫底"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果将西天取经，比作一个项目，一个工程的话。那么取经工程保护、记录、汇报的组织就是"},{"type":"element","tag":"a","props":{"href":"https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%B8%B8%E8%AE%B0%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8#%E5%85%B6%E4%BB%96_2","rel":["nofollow"]},"children":[{"type":"text","value":"六丁六甲"}]},{"type":"text","value":"，向观音菩萨交法旨，而观音菩萨向如来交旨。观音菩萨开始审阅六丁六甲在西天取经的记录，发现少了一难，只有八十难。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如来因打发唐僧去后，才散了传经之会。傍又闪上观世音菩萨合掌启佛祖道：“弟子当年领金旨向东土寻取经之人，今已成功，共计得一十四年，乃五千零四十日，还少八日，不合藏数。望我世尊早赐圣僧回东转西，须在八日之内庶完藏数。准弟子缴还金旨。” 如来大喜道：“所言甚当，准缴金旨。” 即叫八大金刚分付道：“汝等快使神威，驾送圣僧回东，把真经传留，即引圣僧西回。须在八日之内，以完一藏之数，勿得迟违。” 金刚随即赶上唐僧，叫道：“取经的，跟我来。” 唐僧等俱身轻体健，荡荡飘飘，随著金刚，驾云而起。这才是："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"大鼋是一只在通天河上的巨鼋，唐僧师徒第一次遇见他时，他载唐僧等人渡河，并希望唐僧能替他问佛祖还需修行多久才能修成正果化身成人。回程的时候大鼋再度载唐僧师徒及经书过河，半途上问起这个承诺，然而早已遗忘此事的唐三藏无言以对，于是不高兴的大鼋身子一翻，把唐僧淹入水中。这个事件是唐僧取经所需历经的八十一难中的最后一难。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"大鼋对唐僧的要求可谓是人之常情，毕竟在通天河上班了很多年，帮助了唐僧；想问问佛祖还有多少年才能退休。但唐僧又没有帮大鼋办事，所以将唐僧摔下。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"到了长安后，取经工程以步入后章。虽然取经计划原定是三年，但经历了十多年后才取回，可谓是历经磨难。虽然时间超出了，但经是取回了。因此李世民撰文《圣教序》为取经工程定性。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"名字"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"受封"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"等级"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"作用"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"唐僧"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"旃檀功德佛"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"修成正果"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"一人之下万人之上"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"孙悟空"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"斗战圣佛"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"大职正果"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"一人之下万人之上"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"沙僧"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"金身罗汉"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"大职正果"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"一人之下万人之上"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"小白龙"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"八部天龙广力菩萨"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"汝职正果"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"保护灵山，禁卫军首领"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"猪八戒"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"净坛使者"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"汝职正果"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"打扫贡品的"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"回到灵山后。唐僧是如来的二弟子，但不尊重佛法，投胎至东土大唐。取经修成正果后受封——旃檀功德佛（修成正果）；孙悟空虽大闹天宫，被如来镇压五百年，但取经过程中降妖伏魔受封斗战圣佛（大职正果）；猪八戒是净坛使者（汝职正果）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"猪八戒对受封不满，于是质问如来被如来狠狠 PUA。说猪八戒由于 “又有顽心，色情未泯”，为如来佛祖的部下，负责享用一切人世间作功德的供品。绝对是 PUA 猪八戒，成佛了想吃什么没有，非要当个打工人吃边角料。虽然净水楼台先得月，但如果成佛了，躺在床上还有人喂这不香吗？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而到了沙僧，沙僧虽然在蟠桃会上摔杯为号，威胁到了玉帝被贬流沙河。受封金身罗汉（大职正果）；白龙马在取经路上驼经有功，受封八部天龙广力菩萨（汝职正果）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这种论功行赏，看的是他们背后的势力。唐僧功劳最大，取经团队的主要负责人；孙悟空背后就是道教，佛教，玉帝。谁都搞不死孙悟空，那既然这样不如 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"请客，斩首，收下当狗"}]},{"type":"text","value":" 你会发现都是这么做的，只不过前期玉帝给的官小了，后面佛祖总结失败经验给了个官大的，成功收下当狗。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"虽然沙僧最后是个菩萨，但人家职级是和孙悟空一样的。而猪八戒虽然也是菩萨，但属于是菩萨里面打杂的；甚至猪八戒不如白龙马等极高，人家起码还能训练下禁卫军，而猪八戒只能吃人家剩下的贡品。沙僧的背后代表的是玉帝；白龙马背后就是龙王家族（婆罗门），四海龙王基本上走到哪都能看到龙王什么海龙王，河龙王，井里面也有龙王，有水的地方都有龙王。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"虽然龙在西游记里面级别比较低，玉帝办一下什么宴会都要有个龙肝凤胆(玉帝最喜欢吃龙王了)，动不动斩个龙王，甚至梦里都要斩个龙王玩玩消遣下工作的劳累。所以小白龙吃唐三藏坐骑给观音菩萨点化完全是偶遇，龙王策划的一个剧本，把小白龙这个富哥塞进去。如果取经成功了就能大大提升龙王家族的影响力，俺们龙王也是能给灵山当禁卫军的了，也算是给赵家人当上狗了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为什么小白龙一条龙要幻化成马呢，我比较认同一个观点。作为一个婆罗门一个富哥，尽量低调点，毕竟言多必失。变成马又不用降妖除魔，还不用说话，主打一个陪伴，不容易被人关注，不容易给人开黑料。这要给人曝光出来了，其他家族就来气了，凭什么他能混个编制成为禁卫军首领啊? 所以说龙王家族是真的厉害，基本上整部西游记形形色色的龙王出境率还算是比较高的。连我龙王家的祖传如意金箍棒都给孙悟空了，起码是重仓押注取经团队，不成功便成仁。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"道德天尊又称太上老君，小说中居于离恨天兜率宫（实际上兜率为印度词汇，道教中太上老君居于太清圣境）。孙悟空因大闹天宫，被太上老君的金刚镯打到，因此被捕，后被放于太上老君的八卦炉内焚化，不料非但没有被焚化，反而练就一双 “火眼金睛”，有看穿看透人事物的功力，在取经路途中，凡有妖怪化装成凡人或神仙，都逃不过他的火眼金睛而被拆穿。后来没被焚化的孙悟空出了八卦炉，愤而踢翻，造成八卦炉爆炸，火球与炭灰降于凡间西疆，而成为火焰山。替太上老君看管八卦炉的两名童子下凡作乱，分别自称金角大王和银角大王。太上老君的坐骑是一头青牛精，下凡作乱时自称独角兕大王。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"龙王家族最后变成有钱有势的韩国财阀一样的家族势力。再也不是那个有钱任人宰割的群体了。而猪八戒出身就是道教，道教扛把子就是太上老君，太上老君这个人也可以细细品，基本上西游记上很多妖怪，比如什么独角兕大王、金角大王、银角大王都是太上老君的坐骑什么的。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"四十九回-观音地盘-2"},"children":[{"type":"text","value":"四十九回 观音地盘 2"}]},{"type":"element","tag":"text-title","props":{":t":"观音的回旋镖"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"灵感大王要胁住在河岸的村民每年必须供奉一对童男童女，以保风调雨顺、否则降灾。孙悟空和猪八戒伪装成童男童女并偷袭他，灵感大王不敌孙悟空而躲了起来，孙悟空便找上观音菩萨协助。最后由观音用鱼篮收回妖怪后带回了池塘。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"灵感大王为住在通天河里的妖怪，真实身份为普陀山莲花池的金鱼，因为听了观音说法而有了力量便下凡作恶。能够在一晚之内，将宽度 800 里、长度连孙悟空都看不见尽头的通天河冻成冰河。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在四十九回时，孙悟空和灵感大王的掰扯。孙悟空可能发现了灵感大王的背后是观音菩萨，于是去找观音收服鲤鱼精。在这个故事中，你会发现。观音来了后将通天河的小鱼小虾都灭口了，就留了个鲤鱼精。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这原本是观音的地盘，被孙悟空抓住了把柄。于是在八十一难的时候，陈家庄唐僧在此处讲经可以视作为观音将这个地盘让给了取经三人。孙悟空与观音菩萨交易成功。孙悟空之后也没有在玉帝、佛祖跟前给观音菩萨上眼药。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在现实社会中，这个步骤就很像是观音菩萨贪污了一块地，改造成了个山水庄园。孙悟空误打误撞发现了这块贪污巨款，之后去给观音菩萨上眼药。之后在八十一难中，其实八十难就行了，但因为观音菩萨需要告诉孙悟空，这块地方我不要了，送给你，让你们去看看这块地怎么样，将秘密守护住堵住孙悟空的嘴；让其在论功行赏的时候不要泄露出去。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"紧箍咒是《西游记》中的一个咒语，又名定心真言，由如来发明，经观音菩萨传授给唐僧，用于对其弟子孙悟空的管教。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"孙悟空其实是比较讨厌观音菩萨的，因为紧箍咒就是观音菩萨给他下的套。想拿捏孙悟空，所以在取经工程前期，孙悟空一直被唐僧拿捏。这件事情告诉我们，不幸树敌的时候，可以 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"捧高"}]},{"type":"text","value":" 下对方，就比如观音在通天河陈家庄那样，给孙悟空，唐僧他们整个供奉，来暗示孙悟空你都成佛了，再计较这些岂不是不符你身份？就当我观音是个小人忘记这些恶心事吧。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样孙悟空在论功行赏的时候，就不会打破和谐的气氛，让观音不被反腐。如果没有八十一难，那么孙悟空是会将观音说出去的，因为孙悟空背景很深，背后是道教、佛教、天庭。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"连在灵山唐僧师徒到灵山宝阁取经时，阿难、伽叶作为如来的底子要收取人事。孙悟空都要把索要人事之事捅到如来佛祖那里，佛祖并不觉有何不妥就可以看出，孙悟空是真的敢举报观音贪污的。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"第九十八回-放水-1"},"children":[{"type":"text","value":"第九十八回 放水 1"}]},{"type":"element","tag":"text-title","props":{":t":"放水"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果只看前一部分凌云渡就会发现。取经三人在玉真观的时候，孙悟空之前是来过的，也见到了那个独木桥。但当时孙悟空道心不稳，所以觉得自己道行不够就去继续修炼了。这里很大一部分是如来引动孙悟空一步一步到灵山脚下的，但孙悟空没上勾。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"于是有了灵台方寸山斜月三星洞菩提祖师收孙悟空为徒非法授课，传授他七十二变，长生不老和筋斗云的法门。这就相当于违反了《校外培训行政处罚暂行办法》，而菩提祖师往上追溯可能是如来，这种事情怎么可能让玉帝知道。毕竟孙悟空也是大闹天宫打了玉帝的脸，这要让玉帝知道了估计会挑起佛教和天庭的对立。就从收服孙悟空那一章可以看出，当时的天庭较为薄弱，甚至还要请如来收服孙悟空。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但到了第二次，孙悟空来到了灵山脚下。已经知道跨过这个独木桥就已经可以成佛成仙了，但唐僧不知道，又不能暗示唐僧通过这条路就已经可以成为人上人了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"于是金顶大仙、孙悟空、阿弥陀佛轮番疯狂暗示："}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　“唐僧到玉真观，金顶大仙接着。” 已是到金仙之分，而猿熟马驯，体变纯阳之时矣。故诗云：“炼就长生居胜境，修成永寿脱尘埃” 也。大圣道：“此乃灵山脚下，金顶大仙。” 以见仙即是佛，佛即是仙。仙者，金丹有为之道；佛者，圆觉无为之道。佛不得金丹不能成佛，仙不明圆觉不能成仙，一而二，二而一，灵山雷音即金顶大仙，岂可以仙佛歧而二之乎？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　至凌云渡，独木桥，唐僧心惊，以为大仙错指，是猿熟马驯，而不知此脱壳也。行者道：“不差，要从那桥上行过去，方成正果。” 言猿熟马驯，而不可不在此脱壳也。了命之后，不得不了性，了性所以脱壳也。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　盖成仙作佛，为天下希有之事，人人所欲得，人人所难能。如凌云之高而难渡，正以难渡者而渡之，则仙矣、佛矣。盖渡之之法有二，一则无为之道，一则有为之道。无为之道，最上一乘之道；有为之道，金丹之道。一乘之道，即独木桥；金丹之道，即无底船。独木桥所以接上智，无底舱所以渡中人。何为独木桥，独木者，一乘也；桥者，梁道也，即最上一乘无为之道。故曰：“从桥上过，方成正果。” 诗云：“单梁细滑浑难渡，除是神仙步彩霞。” 言最上一乘之道，惟上智顿悟者可以行，而下智渐修者则难渡。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"　　三藏心惊道：“这桥不是人走的。” 以见下智者则难渡；行者笑道：“正是路！正是路！” 以见上智者可以行。“行者跳上桥，须臾跑将过去，又从那边跑过来。” 上智之人，本性圆明，不假施为，顿超彼岸，随机应变，遇境而安，出入无碍，来往不拘，无为之用自成，《中庸》所谓 “自诚明，谓之性也。”“唐僧摇手、八戒沙僧咬指道：难！难！难！’” 又曰：“滑！滑！滑！” 下智之人秉性愚鲁，为私欲所蔽，为全缘所诱，忘其本来面目，失其固有天良，着于假相，好生而恶死，不能顿悟圆通，终难归于大觉。若无金丹之道，焉能过得凌云之渡？《中庸》所谓 “自明诚，谓之教也。”《参同》云：“上德无为，不以察求；下德为之，其用不休。” 此无底船之不可无者也。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"唐僧是不敢走过独木桥的，甚至阿弥陀佛去渡船接他们的时候。唐僧也是不敢的，但由于孙悟空提前演示了下，唐僧就敢上渡船了。这个流程就很像 30 天速成 XXX 的赵家人空降。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这各部分其实就是涉及到了佛教的轮回，六根（眼、耳、鼻、舌、身、意六個識根（感官器官），為二十二根之六）唐僧之所以无法过去。是因为还未自渡，还需他人渡，需要阿弥陀佛的渡船，但唐僧还是不敢。孙悟空只能狠狠的作弊回，当着阿弥陀佛和灵山、天庭的面作弊将唐僧拉上渡船，让唐僧脱离肉体凡胎，将取经工程进行下去。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那长老手舞足蹈，随著行者，直至雷音寺山门之外。那厢有四大金刚迎住道：“圣僧来耶？” 三藏躬身道：“是，弟子玄奘到了。” 答毕，就欲进门。金刚道：“圣僧少待，容禀过再进。” 那金刚著一个转山门报与二门上四大金刚，说唐僧到了；二门上又传入三门上，说唐僧到了。三山门内原是打供的神僧，闻得唐僧到时，急至大雄殿下，报与如来至尊释迦牟尼文佛说：“唐朝圣僧，到于宝山，取经来了。” 佛爷爷大喜。即召聚八菩萨、四金刚、五百阿罗、三千揭谛、十一大曜、十八伽蓝，两行排列。却传金旨，召唐僧进。那里边一层一节，钦依佛旨，叫：“圣僧进来。” 这唐僧循规蹈矩，同悟空、悟能、悟净，牵马挑担，径入山门。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有点像是仪仗队礼兵列队欢迎各国元首，然后又整几个礼炮奏乐。原来几百年前的东西一直流行到现在。皇权和大教总是喜欢一些雄伟宏大的建筑以及人性阵列来体现自己的教义覆盖面是多么的广，多么的厉害、多么的威严、充满了神性光辉。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这也说明了一件事情。就是关于重要的功绩性事件，能放水的就放水。如果没有孙悟空作弊，那大概率唐僧是无法成为佛的，看到了独木桥和无底船就回想回去, 于是在灭法国国王那被砍头，因为灭法国国王曾发誓要杀一万个佛教僧侣，当唐僧师徒四人到达该国时，他已杀死 9996 个僧侣。这说明之前不只唐僧三人去取经，只不过这次是 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"不惜一切代价，保证取经工程顺利进行"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以取经团队是这样的：看到独木桥或者无底船就怕了打道回府；-> 遇到寇员外招待劝返 -> 灭法国砍头。你会发现寇员外和灭法国都是一个要招待一万个和尚，另一个是要杀一万个和尚为目标；可谓是一对卧龙凤雏。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"第九十八回-早期知识付费-2"},"children":[{"type":"text","value":"第九十八回 早期知识付费 2"}]},{"type":"element","tag":"text-title","props":{":t":"知识付费"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在原著中唐僧第一次白嫖取的是无字真经。白雄尊者让唐僧三人坠机后发现自己拿的竟是无字经书还以为是假的，于是返回灵山。第二次跟着阿难、迦叶去取经书时向唐僧索要人事。通俗来讲就是小费，其实唐僧身上法宝多得很，比如观世音菩萨所赠的九环锡杖和锦斓袈裟。都算上的是极品法宝也不为过。于是唐僧选了一件紫金钵盂作为人事。这钵盂可是太宗皇帝在十二回《唐王秉诚修大会 观音显圣化金蝉》中送与唐僧的："}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"朕又有一个紫金钵盂，送你途中化斋而用。再选两个长行的从者。又钦赐你马一匹，送为远行脚力。你可就此行程。” 玄奘大喜，即便谢了恩，领了物事，更无留滞之意。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后孙悟空因看了无字经书，此觉得整个灵山简直就是目无法纪，竟然公开受贿。学习借个书都要钱，于是在如来面前控诉。但如来听闻并不觉得有什么奇怪，反而觉得要少了。并澄清无字经书可比有字的之前，是你们道行不够不识货。我们灵山的和尚下去讲经，可都是要送三斗金粒以及好生伺候才行的！"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"“如来，我师徒们受了万蜇千魔，千辛万苦，自东土拜到此处，蒙如来分付传经，被阿傩、伽叶掯财不遂，通同作弊，故意将无字的白纸本儿教我们拿去。我们拿他去何用？望如来敕治。” 佛祖笑道：“你且休嚷。他两个问你要人事之情，我已知矣。但只是经不可轻传，亦不可以空取。向时众比丘圣僧下山，曾将此经在舍卫国赵长者家与他诵了一遍，保他家生者安全，亡者超脱，只讨得他三斗三升米粒黄金回来。我还说他们忒卖贱了，教后代儿孙没钱使用。你如今空手来取，是以传了白本。白本者，乃无字真经，倒也是好的。因你那东土众生愚迷不悟，只可以此传之耳。” 即叫：“阿傩、伽叶，快将有字的真经，每部中各检几卷与他，来此报数。”"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"于是第二次，唐僧没有再白嫖，狠狠的知识付费了一次，原著是这样写的："}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"二尊者复领四众，到珍楼宝阁之下，仍问唐僧要些人事。三藏无物奉承，即命沙僧取出紫金钵盂，双手奉上道：“弟子委是穷寒路遥，不曾备得人事。这钵盂乃唐王亲手所赐，教弟子持此沿路化斋。今特奉上，聊表寸心。万望尊者将此收下，待回朝奏上唐王，定有厚谢。只是以有字真经赐下，庶不孤钦差之意，远涉之劳也。” 那阿傩接了，但微微而笑。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之所以是无字经，无论是如来还是燃灯古佛，都一致认为无字经才是真的经。《金刚经》有一句特别出名的话可以描述：“一切有为法，如梦幻泡影，如露亦如电，应作如是观” 或者： \"凡所有相，皆是虚妄。若见诸相非相，则见如来\"。因为如果要成佛，就需要六根清净，也就是抛弃肉体凡胎，经历过轮回，那个时候就不需要经书了，我就是经书！还需要你来渡我？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其实这里还是可以白嫖的，因为取经工程这么大个项目，因为手底下一个小科长受贿就停摆了怎么行。这不是打燃灯古佛、如来、玉帝、观音、天庭的脸吗？就算是白嫖，如果脸皮厚点也是可以的，毕竟赚的可是扩充了佛教的地盘和影响力。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"唐僧几人虽然经历过凌云渡成为了佛，但还是道行不深需要他人渡己，所以看不懂无字经书。我觉得无字经书就是如来手下一大堆老干部拿着自己的意志然后贴一个如来法旨为所欲为。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:journey-to-the-west.md","_source":"content","_file":"book/journey-to-the-west.md","_extension":"md"},{"_path":"/book/seven-languages-in-seven-weeks-bruce-a-tate","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"Seven Languages in Seven Weeks","description":"","director":"Bruce A. Tate","time":"2025.01.08","img":"08/1.png","plan":"01","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"回顾下自己的十年经历"},"children":[]},{"type":"element","tag":"h1","props":{"id":"总结自己-0"},"children":[{"type":"text","value":"总结自己 0"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果从 2015 那个对计算机懵懂的我来说，到 2025 年已经过了十年。可以说对计算机方面拥有了十年的兴趣。假如从 2018 我第一个漏洞算起，至今已经过了七年。再从 2020 我打算学习设计开始，已经过了五年。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我觉得自己有很大的缺陷，基础不是特别牢固。之前做全栈的时候就有朋友指出我的基础不是特别好，最常说的话就是：“基础不牢，地动山摇”。做出的项目只是看起来很不错，但如果深挖细节，性能的处理就有一小部分的问题。虽然我总以 \"安全爱好者\" 作为 title，但我貌似并没有发现过比较知名且威胁较大的漏洞。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"更不用说什么 EDUSRC、MSRC、TSRC 这些了，仅仅是公益 SRC 和 CNVD 以及 Hackerone 这些，我所发现到的或提交的更多是大佬吃剩的边角料，甚至是不屑一顾的。但我之前缺奉为瑰宝，以筑起我那脆弱且不堪一击的自信。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我还是比较庆幸自己无论做什么起码都能有一点成就的。虽然这个成就不高，但足以出去找个班上不至于饿死。做设计会有很多朋友支援下我;做安全拿到了漏洞赏金（虽然不多）;做全栈起码能混到小公司 offer；做舆情分析的时候，能被专业的人发现，引导我继续做下去。所以我还是比较幸运的，起码有点东西，虽然不多。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看完这本书后，我觉得是时候筹备下我的代表作了。因为之前很多人觉得我是臭做设计的，甚至还有人说我是个臭美工！完全无视掉了我全栈和安全架构方面的才华。所以在这之后，我会筹备一个全栈的代表作；另一个是安全架构的代表作。至于设计的代表作已经有了，再往后无非是作品。我觉得代表作这个东西首先是能给人用的，其次才是给人看的；这样说服力大一点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之所以看这本书。首先是我觉得自己 Code 方面还是比较有问题，写 Code 总是很磨叽，和那种一写 code 就是写一天的有很大的差距。其次是我承认是被这本书的标题所吸引，作者懂不懂语言不重要，但他一定懂营销。我还不知道这本书有没有被 Percipio 收入，反正我 ACM 会员资格是到期了。这里我想吐槽下 ACM 的续费规则，我有钱的时候是想提前续费的，但 ACM 只能是快过期的时候才能续费。等真快过期的时候，我反而没钱续费了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"无奈只能找盗版 PDF 来看。这里强烈推荐 "},{"type":"element","tag":"a","props":{"href":"https://skim-app.sourceforge.io/","rel":["nofollow"]},"children":[{"type":"text","value":"Skip"}]},{"type":"text","value":" 我觉得作为一款 PDF 阅读器来说，做到了快、文字能复制、复制的文字和 PDF 内容是一样的这种难度比较高的水准。甚至还是开源的，简直真的是太伟大了。我用过比较多的 PDF 阅读器，比如 Adobe Acrobat、PDF Expert。甚至是 福昕 PDF ，WPS PDF，给我的感觉都是卡顿还有比较大的复制问题，就是复制的文字和 PDF 里面的文字不一样。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和 Chrome 等浏览器自带的 PDF 阅读器比我认为无非是多了个签名和画线、笔记类的扩充。忘记了阅读的这第一要素，特别是像我这种 English 比较差需要 Copy 文字翻译的，比较不由好。所以对于 Skip 我是强烈推荐的。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"text-title","props":{":t":"前言"},"children":[]},{"type":"element","tag":"h1","props":{"id":"前言-2"},"children":[{"type":"text","value":"前言 2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"又到了一个非常具有代表性的篇幅，也就是：“What Readers Are Saying About Seven Languages in Seven Weeks” 你会看到国内那种类似 xxx 专家，xxx 公司 xxx 总监 xxx 团队 xxx 实验室对某本书的友情肯定和推荐。你别说你还真别说，如果这本书讲的是思维逻辑和拆解，那确实是很不错的。但如果是技术性的，那可能从 2010 年发售至今 2025 年历经十多年的发展，技术也可能会淘汰，语法可能会变，但逻辑和思维，依然是那套惯式。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这本书的前言中，作者透露出在 2009~2010 的时间段经历了很多人生的体验。例如他那 40 多岁的弟弟经历了心脏搭桥手术；三月底，他的妹妹确诊的乳腺癌；同月，他的母亲确诊晚期癌症。短短几天就去世了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这期间内，作者虽然伤心欲绝。但他回想起母亲的点点滴滴，与母亲的每次相处，特别是在作者离家前上了母亲的几节美术课，虽然作者的画很糟糕。但母亲总能将破碎不堪的画幅玩就回来成为一件精美的艺术作品。这需要天赋和经验才能将一副处在崩溃边缘的画作挽救回来。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不知你是否接触过绘画、美术。在我初中最后一年时，我因成绩垫底转到了美术班，我比较遗憾没有接触到绘画的全过程。绘画这门艺术，你需要经历过前期的 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"构图、草稿、描边、上色、光影"}]},{"type":"text","value":" 如果你是素描类的作品，还需要经历前期的封边到最后将美纹纸胶带撕下的过程。在作画前期，你需要构思好要画什么，然后通过一些技巧完成构图。比如透视、人体结构等。然后就是用铅笔打草稿，打草稿的过程要求一笔带过，如果不能一笔，那就需要勤加练习。所以在美术课中你会看到一开始要求画线，无论板绘还是素描都是这样。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"美术一般讲究人较多，水彩纸要用 Arches、素描纸要用 Canson、铅笔要用 Marie's，高级点的铅笔还有 Derwent。水彩颜料要用 Winsor & Newton、白夜，一张不起眼的纸每张也许都是几块钱的。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"学会画线后，就需要学会光影。光的照射范围和影子，在素描中，只有黑色和白色，因此需要用到擦纸笔甚至可塑橡皮来实现。当然有些功力比较深的喜欢用手进行擦来延续黑色。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你是走那种水彩、或者板绘，数字传媒的。可能会经历构图、草稿、描边的这个过程。然后就是上色、光影的应用。所以这个阶段，就和开发很类似。前期实现一个功能，然后用一个简陋的 GUi 进行交互。后期再将 GUi 进行美化和布局的排列。那么恭喜你，你已经成为了一个优秀的 Web 开发工程师，俗称前端。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但对于后端，更多的是 code 和 code 之间功能的划分，每个 code 负责不同的功能，最后连点成线，打通 API 和 GUI 之间的联系。组成一个能跑的 base 或 GUI 程序，或者输出一个接口作为 API。那么恭喜你，你成为了软件开发工程师或后端工程师。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一个简简单单的前言，就透露出作者对于软件设计和软件工程的功底。即使过了十多年，这套逻辑和拆解也亦然可以套在现代软件工程中，如果读者理解过 MVC 架构，那简直就是异曲同工。"}]},{"type":"element","tag":"text-tip","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When I told my mother that I would dedicate this book to her, she\nsaid that she would like that, but she had nothing to do with com-\nputers. That is true enough. The very thought of Windows would leave\nher helpless. But Mom, you have had everything to do with me. Your\nwell-timed words of encouragement inspired me, your love of creativity\nshaped me, and your enthusiasm and love of life guide me even now.\nAs I think about these experiences, I can’t help but feel a little better\nand a little stronger because I, too, am a canvas shaped by the master.\nThis book is dedicated with love to Lynda Lyle Tate, 1936–2010."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以在前沿的结尾，作者说目前对作者的影响很大。这无关他的目前连 Windows 都不会用，而是传授给了儿子拆解的艺术。看一个产品如果从成品看肯定是高攀不起的，但如果一步一步的拆解，一个一个的功能实现，就会发现也不是那么的特别高攀不起。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"text-title","props":{":t":"作者的致谢"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在致谢阶段，作者展示出了这本书的含金量，甚至比开篇那几位挂名推荐的还重量级。首先映入眼帘的是 Ruby community："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://ja.wikipedia.org/wiki/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D","rel":["nofollow"]},"children":[{"type":"text","value":"松本行弘(Matz)"}]},{"type":"text","value":" 他最著名的是 Ruby 编程语言及其原始参考实现 Matz 的 Ruby 解释器的首席设计师；"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/headius","rel":["nofollow"]},"children":[{"type":"text","value":"Charles Nutter"}]},{"type":"text","value":" —— "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/JRuby","rel":["nofollow"]},"children":[{"type":"text","value":"Jruby"}]},{"type":"text","value":" 的作者之一，能在 Java 和 Ruby 代码之间进行完全双向访问（类似于 Python 语言的 Jython ）。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/evanphx","rel":["nofollow"]},"children":[{"type":"text","value":"Evan Phoenix"}]},{"type":"text","value":" —— "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Rubinius","rel":["nofollow"]},"children":[{"type":"text","value":"Rubinius"}]},{"type":"text","value":" 的作者；旨在 “为运行 Ruby 代码提供丰富、高性能的环境”"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Tim_Bray","rel":["nofollow"]},"children":[{"type":"text","value":"Tim Bray"}]},{"type":"text","value":" —— 原始 XML 规范的共同作者之一;"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我之前浏览过 "},{"type":"element","tag":"a","props":{"href":"https://ruby-china.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Ruby China"}]},{"type":"text","value":"，那时候我有一个对 Ruby 的问题。但 Ruby China community 有一个会员限制。注册完需要三个月后才能发帖或发消息，结果就是一天后我的问题被我自己解决了，之后我就再也没有浏览过这个社区。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接下来的就是 Io community, 并不是国内 IO 竞赛的那个 IO。而是 Io Programming Language："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/jeremytregunna","rel":["nofollow"]},"children":[{"type":"text","value":"Jeremy Tregunna"}]},{"type":"text","value":" —— "},{"type":"element","tag":"a","props":{"href":"https://github.com/jeremytregunna","rel":["nofollow"]},"children":[{"type":"text","value":"ioLang"}]},{"type":"text","value":" 的作者之一;Io 的目标是探索概念统一和动态语言，因此权衡往往倾向于简单性和灵活性而不是性能。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/stevedekorte","rel":["nofollow"]},"children":[{"type":"text","value":"Steve Dekorte"}]},{"type":"text","value":" —— Iolang 的作者之一；Iolang 于 2002 年创建，当时他试图用他的语言 Cel 来帮助朋友 Dru Nelson。他发现自己确实不太了解语言的工作原理，并开始编写一种小型语言来更好地理解问题。(ps: 我什么时候才能拥有这样的好朋友)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"光从描述，我已经对 Iolang 开始有兴趣了，特别句尾处的: \"You captured the imagination of the beta readers and cre-\nated the favorite language of many of them.(您俘获了测试读者的想象力并创造了许多人最喜欢的语言。)\""}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Iolang 作为动态语言，在类型阶段就比较宽松，比较灵活，例如:"}]},{"type":"element","tag":"pre","props":{"code":"x = 42        # 整数\nx = \"Hello\"   # 重新赋值为字符串\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"x = 42        # 整数\nx = \"Hello\"   # 重新赋值为字符串\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而静态语言呢，类似 Typescript 这种类型比较强硬的："}]},{"type":"element","tag":"pre","props":{"code":"let x: number = 42;\nx = \"Hello\"; // 编译错误：类型不匹配\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let x: number = 42;\nx = \"Hello\"; // 编译错误：类型不匹配\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"当然他们各具特点，灵活性、性能各有千秋，适应的项目需求也不同，有的适合大型的，多人合作开发，有的适合写个脚本或前期功能论证阶段的原型设计。动态语言的刻板印象就是 易上手、Code 简洁、类型宽松、快速开发、运行时发现等作为优点。我们列举几个常见的静态和动态语言："}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"动态语言"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"静态语言"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Python"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"C/C++"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Ruby"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Java"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"JavaScript"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Go"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"PHP"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"TypeScript"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Lua"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Rust"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Io"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Swift"}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"相信能在 Wikipedia 中留名的各位英杰的实力。"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:book:seven-languages-in-seven-weeks---bruce-a-tate.md","_source":"content","_file":"book/seven-languages-in-seven-weeks---bruce-a-tate.md","_extension":"md"}]