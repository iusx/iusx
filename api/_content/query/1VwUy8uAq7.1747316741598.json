{"_path":"/book/key-note","_dir":"book","_draft":false,"_partial":false,"_locale":"","title":"快捷键备忘录","description":"","director":"N/A","time":"2025","img":"10/1.png","plan":"100,100","body":{"type":"root","children":[{"type":"element","tag":"book-content","props":{":by":"director",":img":"img",":plan":"plan",":title":"title"},"children":[{"type":"element","tag":"text-title","props":{":t":"快捷键备忘录"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"快捷键是一个非常棒的一个工具，但是我很多时候可能并不会那么经常使用，但又会在需要的时候重新拾起这方面的工作。因此我会将一些比较不常用，但又可能会在未来某个时间段重新使用的快捷键记录下来。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"blender-1"},"children":[{"type":"text","value":"blender 1"}]},{"type":"element","tag":"text-title","props":{"t":"Blender"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"正如你所见这是建模工具，是不是很意外我其实也会建模，有不少项目需要 3D 的设计素材。包括在一些新兴前端项目中，可能会使用类似 Three.js 这样的技术栈，都是需要 blender 来进行配合的，虽然我一般都是 blender to spline。"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"KEY"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"INFO"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"EXP"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Shift+D"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"复制对象"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"F2"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"重命名"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Control/Ctrol + I"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"遮罩反转"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"M"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"遮罩"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Control/Ctrol + Space"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"全屏窗口"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"/"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"单独显示当前 3D 资源"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"N"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"集合节点命名 tag"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Control/Ctrol + B"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"倒角"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"M"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"将选中的对象移动到某个集合中"}]},{"type":"element","tag":"td","props":{},"children":[]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Command+L"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"关联/传递数据"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"将颜色关联到五个对象中"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Command+a"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"应用"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"如果改变了大小没有应用缩放，那么可能在 Shading 中无法显示"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"/"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"单独查看"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"如果全选可以全部查看"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"N"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"显示、隐藏侧栏"}]},{"type":"element","tag":"td","props":{},"children":[]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"neovim-2"},"children":[{"type":"text","value":"neovim 2"}]},{"type":"element","tag":"text-title","props":{"t":"Neovim"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我之所以用 Neovim 当自己主要的编辑器，很大一部分原因是因为：“差生文具多” 这句话。其次是各种 Buff 叠加。自从使用 Neovim 作为主要的 Code 工具后发生了很多改变，比如接触到了很多 LSP，以及 Lua 相关的知识，甚至是 vim （在此之前我几乎认为 vim 只是个臭编辑文件的，没想到他抽象了很多系统层面的东西，可以更好的编写扩展，类似 Low code？）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其次是记住了很多快捷键，以及命令，确实增加了一些效率。而且赏心悦目。目前我使用的是 Kitty + Neovim。由于 Kitty 不支持 Iterm2 的 Quake (全局热键召唤终端，听起来就很厉害), 所以我也搭配使用了 Hammerspoon，可以通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"control+a"}]},{"type":"text","value":" 来进行显示和隐藏 kitty，很舒服："}]},{"type":"element","tag":"pre","props":{"code":"hs.hotkey.bind({\"ctrl\"}, \"a\", function()\n    local appName = \"kitty\"\n    local app = hs.application.find(appName)\n\n    if app then\n        if app:isFrontmost() then\n            app:hide()\n        else\n            app:unhide()\n            app:activate()\n        end\n    else\n        hs.application.launchOrFocus(appName)\n    end\nend)\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"hs.hotkey.bind({\"ctrl\"}, \"a\", function()\n    local appName = \"kitty\"\n    local app = hs.application.find(appName)\n\n    if app then\n        if app:isFrontmost() then\n            app:hide()\n        else\n            app:unhide()\n            app:activate()\n        end\n    else\n        hs.application.launchOrFocus(appName)\n    end\nend)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"同时我还开启了 Kitty 的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cursor_trail"}]},{"type":"text","value":" ，可以让光标更加的丝滑，动画效果很好看。增加了一些 Buff。我觉得坚持使用 Neovim 的很大一部分原因是叠加了很多 Buff。诸如：Tech style 确实如果要定制一款自己用的舒服的 Neovim 需要一点时间。比如可以了解到 LSP（我理解的就是 Code 补全），以及很系统层面的（做插件需要用到）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之所以将 Neovim 作为封面，因为似乎我花在上面改颜色的时间很长（当然后面可能会写一些插件，比如将我之前写的插件从支持 vscode 到支持 neovim 也说不定。）总之比我花在 Linux 定制桌面的时间要长（i3 真的很帅，很有一种 Tech style）"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"highlight-2"},"children":[{"type":"text","value":"highlight 2"}]},{"type":"element","tag":"text-title","props":{"t":":highlight","type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"虽然 Neovim 本身的配色方案很少，但加入了一些插件，配色方案很容易到 99999, 因此就需要 "},{"type":"element","tag":"a","props":{"href":"https://neovim.io/doc/user/syntax.html#_13.-highlight-command","rel":["nofollow"]},"children":[{"type":"text","value":"highlight"}]},{"type":"text","value":" 来查询一些颜色。之后我会用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":" vim.api.nvim_set_hl"}]},{"type":"text","value":" 无情的将他替换掉。(因为我使用的是 "},{"type":"element","tag":"a","props":{"href":"https://github.com/jesseleite/nvim-noirbuddy","rel":["nofollow"]},"children":[{"type":"text","value":"nvim-noirbuddy"}]},{"type":"text","value":" 也就是极简颜色，就一两个颜色，所以需要一个一个改（相当于自己做了个配色主题？)"}]},{"type":"element","tag":"img-tip","props":{"text":"由于我是双向识别障碍+色盲，所以在颜色很多的地方会感觉大脑凌乱，刚好 nvim-noirbuddy 这种单色的主题可以让我看清楚字。","url":"12/1.png"},"children":[]},{"type":"element","tag":"pre","props":{"code":"local noiropts = {\n  preset = \"minimal\",\n  colors = {\n    primary = \"#00D9BD\",\n    background = \"#000000\",\n  },\n}\n\nreturn {\n  {\n    \"jesseleite/nvim-noirbuddy\",\n    dependencies = {\n      \"tjdevries/colorbuddy.nvim\",\n    },\n    lazy = false,\n    priority = 1000,\n    config = function()\n      require(\"noirbuddy\").setup(noiropts)\n    end,\n  },\n  {\n    \"LazyVim/LazyVim\",\n    opts = {\n      colorscheme = function()\n        require(\"noirbuddy\").setup(noiropts)\n        vim.api.nvim_set_hl(0, \"CursorLineNr\", { fg = \"#00D9BD\", bold = true })\n        vim.api.nvim_set_hl(0, \"WinSeparator\", { fg = \"#323232\", bg = \"NONE\" })\n     end,\n    },\n  },\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"local noiropts = {\n  preset = \"minimal\",\n  colors = {\n    primary = \"#00D9BD\",\n    background = \"#000000\",\n  },\n}\n\nreturn {\n  {\n    \"jesseleite/nvim-noirbuddy\",\n    dependencies = {\n      \"tjdevries/colorbuddy.nvim\",\n    },\n    lazy = false,\n    priority = 1000,\n    config = function()\n      require(\"noirbuddy\").setup(noiropts)\n    end,\n  },\n  {\n    \"LazyVim/LazyVim\",\n    opts = {\n      colorscheme = function()\n        require(\"noirbuddy\").setup(noiropts)\n        vim.api.nvim_set_hl(0, \"CursorLineNr\", { fg = \"#00D9BD\", bold = true })\n        vim.api.nvim_set_hl(0, \"WinSeparator\", { fg = \"#323232\", bg = \"NONE\" })\n     end,\n    },\n  },\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"substitute-2"},"children":[{"type":"text","value":"Substitute 2"}]},{"type":"element","tag":"text-title","props":{"t":"Substitute","type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其实看 "},{"type":"element","tag":"a","props":{"href":"https://neovim.io/doc/user/change.html#%3Asubstitute","rel":["nofollow"]},"children":[{"type":"text","value":"Substitute"}]},{"type":"text","value":" 原文就挺好的，但是我太懒了，English 很弱鸡。所以我的理解 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":":s"}]},{"type":"text","value":" 就是将这个用于全局替换。"}]},{"type":"element","tag":"pre","props":{"code":":[range]s[ubstitute]/{pattern}/{string}/[flags] [count]\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":":[range]s[ubstitute]/{pattern}/{string}/[flags] [count]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"虽然有很多参数，但我常用的就两个："}]},{"type":"element","tag":"pre","props":{"code":":%s/foo/bar/g\n---\n:%g/foo/d\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":":%s/foo/bar/g\n---\n:%g/foo/d\n"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"highlight-2","depth":2,"text":"highlight 2"},{"id":"substitute-2","depth":2,"text":"Substitute 2"}]}},"_type":"markdown","_id":"content:book:key-note.md","_source":"content","_file":"book/key-note.md","_extension":"md"}