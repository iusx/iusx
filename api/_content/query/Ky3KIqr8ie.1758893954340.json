{"_path":"/plan/programming/cds","_dir":"programming","_draft":false,"_partial":false,"_locale":"","title":"cds","description":"","director":"ritsu","time":"2025.08.22","types":"cc","img":"life/plan/cds/1.jpg","info":"封面：This is cds","client":"My","target":100,"current":20,"displayType":"percent","body":{"type":"root","children":[{"type":"element","tag":"main-content","props":{":client":"client",":img":"img",":info":"info",":time":"time",":title":"title",":types":"types"},"children":[{"type":"element","tag":"git-info","props":{"url":"https://github.com/iusx/cdx"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最近发现了一个对我来说还挺有用的一个需求，例如每次我都需要进入到某个目录，但是每次我都是傻傻的不断用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cd"}]},{"type":"text","value":" 去进。虽说我的 neovim 可以通过 Frecency/MRU 进到最近的 project 中，以及进到该目录后运行 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nix-shell"}]},{"type":"text","value":" > "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvim ."}]},{"type":"text","value":" 这种很傻的操作。（但我感觉还挺有仪式感的，尤其是碰到 nixpkgs 更新）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以我希望写一个小工具来自动帮我完成这些操作，虽然说 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"zsh"}]},{"type":"text","value":" 可以写脚本，但是我还是觉得写一个单独的命令出来会比较好。就当是练手了，打算使用 👑 nim 来写（顺便让我的插件支持 nim 的注释）来体验下不同的风景，看看能学到什么与众不同的，毕竟体验最重要。"}]},{"type":"element","tag":"text-space","props":{"type":"tip"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"例如把这个小工具打包上传到 apt-get、brew 甚至是 winget。可以自己第一次体验下打包到分发的乐趣，比单独写一个 zsh 脚本体验得多。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"也就是说这个工具可以帮我记录每次 cd 的目录，以及每次进到目录执行什么命令。我的想法是可以设置成自动的，也可以设置成手动的。并且配置文件放到 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~/.cds"}]},{"type":"text","value":" 中。"}]},{"type":"element","tag":"text-title","props":{"t":"为什么用 nim?","type":"2"},"children":[]},{"type":"element","tag":"git-info","props":{"url":"https://github.com/adambard/learnxinyminutes-docs/pull/5380","type":"pr"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我对 nim 的印象完全是他的 logo 是 👑。也不算是特别小众，毕竟我看第三方的安利文竟然还提供了 Chinese（"},{"type":"element","tag":"a","props":{"href":"https://learnxinyminutes.com/zh-cn/nim/","rel":["nofollow"]},"children":[{"type":"text","value":"Y分钟速成X"}]},{"type":"text","value":") 比较意外的是在随便逛逛的途中还水了一个 pr（但感觉合的概率不是很大？毕竟我看 en page 被作者标注了 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"or [up-to-date community version]"}]},{"type":"text","value":" 也顺便借此机会给我的 blog 加了一个 git-pr 的信息展示。（感觉现在的还是太麻烦，以后打算加一个 type=\"pr-user\" 的，直接列举我开的 pr)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另一个很大一部分是因为我还挺想看看不是那种特别火热的语言体验（总体来说还挺好，意外的丝滑）另一部分是体验感很像是 py，确实如 nim website 所说：“It combines successful concepts from mature languages like Python, Ada and Modula.”"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"git-info","props":{"url":"https://github.com/ajeetdsouza/zoxide"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基本的功能实现的差不多了，学到了很多有用的知识，体验了很多。不过貌似基础的功能 "},{"type":"element","tag":"a","props":{"href":"https://github.com/ajeetdsouza/zoxide","rel":["nofollow"]},"children":[{"type":"text","value":"zoxide"}]},{"type":"text","value":" 已经实现了。（这就是作为井底之蛙的好处，如果我知道了 zoxide 已经能实现我想要的了，我就不会自己去写，自己去体验）不过 zoxide 雀实很不错，例如他有 Tui，而我还是傻傻停留在字符串输出的表现形式。"}]},{"type":"element","tag":"pre","props":{"code":"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"~ [ cd Code/My/iusx                                                                                                              ] 3:51 PM\nMy/iusx [ cds save iusx                                                                                                   main * ] 3:52 PM\nSaved path 'iusx' -> /Users/uwu/Code/My/iusx\nMy/iusx [ cds list                                                                                                        main * ] 3:52 PM\niusx -> /Users/uwu/Code/My/iusx\nMy/iusx [ cd ~                                                                                                            main * ] 3:52 PM\n~ [ cds iusx                                                                                                                     ] 3:52 PM\nMy/iusx [                                                                                                                 main * ] 3:52 PM\n\n\n~/.cds_config.json:\n{\n  \"iusx\": \"/Users/uwu/Code/My/iusx\"\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"尽管如此，zoxide 的确很出色，例如它提供了 TUI 界面，而我目前仍停留在仅通过字符串输出展示信息的方式。所以，我也希望在未来对项目进行如下优化："}]},{"type":"element","tag":"ul","props":{"className":["contains-task-list"]},"children":[{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" 1. TUI：例如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"c list"}]},{"type":"text","value":" 时候可以检索快捷方式"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" 2. 通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"c c iusx"}]},{"type":"text","value":" 进入到目录之后自动执行记录在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~/.cds_config.json"}]},{"type":"text","value":" 中的脚本命令"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" 3. Auto: 可以自动记录，例如 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/Users/uwu/Code/My/iusx"}]},{"type":"text","value":" 的时候自动记录 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"iusx: /Users/uwu/Code/My/iusx"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要做到上述功能需要配合 shell 环境，不过在此之前我希望将 TODO 2~3 完成后打包到 Homebrew，这样就可以通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"brew install cds"}]},{"type":"text","value":" 来进行安装了（貌似应该写一个安装脚本？。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其实依赖 shell 环境也没什么的，毕竟连 Nim-lang 的 "},{"type":"element","tag":"a","props":{"href":"https://github.com/nim-lang/choosenim","rel":["nofollow"]},"children":[{"type":"text","value":"choosenim"}]},{"type":"text","value":" 在安装完后也需要手动设置不是吗？"}]},{"type":"element","tag":"pre","props":{"code":"choosenim-init: ChooseNim installed in /Users/uwu/.nimble/bin\nchoosenim-init: You must now ensure that the Nimble bin dir is in your PATH.\nchoosenim-init: Place the following line in the ~/.profile or ~/.bashrc file.\nchoosenim-init:     export PATH=/Users/uwu/.nimble/bin:$PATH\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"choosenim-init: ChooseNim installed in /Users/uwu/.nimble/bin\nchoosenim-init: You must now ensure that the Nimble bin dir is in your PATH.\nchoosenim-init: Place the following line in the ~/.profile or ~/.bashrc file.\nchoosenim-init:     export PATH=/Users/uwu/.nimble/bin:$PATH\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有时候就是这样，只有自己亲身体验才能体会一些奇妙的感觉。也就是踩坑，而不是照着答案去答题。最近看的 《心灵捕手》和 《萨利机长》刚好有这个情景，印象深刻的是《心灵捕手》中的一段对话："}]},{"type":"element","tag":"wise-info","props":{"by":"心灵捕手","topic":"知识与体验的区别"},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You've never been out of Boston."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nope"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So if l asked you about art, you'd probably give me..\nthe skinny on every art book ever written"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Michelangelo. You kno a lot about him.\nLife's work. Political aspirations. Him and the pope."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sexual orientation. the whole works, right?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I bet you can't tell me what it smells like\nin the Sistione Chapel"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You never actually stood there\nlooked up ar that beautiful ceiling."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Seen that"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有的时候就是这样，例如将 Linus 作为主系统自然就会学习到很多与其相关的知识。游玩 Minecraft 之后自然会想要知道光影、Mode、材质是怎么制作的，甚至与好友公共游玩他人服务器的时候脑海中也会浮现出：“我也想开一个服务器” 的这种想法，自然而然的就能接触到 Linux、Windows server，甚至是 Java。"}]},{"type":"element","tag":"text-title","props":{"t":"实现自动记录","type":"2"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要实现这个功能，需要使用到 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"dirs"}]},{"type":"text","value":"，算是内置命令。例如在 "},{"type":"element","tag":"a","props":{"href":"https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Directory-Stack","rel":["nofollow"]},"children":[{"type":"text","value":"zsh"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"a","props":{"href":"https://www.gnu.org/software/bash/manual/html_node/Directory-Stack-Builtins.html","rel":["nofollow"]},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" 中均有记载，效果还是很不错的："}]},{"type":"element","tag":"pre","props":{"code":"macOS My/iusx ‹main*› » dirs\n~/Code/My/iusx\nmacOS My/iusx ‹main*› » cd ~/Code/Project/company\nmacOS Project/company » dirs\n~/Code/Project/company ~/Code/My/iusx\nmacOS Project/company »\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"macOS My/iusx ‹main*› » dirs\n~/Code/My/iusx\nmacOS My/iusx ‹main*› » cd ~/Code/Project/company\nmacOS Project/company » dirs\n~/Code/Project/company ~/Code/My/iusx\nmacOS Project/company »\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"唯一可惜的是只记录当前 shell 会话的目录栈，关闭终端或 shell 会话后就会丢失。因此还需要 shell 环境配合，最终效果就是每次 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cd"}]},{"type":"text","value":" 目录的时候都会存储到 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"~/.cds_config.json"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"code":"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ]\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": []\n  },\n  \"dotfiles\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"config\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": []\n  }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ]\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": []\n  },\n  \"dotfiles\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"config\": {\n    \"path\": \"/Users/uwu/Code/My/dotfiles\",\n    \"commands\": []\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": []\n  }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是这就会产生一个问题，之后我还需要 TUI 来进行快速访问，例如我进行了如下的操作："}]},{"type":"element","tag":"pre","props":{"code":"macOS My/cds ‹main*› » cd ~\nmacOS ~ » cd development/flutter/dev\nmacOS flutter/dev » pwd\n/Users/uwu/development/flutter/dev\nmacOS flutter/dev ‹stable› » cd bots\nmacOS dev/bots ‹stable› »\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"macOS My/cds ‹main*› » cd ~\nmacOS ~ » cd development/flutter/dev\nmacOS flutter/dev » pwd\n/Users/uwu/development/flutter/dev\nmacOS flutter/dev ‹stable› » cd bots\nmacOS dev/bots ‹stable› »\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你会发现我在当前目录什么都没做，只是单纯的浏览，还是被记录下来了，而且很繁杂，几乎每次 cd 的停顿都会被记录："}]},{"type":"element","tag":"pre","props":{"code":"  \"dev\": {\n    \"path\": \"/Users/uwu/development/flutter/dev\",\n    \"commands\": []\n  },\n  \"bots\": {\n    \"path\": \"/Users/uwu/development/flutter/dev/bots\",\n    \"commands\": []\n  }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"  \"dev\": {\n    \"path\": \"/Users/uwu/development/flutter/dev\",\n    \"commands\": []\n  },\n  \"bots\": {\n    \"path\": \"/Users/uwu/development/flutter/dev/bots\",\n    \"commands\": []\n  }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为此我增加了一个逻辑，也就是每次在当前目录执行命令，权重 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"score"}]},{"type":"text","value":" +1, 这会方便之后的 TUI 的数据展示，权重越高的越在前面，甚至还有升序降序:"}]},{"type":"element","tag":"pre","props":{"code":"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ],\n    \"score\": 12\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": [],\n    \"score\": 5\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"video\": {\n    \"path\": \"/Users/uwu/Work/video\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"company\": {\n    \"path\": \"/Users/uwu/Code/Project/company\",\n    \"commands\": [],\n    \"score\": 2\n  }\n}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n  \"iusx\": {\n    \"path\": \"/Users/uwu/Code/My/iusx\",\n    \"commands\": [\n      \"nix-shell\"\n    ],\n    \"score\": 12\n  },\n  \"My\": {\n    \"path\": \"/Users/uwu/Code/My\",\n    \"commands\": [],\n    \"score\": 5\n  },\n  \"cds\": {\n    \"path\": \"/Users/uwu/Code/My/cds\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"video\": {\n    \"path\": \"/Users/uwu/Work/video\",\n    \"commands\": [],\n    \"score\": 2\n  },\n  \"company\": {\n    \"path\": \"/Users/uwu/Code/Project/company\",\n    \"commands\": [],\n    \"score\": 2\n  }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不过这些都是通过 shell 实现的，之后可能还需要写一个 Install 的脚本，毕竟连 zoxide 也是这么做的， "},{"type":"element","tag":"a","props":{"href":"https://github.com/ajeetdsouza/zoxide/blob/main/src/shell.rs","rel":["nofollow"]},"children":[{"type":"text","value":"src/shell.rs"}]},{"type":"text","value":" 写的非常全，不过我貌似只是为了自己用，所以我自己用的舒服就好了，不需要考虑兼容下的问题？（或许吧:"}]},{"type":"element","tag":"pre","props":{"code":"make_template!(Bash, \"bash.txt\");\nmake_template!(Elvish, \"elvish.txt\");\nmake_template!(Fish, \"fish.txt\");\nmake_template!(Nushell, \"nushell.txt\");\nmake_template!(Posix, \"posix.txt\");\nmake_template!(Powershell, \"powershell.txt\");\nmake_template!(Tcsh, \"tcsh.txt\");\nmake_template!(Xonsh, \"xonsh.txt\");\nmake_template!(Zsh, \"zsh.txt\");\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"make_template!(Bash, \"bash.txt\");\nmake_template!(Elvish, \"elvish.txt\");\nmake_template!(Fish, \"fish.txt\");\nmake_template!(Nushell, \"nushell.txt\");\nmake_template!(Posix, \"posix.txt\");\nmake_template!(Powershell, \"powershell.txt\");\nmake_template!(Tcsh, \"tcsh.txt\");\nmake_template!(Xonsh, \"xonsh.txt\");\nmake_template!(Zsh, \"zsh.txt\");\n"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:plan:programming:cds.md","_source":"content","_file":"plan/programming/cds.md","_extension":"md","head":{"script":[{"id":"nuxt-og-image-overrides","type":"application/json","processTemplateParams":true,"innerHTML":"[{\"title\":1,\"excerpt\":-1,\"component\":2},\"cds\",\"OgImageCustom\"]","tagPosition":"bodyClose","tagPriority":30}],"meta":[{"property":"og:image","content":"/__og-image__/static/plan/programming/cds/og.png"},{"property":"og:image:width","content":1200},{"property":"og:image:height","content":600},{"property":"og:image:type","content":"image/png"},{"property":"og:image:alt"},{"name":"twitter:card","content":"summary_large_image"},{"name":"twitter:image:src","content":"/__og-image__/static/plan/programming/cds/og.png"},{"name":"twitter:image:width","content":1200},{"name":"twitter:image:height","content":600},{"name":"twitter:image:alt"}]}}